[
  {
    "statements": [
      "SELECT * FROM digital_wallets WHERE id = 1;",
      "SELECT user_id, balance FROM digital_wallets;",
      "SELECT id, user_id, balance FROM digital_wallets WHERE user_id = 10;",
      "SELECT MIN(balance) FROM digital_wallets;",
      "SELECT * FROM digital_wallets WHERE balance > 100.00;",
      "SELECT SUM(balance) FROM digital_wallets;",
      "SELECT id, user_id FROM digital_wallets WHERE balance < 500.00;",
      "SELECT MAX(balance) FROM digital_wallets;",
      "SELECT AVG(balance) FROM digital_wallets;",
      "SELECT * FROM digital_wallets WHERE user_id = 5 AND balance > 200.00;",
      "SELECT id, balance FROM digital_wallets WHERE user_id = 3;",
      "SELECT COUNT(*) FROM digital_wallets;",
      "SELECT user_id, balance FROM digital_wallets WHERE balance BETWEEN 100.00 AND 500.00;",
      "SELECT DISTINCT user_id FROM digital_wallets;",
      "SELECT * FROM digital_wallets ORDER BY balance DESC;",
      "SELECT id, user_id FROM digital_wallets WHERE balance < 50.00;",
      "SELECT * FROM digital_wallets WHERE user_id = 7 ORDER BY balance ASC;",
      "SELECT id, balance FROM digital_wallets WHERE user_id = 8 AND balance > 300.00;",
      "SELECT user_id, SUM(balance) FROM digital_wallets GROUP BY user_id;",
      "SELECT id, balance FROM digital_wallets WHERE balance = 0.00;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users;",
      "SELECT username, email FROM users;",
      "SELECT user_id, username FROM users WHERE user_id = 1;",
      "SELECT * FROM users WHERE username = 'john_doe';",
      "SELECT user_id, email FROM users WHERE email = 'john.doe@example.com';",
      "SELECT * FROM transactions;",
      "SELECT user_id, amount FROM transactions;",
      "SELECT transaction_id, amount FROM transactions WHERE user_id = 1;",
      "SELECT * FROM transactions WHERE amount > 100;",
      "SELECT * FROM transactions WHERE transaction_date >= '2022-01-01';",
      "SELECT t.transaction_id, t.amount, u.username FROM transactions t INNER JOIN users u ON t.user_id = u.user_id;",
      "SELECT t.transaction_id, t.amount, u.username FROM transactions t LEFT JOIN users u ON t.user_id = u.user_id;",
      "SELECT t.transaction_id, t.amount, u.username FROM transactions t RIGHT JOIN users u ON t.user_id = u.user_id;",
      "SELECT u.username, SUM(t.amount) AS total_amount FROM transactions t INNER JOIN users u ON t.user_id = u.user_id GROUP BY u.username;",
      "SELECT u.username, COUNT(t.transaction_id) AS total_transactions FROM transactions t INNER JOIN users u ON t.user_id = u.user_id GROUP BY u.username;",
      "SELECT u.username, AVG(t.amount) AS avg_amount FROM transactions t INNER JOIN users u ON t.user_id = u.user_id GROUP BY u.username;",
      "SELECT u.username, MAX(t.amount) AS max_amount FROM transactions t INNER JOIN users u ON t.user_id = u.user_id GROUP BY u.username;",
      "SELECT u.username, MIN(t.amount) AS min_amount FROM transactions t INNER JOIN users u ON t.user_id = u.user_id GROUP BY u.username;",
      "SELECT u.username, MAX(t.transaction_date) AS latest_transaction_date FROM transactions t INNER JOIN users u ON t.user_id = u.user_id GROUP BY u.username;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Users",
      "SELECT user_id, username, email FROM Users WHERE balance > 100",
      "SELECT user_id, username FROM Users WHERE email LIKE '%gmail.com'",
      "SELECT * FROM Transactions",
      "SELECT transaction_id, user_id, amount FROM Transactions WHERE amount < 0",
      "SELECT user_id, SUM(amount) AS total_transactions FROM Transactions GROUP BY user_id",
      "SELECT * FROM Wallets",
      "SELECT user_id, wallet_type, balance FROM Wallets WHERE balance > 500",
      "SELECT wallet_id, user_id FROM Wallets WHERE wallet_type = 'Savings'",
      "SELECT u.username, w.wallet_type, w.balance FROM Users u INNER JOIN Wallets w ON u.user_id = w.user_id",
      "SELECT u.username, w.wallet_type, t.amount FROM Users u JOIN Wallets w ON u.user_id = w.user_id JOIN Transactions t ON u.user_id = t.user_id",
      "SELECT user_id, COUNT(wallet_id) AS num_wallets FROM Wallets GROUP BY user_id",
      "SELECT u.username, SUM(t.amount) AS total_spent FROM Users u JOIN Transactions t ON u.user_id = t.user_id WHERE t.amount < 0 GROUP BY u.username",
      "SELECT username, MAX(balance) AS max_balance FROM Users",
      "SELECT user_id, MIN(amount) AS min_transaction FROM Transactions",
      "SELECT * FROM Users ORDER BY username ASC",
      "SELECT * FROM Wallets ORDER BY balance DESC",
      "SELECT user_id, COUNT(*) AS num_transactions FROM Transactions GROUP BY user_id HAVING COUNT(*) > 5",
      "SELECT wallet_type, AVG(balance) AS avg_balance FROM Wallets GROUP BY wallet_type HAVING AVG(balance) > 1000",
      "SELECT * FROM Users LIMIT 10",
      "SELECT * FROM Transactions LIMIT 5"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users",
      "SELECT username, email FROM users",
      "SELECT user_id, balance FROM users",
      "SELECT wallet_name, balance FROM wallets",
      "SELECT * FROM wallets",
      "SELECT transaction_id, sender_wallet_id, receiver_wallet_id, amount FROM transactions",
      "SELECT sender_wallet_id, receiver_wallet_id, amount, transaction_date FROM transactions",
      "SELECT * FROM currencies",
      "SELECT currency_name, exchange_rate FROM currencies",
      "SELECT user_id, wallet_id, wallet_name, balance FROM users JOIN wallets ON users.user_id = wallets.user_id",
      "SELECT user_id, username, email, wallet_name, balance FROM users JOIN wallets ON users.user_id = wallets.user_id",
      "SELECT user_id, username, email, transaction_id, sender_wallet_id, receiver_wallet_id, amount FROM users JOIN transactions ON users.user_id = transactions.sender_wallet_id",
      "SELECT transaction_id, sender_wallet_id, receiver_wallet_id, amount, transaction_date, currency_name, exchange_rate FROM transactions JOIN currencies ON transactions.transaction_id = currencies.currency_id",
      "SELECT user_id, username, email, balance, wallet_name FROM users LEFT JOIN wallets ON users.user_id = wallets.user_id",
      "SELECT transaction_id, sender_wallet_id, receiver_wallet_id, amount, transaction_date, currency_name, exchange_rate FROM transactions LEFT JOIN currencies ON transactions.transaction_id = currencies.currency_id",
      "SELECT * FROM users WHERE balance > 100",
      "SELECT * FROM wallets WHERE balance < 0",
      "SELECT * FROM transactions WHERE amount > 1000",
      "SELECT * FROM users WHERE username LIKE 'A%'",
      "SELECT * FROM currencies WHERE exchange_rate BETWEEN 1.5 AND 2"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users;",
      "SELECT user_id, username, email, balance FROM users WHERE balance > 1000;",
      "SELECT user_id, username FROM users WHERE email LIKE '%gmail.com';",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, sender_id, receiver_id, amount FROM transactions WHERE amount > 500;",
      "SELECT * FROM wallets;",
      "SELECT wallet_id, user_id FROM wallets WHERE balance < 0;",
      "SELECT * FROM cards;",
      "SELECT card_id, user_id, card_number FROM cards WHERE expiry_date > '2022-12-31';",
      "SELECT * FROM payments;",
      "SELECT payment_id, transaction_id, card_id FROM payments WHERE amount > 1000;",
      "SELECT u.user_id, u.username, w.balance FROM users u INNER JOIN wallets w ON u.user_id = w.user_id;",
      "SELECT u.username, c.card_number FROM users u INNER JOIN cards c ON u.user_id = c.user_id WHERE u.username = 'Alice';",
      "SELECT t.transaction_id, t.amount, p.amount FROM transactions t INNER JOIN payments p ON t.transaction_id = p.transaction_id WHERE t.amount < 500 AND p.amount > 100;",
      "SELECT u.username, t.amount, p.amount FROM users u INNER JOIN transactions t ON u.user_id = t.sender_id INNER JOIN payments p ON t.transaction_id = p.transaction_id WHERE u.username = 'Bob';",
      "SELECT u.username, w.balance, c.card_number FROM users u INNER JOIN wallets w ON u.user_id = w.user_id LEFT JOIN cards c ON u.user_id = c.user_id;",
      "SELECT u.username, SUM(t.amount) AS total_spent FROM users u INNER JOIN transactions t ON u.user_id = t.sender_id GROUP BY u.username HAVING total_spent > 2000;",
      "SELECT u.username, MAX(w.balance) AS max_balance FROM users u INNER JOIN wallets w ON u.user_id = w.user_id GROUP BY u.username ORDER BY max_balance DESC;",
      "SELECT u.username, AVG(p.amount) AS avg_payment FROM users u INNER JOIN payments p ON u.user_id = p.card_id GROUP BY u.username HAVING avg_payment < 500;"
    ]
  }
]