[
  {
    "statements": [
      "SELECT * FROM products;",
      "SELECT product_id, product_name FROM products;",
      "SELECT product_name, price FROM products;",
      "SELECT product_id, price, quantity FROM products;",
      "SELECT * FROM products WHERE price > 100;",
      "SELECT * FROM products WHERE quantity > 10;",
      "SELECT product_id, product_name FROM products WHERE price < 50;",
      "SELECT product_name, price FROM products WHERE quantity = 0;",
      "SELECT * FROM products ORDER BY product_name ASC;",
      "SELECT * FROM products ORDER BY price DESC;",
      "SELECT AVG(price) AS avg_price FROM products;",
      "SELECT SUM(quantity) AS total_quantity FROM products;",
      "SELECT COUNT(*) AS total_products FROM products;",
      "SELECT DISTINCT price FROM products;",
      "SELECT product_name, price * quantity AS total_price FROM products;",
      "SELECT * FROM products LIMIT 5;",
      "SELECT * FROM products OFFSET 5;",
      "SELECT * FROM products LIMIT 5 OFFSET 10;",
      "SELECT product_name, price, quantity FROM products WHERE product_id = 1;",
      "SELECT * FROM products WHERE product_name LIKE '%book%';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM products;",
      "SELECT id, name, price FROM products WHERE price > 100;",
      "SELECT id, name, price FROM products ORDER BY price DESC LIMIT 10;",
      "SELECT id, name, price FROM products WHERE id = 1;",
      "SELECT * FROM orders;",
      "SELECT order_id, product_id, quantity, status FROM orders WHERE quantity > 5;",
      "SELECT order_id, product_id, status FROM orders WHERE product_id = 2;",
      "SELECT order_id, product_id, quantity FROM orders WHERE status = 'Shipped';",
      "SELECT id, name, price FROM products JOIN orders ON products.id = orders.product_id;",
      "SELECT products.id, products.name, orders.quantity FROM products INNER JOIN orders ON products.id = orders.product_id;",
      "SELECT products.name, orders.quantity, orders.status FROM products LEFT JOIN orders ON products.id = orders.product_id;",
      "SELECT products.name, orders.quantity, orders.status FROM products RIGHT JOIN orders ON products.id = orders.product_id;",
      "SELECT products.name, orders.quantity, orders.status FROM products FULL JOIN orders ON products.id = orders.product_id;",
      "SELECT id, name, price FROM products WHERE name LIKE '%Apple%';",
      "SELECT id, name, price FROM products WHERE price BETWEEN 50 AND 100;",
      "SELECT id, name, price FROM products WHERE name = 'Banana' OR name = 'Orange';",
      "SELECT id, name, price FROM products WHERE price <= 50 AND name IN ('Apple', 'Mango');",
      "SELECT id, SUM(quantity) AS total_quantity FROM orders GROUP BY id;",
      "SELECT product_id, AVG(quantity) AS avg_quantity FROM orders GROUP BY product_id;",
      "SELECT status, COUNT(*) AS total_orders FROM orders GROUP BY status;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, customer_email FROM customers WHERE customer_id = 1;",
      "SELECT customer_id, customer_name FROM customers WHERE customer_name LIKE '%a%';",
      "SELECT * FROM orders;",
      "SELECT order_id, order_total, order_date FROM orders WHERE order_total > 1000;",
      "SELECT * FROM products;",
      "SELECT product_name, product_price FROM products WHERE product_price < 50;",
      "SELECT customer_id, customer_name, order_id, order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customer_name, order_date, product_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.order_id = products.product_id;",
      "SELECT customer_name, SUM(order_total) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT customer_name, COUNT(order_id) AS total_orders FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT customer_name, AVG(order_total) AS avg_order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT customer_name, MAX(order_total) AS highest_order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT customer_name, MIN(order_total) AS lowest_order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT customer_name, customer_email, product_name, product_price FROM customers CROSS JOIN products;",
      "SELECT customer_name, order_date, product_name FROM customers, orders, products WHERE customers.customer_id = orders.customer_id AND orders.order_id = products.product_id;",
      "SELECT customer_name, order_date, product_name FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN products ON orders.order_id = products.product_id;",
      "SELECT customer_name, order_date, product_name FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id LEFT JOIN products ON orders.order_id = products.product_id;",
      "SELECT customer_name, order_date, product_name FROM customers RIGHT JOIN orders ON customers.customer_id = orders.customer_id RIGHT JOIN products ON orders.order_id = products.product_id;",
      "SELECT * FROM customers UNION SELECT * FROM products;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT id, name FROM customers;",
      "SELECT * FROM products;",
      "SELECT id, name, description FROM products;",
      "SELECT * FROM orders;",
      "SELECT id, customer_id, order_date FROM orders;",
      "SELECT * FROM order_items;",
      "SELECT order_id, product_id, quantity FROM order_items;",
      "SELECT c.name, o.total_price FROM customers c INNER JOIN orders o ON c.id = o.customer_id;",
      "SELECT p.name, oi.quantity FROM products p INNER JOIN order_items oi ON p.id = oi.product_id;",
      "SELECT c.name AS customer_name, p.name AS product_name, oi.quantity FROM customers c INNER JOIN orders o ON c.id = o.customer_id INNER JOIN order_items oi ON o.id = oi.order_id INNER JOIN products p ON oi.product_id = p.id;",
      "SELECT c.name AS customer_name, o.order_date, SUM(p.price * oi.quantity) AS order_total FROM customers c INNER JOIN orders o ON c.id = o.customer_id INNER JOIN order_items oi ON o.id = oi.order_id INNER JOIN products p ON oi.product_id = p.id GROUP BY o.id;",
      "SELECT c.name AS customer_name, COUNT(o.id) AS order_count FROM customers c LEFT JOIN orders o ON c.id = o.customer_id GROUP BY c.id;",
      "SELECT p.name AS product_name, SUM(oi.quantity) AS total_quantity FROM products p LEFT JOIN order_items oi ON p.id = oi.product_id GROUP BY p.id;",
      "SELECT c.name AS customer_name, COUNT(o.id) AS order_count, SUM(o.total_price) AS total_spent FROM customers c LEFT JOIN orders o ON c.id = o.customer_id GROUP BY c.id;",
      "SELECT p.name AS product_name, SUM(oi.quantity) AS total_quantity, SUM(p.price * oi.quantity) AS total_revenue FROM products p LEFT JOIN order_items oi ON p.id = oi.product_id GROUP BY p.id;",
      "SELECT c.name AS customer_name, o.order_date, SUM(p.price * oi.quantity) AS order_total FROM customers c INNER JOIN orders o ON c.id = o.customer_id INNER JOIN order_items oi ON o.id = oi.order_id INNER JOIN products p ON oi.product_id = p.id WHERE o.order_date >= '2022-01-01' AND o.order_date < '2022-02-01' GROUP BY o.id;",
      "SELECT p.name AS product_name, SUM(oi.quantity) AS total_quantity FROM products p LEFT JOIN order_items oi ON p.id = oi.product_id WHERE p.stock_quantity > 0 GROUP BY p.id;",
      "SELECT c.name AS customer_name, COUNT(o.id) AS order_count, SUM(o.total_price) AS total_spent FROM customers c LEFT JOIN orders o ON c.id = o.customer_id WHERE o.total_price > 1000 GROUP BY c.id;",
      "SELECT p.name AS product_name, SUM(oi.quantity) AS total_quantity, SUM(p.price * oi.quantity) AS total_revenue FROM products p LEFT JOIN order_items oi ON p.id = oi.product_id WHERE p.price > 50 GROUP BY p.id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers",
      "SELECT customer_id, customer_name, customer_email FROM customers",
      "SELECT * FROM products",
      "SELECT product_id, product_name, product_price FROM products",
      "SELECT * FROM orders",
      "SELECT order_id, customer_id, order_date, total_amount FROM orders",
      "SELECT * FROM order_items",
      "SELECT order_id, product_id, quantity, item_price FROM order_items",
      "SELECT * FROM categories",
      "SELECT category_id, category_name, category_description FROM categories",
      "SELECT customer_name, customer_email FROM customers WHERE customer_id = 1",
      "SELECT product_name, product_price FROM products WHERE product_id = 1",
      "SELECT order_date, total_amount FROM orders WHERE order_id = 1",
      "SELECT quantity, item_price FROM order_items WHERE order_id = 1",
      "SELECT category_name, category_description FROM categories WHERE category_id = 1",
      "SELECT customers.customer_name, orders.order_date, order_items.quantity FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id",
      "SELECT customers.customer_name, products.product_name, order_items.quantity FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id",
      "SELECT * FROM orders WHERE total_amount > 100",
      "SELECT products.product_name, products.product_price FROM products WHERE products.product_price < 50"
    ]
  }
]