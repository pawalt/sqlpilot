[
  {
    "statements": [
      "SELECT * FROM Block;",
      "SELECT block_id, timestamp FROM Block;",
      "SELECT * FROM Block WHERE block_id = 1;",
      "SELECT * FROM Block WHERE timestamp >= '2022-01-01';",
      "SELECT block_id, block_hash FROM Block WHERE timestamp < '2022-01-01';",
      "SELECT * FROM Block ORDER BY timestamp DESC;",
      "SELECT block_id, previous_block_hash FROM Block ORDER BY block_id DESC;",
      "SELECT COUNT(*) FROM Block;",
      "SELECT MIN(timestamp) FROM Block;",
      "SELECT MAX(timestamp) FROM Block;",
      "SELECT AVG(block_id) FROM Block;",
      "SELECT block_id, COUNT(*) FROM Block GROUP BY block_id;",
      "SELECT block_id, AVG(EXTRACT(epoch FROM timestamp)) FROM Block GROUP BY block_id;",
      "SELECT block_id, SUM(jsonb_array_length(transactions)) FROM Block GROUP BY block_id;",
      "SELECT block_id, SUM(jsonb_array_length(transactions)) AS total_transactions FROM Block GROUP BY block_id HAVING SUM(jsonb_array_length(transactions)) > 10;",
      "SELECT block_id, block_hash, previous_block_hash, timestamp, jsonb_pretty(transactions) FROM Block;",
      "SELECT block_id, block_hash, jsonb_array_elements(transactions) AS transaction FROM Block;",
      "SELECT block_id, block_hash, jsonb_array_elements(transactions) AS transaction, jsonb_array_elements_text(transaction) AS tx_details FROM Block;",
      "SELECT block_id, block_hash, (SELECT COUNT(*) FROM jsonb_array_elements(transactions)) AS total_transactions FROM Block;",
      "SELECT block_id, block_hash, timestamp::date AS date FROM Block;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM blockchain_transactions WHERE transaction_id = 1",
      "SELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE amount > 100",
      "SELECT * FROM blockchain_blocks WHERE block_id = 10",
      "SELECT * FROM blockchain_blocks WHERE timestamp > '2022-01-01'",
      "SELECT address, balance FROM blockchain_wallets WHERE balance < 1000",
      "SELECT * FROM blockchain_transactions ORDER BY timestamp DESC",
      "SELECT transaction_id, sender_address, amount FROM blockchain_transactions WHERE receiver_address = 'Alice'",
      "SELECT * FROM blockchain_wallets WHERE address = '0x123abc'",
      "SELECT * FROM blockchain_blocks ORDER BY block_id DESC",
      "SELECT wallet_id, address, last_transaction_timestamp FROM blockchain_wallets WHERE last_transaction_timestamp < '2022-01-01'",
      "SELECT SUM(amount) FROM blockchain_transactions",
      "SELECT MAX(balance) FROM blockchain_wallets",
      "SELECT AVG(amount) FROM blockchain_transactions",
      "SELECT COUNT(*) FROM blockchain_blocks",
      "SELECT MIN(last_transaction_timestamp) FROM blockchain_wallets",
      "SELECT * FROM blockchain_transactions LIMIT 5",
      "SELECT AVG(balance) FROM blockchain_wallets",
      "SELECT MIN(timestamp) FROM blockchain_blocks",
      "SELECT DISTINCT(sender_address) FROM blockchain_transactions",
      "SELECT DISTINCT(address) FROM blockchain_wallets"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Block",
      "SELECT block_id, hash FROM Block",
      "SELECT * FROM Transaction",
      "SELECT tx_id, block_id, from_addr, to_addr, amount FROM Transaction",
      "SELECT * FROM Address",
      "SELECT addr_id, address FROM Address",
      "SELECT * FROM Miner",
      "SELECT miner_id, addr_id, mining_power FROM Miner",
      "SELECT block_id, hash, timestamp FROM Block",
      "SELECT tx_id, block_id, from_addr, to_addr, amount FROM Transaction",
      "SELECT addr_id, address FROM Address",
      "SELECT miner_id, addr_id, mining_power FROM Miner",
      "SELECT block_id, timestamp FROM Block",
      "SELECT tx_id, from_addr, to_addr FROM Transaction",
      "SELECT addr_id FROM Address",
      "SELECT miner_id FROM Miner",
      "SELECT block_id FROM Block",
      "SELECT tx_id FROM Transaction",
      "SELECT address FROM Address",
      "SELECT mining_power FROM Miner"
    ]
  }
]