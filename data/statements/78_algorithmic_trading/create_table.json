[
  {
    "statements": [
      "CREATE TABLE strategy (id INT PRIMARY KEY, strategy_name VARCHAR(100), strategy_description TEXT);",
      "CREATE TABLE trade (trade_id INT PRIMARY KEY, strategy_id INT, symbol VARCHAR(10), entry_price DECIMAL(10,2), exit_price DECIMAL(10,2), trade_date DATE, FOREIGN KEY (strategy_id) REFERENCES strategy(id));",
      "CREATE TABLE performance (performance_id INT PRIMARY KEY, strategy_id INT, total_returns DECIMAL(10,2), max_drawdown DECIMAL(10,2), total_trades INT, FOREIGN KEY (strategy_id) REFERENCES strategy(id));"
    ]
  },
  {
    "statements": [
      "CREATE TABLE example1 (id INT PRIMARY KEY, name VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL)",
      "CREATE TABLE example2 (id INT PRIMARY KEY, symbol VARCHAR(10) NOT NULL, name VARCHAR(50) NOT NULL, price DECIMAL(10, 2) NOT NULL)",
      "CREATE TABLE example3 (id INT PRIMARY KEY, user_id INT NOT NULL, stock_id INT NOT NULL, type VARCHAR(10) NOT NULL, quantity INT NOT NULL, price DECIMAL(10, 2) NOT NULL, status VARCHAR(10) NOT NULL)"
    ]
  },
  {
    "statements": [
      "CREATE TABLE algo_trading.stocks (symbol STRING PRIMARY KEY, price DECIMAL, volume INT, last_updated TIMESTAMP );",
      "CREATE TABLE algo_trading.portfolio (id INT PRIMARY KEY, symbol STRING, quantity INT );",
      "CREATE TABLE algo_trading.trades (trade_id INT PRIMARY KEY, symbol STRING, quantity INT, trade_type STRING, trade_date DATE );"
    ]
  }
]