[
  {
    "statements": [
      "SELECT * FROM Customers;",
      "SELECT customer_id, customer_name FROM Customers;",
      "SELECT customer_name, phone_number FROM Customers WHERE customer_id = 1;",
      "SELECT * FROM Customers WHERE customer_name LIKE 'A%';",
      "SELECT customer_id, billing_address FROM Customers WHERE phone_number LIKE '555%';",
      "SELECT * FROM Customers WHERE billing_address IS NOT NULL;",
      "SELECT customer_id, customer_name, billing_info FROM Customers WHERE customer_id > 10;",
      "SELECT customer_id, billing_address FROM Customers WHERE LENGTH(billing_address) > 20;",
      "SELECT customer_id, customer_name, phone_number FROM Customers WHERE billing_info LIKE '%Card%';",
      "SELECT customer_id, customer_name, phone_number FROM Customers ORDER BY customer_name ASC;",
      "SELECT * FROM Customers ORDER BY customer_id DESC LIMIT 5;",
      "SELECT COUNT(*) FROM Customers;",
      "SELECT AVG(customer_id) FROM Customers;",
      "SELECT MAX(customer_id) FROM Customers;",
      "SELECT customer_name, COUNT(*) AS total_orders FROM Customers GROUP BY customer_name;",
      "SELECT customer_name, MAX(customer_id) AS max_id FROM Customers GROUP BY customer_name;",
      "SELECT * FROM Customers WHERE customer_id IN (1, 5, 10);",
      "SELECT customer_name, LENGTH(billing_address) AS address_length FROM Customers;",
      "SELECT customer_name, billing_info FROM Customers WHERE billing_info IS NOT NULL;",
      "SELECT * FROM Customers WHERE customer_name NOT LIKE 'John%';",
      "SELECT * FROM Customers WHERE customer_id = 100",
      "SELECT customer_name, phone_number FROM Customers WHERE customer_name LIKE 'J%'",
      "SELECT * FROM Customers WHERE phone_number LIKE '555%'",
      "SELECT customer_name, billing_address FROM Customers WHERE billing_info IS NOT NULL",
      "SELECT * FROM Customers WHERE customer_name IN ('Alice', 'Bob', 'Charlie')",
      "SELECT * FROM Customers ORDER BY customer_name ASC",
      "SELECT customer_name, COUNT(*) AS order_count FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_id",
      "SELECT * FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_date > '2022-01-01'",
      "SELECT * FROM Customers WHERE customer_id = (SELECT MAX(customer_id) FROM Customers)",
      "SELECT c.customer_name, o.order_id FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id",
      "SELECT * FROM Customers WHERE LENGTH(billing_address)>50",
      "SELECT * FROM Customers WHERE customer_name LIKE '%son%'",
      "SELECT customer_name, COUNT(*) AS order_count FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_name HAVING COUNT(*) > 1",
      "SELECT * FROM Customers WHERE customer_id BETWEEN 100 AND 200",
      "SELECT customer_name, phone_number FROM Customers WHERE customer_name = 'Alice' OR customer_name = 'Bob'",
      "SELECT customer_name, phone_number FROM Customers WHERE LENGTH(phone_number) = 10",
      "SELECT DISTINCT customer_name FROM Customers",
      "SELECT * FROM Customers WHERE billing_address LIKE '%Avenue%'",
      "SELECT * FROM Customers WHERE customer_name <> 'Alice'",
      "SELECT customer_name, SUBSTRING(phone_number,1,3) AS area_code FROM Customers"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, phone_number FROM customers;",
      "SELECT * FROM billing_info;",
      "SELECT customer_id, total_amount FROM billing_info;",
      "SELECT customers.customer_name, billing_info.total_amount FROM customers INNER JOIN billing_info ON customers.customer_id = billing_info.customer_id;",
      "SELECT customer_name, billing_address FROM customers WHERE customer_id = 1;",
      "SELECT * FROM billing_info WHERE total_amount > 100;",
      "SELECT customer_id, billing_date FROM billing_info WHERE billing_date >= '2022-01-01';",
      "SELECT customer_name, phone_number, billing_address FROM customers WHERE customer_name LIKE 'A%';",
      "SELECT * FROM billing_info WHERE customer_id IN (1, 2, 3);",
      "SELECT customer_name, billing_date, total_amount FROM customers INNER JOIN billing_info ON customers.customer_id = billing_info.customer_id;",
      "SELECT customer_name, total_amount FROM customers INNER JOIN billing_info ON customers.customer_id = billing_info.customer_id WHERE billing_date BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT COUNT(*) AS total_customers FROM customers;",
      "SELECT AVG(total_amount) AS average_amount FROM billing_info;",
      "SELECT MAX(total_amount) AS max_amount FROM billing_info;",
      "SELECT MIN(total_amount) AS min_amount FROM billing_info;",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM customers INNER JOIN billing_info ON customers.customer_id = billing_info.customer_id GROUP BY customers.customer_name;",
      "SELECT customer_id, customer_name FROM customers ORDER BY customer_name ASC;",
      "SELECT customer_id, customer_name FROM customers ORDER BY customer_id DESC;",
      "SELECT DISTINCT customer_name FROM customers;",
      "SELECT customer_name, billing_date, total_amount FROM customers LEFT JOIN billing_info ON customers.customer_id = billing_info.customer_id;",
      "SELECT customer_name, phone_number FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, billing_address FROM customers WHERE phone_number LIKE '%123%';",
      "SELECT * FROM customers JOIN billing_info ON customers.customer_id = billing_info.customer_id;",
      "SELECT customer_name, total_amount FROM customers JOIN billing_info ON customers.customer_id = billing_info.customer_id WHERE billing_date >= '2022-01-01';",
      "SELECT customer_name, total_amount FROM customers JOIN billing_info ON customers.customer_id = billing_info.customer_id WHERE billing_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT customer_name, billing_address, total_amount FROM customers JOIN billing_info ON customers.customer_id = billing_info.customer_id WHERE total_amount > 1000;",
      "SELECT billing_id, billing_date, total_amount FROM billing_info WHERE total_amount > (SELECT AVG(total_amount) FROM billing_info);",
      "SELECT customer_name, phone_number, billing_date, total_amount FROM customers JOIN billing_info ON customers.customer_id = billing_info.customer_id WHERE billing_date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT customer_name, billing_address, total_amount FROM customers JOIN billing_info ON customers.customer_id = billing_info.customer_id ORDER BY total_amount DESC;",
      "SELECT customer_name, phone_number, billing_date, total_amount FROM customers JOIN billing_info ON customers.customer_id = billing_info.customer_id ORDER BY billing_date ASC;",
      "SELECT customer_id, COUNT(billing_id) AS billing_count FROM customers LEFT JOIN billing_info ON customers.customer_id = billing_info.customer_id GROUP BY customer_id;",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN billing_info ON customers.customer_id = billing_info.customer_id GROUP BY customer_name;",
      "SELECT customer_name, MAX(total_amount) AS max_amount FROM customers JOIN billing_info ON customers.customer_id = billing_info.customer_id GROUP BY customer_name;",
      "SELECT customer_name, AVG(total_amount) AS avg_amount FROM customers JOIN billing_info ON customers.customer_id = billing_info.customer_id GROUP BY customer_name;",
      "SELECT customer_name, MIN(total_amount) AS min_amount FROM customers JOIN billing_info ON customers.customer_id = billing_info.customer_id GROUP BY customer_name;",
      "SELECT DISTINCT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM billing_info WHERE total_amount > 500);",
      "SELECT customer_name, billing_address FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM billing_info WHERE total_amount < 100);",
      "SELECT customer_name, billing_address FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM billing_info);",
      "SELECT customer_name, billing_address FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM billing_info WHERE billing_date < '2022-01-01');",
      "SELECT customer_id, customer_name, phone_number, billing_date, total_amount FROM customers LEFT JOIN billing_info ON customers.customer_id = billing_info.customer_id;",
      "SELECT customer_id, COUNT(billing_id) AS billing_count FROM customers LEFT JOIN billing_info ON customers.customer_id = billing_info.customer_id GROUP BY customer_id HAVING billing_count > 3;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Customers;",
      "SELECT customer_name, phone_number FROM Customers WHERE customer_id = 1;",
      "SELECT customer_name, email FROM Customers WHERE phone_number LIKE '%123%';",
      "SELECT * FROM BillingInformation;",
      "SELECT billing_address, payment_method FROM BillingInformation WHERE customer_id = 2;",
      "SELECT * FROM Orders;",
      "SELECT order_id, total_amount FROM Orders WHERE customer_id = 3;",
      "SELECT customer_id, order_date FROM Orders WHERE total_amount > 1000;",
      "SELECT customer_name, email FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id;",
      "SELECT customer_name, billing_address FROM Customers INNER JOIN BillingInformation ON Customers.customer_id = BillingInformation.customer_id;",
      "SELECT customer_name, order_date FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE total_amount > 500;",
      "SELECT customer_name, payment_method FROM Customers INNER JOIN BillingInformation ON Customers.customer_id = BillingInformation.customer_id WHERE payment_method = 'Credit Card';",
      "SELECT customer_name, order_date FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-02-28';",
      "SELECT customer_name, total_amount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_name HAVING SUM(total_amount) > 2000;",
      "SELECT customer_name, phone_number, billing_address, payment_method FROM Customers INNER JOIN (BillingInformation INNER JOIN Orders ON BillingInformation.customer_id = Orders.customer_id) ON Customers.customer_id = Orders.customer_id;",
      "SELECT customer_name, order_date FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id;",
      "SELECT customer_name, billing_address FROM Customers LEFT JOIN BillingInformation ON Customers.customer_id = BillingInformation.customer_id;",
      "SELECT customer_name, total_amount FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id;",
      "SELECT customer_name, billing_address, total_amount FROM Customers LEFT JOIN (BillingInformation INNER JOIN Orders ON BillingInformation.customer_id = Orders.customer_id) ON Customers.customer_id = Orders.customer_id;",
      "SELECT customer_name, order_date FROM Customers RIGHT JOIN Orders ON Customers.customer_id = Orders.customer_id;",
      "SELECT * FROM Customers WHERE customer_name LIKE 'A%' ORDER BY customer_name ASC LIMIT 10;",
      "SELECT customer_name, phone_number FROM Customers WHERE email LIKE '%gmail.com';",
      "SELECT customer_name, order_date, total_amount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE total_amount > 1000;",
      "SELECT customer_name, payment_method FROM Customers JOIN BillingInformation ON Customers.customer_id = BillingInformation.customer_id WHERE payment_method = 'Credit Card';",
      "SELECT customer_name, billing_address FROM Customers JOIN BillingInformation ON Customers.customer_id = BillingInformation.customer_id WHERE billing_address LIKE '%Street%' ORDER BY billing_address DESC;",
      "SELECT * FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN BillingInformation ON Customers.customer_id = BillingInformation.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT DISTINCT customer_name FROM Customers;",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_id HAVING total_spent > 5000;",
      "SELECT customer_name, AVG(total_amount) AS avg_amount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_id;",
      "SELECT COUNT(*) AS total_customers FROM Customers;",
      "SELECT customer_name, COUNT(*) AS total_orders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_id;",
      "SELECT customer_name, MIN(total_amount) AS min_amount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_id;",
      "SELECT customer_name, MAX(total_amount) AS max_amount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_id;",
      "SELECT customer_name, billing_address, payment_method FROM Customers JOIN BillingInformation ON Customers.customer_id = BillingInformation.customer_id ORDER BY customer_name ASC, billing_address DESC;",
      "SELECT customer_name, order_date FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT customer_name, phone_number, email FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders WHERE total_amount > 500);",
      "SELECT customer_name, payment_method FROM Customers JOIN BillingInformation ON Customers.customer_id = BillingInformation.customer_id WHERE billing_id IN (SELECT billing_id FROM BillingInformation WHERE payment_method = 'Cash');",
      "SELECT customer_name, order_date FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE order_id = (SELECT MAX(order_id) FROM Orders);",
      "SELECT customer_name, payment_method FROM Customers JOIN BillingInformation ON Customers.customer_id = BillingInformation.customer_id WHERE EXISTS (SELECT * FROM Orders WHERE Orders.customer_id = Customers.customer_id);",
      "SELECT customer_name, billing_address, payment_method FROM Customers JOIN BillingInformation ON Customers.customer_id = BillingInformation.customer_id WHERE EXISTS (SELECT * FROM Orders WHERE Orders.customer_id = Customers.customer_id);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_id, customer_name, phone_number FROM customers;",
      "SELECT * FROM addresses;",
      "SELECT address_id, customer_id, street_address, city, state, zip_code FROM addresses;",
      "SELECT * FROM orders;",
      "SELECT order_id, customer_id, order_date, total_amount FROM orders;",
      "SELECT * FROM payments;",
      "SELECT payment_id, order_id, payment_date, payment_amount FROM payments;",
      "SELECT customer_name, phone_number FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, email_address FROM customers WHERE phone_number = '1234567890';",
      "SELECT street_address, city, state, zip_code FROM addresses WHERE customer_id = 1;",
      "SELECT customer_name, order_date, total_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id;",
      "SELECT customer_id, COUNT(order_id) AS num_orders FROM orders GROUP BY customer_id;",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name;",
      "SELECT customer_name, MAX(total_amount) AS max_order_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name;",
      "SELECT customer_name, AVG(total_amount) AS avg_order_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name;",
      "SELECT customer_name, MIN(total_amount) AS min_order_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name;",
      "SELECT customer_name, COUNT(payment_id) AS num_payments FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN payments p ON o.order_id = p.order_id GROUP BY customer_name;",
      "SELECT customer_name, payment_date, payment_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN payments p ON o.order_id = p.order_id;",
      "SELECT customer_name, city, total_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN addresses a ON c.customer_id = a.customer_id;",
      "SELECT * FROM customers WHERE customer_name LIKE '%John%'",
      "SELECT * FROM customers WHERE phone_number LIKE '555%'",
      "SELECT customer_name, email_address FROM customers WHERE customer_id = 123",
      "SELECT customer_name, phone_number, street_address, city, state, zip_code FROM customers JOIN addresses ON customers.customer_id = addresses.customer_id",
      "SELECT order_id, order_date, total_amount FROM orders WHERE total_amount > 1000",
      "SELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 1000",
      "SELECT customer_name, payment_date, payment_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payments ON orders.order_id = payments.order_id WHERE payment_amount > 500",
      "SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE total_amount > 500)",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name",
      "SELECT city, SUM(total_amount) AS total_sales FROM orders JOIN addresses ON orders.customer_id = addresses.customer_id GROUP BY city HAVING total_sales > 5000"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, phone_number FROM customers;",
      "SELECT customer_name, address FROM customers WHERE customer_id = 1;",
      "SELECT * FROM orders;",
      "SELECT order_date, total_amount FROM orders WHERE customer_id = 1;",
      "SELECT * FROM products;",
      "SELECT product_name, price FROM products WHERE stock_quantity > 0;",
      "SELECT * FROM order_items;",
      "SELECT product_id, quantity, subtotal FROM order_items WHERE order_id = 1;",
      "SELECT * FROM payments;",
      "SELECT payment_date, amount, payment_method FROM payments WHERE order_id = 1;",
      "SELECT customers.customer_name, orders.order_date, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customers.customer_name, orders.order_date, order_items.product_id, order_items.quantity, order_items.subtotal FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id;",
      "SELECT customers.customer_name, orders.order_date, products.product_name, products.price, order_items.quantity, order_items.subtotal FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id;",
      "SELECT customers.customer_name, orders.order_date, products.product_name, payments.payment_date, payments.amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payments ON orders.order_id = payments.order_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id WHERE customers.customer_id = 1;",
      "SELECT customers.customer_name, orders.order_date, payments.payment_date, payments.amount, payments.payment_method FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payments ON orders.order_id = payments.order_id WHERE customers.customer_id = 1;",
      "SELECT customers.customer_name, orders.order_date, products.product_name, order_items.quantity, payments.amount, payments.payment_method FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payments ON orders.order_id = payments.order_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id WHERE customers.customer_id = 1;",
      "SELECT customers.customer_name, orders.order_date, products.product_name, payments.payment_date, payments.amount, payments.payment_method, order_items.quantity, order_items.subtotal FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payments ON orders.order_id = payments.order_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id WHERE customers.customer_id = 1;",
      "SELECT * FROM customers WHERE customer_name LIKE 'A%'",
      "SELECT customer_name, phone_number FROM customers WHERE address LIKE '%California%'",
      "SELECT order_date, total_amount FROM orders WHERE total_amount > 1000",
      "SELECT product_name, price FROM products WHERE stock_quantity < 50",
      "SELECT * FROM order_items WHERE quantity > 5",
      "SELECT customer_name, address, payment_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN payments p ON o.order_id = p.order_id WHERE amount >= 500",
      "SELECT o.order_date, p.amount FROM orders o JOIN payments p ON o.order_id = p.order_id WHERE p.payment_method = 'Credit Card'",
      "SELECT DISTINCT(customer_name) FROM customers WHERE customer_name LIKE '%John%'",
      "SELECT orders.order_date, products.product_name, order_items.quantity FROM orders JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id ORDER BY orders.order_date DESC",
      "SELECT p.product_name, oi.quantity, oi.subtotal FROM products p JOIN order_items oi ON p.product_id = oi.product_id WHERE oi.quantity > 3",
      "SELECT c.customer_name, c.address, SUM(p.amount) AS total_payments FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN payments p ON o.order_id = p.order_id GROUP BY c.customer_name, c.address",
      "SELECT p.product_name, SUM(oi.quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_name HAVING total_quantity > 50",
      "SELECT customer_name, COUNT(order_id) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name",
      "SELECT customer_name, AVG(total_amount) AS avg_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name ORDER BY avg_order_amount DESC",
      "SELECT customer_id, MAX(total_amount) AS max_order_amount FROM orders GROUP BY customer_id",
      "SELECT customer_name, MIN(total_amount) AS min_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name",
      "SELECT order_date, SUM(total_amount) AS total_sales FROM orders GROUP BY order_date HAVING total_sales > 5000",
      "SELECT customer_name, COUNT(product_id) AS total_products FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id GROUP BY customer_name",
      "SELECT c.customer_name, p.product_name, oi.quantity, oi.subtotal FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id ORDER BY c.customer_name, p.product_name",
      "SELECT DISTINCT(c.customer_id), c.customer_name, COUNT(o.order_id) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name"
    ]
  }
]