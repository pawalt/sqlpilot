[
  {
    "statements": [
      "SELECT * FROM billing_invoicing;",
      "SELECT customer_name, usage_amount FROM billing_invoicing;",
      "SELECT customer_name, service_provided FROM billing_invoicing;",
      "SELECT customer_name, usage_amount, billing_date FROM billing_invoicing;",
      "SELECT * FROM billing_invoicing WHERE customer_id = 1;",
      "SELECT customer_name, usage_amount FROM billing_invoicing WHERE billing_date = '2022-01-15';",
      "SELECT customer_name, service_provided FROM billing_invoicing WHERE usage_amount > 100;",
      "SELECT customer_name, billing_date FROM billing_invoicing WHERE service_provided = 'Internet';",
      "SELECT * FROM billing_invoicing WHERE customer_name LIKE '%John%';",
      "SELECT customer_name, usage_amount FROM billing_invoicing WHERE service_provided = 'Phone' AND billing_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT customer_name, service_provided FROM billing_invoicing WHERE billing_date >= '2022-01-01' AND billing_date <= '2022-01-31';",
      "SELECT * FROM billing_invoicing WHERE usage_amount < 50 OR usage_amount > 200;",
      "SELECT customer_name, billing_date FROM billing_invoicing WHERE customer_name IN ('Alice', 'Bob', 'Eve');",
      "SELECT customer_name, service_provided FROM billing_invoicing WHERE service_provided IN ('Internet', 'Phone');",
      "SELECT * FROM billing_invoicing WHERE billing_date IS NOT NULL;",
      "SELECT customer_name, usage_amount FROM billing_invoicing ORDER BY usage_amount DESC;",
      "SELECT customer_name, service_provided FROM billing_invoicing ORDER BY billing_date ASC;",
      "SELECT customer_name, billing_date FROM billing_invoicing ORDER BY billing_date DESC;",
      "SELECT * FROM billing_invoicing LIMIT 10 OFFSET 5;",
      "SELECT COUNT(customer_id) FROM billing_invoicing;",
      "SELECT customer_id, customer_name, usage_amount FROM billing_invoicing WHERE billing_date > '2022-01-01';",
      "SELECT * FROM billing_invoicing WHERE customer_name LIKE 'A%';",
      "SELECT customer_id, customer_name, service_provided FROM billing_invoicing WHERE usage_amount > 1000;",
      "SELECT COUNT(customer_id) AS total_customers FROM billing_invoicing;",
      "SELECT customer_id, customer_name, service_provided FROM billing_invoicing WHERE billing_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT AVG(usage_amount) AS avg_usage FROM billing_invoicing;",
      "SELECT customer_name, SUM(usage_amount) AS total_usage FROM billing_invoicing GROUP BY customer_name;",
      "SELECT DISTINCT service_provided FROM billing_invoicing;",
      "SELECT customer_id, customer_name, usage_amount, service_provided, billing_date FROM billing_invoicing ORDER BY billing_date DESC;",
      "SELECT customer_id, customer_name, usage_amount, service_provided, billing_date FROM billing_invoicing ORDER BY usage_amount DESC;",
      "SELECT customer_id, customer_name, usage_amount, service_provided, billing_date FROM billing_invoicing LIMIT 10;",
      "SELECT customer_id, customer_name, usage_amount, service_provided, billing_date FROM billing_invoicing OFFSET 5;",
      "SELECT customer_id, customer_name, usage_amount, service_provided, billing_date FROM billing_invoicing LIMIT 5 OFFSET 5;",
      "SELECT customer_name, AVG(usage_amount) AS avg_usage FROM billing_invoicing GROUP BY customer_name HAVING avg_usage > 500;",
      "SELECT customer_id, customer_name, usage_amount FROM billing_invoicing WHERE service_provided IN ('Service A', 'Service B');",
      "SELECT customer_id, customer_name, usage_amount FROM billing_invoicing WHERE service_provided NOT IN ('Service C');",
      "SELECT customer_name, COUNT(*) AS num_transactions FROM billing_invoicing GROUP BY customer_name HAVING num_transactions > 2;",
      "SELECT customer_name, MAX(usage_amount) AS max_usage FROM billing_invoicing GROUP BY customer_name;",
      "SELECT customer_name, MIN(usage_amount) AS min_usage FROM billing_invoicing GROUP BY customer_name;",
      "SELECT customer_id, customer_name, AVG(usage_amount) AS avg_usage FROM billing_invoicing GROUP BY customer_id HAVING avg_usage > 2000;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Billing;",
      "SELECT bill_id, customer_id, usage_type FROM Billing;",
      "SELECT DISTINCT service_type FROM Billing;",
      "SELECT * FROM Billing WHERE usage_amount > 100;",
      "SELECT * FROM Invoice;",
      "SELECT invoice_id, total_amount FROM Invoice;",
      "SELECT * FROM Invoice WHERE payment_status = 'Paid';",
      "SELECT * FROM Billing JOIN Invoice ON Billing.bill_id = Invoice.bill_id;",
      "SELECT b.bill_id, b.customer_id, i.total_amount FROM Billing b JOIN Invoice i ON b.bill_id = i.bill_id;",
      "SELECT * FROM Billing WHERE service_type = 'Internet';",
      "SELECT SUM(usage_amount) AS total_usage_amount FROM Billing;",
      "SELECT AVG(total_amount) AS average_total_amount FROM Invoice;",
      "SELECT COUNT(*) AS total_billing_records FROM Billing;",
      "SELECT MAX(total_amount) AS max_total_amount FROM Invoice;",
      "SELECT MIN(usage_amount) AS min_usage_amount FROM Billing;",
      "SELECT * FROM Billing ORDER BY usage_amount DESC;",
      "SELECT * FROM Invoice ORDER BY total_amount ASC;",
      "SELECT service_type, AVG(usage_amount) AS avg_usage_amount FROM Billing GROUP BY service_type;",
      "SELECT customer_id, COUNT(*) AS total_invoices FROM Invoice GROUP BY customer_id;",
      "SELECT * FROM Billing WHERE usage_amount BETWEEN 50 AND 100;",
      "SELECT service_type, SUM(service_fee) AS total_service_fees FROM Billing GROUP BY service_type;",
      "SELECT * FROM Billing INNER JOIN Invoice ON Billing.bill_id = Invoice.bill_id WHERE Billing.usage_amount > 1000 AND Invoice.payment_status = 'Pending';",
      "SELECT customer_id, usage_type, total_amount FROM Billing INNER JOIN Invoice ON Billing.bill_id = Invoice.bill_id WHERE Invoice.total_amount > Billing.usage_amount * Billing.service_fee;",
      "SELECT DISTINCT customer_id FROM Billing WHERE customer_id NOT IN (SELECT customer_id FROM Invoice WHERE payment_status = 'Paid');",
      "SELECT service_type, SUM(usage_amount) AS total_usage FROM Billing GROUP BY service_type ORDER BY total_usage DESC;",
      "SELECT billing.bill_id, total_amount FROM Billing LEFT JOIN Invoice ON Billing.bill_id = Invoice.bill_id WHERE Invoice.bill_id IS NULL;",
      "SELECT AVG(usage_amount) AS avg_usage, AVG(service_fee) AS avg_fee FROM Billing;",
      "SELECT * FROM Billing LIMIT 5;",
      "SELECT DISTINCT service_type FROM Billing UNION SELECT usage_type FROM Billing;",
      "SELECT bill_id, customer_id, usage_type, service_type, (usage_amount * service_fee) AS total_cost FROM Billing;",
      "SELECT * FROM Billing WHERE usage_type = 'Social Media' AND usage_amount > 500 ORDER BY usage_amount DESC;",
      "SELECT customer_id, MAX(total_amount) AS highest_total_amount FROM Invoice GROUP BY customer_id;",
      "SELECT * FROM Invoice WHERE total_amount > (SELECT AVG(total_amount) FROM Invoice);",
      "SELECT service_type, COUNT(*) AS billing_count FROM Billing GROUP BY service_type HAVING COUNT(*) > 1;",
      "SELECT customer_id, SUM(total_amount) AS total_spent FROM Invoice GROUP BY customer_id ORDER BY total_spent DESC;",
      "SELECT * FROM Billing WHERE usage_amount BETWEEN 500 AND 1000;",
      "SELECT customer_id, AVG(total_amount) AS avg_total FROM Invoice GROUP BY customer_id HAVING AVG(total_amount) > 1000;",
      "SELECT DISTINCT service_type FROM Billing WHERE service_type LIKE '%Hosting%';",
      "SELECT * FROM Billing WHERE customer_id IN (SELECT customer_id FROM Invoice WHERE payment_status = 'Pending');",
      "SELECT bill_id, usage_amount, service_fee, usage_amount * service_fee AS total_fee FROM Billing;",
      "SELECT customer_id, usage_type, SUM(total_amount) AS total_spent FROM Billing INNER JOIN Invoice ON Billing.bill_id = Invoice.bill_id GROUP BY customer_id, usage_type;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_id, customer_name FROM customers;",
      "SELECT customer_id, address FROM customers;",
      "SELECT * FROM services;",
      "SELECT service_id, service_name FROM services;",
      "SELECT service_id, service_description FROM services;",
      "SELECT * FROM usage_records;",
      "SELECT record_id, customer_id FROM usage_records;",
      "SELECT record_id, service_id FROM usage_records;",
      "SELECT record_id, usage_date FROM usage_records;",
      "SELECT record_id, usage_quantity FROM usage_records;",
      "SELECT customers.customer_id, customers.customer_name, services.service_name, usage_records.usage_quantity FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id JOIN services ON services.service_id = usage_records.service_id;",
      "SELECT customers.customer_name, usage_records.usage_quantity FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id;",
      "SELECT services.service_name, usage_records.usage_quantity FROM services JOIN usage_records ON services.service_id = usage_records.service_id;",
      "SELECT customers.customer_name, usage_records.usage_date, services.service_name FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id JOIN services ON services.service_id = usage_records.service_id;",
      "SELECT customers.customer_name, MAX(usage_records.usage_quantity) AS max_usage FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id GROUP BY customers.customer_name;",
      "SELECT services.service_name, SUM(usage_records.usage_quantity) AS total_usage FROM services JOIN usage_records ON services.service_id = usage_records.service_id GROUP BY services.service_name;",
      "SELECT customers.customer_name, services.service_name, usage_records.usage_date, usage_records.usage_quantity FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id JOIN services ON services.service_id = usage_records.service_id WHERE customers.customer_id = 1;",
      "SELECT customers.customer_name, services.service_name, usage_records.usage_date, usage_records.usage_quantity FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id JOIN services ON services.service_id = usage_records.service_id WHERE services.service_id = 1;",
      "SELECT customers.customer_name, services.service_name, usage_records.usage_date, usage_records.usage_quantity FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id JOIN services ON services.service_id = usage_records.service_id WHERE usage_records.usage_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT customer_name FROM customers WHERE address LIKE '%Street%';",
      "SELECT customer_name, address FROM customers WHERE address IS NOT NULL AND address <> '';",
      "SELECT customer_name, service_name FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id JOIN services s ON ur.service_id = s.service_id;",
      "SELECT DISTINCT c.customer_name FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id WHERE ur.usage_quantity > 100;",
      "SELECT c.customer_name, s.service_name, ur.usage_date FROM customers c, services s, usage_records ur WHERE c.customer_id = ur.customer_id AND s.service_id = ur.service_id AND ur.usage_date >= '2022-01-01' AND ur.usage_date <= '2022-12-31';",
      "SELECT c.customer_name, s.service_name FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id JOIN services s ON ur.service_id = s.service_id WHERE s.service_description LIKE '%cloud%';",
      "SELECT c.customer_name, COUNT(ur.record_id) AS Number_of_Records FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, COUNT(ur.record_id) AS Number_of_Records FROM customers c LEFT JOIN usage_records ur ON c.customer_id = ur.customer_id GROUP BY c.customer_name HAVING COUNT(ur.record_id) > 5;",
      "SELECT c.customer_name, SUM(ur.usage_quantity) AS Total_Usage FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, MAX(ur.usage_quantity) AS Max_Usage FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, MIN(ur.usage_quantity) AS Min_Usage FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, AVG(ur.usage_quantity) AS Avg_Usage FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, MAX(ur.usage_date) AS Latest_Usage_Date FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, MIN(ur.usage_date) AS Earliest_Usage_Date FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, COUNT(DISTINCT ur.service_id) AS Number_of_Services_Used FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, service_name, SUM(usage_quantity) AS Total_Usage FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id JOIN services s ON ur.service_id = s.service_id GROUP BY c.customer_name, service_name;",
      "SELECT c.customer_name, service_name, AVG(usage_quantity) AS Avg_Usage FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id JOIN services s ON ur.service_id = s.service_id GROUP BY c.customer_name, service_name;",
      "SELECT c.customer_name, COUNT(ur.record_id) AS Number_of_Records, MAX(ur.usage_date) AS Latest_Usage_Date, AVG(ur.usage_quantity) AS Avg_Usage FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, service_name, COUNT(ur.record_id) AS Number_of_Records, MAX(ur.usage_date) AS Latest_Usage_Date, AVG(usage_quantity) AS Avg_Usage FROM customers c JOIN usage_records ur ON c.customer_id = ur.customer_id JOIN services s ON ur.service_id = s.service_id GROUP BY c.customer_name, service_name;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, address FROM customers;",
      "SELECT customer_id, customer_name FROM customers WHERE customer_id = 1;",
      "SELECT * FROM services;",
      "SELECT service_name, service_description FROM services;",
      "SELECT service_id, service_price FROM services WHERE service_price > 50.00;",
      "SELECT * FROM usage_records;",
      "SELECT customer_id, service_id, usage_date FROM usage_records WHERE usage_date >= '2022-01-01';",
      "SELECT * FROM invoices;",
      "SELECT customer_id, invoice_date, total_amount FROM invoices WHERE total_amount < 100.00;",
      "SELECT customer_name, address, service_name, service_price FROM customers c INNER JOIN services s ON c.customer_id = s.service_id;",
      "SELECT c.customer_name, s.service_name, u.usage_date FROM customers c INNER JOIN services s ON c.customer_id = s.service_id INNER JOIN usage_records u ON c.customer_id = u.customer_id WHERE u.usage_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT c.customer_name, i.invoice_date, i.total_amount FROM customers c INNER JOIN invoices i ON c.customer_id = i.customer_id WHERE i.total_amount > 500.00;",
      "SELECT c.customer_name, s.service_name, u.usage_date, i.total_amount FROM customers c INNER JOIN services s ON c.customer_id = s.service_id INNER JOIN usage_records u ON c.customer_id = u.customer_id INNER JOIN invoices i ON c.customer_id = i.customer_id WHERE u.usage_date >= '2022-01-01' AND i.total_amount < 500.00;",
      "SELECT c.customer_name, i.total_amount FROM customers c LEFT JOIN invoices i ON c.customer_id = i.customer_id;",
      "SELECT s.service_name, u.usage_hours FROM services s INNER JOIN usage_records u ON s.service_id = u.service_id WHERE u.usage_hours > 10;",
      "SELECT c.customer_name, i.total_amount FROM customers c LEFT JOIN invoices i ON c.customer_id = i.customer_id WHERE i.invoice_date >= '2022-01-01';",
      "SELECT customer_name, address, phone_number FROM customers;",
      "SELECT service_name, service_description, service_price FROM services;",
      "SELECT invoice_date, total_amount FROM invoices;",
      "SELECT * FROM customers;",
      "SELECT customer_name, address FROM customers WHERE customer_id = 1;",
      "SELECT * FROM services WHERE service_price > 100;",
      "SELECT customer_name, service_name FROM customers INNER JOIN services ON customers.customer_id = services.service_id;",
      "SELECT customer_name, service_name, total_amount FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN invoices ON customers.customer_id = invoices.customer_id;",
      "SELECT customer_name, service_name, invoice_date FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN invoices ON customers.customer_id = invoices.customer_id WHERE invoice_date >= '2022-01-01';",
      "SELECT customer_name, service_name, total_amount FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN invoices ON customers.customer_id = invoices.customer_id WHERE total_amount > 500;",
      "SELECT customer_name, service_name, usage_date FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN usage_records ON customers.customer_id = usage_records.customer_id WHERE usage_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT customer_name, service_name, usage_hours, total_amount FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN usage_records ON customers.customer_id = usage_records.customer_id INNER JOIN invoices ON customers.customer_id = invoices.customer_id;",
      "SELECT customer_name, service_name, service_description FROM customers INNER JOIN services ON customers.customer_id = services.service_id;",
      "SELECT customer_name, service_name, invoice_date FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN invoices ON invoice_date < '2022-01-01';",
      "SELECT customer_name, service_name, total_amount FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN invoices ON customers.customer_id = invoices.customer_id WHERE service_price < 50;",
      "SELECT * FROM customers WHERE phone_number LIKE '%555%';",
      "SELECT customer_name, service_name, total_amount FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN invoices ON customers.customer_id = invoices.customer_id WHERE customer_name LIKE '%John%';",
      "SELECT customer_name, service_name, usage_date FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN usage_records ON customers.customer_id = usage_records.customer_id WHERE usage_hours >= 10;",
      "SELECT customer_name, service_name, invoice_date FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN invoices ON customers.customer_id = invoices.customer_id WHERE total_amount < 100;",
      "SELECT customer_name, service_name, invoice_date FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN invoices ON customers.customer_id = invoices.customer_id WHERE invoice_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT customer_name, service_name, usage_hours FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN usage_records ON customers.customer_id = usage_records.customer_id WHERE service_price > 200;",
      "SELECT DISTINCT customer_name FROM customers;",
      "SELECT customer_name, service_name, total_amount FROM customers INNER JOIN services ON customers.customer_id = services.service_id INNER JOIN invoices ON customers.customer_id = invoices.customer_id GROUP BY customer_name, service_name;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_id, customer_name FROM customers;",
      "SELECT * FROM services;",
      "SELECT service_name, service_fee FROM services;",
      "SELECT * FROM usage_records;",
      "SELECT record_id, customer_id, service_id FROM usage_records;",
      "SELECT * FROM invoices;",
      "SELECT invoice_id, customer_id, invoice_date FROM invoices;",
      "SELECT * FROM payments;",
      "SELECT payment_id, invoice_id, payment_date FROM payments;",
      "SELECT customer_name, customer_email FROM customers WHERE customer_id = 1;",
      "SELECT service_name, service_fee FROM services WHERE service_id = 1;",
      "SELECT customer_name, service_name, usage_date, usage_amount FROM customers c INNER JOIN usage_records u ON c.customer_id = u.customer_id INNER JOIN services s ON u.service_id = s.service_id;",
      "SELECT customer_name, invoice_date, total_amount FROM customers c INNER JOIN invoices i ON c.customer_id = i.customer_id;",
      "SELECT invoice_date, total_amount, payment_date, payment_amount FROM invoices i INNER JOIN payments p ON i.invoice_id = p.invoice_id;",
      "SELECT customer_name, service_name, usage_date, usage_amount FROM customers c INNER JOIN usage_records u ON c.customer_id = u.customer_id INNER JOIN services s ON u.service_id = s.service_id WHERE u.usage_amount > 100;",
      "SELECT service_name, service_fee FROM services WHERE service_fee < 50;",
      "SELECT customer_id, COUNT(record_id) AS total_records FROM usage_records GROUP BY customer_id;",
      "SELECT service_id, SUM(usage_amount) AS total_amount FROM usage_records GROUP BY service_id;",
      "SELECT customer_name, SUM(total_amount) AS total_paid FROM customers c INNER JOIN invoices i ON c.customer_id = i.customer_id INNER JOIN payments p ON i.invoice_id = p.invoice_id GROUP BY c.customer_id;",
      "SELECT * FROM customers WHERE customer_name LIKE 'A%' ORDER BY customer_id DESC;",
      "SELECT customer_name, customer_email FROM customers WHERE customer_email LIKE '%@gmail.com';",
      "SELECT customer_name, service_name, usage_date FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id JOIN services ON services.service_id = usage_records.service_id WHERE usage_amount > 100;",
      "SELECT customer_id, SUM(usage_amount) AS total_usage FROM usage_records GROUP BY customer_id HAVING total_usage > 500;",
      "SELECT customer_name, invoice_date, total_amount FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id WHERE invoice_date BETWEEN '2023-01-01' AND '2023-12-31';",
      "SELECT customer_name, SUM(payment_amount) AS total_payments FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY customers.customer_id HAVING total_payments > 1000;",
      "SELECT customer_name, count(invoice_id) AS num_invoices FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id GROUP BY customers.customer_id HAVING num_invoices > 5;",
      "SELECT customer_name, service_name, MAX(usage_amount) AS max_usage FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id JOIN services ON services.service_id = usage_records.service_id GROUP BY customers.customer_id;",
      "SELECT customer_name, AVG(service_fee) AS avg_service_fee FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id JOIN services ON services.service_id = invoices.service_id GROUP BY customers.customer_id;",
      "SELECT customer_name, SUM(usage_amount) AS total_usage, SUM(payment_amount) total_payments FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id JOIN usage_records ON usage_records.customer_id = customers.customer_id JOIN payments ON payments.invoice_id = invoices.invoice_id GROUP BY customers.customer_id;",
      "SELECT customer_name, COUNT(DISTINCT service_id) AS num_services_used FROM customers JOIN usage_records ON customers.customer_id = usage SOURCE service_id GROUP BY customers.customer_id HAVING num_services_used > 3;",
      "SELECT customer_name, AVG(usage_amount) AS avg_usage FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id GROUP BY customers.customer_id HAVING avg_usage > 50;",
      "SELECT customer_name, service_name, usage_date, usage_amount FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id JOIN services ON services.service_id = usage_records.service_id WHERE usage_date BETWEEN '2023-01-01' AND '2023-06-30';",
      "SELECT customer_name, invoice_date, total_amount FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id WHERE total_amount IN (SELECT MAX(total_amount) FROM invoices);",
      "SELECT customer_id, COUNT(*) AS num_records FROM usage_records GROUP BY customer_id HAVING num_records > 10;",
      "SELECT customer_name, service_name, AVG(usage_amount) AS avg_usage FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id JOIN services ON services.service_id = usage_records.service_id GROUP BY customers.customer_id HAVING avg_usage < 50;",
      "SELECT customer_name, service_name, usage_date, usage_amount FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id JOIN services ON services.service_id = usage_records.service_id WHERE service_fee > 50;",
      "SELECT customer_name, invoice_date, total_amount FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id WHERE total_amount > 500;",
      "SELECT customer_name, COUNT(*) AS num_payments FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY customers.customer_id HAVING num_payments > 2;",
      "SELECT customer_name, service_name, usage_date, usage_amount FROM customers JOIN usage_records ON customers.customer_id = usage_records.customer_id JOIN services ON services.service_id = usage_records.service_id WHERE usage_amount < 20;"
    ]
  }
]