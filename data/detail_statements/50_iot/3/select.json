[
  {
    "statements": [
      "SELECT * FROM machine_performance_data;",
      "SELECT machine_id, timestamp FROM machine_performance_data;",
      "SELECT machine_id, cpu_usage, memory_usage FROM machine_performance_data;",
      "SELECT * FROM machine_performance_data WHERE machine_id = 1;",
      "SELECT * FROM machine_performance_data WHERE cpu_usage > 80;",
      "SELECT * FROM machine_performance_data WHERE timestamp > '2022-01-01';",
      "SELECT AVG(cpu_usage) AS avg_cpu_usage FROM machine_performance_data;",
      "SELECT MAX(memory_usage) AS max_memory_usage FROM machine_performance_data;",
      "SELECT machine_id, MAX(disk_usage) AS max_disk_usage FROM machine_performance_data GROUP BY machine_id;",
      "SELECT * FROM machine_performance_data ORDER BY timestamp DESC;",
      "SELECT DISTINCT machine_id FROM machine_performance_data;",
      "SELECT COUNT(*) AS total_records FROM machine_performance_data;",
      "SELECT machine_id, AVG(cpu_usage) AS avg_cpu_usage FROM machine_performance_data GROUP BY machine_id;",
      "SELECT * FROM machine_performance_data WHERE memory_usage < 50 AND disk_usage < 60;",
      "SELECT * FROM machine_performance_data WHERE cpu_usage BETWEEN 30 AND 70;",
      "SELECT machine_id, SUM(cpu_usage) AS total_cpu_usage FROM machine_performance_data GROUP BY machine_id;",
      "SELECT * FROM machine_performance_data WHERE timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT * FROM machine_performance_data LIMIT 10;",
      "SELECT machine_id, MIN(cpu_usage) AS min_cpu_usage FROM machine_performance_data GROUP BY machine_id;",
      "SELECT * FROM machine_performance_data WHERE machine_id IN (1, 2, 3);",
      "SELECT machine_id, cpu_usage FROM machine_performance_data WHERE memory_usage > 80",
      "SELECT COUNT(*) FROM machine_performance_data WHERE disk_usage < 50",
      "SELECT AVG(cpu_usage) FROM machine_performance_data WHERE machine_id = 1",
      "SELECT machine_id, MAX(memory_usage) FROM machine_performance_data GROUP BY machine_id",
      "SELECT * FROM machine_performance_data ORDER BY timestamp DESC LIMIT 10",
      "SELECT machine_id, SUM(cpu_usage) FROM machine_performance_data WHERE timestamp >= '2022-01-01' AND timestamp < '2022-02-01' GROUP BY machine_id",
      "SELECT machine_id, AVG(memory_usage) FROM machine_performance_data WHERE cpu_usage > 50 GROUP BY machine_id HAVING AVG(memory_usage) > 60",
      "SELECT COUNT(DISTINCT machine_id) FROM machine_performance_data WHERE cpu_usage > 90",
      "SELECT machine_id, AVG(disk_usage) FROM machine_performance_data WHERE memory_usage < 30 GROUP BY machine_id HAVING AVG(disk_usage) < 40",
      "SELECT machine_id, AVG(cpu_usage) FROM machine_performance_data WHERE timestamp BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY machine_id",
      "SELECT machine_id, MAX(cpu_usage) FROM machine_performance_data WHERE disk_usage > 70 GROUP BY machine_id HAVING MAX(cpu_usage) > 80",
      "SELECT machine_id, MIN(memory_usage) FROM machine_performance_data WHERE disk_usage < 50 GROUP BY machine_id",
      "SELECT machine_id, AVG(cpu_usage) FROM machine_performance_data WHERE timestamp >= '2022-01-01' AND timestamp < '2023-01-01' GROUP BY machine_id HAVING AVG(cpu_usage) > 60",
      "SELECT machine_id, SUM(memory_usage) FROM machine_performance_data GROUP BY machine_id HAVING SUM(memory_usage) > 500",
      "SELECT machine_id, SUM(disk_usage) FROM machine_performance_data GROUP BY machine_id ORDER BY SUM(disk_usage) DESC LIMIT 5",
      "SELECT machine_id, AVG(memory_usage) FROM machine_performance_data GROUP BY machine_id ORDER BY AVG(memory_usage) ASC LIMIT 5",
      "SELECT machine_id, AVG(cpu_usage) FROM machine_performance_data GROUP BY machine_id HAVING AVG(cpu_usage) > 70",
      "SELECT COUNT(*) AS total_records FROM machine_performance_data",
      "SELECT machine_id, COUNT(*) AS total_records FROM machine_performance_data GROUP BY machine_id HAVING COUNT(*) > 100",
      "SELECT machine_id, AVG(cpu_usage) AS avg_cpu_usage FROM machine_performance_data GROUP BY machine_id HAVING avg_cpu_usage > 50"
    ]
  },
  {
    "statements": [
      "SELECT * FROM machine_performance_data;",
      "SELECT id, machine_id, performance_metrics, timestamp FROM machine_performance_data;",
      "SELECT * FROM anomaly_detection_results;",
      "SELECT result_id, anomaly_detection_details, detected_timestamp FROM anomaly_detection_results;",
      "SELECT id, machine_id, performance_metrics FROM machine_performance_data WHERE timestamp >= '2022-01-01';",
      "SELECT result_id, anomaly_detection_details FROM anomaly_detection_results WHERE detected_timestamp < '2022-06-01';",
      "SELECT * FROM machine_performance_data WHERE machine_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT * FROM anomaly_detection_results WHERE result_id = '123e4567-e89b-12d3-a456-426614174001';",
      "SELECT id, timestamp FROM machine_performance_data WHERE machine_id = '123e4567-e89b-12d3-a456-426614174002';",
      "SELECT result_id, detected_timestamp FROM anomaly_detection_results WHERE result_id = '123e4567-e89b-12d3-a456-426614174003';",
      "SELECT * FROM machine_performance_data WHERE timestamp BETWEEN '2022-01-01' AND '2022-06-01';",
      "SELECT * FROM anomaly_detection_results WHERE detected_timestamp BETWEEN '2022-01-01' AND '2022-06-01';",
      "SELECT id, machine_id FROM machine_performance_data WHERE machine_id = '123e4567-e89b-12d3-a456-426614174004';",
      "SELECT result_id FROM anomaly_detection_results WHERE detected_timestamp >= '2022-06-01';",
      "SELECT id, performance_metrics FROM machine_performance_data WHERE machine_id = '123e4567-e89b-12d3-a456-426614174005';",
      "SELECT result_id, anomaly_detection_details FROM anomaly_detection_results WHERE detected_timestamp < '2022-01-01' ORDER BY detected_timestamp DESC;",
      "SELECT * FROM machine_performance_data WHERE machine_id = '123e4567-e89b-12d3-a456-426614174006' AND timestamp >= '2022-01-01';",
      "SELECT * FROM anomaly_detection_results WHERE detected_timestamp > '2022-06-01' ORDER BY detected_timestamp ASC;",
      "SELECT id, timestamp FROM machine_performance_data WHERE machine_id = '123e4567-e89b-12d3-a456-426614174007' AND timestamp BETWEEN '2022-01-01' AND '2022-06-01';",
      "SELECT result_id, detected_timestamp FROM anomaly_detection_results WHERE detected_timestamp >= '2022-01-01' AND detected_timestamp <= '2022-06-01';",
      "SELECT * FROM machine_performance_data WHERE machine_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT id, performance_metrics->>'temperature' as temperature FROM machine_performance_data WHERE performance_metrics->>'temperature' > '80';",
      "SELECT machine_id, COUNT(*) as records_count FROM machine_performance_data GROUP BY machine_id;",
      "SELECT * FROM machine_performance_data WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT * FROM machine_performance_data INNER JOIN anomaly_detection_results ON machine_performance_data.id = anomaly_detection_results.result_id WHERE anomaly_detection_results.anomaly_detection_details->>'severity' = 'high';",
      "SELECT machine_id, MAX(performance_metrics->>'cpu_usage') as max_cpu_usage FROM machine_performance_data GROUP BY machine_id;",
      "SELECT AVG(CAST(performance_metrics->>'memory_usage' AS FLOAT)) as average_memory_usage, AVG(CAST(performance_metrics->>'disk_usage' AS FLOAT)) as average_disk_usage FROM machine_performance_data;",
      "SELECT machine_id, SUM(CAST(performance_metrics->>'network_traffic' AS INT)) as total_network_traffic FROM machine_performance_data GROUP BY machine_id;",
      "SELECT DISTINCT machine_id FROM machine_performance_data WHERE performance_metrics->>'status' = 'online';",
      "SELECT * FROM anomaly_detection_results WHERE detected_timestamp > (SELECT MAX(timestamp) FROM machine_performance_data);",
      "SELECT machine_id, COUNT(*) as anomaly_count FROM anomaly_detection_results GROUP BY machine_id;",
      "SELECT * FROM machine_performance_data WHERE timestamp = (SELECT MIN(detected_timestamp) FROM anomaly_detection_results);",
      "SELECT machine_id, MAX(timestamp) as latest_timestamp FROM machine_performance_data GROUP BY machine_id ORDER BY latest_timestamp DESC;",
      "SELECT machine_id, COUNT(*) as anomaly_count FROM anomaly_detection_results WHERE anomaly_detection_details->>'severity' = 'critical' GROUP BY machine_id;",
      "SELECT machine_id, AVG(CAST(performance_metrics->>'cpu_usage' AS FLOAT)) as avg_cpu_usage FROM machine_performance_data GROUP BY machine_id HAVING avg_cpu_usage > 50;",
      "SELECT machine_id, performance_metrics->>'cpu_usage' as cpu_usage, performance_metrics->>'memory_usage' as memory_usage FROM machine_performance_data ORDER BY cpu_usage DESC, memory_usage ASC;",
      "SELECT machine_id, performance_metrics->>'network_traffic' as network_traffic FROM machine_performance_data WHERE machine_id = (SELECT machine_id FROM anomaly_detection_results WHERE result_id = '123e4567-e89b-12d3-a456-426614174001');",
      "SELECT DISTINCT machine_id FROM machine_performance_data WHERE machine_id NOT IN (SELECT machine_id FROM anomaly_detection_results);",
      "SELECT machine_id, COUNT(*) as anomaly_count FROM anomaly_detection_results WHERE detected_timestamp > '2022-01-01' GROUP BY machine_id HAVING anomaly_count > 5;",
      "SELECT machine_id, AVG(CAST(performance_metrics->>'network_traffic' AS INT)) as avg_network_traffic FROM machine_performance_data GROUP BY machine_id HAVING avg_network_traffic > 1000;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM MachineMetrics;",
      "SELECT machine_id, cpu_usage FROM MachineMetrics WHERE cpu_usage > 50;",
      "SELECT machine_id, memory_usage FROM MachineMetrics WHERE memory_usage > 80;",
      "SELECT machine_id, disk_usage FROM MachineMetrics WHERE disk_usage > 70;",
      "SELECT * FROM AnomalyDetection;",
      "SELECT machine_id, anomaly_type FROM AnomalyDetection WHERE anomaly_type = 'Critical';",
      "SELECT machine_id, anomaly_description FROM AnomalyDetection WHERE machine_id = 1;",
      "SELECT * FROM MaintenanceLogs;",
      "SELECT machine_id, maintenance_description FROM MaintenanceLogs WHERE machine_id = 2;",
      "SELECT machine_id, maintenance_timestamp FROM MaintenanceLogs WHERE maintenance_timestamp > '2022-01-01';",
      "SELECT MachineMetrics.machine_id, cpu_usage, memory_usage, disk_usage, anomaly_type FROM MachineMetrics JOIN AnomalyDetection ON MachineMetrics.machine_id = AnomalyDetection.machine_id;",
      "SELECT MachineMetrics.machine_id, cpu_usage, memory_usage, disk_usage, maintenance_description FROM MachineMetrics JOIN MaintenanceLogs ON MachineMetrics.machine_id = MaintenanceLogs.machine_id;",
      "SELECT MachineMetrics.machine_id, cpu_usage, memory_usage, disk_usage, anomaly_description FROM MachineMetrics JOIN AnomalyDetection ON MachineMetrics.machine_id = AnomalyDetection.machine_id;",
      "SELECT MachineMetrics.machine_id, cpu_usage, memory_usage, disk_usage, maintenance_timestamp FROM MachineMetrics JOIN MaintenanceLogs ON MachineMetrics.machine_id = MaintenanceLogs.machine_id;",
      "SELECT MachineMetrics.machine_id, cpu_usage, memory_usage, disk_usage, anomaly_type, anomaly_description FROM MachineMetrics JOIN AnomalyDetection ON MachineMetrics.machine_id = AnomalyDetection.machine_id;",
      "SELECT MachineMetrics.machine_id, cpu_usage, memory_usage, disk_usage, anomaly_type, maintenance_description FROM MachineMetrics JOIN AnomalyDetection ON MachineMetrics.machine_id = AnomalyDetection.machine_id JOIN MaintenanceLogs ON AnomalyDetection.machine_id = MaintenanceLogs.machine_id;",
      "SELECT MachineMetrics.machine_id, cpu_usage, memory_usage, disk_usage, anomaly_type, maintenance_description, maintenance_timestamp FROM MachineMetrics JOIN AnomalyDetection ON MachineMetrics.machine_id = AnomalyDetection.machine_id JOIN MaintenanceLogs ON AnomalyDetection.machine_id = MaintenanceLogs.machine_id;",
      "SELECT MachineMetrics.machine_id, cpu_usage, memory_usage, disk_usage, anomaly_type, anomaly_description, timestamp FROM MachineMetrics JOIN AnomalyDetection ON MachineMetrics.machine_id = AnomalyDetection.machine_id;",
      "SELECT MachineMetrics.machine_id, cpu_usage, memory_usage, disk_usage, anomaly_type, anomaly_description, timestamp FROM MachineMetrics JOIN AnomalyDetection ON MachineMetrics.machine_id = AnomalyDetection.machine_id WHERE anomaly_type = 'Critical';",
      "SELECT MachineMetrics.machine_id, cpu_usage, memory_usage, disk_usage, anomaly_type, anomaly_description, timestamp FROM MachineMetrics JOIN AnomalyDetection ON MachineMetrics.machine_id = AnomalyDetection.machine_id WHERE timestamp > '2022-01-01';",
      "SELECT machine_id, cpu_usage, memory_usage, disk_usage FROM MachineMetrics WHERE cpu_usage > 80",
      "SELECT machine_id, anomaly_type, timestamp FROM AnomalyDetection WHERE machine_id = 5 ORDER BY timestamp DESC",
      "SELECT * FROM MachineMetrics mm JOIN AnomalyDetection ad ON mm.machine_id = ad.machine_id WHERE ad.anomaly_type = 'Overheat'",
      "SELECT machine_id, maintenance_description, maintenance_timestamp FROM MaintenanceLogs WHERE maintenance_timestamp BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT mm.machine_id, mm.cpu_usage, md.anomaly_type FROM MachineMetrics mm LEFT JOIN AnomalyDetection ad ON mm.machine_id = ad.machine_id ORDER BY md.anomaly_type ASC",
      "SELECT machine_id, AVG(cpu_usage) AS avg_cpu_usage FROM MachineMetrics GROUP BY machine_id HAVING AVG(cpu_usage) > 70",
      "SELECT machine_id, COUNT(anomaly_id) AS total_anomalies FROM AnomalyDetection GROUP BY machine_id HAVING COUNT(anomaly_id) > 5",
      "SELECT mm.machine_id, mm.cpu_usage, ad.anomaly_type, ml.maintenance_description FROM MachineMetrics mm JOIN AnomalyDetection ad ON mm.machine_id = ad.machine_id JOIN MaintenanceLogs ml ON mm.machine_id = ml.machine_id WHERE ad.anomaly_type = 'Hardware Failure' AND ml.maintenance_timestamp > '2022-01-01'",
      "SELECT machine_id, SUM(cpu_usage) AS total_cpu_usage FROM MachineMetrics GROUP BY machine_id HAVING SUM(cpu_usage) > 500",
      "SELECT machine_id, CONCAT('CPU:', cpu_usage, ' Memory:', memory_usage, ' Disk:', disk_usage) AS system_info FROM MachineMetrics"
    ]
  },
  {
    "statements": [
      "SELECT * FROM machine_data;",
      "SELECT id, cpu_usage, memory_usage FROM machine_data WHERE machine_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT * FROM anomaly_data WHERE severity > 4;",
      "SELECT machine_name, location FROM machine_info WHERE owner = 'John Doe';",
      "SELECT * FROM anomaly_log WHERE resolved = false;",
      "SELECT id, anomaly_type FROM anomaly_data WHERE severity >= 3;",
      "SELECT machine_id, timestamp, cpu_usage FROM machine_data WHERE memory_usage < 50;",
      "SELECT * FROM machine_info WHERE location = 'USA';",
      "SELECT id, description FROM anomaly_log WHERE resolved = true;",
      "SELECT * FROM machine_data ORDER BY timestamp DESC;",
      "SELECT machine_id, AVG(cpu_usage) AS avg_cpu_usage FROM machine_data GROUP BY machine_id;",
      "SELECT machine_id, COUNT(*) AS num_anomalies FROM anomaly_data GROUP BY machine_id;",
      "SELECT * FROM anomaly_data WHERE anomaly_type LIKE '%malware%';",
      "SELECT machine_id, COUNT(*) AS num_unresolved_anomalies FROM anomaly_log WHERE resolved = false GROUP BY machine_id;",
      "SELECT machine_id, AVG(severity) AS avg_severity FROM anomaly_data GROUP BY machine_id;",
      "SELECT * FROM machine_info WHERE machine_name NOT LIKE '%Production%';",
      "SELECT machine_id, COUNT(*) AS num_resolved_anomalies FROM anomaly_log WHERE resolved = true GROUP BY machine_id;",
      "SELECT id, timestamp FROM machine_data WHERE machine_id IN ('123e4567-e89b-12d3-a456-426614174000', '223e4567-e89b-12d3-a456-426614174001');",
      "SELECT machine_name, owner FROM machine_info WHERE location NOT IN ('USA', 'Canada');",
      "SELECT * FROM machine_data WHERE cpu_usage > 0.8 AND memory_usage < 0.3;",
      "SELECT machine_id, AVG(cpu_usage) FROM machine_data GROUP BY machine_id HAVING AVG(cpu_usage) > 0.5;",
      "SELECT machine_info.machine_name, machine_data.timestamp FROM machine_info JOIN machine_data ON machine_info.machine_id = machine_data.machine_id;",
      "SELECT COUNT(*) FROM anomaly_data WHERE anomaly_type = 'hardware';",
      "SELECT machine_data.machine_id, MAX(cpu_usage) AS max_cpu_usage, MIN(memory_usage) AS min_memory_usage FROM machine_data GROUP BY machine_data.machine_id;",
      "SELECT machine_info.location, COUNT(anomaly_data.id) AS total_anomalies FROM machine_info LEFT JOIN anomaly_data ON machine_info.machine_id = anomaly_data.machine_id GROUP BY machine_info.location;",
      "SELECT machine_name, SUM(severity) AS total_severity FROM machine_info JOIN anomaly_data ON machine_info.machine_id = anomaly_data.machine_id GROUP BY machine_name HAVING SUM(severity) > 10;",
      "SELECT DISTINCT machine_info.machine_id, machine_name, location FROM machine_info JOIN machine_data ON machine_info.machine_id = machine_data.machine_id;",
      "SELECT AVG(cpu_usage) AS avg_cpu_usage, AVG(memory_usage) AS avg_memory_usage FROM machine_data;",
      "SELECT machine_info.machine_name, AVG(cpu_usage) AS avg_cpu_usage, AVG(memory_usage) AS avg_memory_usage FROM machine_info JOIN machine_data ON machine_info.machine_id = machine_data.machine_id GROUP BY machine_info.machine_name;",
      "SELECT machine_name, location, COUNT(anomaly_id) AS total_anomalies FROM machine_info JOIN anomaly_log ON machine_info.machine_id = anomaly_log.machine_id GROUP BY machine_name, location;",
      "SELECT machine_info.machine_name, anomaly_type, description FROM machine_info JOIN anomaly_log ON machine_info.machine_id = anomaly_log.machine_id JOIN anomaly_data ON anomaly_log.anomaly_id = anomaly_data.id;",
      "SELECT machine_name, MAX(severity) AS max_severity FROM machine_info JOIN anomaly_data ON machine_info.machine_id = anomaly_data.machine_id GROUP BY machine_name;",
      "SELECT DISTINCT machine_info.* FROM machine_info JOIN machine_data ON machine_info.machine_id = machine_data.machine_id LEFT JOIN anomaly_data ON machine_info.machine_id = anomaly_data.machine_id;",
      "SELECT location, COUNT(anomaly_type) AS total_anomalies FROM machine_info LEFT JOIN anomaly_data ON machine_info.machine_id = anomaly_data.machine_id GROUP BY location;",
      "SELECT machine_name, AVG(severity) AS avg_severity FROM machine_info JOIN anomaly_data ON machine_info.machine_id = anomaly_data.machine_id GROUP BY machine_name;",
      "SELECT AVG(severity) AS avg_severity, SUM(severity) AS total_severity FROM anomaly_data;",
      "SELECT machine_name, COUNT(anomaly_id) AS total_anomalies FROM machine_info JOIN anomaly_log ON machine_info.machine_id = anomaly_log.machine_id GROUP BY machine_name;",
      "SELECT machine_info.machine_name, AVG(severity) AS avg_severity FROM machine_info JOIN anomaly_log ON machine_info.machine_id = anomaly_log.machine_id JOIN anomaly_data ON anomaly_log.anomaly_id = anomaly_data.id GROUP BY machine_info.machine_name HAVING AVG(severity) > 5;",
      "SELECT machine_name, location, AVG(cpu_usage) AS avg_cpu_usage FROM machine_info JOIN machine_data ON machine_info.machine_id = machine_data.machine_id GROUP BY machine_name, location HAVING AVG(cpu_usage) < 0.5;",
      "SELECT machine_name, AVG(memory_usage) AS avg_memory_usage, COUNT(*) AS total_rows FROM machine_data JOIN machine_info ON machine_data.machine_id = machine_info.machine_id GROUP BY machine_name HAVING COUNT(*) > 10;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM machines_data;",
      "SELECT machine_name, cpu_usage FROM machines_data;",
      "SELECT * FROM usage_stats;",
      "SELECT timestamp, cpu_usage, memory_usage FROM usage_stats;",
      "SELECT * FROM anomalies_detected;",
      "SELECT anomaly_type, anomaly_description FROM anomalies_detected;",
      "SELECT * FROM anomaly_logs;",
      "SELECT log_timestamp, log_description FROM anomaly_logs;",
      "SELECT * FROM anomaly_resolution;",
      "SELECT resolved_timestamp, resolution_description FROM anomaly_resolution;",
      "SELECT machine_name, cpu_usage, memory_usage, disk_usage FROM machines_data WHERE cpu_usage > 70;",
      "SELECT machine_name, disk_usage FROM machines_data WHERE disk_usage < 30;",
      "SELECT machine_name, memory_usage FROM machines_data WHERE memory_usage BETWEEN 20 AND 50;",
      "SELECT timestamp, machine_id FROM usage_stats WHERE cpu_usage > 80;",
      "SELECT timestamp, anomaly_type FROM anomalies_detected WHERE anomaly_type = 'network';",
      "SELECT log_timestamp, log_description FROM anomaly_logs WHERE log_timestamp > '2022-01-01';",
      "SELECT resolved_timestamp, resolution_description FROM anomaly_resolution WHERE resolved_timestamp BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT machine_name, cpu_usage FROM machines_data ORDER BY cpu_usage DESC;",
      "SELECT machine_name, memory_usage FROM machines_data ORDER BY memory_usage ASC;",
      "SELECT anomaly_type, anomaly_description FROM anomalies_detected ORDER BY anomaly_type DESC;",
      "SELECT * FROM machines_data WHERE cpu_usage > 80 AND memory_usage < 50;",
      "SELECT COUNT(machine_id), machine_name FROM machines_data GROUP BY machine_name HAVING COUNT(machine_id) > 10;",
      "SELECT machine_name, cpu_usage, memory_usage FROM machines_data JOIN usage_stats USING(machine_id) WHERE cpu_usage > 70;",
      "SELECT machine_name, AVG(cpu_usage) AS avg_cpu_usage FROM machines_data GROUP BY machine_name HAVING AVG(cpu_usage) > 50;",
      "SELECT * FROM usage_stats JOIN machines_data USING(machine_id) WHERE timestamp > NOW() - INTERVAL '1 week';",
      "SELECT machine_name, COUNT(anomaly_id) AS num_anomalies FROM anomalies_detected JOIN machines_data USING(machine_id) GROUP BY machine_name HAVING COUNT(anomaly_id) > 5;",
      "SELECT machine_name, anomaly_type, anomaly_description FROM anomalies_detected JOIN machines_data USING(machine_id) WHERE anomaly_type = 'Critical';",
      "SELECT machine_name, AVG(cpu_usage) AS avg_cpu_usage, AVG(memory_usage) AS avg_memory_usage FROM machines_data JOIN usage_stats USING(machine_id) GROUP BY machine_name HAVING AVG(cpu_usage) > 60 AND AVG(memory_usage) < 40;",
      "SELECT machine_name, anomaly_type, anomaly_description, log_description FROM anomalies_detected JOIN machines_data USING(machine_id) JOIN anomaly_logs USING(anomaly_id) WHERE anomaly_type = 'Error';",
      "SELECT machine_name, AVG(cpu_usage) AS avg_cpu_usage, AVG(memory_usage) AS avg_memory_usage FROM machines_data JOIN usage_stats USING(machine_id) WHERE machine_name LIKE 'Server%';",
      "SELECT machine_name, COUNT(anomaly_id) AS num_anomalies FROM anomalies_detected JOIN machines_data USING(machine_id) GROUP BY machine_name HAVING COUNT(anomaly_id) > 3;",
      "SELECT machine_name, anomaly_type, anomaly_description, log_description FROM anomalies_detected JOIN machines_data USING(machine_id) JOIN anomaly_logs USING(anomaly_id) WHERE anomaly_type = 'Warning';",
      "SELECT machine_name, resolution_description FROM anomaly_resolution JOIN anomalies_detected USING(anomaly_id) JOIN machines_data USING(machine_id) WHERE resolved_timestamp > '2022-01-01';",
      "SELECT * FROM machines_data WHERE machine_name ILIKE '%prod%' AND cpu_usage > 90;",
      "SELECT machine_name, AVG(cpu_usage) AS avg_cpu_usage, AVG(memory_usage) AS avg_memory_usage FROM machines_data JOIN usage_stats USING(machine_id) WHERE memory_usage > 70 GROUP BY machine_name HAVING AVG(cpu_usage) < 50;",
      "SELECT machine_name, COUNT(anomaly_id) AS num_anomalies FROM anomalies_detected JOIN machines_data USING(machine_id) WHERE anomaly_description ILIKE '%error%' GROUP BY machine_name HAVING COUNT(anomaly_id) > 2;",
      "SELECT machine_name, anomaly_type, anomaly_description, log_description FROM anomalies_detected JOIN machines_data USING(machine_id) JOIN anomaly_logs USING(anomaly_id) WHERE anomaly_type = 'Alert';",
      "SELECT machine_name, AVG(cpu_usage) AS avg_cpu_usage, AVG(memory_usage) AS avg_memory_usage FROM machines_data JOIN usage_stats USING(machine_id) WHERE disk_usage > 80 GROUP BY machine_name HAVING AVG(cpu_usage) > 60;",
      "SELECT machine_name, COUNT(anomaly_id) AS num_anomalies FROM anomalies_detected JOIN machines_data USING(machine_id) WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY machine_name HAVING COUNT(anomaly_id) > 1;",
      "SELECT machine_name, anomaly_type, anomaly_description, log_description FROM anomalies_detected JOIN machines_data USING(machine_id) JOIN anomaly_logs USING(anomaly_id) WHERE anomaly_type = 'Critical';"
    ]
  }
]