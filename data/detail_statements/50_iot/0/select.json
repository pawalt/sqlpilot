[
  {
    "statements": [
      "SELECT id, temperature, humidity FROM sensor_data WHERE temperature > 25",
      "SELECT * FROM sensor_data WHERE humidity < 60",
      "SELECT id FROM sensor_data WHERE temperature = 30",
      "SELECT AVG(temperature) FROM sensor_data",
      "SELECT COUNT(*) FROM sensor_data",
      "SELECT MAX(humidity) FROM sensor_data",
      "SELECT MIN(temperature) FROM sensor_data",
      "SELECT temperature FROM sensor_data ORDER BY temperature DESC",
      "SELECT humidity FROM sensor_data ORDER BY humidity ASC",
      "SELECT id, temperature FROM sensor_data WHERE id = '123456-7890-1234'",
      "SELECT id, humidity FROM sensor_data ORDER BY humidity DESC",
      "SELECT id, temperature FROM sensor_data WHERE humidity > 70",
      "SELECT id, humidity FROM sensor_data WHERE temperature < 20",
      "SELECT id, temperature, humidity FROM sensor_data WHERE temperature BETWEEN 20 AND 30",
      "SELECT id, temperature, humidity FROM sensor_data WHERE humidity BETWEEN 40 AND 60",
      "SELECT id, temperature, humidity FROM sensor_data LIMIT 5",
      "SELECT COUNT(*) AS num_records FROM sensor_data",
      "SELECT DISTINCT temperature FROM sensor_data",
      "SELECT id, temperature FROM sensor_data WHERE temperature IS NULL",
      "SELECT id, humidity FROM sensor_data WHERE humidity IS NOT NULL",
      "SELECT * FROM sensor_data WHERE temperature > 30 AND humidity < 50;",
      "SELECT id, temperature FROM sensor_data WHERE humidity BETWEEN 40 AND 60;",
      "SELECT MAX(temperature) AS max_temp FROM sensor_data;",
      "SELECT MIN(humidity) AS min_humidity FROM sensor_data WHERE temperature < 25;",
      "SELECT AVG(temperature) AS avg_temp, AVG(humidity) AS avg_humidity FROM sensor_data;",
      "SELECT id FROM sensor_data ORDER BY temperature DESC;",
      "SELECT COUNT(*) AS total_records FROM sensor_data WHERE humidity > 60;",
      "SELECT * FROM sensor_data WHERE temperature = (SELECT MAX(temperature) FROM sensor_data);",
      "SELECT id, temperature, humidity FROM sensor_data WHERE id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT id, temperature FROM sensor_data WHERE id IN ('123e4567-e89b-12d3-a456-426614174001', '123e4567-e89b-12d3-a456-426614174002');",
      "SELECT * FROM sensor_data WHERE temperature + humidity > 50;",
      "SELECT id, temperature FROM sensor_data WHERE humidity > temperature;",
      "SELECT DISTINCT temperature FROM sensor_data;",
      "SELECT * FROM sensor_data WHERE id LIKE '123e4567%';",
      "SELECT * FROM sensor_data WHERE id IS NULL;",
      "SELECT * FROM sensor_data WHERE humidity IS NOT NULL;",
      "SELECT * FROM sensor_data WHERE humidity > ALL (SELECT humidity FROM sensor_data);",
      "SELECT id, AVG(temperature) AS avg_temperature FROM sensor_data GROUP BY id HAVING avg_temperature > 30;",
      "SELECT * FROM sensor_data WHERE temperature <> 25;",
      "SELECT id, temperature FROM sensor_data WHERE temperature + humidity IN (55, 60);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM temperatures;",
      "SELECT sensor_id, temperature FROM temperatures;",
      "SELECT MAX(temperature) FROM temperatures;",
      "SELECT sensor_id FROM temperatures WHERE temperature > 25;",
      "SELECT * FROM humidities;",
      "SELECT sensor_id, humidity FROM humidities;",
      "SELECT MIN(humidity) FROM humidities;",
      "SELECT sensor_id FROM humidities WHERE humidity < 50;",
      "SELECT * FROM temperatures LEFT JOIN humidities ON temperatures.sensor_id = humidities.sensor_id;",
      "SELECT AVG(temperature), MAX(humidity) FROM temperatures, humidities WHERE temperatures.sensor_id = humidities.sensor_id;",
      "SELECT temperature, humidity FROM temperatures INNER JOIN humidities ON temperatures.sensor_id = humidities.sensor_id;",
      "SELECT sensor_id, reading_time FROM temperatures WHERE temperature BETWEEN 20 AND 30;",
      "SELECT sensor_id, humidity FROM humidities WHERE reading_time > '2022-01-01';",
      "SELECT * FROM temperatures WHERE sensor_id = 1;",
      "SELECT sensor_id, reading_time, temperature FROM temperatures WHERE reading_time BETWEEN '2022-01-01 00:00:00' AND '2022-01-31 23:59:59';",
      "SELECT sensor_id, humidity FROM humidities WHERE sensor_id = 2;",
      "SELECT AVG(temperature), MAX(humidity) FROM temperatures JOIN humidities ON temperatures.sensor_id = humidities.sensor_id;",
      "SELECT * FROM temperatures WHERE temperature < (SELECT AVG(temperature) FROM temperatures);",
      "SELECT sensor_id, humidity FROM humidities WHERE humidity NOT BETWEEN 40 AND 60;",
      "SELECT sensor_id, reading_time, temperature, humidity FROM temperatures JOIN humidities ON temperatures.sensor_id = humidities.sensor_id;",
      "SELECT * FROM temperatures WHERE temperature > 30",
      "SELECT sensor_id, AVG(temperature) AS avg_temperature FROM temperatures GROUP BY sensor_id",
      "SELECT sensor_id, COUNT(*) AS num_readings FROM humidities GROUP BY sensor_id HAVING num_readings > 10",
      "SELECT t.sensor_id, t.temperature, h.humidity FROM temperatures t JOIN humidities h ON t.sensor_id = h.sensor_id",
      "SELECT sensor_id, MAX(temperature) AS max_temperature, MIN(temperature) AS min_temperature FROM temperatures GROUP BY sensor_id",
      "SELECT * FROM temperatures WHERE reading_time BETWEEN '2022-01-01' AND '2022-02-01'",
      "SELECT sensor_id, AVG(temperature) AS avg_temperature FROM temperatures WHERE reading_time >= '2022-03-01' GROUP BY sensor_id",
      "SELECT * FROM temperatures t1 WHERE temperature = (SELECT MAX(temperature) FROM temperatures t2 WHERE t1.sensor_id = t2.sensor_id)",
      "SELECT sensor_id, COUNT(*) AS num_readings FROM temperatures WHERE temperature < 0 GROUP BY sensor_id HAVING num_readings > 5",
      "SELECT DISTINCT sensor_id FROM temperatures",
      "SELECT sensor_id, temperature, reading_time FROM temperatures ORDER BY reading_time DESC LIMIT 10",
      "SELECT sensor_id, reading_time, temperature FROM temperatures WHERE sensor_id = 1 ORDER BY reading_time ASC",
      "SELECT sensor_id, COUNT(*) AS num_readings FROM temperatures GROUP BY sensor_id HAVING num_readings > 20",
      "SELECT sensor_id, reading_time, temperature FROM temperatures WHERE reading_time = (SELECT MAX(reading_time) FROM temperatures)",
      "SELECT sensor_id, AVG(temperature) AS avg_temperature FROM temperatures WHERE sensor_id IN (SELECT sensor_id FROM humidities WHERE humidity > 50) GROUP BY sensor_id",
      "SELECT sensor_id, temperature FROM temperatures WHERE sensor_id IN (SELECT sensor_id FROM humidities WHERE humidity > 70)",
      "SELECT sensor_id, reading_time, temperature FROM temperatures WHERE reading_time = (SELECT MIN(reading_time) FROM temperatures)",
      "SELECT * FROM temperatures WHERE sensor_id IN (SELECT sensor_id FROM humidities)",
      "SELECT sensor_id, temperature, humidity FROM temperatures t JOIN humidities h ON t.sensor_id = h.sensor_id WHERE t.temperature > 25 AND h.humidity < 40",
      "SELECT sensor_id, reading_time, temperature FROM temperatures WHERE EXTRACT(MONTH FROM reading_time) = 4"
    ]
  },
  {
    "statements": [
      "SELECT * FROM sensors",
      "SELECT location FROM sensors",
      "SELECT sensor_type FROM sensors",
      "SELECT reading_value FROM sensors",
      "SELECT reading_timestamp FROM sensors",
      "SELECT * FROM temperature_readings",
      "SELECT temperature FROM temperature_readings",
      "SELECT reading_timestamp FROM temperature_readings",
      "SELECT * FROM humidity_readings",
      "SELECT humidity FROM humidity_readings",
      "SELECT reading_timestamp FROM humidity_readings",
      "SELECT s.sensor_id, t.temperature, t.reading_timestamp FROM sensors s INNER JOIN temperature_readings t ON s.sensor_id = t.sensor_id",
      "SELECT s.sensor_id, h.humidity, h.reading_timestamp FROM sensors s INNER JOIN humidity_readings h ON s.sensor_id = h.sensor_id",
      "SELECT s.sensor_id, t.temperature, h.humidity, t.reading_timestamp FROM sensors s INNER JOIN temperature_readings t ON s.sensor_id = t.sensor_id INNER JOIN humidity_readings h ON s.sensor_id = h.sensor_id",
      "SELECT s.location, t.temperature, t.reading_timestamp FROM sensors s INNER JOIN temperature_readings t ON s.sensor_id = t.sensor_id",
      "SELECT s.location, h.humidity, h.reading_timestamp FROM sensors s INNER JOIN humidity_readings h ON s.sensor_id = h.sensor_id",
      "SELECT s.location, t.temperature, h.humidity, t.reading_timestamp FROM sensors s INNER JOIN temperature_readings t ON s.sensor_id = t.sensor_id INNER JOIN humidity_readings h ON s.sensor_id = h.sensor_id",
      "SELECT * FROM sensors;",
      "SELECT * FROM temperature_readings;",
      "SELECT sensor_id, location FROM sensors;",
      "SELECT sensor_id, sensor_type, reading_value, reading_timestamp FROM sensors WHERE sensor_type='temperature';",
      "SELECT sensor_id, location, sensor_type FROM sensors WHERE location LIKE '%Room%';",
      "SELECT sensor_id, location, reading_value, reading_timestamp FROM sensors WHERE reading_timestamp >= '2022-01-01';",
      "SELECT reading_id, sensor_id, temperature, reading_timestamp FROM temperature_readings WHERE temperature > 25;",
      "SELECT reading_id, sensor_id, humidity, reading_timestamp FROM humidity_readings WHERE humidity < 60;",
      "SELECT TR.sensor_id, TR.temperature, TR.reading_timestamp, HR.humidity FROM temperature_readings TR JOIN humidity_readings HR ON TR.sensor_id = HR.sensor_id;",
      "SELECT TR.sensor_id, TR.temperature, HR.humidity, TR.reading_timestamp AS temperature_timestamp, HR.reading_timestamp AS humidity_timestamp FROM temperature_readings TR JOIN humidity_readings HR ON TR.sensor_id = HR.sensor_id;",
      "SELECT TR.sensor_id, AVG(TR.temperature) AS avg_temperature, AVG(HR.humidity) AS avg_humidity FROM temperature_readings TR JOIN humidity_readings HR ON TR.sensor_id = HR.sensor_id GROUP BY TR.sensor_id;",
      "SELECT sensor_id, location, MAX(reading_value) AS max_reading_value FROM sensors GROUP BY sensor_id;",
      "SELECT sensor_id, location, sensor_type, AVG(reading_value) AS avg_reading_value FROM sensors GROUP BY sensor_id, location, sensor_type;",
      "SELECT sensor_id, COUNT(reading_id) AS num_readings FROM temperature_readings GROUP BY sensor_id HAVING num_readings > 10;",
      "SELECT sensor_id, COUNT(reading_id) AS num_readings FROM humidity_readings GROUP BY sensor_id HAVING num_readings < 5;",
      "SELECT TR.sensor_id, TR.temperature, CASE WHEN TR.temperature > 30 THEN 'High Temperature' ELSE 'Normal Temperature' END AS temperature_status FROM temperature_readings TR;",
      "SELECT sensor_id, location, sensor_type, reading_value, reading_timestamp FROM sensors UNION SELECT sensor_id, location, null AS sensor_type, humidity AS reading_value, reading_timestamp FROM humidity_readings;",
      "SELECT sensor_id, location, sensor_type, reading_value, reading_timestamp FROM sensors INTERSECT SELECT sensor_id, location, null AS sensor_type, humidity AS reading_value, reading_timestamp FROM humidity_readings;",
      "SELECT sensor_id, location, sensor_type, temperature AS reading_value, reading_timestamp FROM sensors UNION SELECT sensor_id, location, null AS sensor_type, humidity AS reading_value, reading_timestamp FROM humidity_readings WHERE reading_timestamp > '2022-01-01';",
      "SELECT TR.sensor_id, TR.temperature, HR.humidity, TR.reading_timestamp FROM temperature_readings TR FULL OUTER JOIN humidity_readings HR ON TR.sensor_id = HR.sensor_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM temperature_readings;",
      "SELECT id, reading_value FROM humidity_readings;",
      "SELECT sensor_name, location FROM sensors;",
      "SELECT sensor_type FROM sensor_types;",
      "SELECT * FROM temperature_readings WHERE sensor_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT id, reading_value FROM humidity_readings WHERE sensor_id = '123e4567-e89b-12d3-a456-426614174001';",
      "SELECT * FROM sensors WHERE location = 'Living Room';",
      "SELECT sensor_type FROM sensor_types WHERE sensor_type = 'Temperature Sensor';",
      "SELECT * FROM temperature_readings ORDER BY timestamp DESC;",
      "SELECT id, reading_value FROM humidity_readings ORDER BY timestamp ASC;",
      "SELECT sensor_name, location FROM sensors ORDER BY sensor_name;",
      "SELECT sensor_type FROM sensor_types ORDER BY id;",
      "SELECT COUNT(*) FROM temperature_readings;",
      "SELECT COUNT(*) FROM humidity_readings;",
      "SELECT COUNT(*) FROM sensors;",
      "SELECT COUNT(*) FROM sensor_types;",
      "SELECT AVG(reading_value) FROM temperature_readings;",
      "SELECT MIN(reading_value) FROM humidity_readings;",
      "SELECT MAX(reading_value) FROM sensors;",
      "SELECT SUM(reading_value) FROM sensor_types;",
      "SELECT * FROM temperature_readings WHERE reading_value > 25",
      "SELECT sensor_id, timestamp FROM temperature_readings WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT AVG(reading_value) AS avg_temp, DATE(timestamp) AS date FROM temperature_readings GROUP BY DATE(timestamp)",
      "SELECT * FROM humidity_readings WHERE reading_value < 60 AND timestamp > '2022-02-01'",
      "SELECT sensor_name, location FROM sensors WHERE location = 'Room A'",
      "SELECT sensor_id, MAX(reading_value) AS max_temp FROM temperature_readings GROUP BY sensor_id",
      "SELECT sensor_name, sensor_type FROM sensors JOIN sensor_types ON sensors.id = sensor_types.id",
      "SELECT * FROM temperature_readings ORDER BY timestamp DESC LIMIT 10",
      "SELECT sensor_name, reading_value, sensor_type FROM sensors JOIN temperature_readings ON sensors.id = temperature_readings.sensor_id WHERE reading_value < 20",
      "SELECT COUNT(*) AS total_sensors FROM sensors",
      "SELECT sensor_name, AVG(reading_value) AS avg_temp FROM sensors JOIN temperature_readings ON sensors.id = temperature_readings.sensor_id GROUP BY sensor_name HAVING avg_temp > 30",
      "SELECT COUNT(DISTINCT sensor_id) AS unique_sensors FROM temperature_readings",
      "SELECT * FROM temperature_readings WHERE sensor_id IN (SELECT id FROM sensors WHERE location = 'Room B')",
      "SELECT sensor_id, DATE(timestamp) AS date, MIN(reading_value) AS min_temp FROM temperature_readings GROUP BY sensor_id, DATE(timestamp)",
      "SELECT sensor_name, sensor_type, location FROM sensors LEFT JOIN sensor_types ON sensors.id = sensor_types.id",
      "SELECT * FROM humidity_readings WHERE timestamp < '2022-03-01'",
      "SELECT sensor_id, SUM(reading_value) AS total_temp FROM temperature_readings GROUP BY sensor_id HAVING total_temp > 100",
      "SELECT sensor_name, location FROM sensors WHERE sensor_name LIKE 'Temp%'",
      "SELECT DISTINCT sensor_id FROM temperature_readings ORDER BY sensor_id ASC LIMIT 5",
      "SELECT sensor_name, reading_value, timestamp FROM sensors JOIN temperature_readings ON sensors.id = temperature_readings.sensor_id WHERE sensor_type = 'Temperature'"
    ]
  },
  {
    "statements": [
      "SELECT * FROM temperature_readings;",
      "SELECT sensor_id, temperature FROM temperature_readings WHERE sensor_id = 1;",
      "SELECT AVG(temperature) AS avg_temperature FROM temperature_readings;",
      "SELECT * FROM humidity_readings;",
      "SELECT sensor_id, humidity FROM humidity_readings WHERE sensor_id = 2;",
      "SELECT AVG(humidity) AS avg_humidity FROM humidity_readings;",
      "SELECT * FROM sensors;",
      "SELECT sensor_id, location, installation_date FROM sensors WHERE sensor_id = 3;",
      "SELECT * FROM sensor_types;",
      "SELECT sensor_type_id, sensor_type_name FROM sensor_types;",
      "SELECT * FROM readings;",
      "SELECT reading_id, sensor_id, reading_type, value, timestamp FROM readings WHERE sensor_id = 4;",
      "SELECT MAX(value) AS max_value FROM readings WHERE reading_type = 'temperature';",
      "SELECT MIN(value) AS min_value FROM readings WHERE reading_type = 'humidity';",
      "SELECT sensor_id, MAX(value) AS max_value FROM readings WHERE sensor_id = 5;",
      "SELECT sensor_id, MIN(value) AS min_value FROM readings WHERE sensor_id = 6;",
      "SELECT sensor_id, reading_type, AVG(value) AS avg_value FROM readings GROUP BY sensor_id, reading_type;",
      "SELECT sensor_id, reading_type, COUNT(*) AS num_readings FROM readings GROUP BY sensor_id, reading_type;",
      "SELECT * FROM temperatures_readings UNION SELECT * FROM humidity_readings;",
      "SELECT sensor_id, reading_type, COUNT(*) AS num_readings FROM readings WHERE value > 50 GROUP BY sensor_id, reading_type;",
      "SELECT * FROM temperature_readings WHERE temperature > 25;",
      "SELECT sensor_id, temperature FROM temperature_readings WHERE sensor_id = 1;",
      "SELECT sensor_id, humidity FROM humidity_readings WHERE humidity < 50;",
      "SELECT * FROM sensors WHERE location = 'Room A';",
      "SELECT * FROM sensors WHERE installation_date > '2021-01-01';",
      "SELECT sensors.sensor_id, sensors.location, sensor_types.sensor_type_name FROM sensors JOIN sensor_types ON sensors.sensor_id = sensor_types.sensor_type_id;",
      "SELECT readings.sensor_id, readings.reading_type, readings.value, sensors.location FROM readings JOIN sensors ON readings.sensor_id = sensors.sensor_id;",
      "SELECT sensor_id, reading_type, AVG(value) AS avg_value FROM readings GROUP BY sensor_id, reading_type;",
      "SELECT sensor_id, reading_type, MAX(value) AS max_value FROM readings GROUP BY sensor_id, reading_type;",
      "SELECT sensor_id, location, COUNT(*) AS num_readings FROM readings JOIN sensors ON readings.sensor_id = sensors.sensor_id GROUP BY sensor_id, location;",
      "SELECT sensor_id, SUM(value) AS total_value FROM readings GROUP BY sensor_id HAVING total_value > 100;",
      "SELECT sensors.location, AVG(temperature) AS avg_temperature FROM temperature_readings JOIN sensors ON temperature_readings.sensor_id = sensors.sensor_id GROUP BY sensors.location;",
      "SELECT sensors.location, AVG(humidity) AS avg_humidity FROM humidity_readings JOIN sensors ON humidity_readings.sensor_id = sensors.sensor_id GROUP BY sensors.location;",
      "SELECT * FROM readings WHERE timestamp BETWEEN '2021-01-01' AND '2021-12-31';",
      "SELECT sensor_id, reading_type, MIN(value) AS min_value FROM readings GROUP BY sensor_id, reading_type;",
      "SELECT sensor_id, COUNT(*) AS num_readings FROM readings GROUP BY sensor_id HAVING num_readings > 10;",
      "SELECT sensors.location, sensor_types.sensor_type_name, COUNT(*) AS num_sensors FROM sensors JOIN sensor_types ON sensors.sensor_id = sensor_types.sensor_type_id GROUP BY sensors.location, sensor_types.sensor_type_name;",
      "SELECT sensor_id, reading_type, COUNT(*) AS num_readings FROM readings GROUP BY sensor_id, reading_type HAVING num_readings > 5;",
      "SELECT sensors.location, COUNT(*) AS num_sensors FROM sensors GROUP BY sensors.location HAVING num_sensors > 1;",
      "SELECT sensor_id, reading_type, AVG(value) AS avg_value FROM readings WHERE timestamp >= '2022-01-01' GROUP BY sensor_id, reading_type;"
    ]
  }
]