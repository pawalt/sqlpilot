[
  {
    "statements": [
      "SELECT * FROM financial_trends;",
      "SELECT id, date FROM financial_trends;",
      "SELECT revenue FROM financial_trends WHERE profit > 0;",
      "SELECT * FROM financial_trends WHERE date = '2022-01-01';",
      "SELECT id, revenue, expenses FROM financial_trends WHERE expenses > revenue;",
      "SELECT date, profit FROM financial_trends WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT * FROM financial_trends ORDER BY profit DESC;",
      "SELECT AVG(revenue) FROM financial_trends GROUP BY date;",
      "SELECT MAX(profit) FROM financial_trends;",
      "SELECT SUM(revenue) AS total_revenue FROM financial_trends;",
      "SELECT COUNT(*) FROM financial_trends WHERE profit > 0;",
      "SELECT * FROM financial_trends WHERE revenue > expenses AND profit > 0;",
      "SELECT id, profit FROM financial_trends WHERE date > '2022-01-15' AND profit > 0;",
      "SELECT date, AVG(expenses) FROM financial_trends GROUP BY date HAVING AVG(expenses) > 1000;",
      "SELECT * FROM financial_trends WHERE profit < 0;",
      "SELECT id, date, revenue, expenses, profit FROM financial_trends WHERE date < '2022-02-01';",
      "SELECT date, SUM(revenue) AS total_revenue FROM financial_trends GROUP BY date HAVING SUM(revenue) > 5000;",
      "SELECT MIN(profit) FROM financial_trends;",
      "SELECT * FROM financial_trends WHERE date < '2022-02-28' ORDER BY profit ASC;",
      "SELECT id, date, profit FROM financial_trends WHERE profit IS NOT NULL;",
      "SELECT id, date, revenue, expenses, profit FROM financial_trends;",
      "SELECT * FROM financial_trends WHERE revenue > expenses;",
      "SELECT AVG(revenue) AS avg_revenue FROM financial_trends;",
      "SELECT SUM(profit) AS total_profit FROM financial_trends WHERE date >= '2022-01-01';",
      "SELECT id, date, profit FROM financial_trends WHERE profit < 0;",
      "SELECT date, SUM(revenue) AS total_revenue FROM financial_trends GROUP BY date;",
      "SELECT * FROM financial_trends ORDER BY date DESC;",
      "SELECT id, date, profit FROM financial_trends WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT date, AVG(expenses) AS avg_expenses FROM financial_trends GROUP BY date HAVING AVG(expenses) > 5000;",
      "SELECT date, revenue, expenses, profit FROM financial_trends WHERE date >= '2022-01-01' AND date <= '2022-01-31';",
      "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses, SUM(profit) AS total_profit FROM financial_trends;",
      "SELECT MAX(revenue) AS max_revenue, MIN(expenses) AS min_expenses FROM financial_trends;",
      "SELECT COUNT(id) AS total_records FROM financial_trends;",
      "SELECT * FROM financial_trends WHERE profit = (SELECT MAX(profit) FROM financial_trends);",
      "SELECT date, profit FROM financial_trends WHERE profit > (SELECT AVG(profit) FROM financial_trends);",
      "SELECT DISTINCT date FROM financial_trends;",
      "SELECT id, date, revenue FROM financial_trends WHERE revenue = (SELECT MAX(revenue) FROM financial_trends);",
      "SELECT * FROM financial_trends WHERE profit < 0 ORDER BY profit ASC;",
      "SELECT id, date, profit FROM financial_trends WHERE profit > 0 UNION SELECT id, date, profit FROM financial_trends WHERE profit < 0;",
      "SELECT date, SUM(profit) AS total_profit FROM financial_trends GROUP BY date ORDER BY total_profit DESC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM financial_trends;",
      "SELECT id, date, revenue FROM financial_trends;",
      "SELECT id, expense FROM financial_trends WHERE revenue > 1000;",
      "SELECT * FROM customer_behavior;",
      "SELECT behavior_type, description FROM customer_behavior;",
      "SELECT * FROM financial_trends WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT id, behavior_type FROM customer_behavior WHERE customer_id = 123;",
      "SELECT id, behavior_type, description FROM customer_behavior WHERE id = 456;",
      "SELECT SUM(revenue) FROM financial_trends;",
      "SELECT AVG(expenses) FROM financial_trends;",
      "SELECT id, revenue, expenses FROM financial_trends WHERE revenue > expenses;",
      "SELECT id, behavior_type FROM customer_behavior ORDER BY behavior_type;",
      "SELECT id, customer_id FROM customer_behavior WHERE behavior_type = 'purchase';",
      "SELECT * FROM financial_trends ORDER BY date DESC LIMIT 5;",
      "SELECT MIN(revenue) FROM financial_trends;",
      "SELECT MAX(expenses) FROM financial_trends;",
      "SELECT id, description FROM customer_behavior WHERE description LIKE '%happy%';",
      "SELECT COUNT(*) FROM customer_behavior;",
      "SELECT id, behavior_type FROM customer_behavior WHERE customer_id IN (1, 2, 3);",
      "SELECT DISTINCT behavior_type FROM customer_behavior;",
      "SELECT id, SUM(revenue) AS total_revenue FROM financial_trends GROUP BY id HAVING total_revenue > 5000;",
      "SELECT * FROM financial_trends WHERE revenue > expenses;",
      "SELECT date, SUM(revenue) AS total_revenue FROM financial_trends GROUP BY date;",
      "SELECT customer_id, behavior_type FROM customer_behavior WHERE behavior_type = 'purchase';",
      "SELECT * FROM financial_trends WHERE date BETWEEN '2021-01-01' AND '2021-01-31';",
      "SELECT AVG(revenue) AS average_revenue FROM financial_trends;",
      "SELECT customer_id, COUNT(*) AS total_behavior FROM customer_behavior GROUP BY customer_id;",
      "SELECT * FROM financial_trends WHERE revenue > (SELECT MAX(revenue) FROM financial_trends);",
      "SELECT customer_id, COUNT(*) AS total_behavior FROM customer_behavior WHERE behavior_type = 'signup' GROUP BY customer_id HAVING COUNT(*) >= 5;",
      "SELECT * FROM financial_trends WHERE date >= '2020-01-01' AND date <= '2020-12-31';",
      "SELECT customer_id, behavior_type, COUNT(*) AS total_behavior FROM customer_behavior GROUP BY customer_id, behavior_type;",
      "SELECT * FROM financial_trends WHERE revenue > expenses AND date BETWEEN '2021-01-01' AND '2021-01-31';",
      "SELECT id, MAX(revenue) AS max_revenue FROM financial_trends GROUP BY id;",
      "SELECT behavior_type, COUNT(*) AS total_behavior FROM customer_behavior GROUP BY behavior_type;",
      "SELECT customer_id, AVG(revenue) AS average_revenue FROM financial_trends GROUP BY customer_id;",
      "SELECT customer_id, behavior_type, COUNT(*) AS total_behavior FROM customer_behavior WHERE behavior_type = 'click' GROUP BY customer_id, behavior_type;",
      "SELECT * FROM financial_trends WHERE revenue > expenses AND date >= '2020-01-01' AND date <= '2020-12-31';",
      "SELECT customer_id, SUM(revenue) AS total_revenue FROM financial_trends GROUP BY customer_id;",
      "SELECT id, DATE_FORMAT(date, '%Y-%m-%d') AS formatted_date FROM financial_trends;",
      "SELECT customer_id, behavior_type, COUNT(*) AS total_behavior FROM customer_behavior WHERE behavior_type = 'purchase' GROUP BY customer_id, behavior_type;",
      "SELECT * FROM financial_trends WHERE revenue IN (SELECT MAX(revenue) FROM financial_trends);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM financial_trends",
      "SELECT id, date, value FROM financial_trends",
      "SELECT trend_category FROM financial_trends",
      "SELECT id, date FROM financial_trends WHERE value > 1000",
      "SELECT * FROM customer_behavior",
      "SELECT customer_id, purchase_date, product_name FROM customer_behavior",
      "SELECT purchase_amount FROM customer_behavior WHERE customer_id = 123",
      "SELECT * FROM historical_data",
      "SELECT date, data_description FROM historical_data",
      "SELECT * FROM historical_data WHERE source = 'API'",
      "SELECT id, date, data_description FROM historical_data WHERE date BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT SUM(value) FROM financial_trends",
      "SELECT AVG(value) FROM financial_trends",
      "SELECT MAX(purchase_amount) FROM customer_behavior",
      "SELECT MIN(value) FROM financial_trends",
      "SELECT COUNT(*) FROM customer_behavior",
      "SELECT DISTINCT product_name FROM customer_behavior",
      "SELECT AVG(purchase_amount) FROM customer_behavior",
      "SELECT COUNT(DISTINCT customer_id) FROM customer_behavior",
      "SELECT date, COUNT(*) FROM historical_data GROUP BY date",
      "SELECT trend_category, AVG(value) FROM financial_trends GROUP BY trend_category",
      "SELECT * FROM financial_trends WHERE value > 1000",
      "SELECT date, trend_category FROM financial_trends WHERE date BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT COUNT(*) FROM customer_behavior WHERE purchase_amount > 500",
      "SELECT SUM(value) FROM financial_trends WHERE trend_category = 'Stocks'",
      "SELECT AVG(purchase_amount) FROM customer_behavior WHERE product_name LIKE 'Phone%'",
      "SELECT DISTINCT trend_category FROM financial_trends",
      "SELECT MAX(value) FROM financial_trends WHERE date > '2022-06-30'",
      "SELECT MIN(purchase_amount) FROM customer_behavior WHERE purchase_date = '2022-07-15'",
      "SELECT id, purchase_amount FROM customer_behavior WHERE customer_id = 123456",
      "SELECT source, COUNT(*) FROM historical_data GROUP BY source",
      "SELECT AVG(value) FROM financial_trends WHERE date < '2022-05-01'",
      "SELECT * FROM customer_behavior WHERE purchase_date = (SELECT MAX(purchase_date) FROM customer_behavior)",
      "SELECT MAX(value) FROM financial_trends WHERE trend_category = 'Cryptocurrency'",
      "SELECT * FROM historical_data WHERE id IN (SELECT id FROM financial_trends WHERE value > 2000)",
      "SELECT date, AVG(purchase_amount) FROM customer_behavior GROUP BY date",
      "SELECT MIN(value), MAX(value) FROM financial_trends WHERE date BETWEEN '2022-01-01' AND '2022-03-31'",
      "SELECT trend_category, COUNT(*) FROM financial_trends GROUP BY trend_category HAVING COUNT(*) > 5",
      "SELECT SUM(purchase_amount) FROM customer_behavior WHERE product_name = 'Laptop'",
      "SELECT * FROM financial_trends WHERE trend_category LIKE '%Economy%'",
      "SELECT AVG(value) FROM financial_trends WHERE date BETWEEN '2022-04-01' AND '2022-06-30'",
      "SELECT id, purchase_amount FROM customer_behavior WHERE purchase_amount = (SELECT MAX(purchase_amount) FROM customer_behavior)"
    ]
  },
  {
    "statements": [
      "SELECT * FROM financial_data;",
      "SELECT date, revenue, expenses, profit FROM financial_data;",
      "SELECT DISTINCT date FROM financial_data;",
      "SELECT revenue, expenses FROM financial_data WHERE profit > 1000;",
      "SELECT * FROM financial_data WHERE profit < 0;",
      "SELECT SUM(revenue) AS total_revenue FROM financial_data;",
      "SELECT AVG(profit) AS average_profit FROM financial_data;",
      "SELECT customer_name, email FROM customer_data;",
      "SELECT customer_id, loyalty_points FROM customer_data WHERE loyalty_points > 500;",
      "SELECT * FROM historical_trends;",
      "SELECT trend_description, trend_value FROM historical_trends;",
      "SELECT * FROM historical_trends WHERE trend_type = 'Sales';",
      "SELECT AVG(trend_value) AS average_trend_value FROM historical_trends;",
      "SELECT prediction_date, prediction_result FROM behavior_prediction;",
      "SELECT customer_id, prediction_result FROM behavior_prediction WHERE prediction_result = 'Churn';",
      "SELECT * FROM financial_data UNION SELECT * FROM historical_trends;",
      "SELECT * FROM customer_data UNION SELECT * FROM behavior_prediction;",
      "SELECT customer_id, customer_name FROM customer_data INNER JOIN behavior_prediction ON customer_data.customer_id = behavior_prediction.customer_id;",
      "SELECT c.customer_name, b.prediction_result FROM customer_data c INNER JOIN behavior_prediction b ON c.customer_id = b.customer_id;",
      "SELECT date, revenue, expenses, profit FROM financial_data WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT * FROM financial_data WHERE profit > 10000;",
      "SELECT customer_name, email FROM customer_data WHERE loyalty_points > 50;",
      "SELECT * FROM historical_trends WHERE trend_type = 'Sales';",
      "SELECT customer_id, prediction_date, prediction_result FROM behavior_prediction WHERE customer_id = 1001;",
      "SELECT date, revenue FROM financial_data WHERE expenses < 5000;",
      "SELECT customer_id, customer_name, email FROM customer_data WHERE loyalty_points > 100 ORDER BY customer_name ASC;",
      "SELECT * FROM historical_trends WHERE trend_value BETWEEN 50 AND 100;",
      "SELECT customer_id, customer_name, email FROM customer_data WHERE email LIKE '%@gmail.com';",
      "SELECT * FROM financial_data WHERE profit BETWEEN 5000 AND 10000;",
      "SELECT trend_id, trend_description FROM historical_trends WHERE LENGTH(trend_description) > 100;",
      "SELECT customer_id, customer_name, loyalty_points FROM customer_data WHERE loyalty_points > 200;",
      "SELECT * FROM behavior_prediction WHERE prediction_date = '2022-10-15';",
      "SELECT customer_id, prediction_result FROM behavior_prediction WHERE prediction_result = 'High';",
      "SELECT customer_id, customer_name, email FROM customer_data WHERE customer_name LIKE '%Smith%' AND email LIKE '%@yahoo.com';",
      "SELECT * FROM historical_trends WHERE trend_type = 'Marketing' AND trend_value > 100;",
      "SELECT customer_id, customer_name, email, loyalty_points FROM customer_data WHERE customer_id IN (1001, 1002, 1003);",
      "SELECT AVG(revenue) AS average_revenue FROM financial_data;",
      "SELECT customer_id, customer_name, email FROM customer_data WHERE loyalty_points > 50 OR email LIKE '%@hotmail.com';",
      "SELECT SUM(expenses) AS total_expenses FROM financial_data WHERE date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT prediction_id, prediction_date, prediction_result FROM behavior_prediction WHERE prediction_date BETWEEN '2022-10-01' AND '2022-11-30';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM financial_trends;",
      "SELECT id, trend_name, trend_value FROM financial_trends;",
      "SELECT * FROM customer_behavior;",
      "SELECT id, behavior_type FROM customer_behavior;",
      "SELECT * FROM historical_data;",
      "SELECT date, data_type, data_value FROM historical_data;",
      "SELECT * FROM forecasts;",
      "SELECT forecast_name, forecast_value FROM forecasts;",
      "SELECT * FROM trend_analysis;",
      "SELECT trend_id, analysis_type FROM trend_analysis;",
      "SELECT id, date FROM financial_trends WHERE trend_name = 'example';",
      "SELECT * FROM customer_behavior WHERE behavior_score > 0.5;",
      "SELECT data_type, data_value FROM historical_data WHERE date BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT forecast_name, forecast_value FROM forecasts WHERE date > '2022-03-01';",
      "SELECT analysis_type, analysis_result FROM trend_analysis WHERE trend_id = 1;",
      "SELECT id, trend_name, trend_value FROM financial_trends WHERE trend_value < 100;",
      "SELECT customer_id, behavior_type FROM customer_behavior WHERE customer_id = 123;",
      "SELECT data_type, data_value FROM historical_data WHERE data_type LIKE '%sales%';",
      "SELECT forecast_name, forecast_value FROM forecasts WHERE date <= '2022-05-01';",
      "SELECT analysis_type, analysis_result FROM trend_analysis WHERE analysis_result >= 0.8;",
      "SELECT * FROM financial_trends WHERE trend_name LIKE '%growth%';",
      "SELECT * FROM financial_trends WHERE date = '2022-01-01';",
      "SELECT trend_name, trend_value FROM financial_trends WHERE trend_value > 100000;",
      "SELECT * FROM customer_behavior WHERE behavior_score < 0.5 ORDER BY behavior_score DESC;",
      "SELECT id, data_type, data_value FROM historical_data WHERE date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT * FROM forecasts WHERE forecast_value BETWEEN 50 AND 100 ORDER BY forecast_value ASC;",
      "SELECT id, trend_id, analysis_type, analysis_result FROM trend_analysis WHERE trend_id = 5;",
      "SELECT trend_id, SUM(analysis_result) AS total_analysis FROM trend_analysis GROUP BY trend_id;",
      "SELECT behavior_type, AVG(behavior_score) AS avg_score FROM customer_behavior GROUP BY behavior_type HAVING AVG(behavior_score) > 0.7;",
      "SELECT date, trend_name, trend_value FROM financial_trends WHERE trend_name LIKE '%sales%';",
      "SELECT MAX(analysis_result) AS max_result FROM trend_analysis;",
      "SELECT * FROM historical_data WHERE data_type IN ('revenue', 'expenses');",
      "SELECT COUNT(*) AS total_records FROM forecasts;",
      "SELECT data_type, AVG(data_value) AS avg_value FROM historical_data GROUP BY data_type;",
      "SELECT COUNT(DISTINCT behavior_type) AS unique_behaviors FROM customer_behavior;",
      "SELECT trend_id, COUNT(*) AS analysis_count FROM trend_analysis GROUP BY trend_id HAVING COUNT(*) > 3;",
      "SELECT trend_name, ROUND(AVG(trend_value), 2) AS avg_trend_value FROM financial_trends GROUP BY trend_name;",
      "SELECT SUM(forecast_value) AS total_forecast_value FROM forecasts;",
      "SELECT date, trend_name, trend_value FROM financial_trends WHERE date = (SELECT MAX(date) FROM financial_trends);",
      "SELECT * FROM forecasts WHERE date = (SELECT MAX(date) FROM forecasts);"
    ]
  }
]