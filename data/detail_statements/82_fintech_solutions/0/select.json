[
  {
    "statements": [
      "SELECT * FROM transactions;",
      "SELECT transaction_id, amount FROM transactions WHERE transaction_date > '2022-01-01';",
      "SELECT transaction_id, customer_id FROM transactions WHERE amount > 1000;",
      "SELECT * FROM transactions WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT AVG(amount) AS avg_amount FROM transactions;",
      "SELECT MAX(amount) AS max_amount FROM transactions;",
      "SELECT MIN(amount) AS min_amount FROM transactions;",
      "SELECT transaction_id, transaction_date FROM transactions WHERE customer_id = '567e4567-e89b-12d3-a456-426614174000';",
      "SELECT COUNT(*) AS total_transactions FROM transactions;",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT transaction_id, customer_id, amount FROM transactions WHERE amount >= 500 AND amount <= 1000;",
      "SELECT * FROM transactions ORDER BY transaction_date DESC;",
      "SELECT DISTINCT customer_id FROM transactions;",
      "SELECT AVG(amount) AS avg_amount_per_customer, customer_id FROM transactions GROUP BY customer_id;",
      "SELECT customer_id, COUNT(transaction_id) AS total_transactions FROM transactions GROUP BY customer_id;",
      "SELECT SUM(amount) AS total_amount FROM transactions;",
      "SELECT customer_id FROM transactions GROUP BY customer_id HAVING COUNT(*) >= 5;",
      "SELECT transaction_id, amount, transaction_date FROM transactions WHERE customer_id IN ('123e4567-e89b-12d3-a456-426614174000', '456e4567-e89b-12d3-a456-426614174000');",
      "SELECT * FROM transactions LIMIT 10 OFFSET 5;",
      "SELECT customer_id, MAX(amount) AS max_amount FROM transactions GROUP BY customer_id;",
      "SELECT * FROM transactions WHERE customer_id = 'c12e03da-8e95-4c67-9c20-a6068ef0f7d9';",
      "SELECT customer_id, SUM(amount) AS total_amount FROM transactions GROUP BY customer_id;",
      "SELECT customer_id, transaction_date FROM transactions WHERE amount > 1000 AND transaction_date > '2022-01-01';",
      "SELECT transaction_id, customer_id, amount FROM transactions ORDER BY transaction_date DESC LIMIT 10;",
      "SELECT COUNT(*) AS total_transactions FROM transactions;",
      "SELECT * FROM transactions WHERE customer_id = '6f4d33a2-3b3d-4ffb-8549-40fb5cb643d4' AND transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT customer_id, AVG(amount) AS average_amount FROM transactions GROUP BY customer_id HAVING AVG(amount) > 500;",
      "SELECT DISTINCT customer_id FROM transactions;",
      "SELECT customer_id, MAX(amount) AS max_amount FROM transactions GROUP BY customer_id;",
      "SELECT * FROM transactions WHERE transaction_date = CURRENT_TIMESTAMP;",
      "SELECT transaction_id, customer_id FROM transactions WHERE amount = (SELECT MAX(amount) FROM transactions);",
      "SELECT * FROM transactions WHERE customer_id IN ('c12e03da-8e95-4c67-9c20-a6068ef0f7d9', '6f4d33a2-3b3d-4ffb-8549-40fb5cb643d4');",
      "SELECT AVG(amount) AS average_amount FROM transactions;",
      "SELECT customer_id, COUNT(*) AS total_transactions FROM transactions GROUP BY customer_id;",
      "SELECT * FROM transactions WHERE amount > 500 ORDER BY amount DESC;",
      "SELECT customer_id, MIN(amount) AS min_amount FROM transactions GROUP BY customer_id;",
      "SELECT * FROM transactions WHERE transaction_id LIKE '%abc%';",
      "SELECT transaction_id, amount FROM transactions WHERE amount > (SELECT AVG(amount) FROM transactions);",
      "SELECT * FROM transactions WHERE transaction_date > '2022-01-01' AND transaction_date < '2023-01-01';",
      "SELECT customer_id, transaction_date FROM transactions WHERE amount < 100 AND transaction_date BETWEEN '2022-01-01' AND '2022-06-30';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customer_transactions;",
      "SELECT customer_id, transaction_id, amount FROM customer_transactions;",
      "SELECT transaction_id, amount FROM customer_transactions WHERE customer_id = 123;",
      "SELECT * FROM customer_transactions WHERE transaction_date = '2022-01-01';",
      "SELECT account_id, customer_id, account_balance FROM account_information;",
      "SELECT account_id, account_balance FROM account_information WHERE customer_id = 456;",
      "SELECT customer_id, account_balance FROM account_information WHERE account_balance > 1000;",
      "SELECT * FROM account_information WHERE last_updated >= '2022-01-01 00:00:00';",
      "SELECT customer_id, transaction_id, amount FROM customer_transactions JOIN account_information ON customer_transactions.customer_id = account_information.customer_id;",
      "SELECT customer_id, transaction_id, amount FROM customer_transactions INNER JOIN account_information ON customer_transactions.customer_id = account_information.customer_id;",
      "SELECT customer_id, transaction_id, amount FROM customer_transactions LEFT JOIN account_information ON customer_transactions.customer_id = account_information.customer_id;",
      "SELECT customer_id, transaction_id, amount FROM customer_transactions RIGHT JOIN account_information ON customer_transactions.customer_id = account_information.customer_id;",
      "SELECT customer_id, transaction_id, amount FROM customer_transactions LEFT JOIN account_information ON customer_transactions.customer_id = account_information.customer_id WHERE account_id IS NULL;",
      "SELECT customer_id, transaction_id, amount FROM customer_transactions LEFT JOIN account_information ON customer_transactions.customer_id = account_information.customer_id WHERE account_id IS NOT NULL;",
      "SELECT customer_id, transaction_id, amount FROM customer_transactions LEFT JOIN account_information ON customer_transactions.customer_id = account_information.customer_id ORDER BY transaction_date ASC;",
      "SELECT customer_id, transaction_id, amount FROM customer_transactions LEFT JOIN account_information ON customer_transactions.customer_id = account_information.customer_id ORDER BY amount DESC;",
      "SELECT customer_id, COUNT(transaction_id) AS transaction_count FROM customer_transactions GROUP BY customer_id;",
      "SELECT customer_id, SUM(amount) AS total_amount FROM customer_transactions GROUP BY customer_id;",
      "SELECT account_id, MAX(account_balance) AS max_balance FROM account_information GROUP BY account_id;",
      "SELECT customer_id, AVG(amount) AS average_amount FROM customer_transactions GROUP BY customer_id;",
      "SELECT * FROM customer_transactions WHERE customer_id = 1000 AND transaction_date = '2022-01-01';",
      "SELECT customer_id, COUNT(transaction_id) AS transaction_count FROM customer_transactions GROUP BY customer_id;",
      "SELECT customer_id, account_balance FROM account_information WHERE account_balance > 10000.00;",
      "SELECT customer_id, SUM(amount) AS total_amount FROM customer_transactions GROUP BY customer_id HAVING total_amount > 5000.00;",
      "SELECT * FROM customer_transactions INNER JOIN account_information ON customer_transactions.customer_id = account_information.customer_id;",
      "SELECT customer_id, AVG(amount) AS avg_transaction_amount FROM customer_transactions GROUP BY customer_id;",
      "SELECT customer_id, MAX(amount) AS max_transaction_amount FROM customer_transactions GROUP BY customer_id;",
      "SELECT account_id, customer_id FROM account_information WHERE last_updated > '2022-01-01' ORDER BY last_updated DESC LIMIT 5;",
      "SELECT customer_id, COUNT(transaction_id) AS transaction_count, AVG(amount) AS avg_amount FROM customer_transactions GROUP BY customer_id HAVING transaction_count > 2 AND avg_amount < 1000.00;",
      "SELECT customer_id, transaction_id, amount, transaction_date FROM customer_transactions WHERE amount BETWEEN 500.00 AND 1000.00 ORDER BY amount DESC;",
      "SELECT customer_id, account_balance FROM account_information WHERE account_id IN (SELECT account_id FROM account_information WHERE customer_id = 1000);",
      "SELECT customer_id, SUM(amount) AS total_amount FROM customer_transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY customer_id HAVING total_amount > 2000.00;",
      "SELECT customer_id, account_balance FROM account_information WHERE account_balance < (SELECT AVG(account_balance) FROM account_information);",
      "SELECT customer_id, MAX(transaction_date) AS latest_transaction_date FROM customer_transactions GROUP BY customer_id;",
      "SELECT account_id, customer_id, account_balance FROM account_information WHERE account_id NOT IN (SELECT account_id FROM customer_transactions);",
      "SELECT customer_id, AVG(account_balance) AS avg_balance FROM account_information GROUP BY customer_id;",
      "SELECT customer_id, COUNT(transaction_id) AS total_transactions FROM customer_transactions GROUP BY customer_id ORDER BY total_transactions DESC LIMIT 3;",
      "SELECT customer_id, MIN(amount) AS min_transaction_amount, MAX(amount) AS max_transaction_amount FROM customer_transactions GROUP BY customer_id;",
      "SELECT customer_id, AVG(account_balance) AS avg_balance FROM account_information GROUP BY customer_id HAVING avg_balance > 5000.00;",
      "SELECT customer_id, transaction_id, amount FROM customer_transactions WHERE transaction_date = (SELECT MAX(transaction_date) FROM customer_transactions);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customer_transactions WHERE transaction_id = 1;",
      "SELECT * FROM customer_transactions WHERE customer_id = 10;",
      "SELECT transaction_id, amount FROM customer_transactions WHERE amount > 1000;",
      "SELECT * FROM customer_transactions WHERE transaction_date >= '2022-01-01';",
      "SELECT * FROM customer_accounts WHERE account_id = 5;",
      "SELECT customer_id, account_balance FROM customer_accounts WHERE account_balance < 5000;",
      "SELECT * FROM customer_accounts WHERE account_type = 'Savings';",
      "SELECT * FROM transactions_log WHERE log_id = 3;",
      "SELECT transaction_id, log_description FROM transactions_log WHERE log_date >= '2022-01-01';",
      "SELECT * FROM customer_transactions JOIN customer_accounts ON customer_transactions.customer_id = customer_accounts.customer_id;",
      "SELECT * FROM customer_transactions JOIN customer_accounts ON customer_transactions.customer_id = customer_accounts.customer_id WHERE account_balance > 5000;",
      "SELECT * FROM customer_accounts JOIN transactions_log ON customer_accounts.customer_id = transactions_log.transaction_id;",
      "SELECT customer_id, account_type FROM customer_accounts WHERE customer_id = 10;",
      "SELECT * FROM customer_transactions WHERE amount BETWEEN 500 AND 1000;",
      "SELECT account_id, account_balance FROM customer_accounts WHERE account_balance = 0;",
      "SELECT * FROM transactions_log WHERE log_date BETWEEN '2022-06-01' AND '2022-07-01';",
      "SELECT * FROM customer_transactions WHERE customer_id IN (1, 2, 3);",
      "SELECT account_id, SUM(account_balance) AS total_balance FROM customer_accounts GROUP BY account_id;",
      "SELECT COUNT(transaction_id) AS total_transactions FROM customer_transactions;",
      "SELECT AVG(amount) AS avg_amount FROM customer_transactions;",
      "SELECT transaction_id, customer_id, amount, transaction_date FROM customer_transactions WHERE customer_id = 1001;",
      "SELECT customer_id, SUM(amount) AS total_amount FROM customer_transactions GROUP BY customer_id;",
      "SELECT account_id, customer_id, account_balance FROM customer_accounts WHERE account_balance > 5000;",
      "SELECT * FROM customer_transactions JOIN customer_accounts ON customer_transactions.customer_id = customer_accounts.customer_id;",
      "SELECT * FROM customer_accounts JOIN customer_transactions ON customer_accounts.customer_id = customer_transactions.customer_id WHERE amount > 1000;",
      "SELECT customer_id, COUNT(*) AS transaction_count FROM customer_transactions GROUP BY customer_id HAVING COUNT(*) > 5;",
      "SELECT customer_id, AVG(account_balance) AS avg_balance FROM customer_accounts GROUP BY customer_id;",
      "SELECT customer_id, account_balance FROM customer_accounts WHERE account_type = 'Savings' ORDER BY account_balance DESC;",
      "SELECT customer_id, MAX(transaction_date) AS last_transaction_date FROM customer_transactions GROUP BY customer_id;",
      "SELECT customer_id, AVG(amount) AS avg_transaction_amount FROM customer_transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY customer_id;",
      "SELECT customer_id, MIN(account_balance) AS min_balance FROM customer_accounts GROUP BY customer_id;",
      "SELECT customer_id, COUNT(*) AS transaction_count FROM customer_transactions WHERE amount < 0 GROUP BY customer_id;",
      "SELECT customer_id, SUM(amount) AS total_debit FROM customer_transactions WHERE amount < 0 GROUP BY customer_id;",
      "SELECT customer_id, account_type, SUM(amount) AS total_amount FROM customer_accounts JOIN customer_transactions ON customer_accounts.customer_id = customer_transactions.customer_id GROUP BY customer_id, account_type;",
      "SELECT customer_id, COUNT(*) AS transaction_count, AVG(amount) AS avg_amount FROM customer_transactions WHERE transaction_date > '2021-06-01' GROUP BY customer_id HAVING AVG(amount) > 500;",
      "SELECT customer_id, MIN(account_balance) AS min_balance, MAX(account_balance) AS max_balance FROM customer_accounts GROUP BY customer_id;",
      "SELECT customer_id, transaction_date, log_description FROM customer_transactions JOIN transactions_log ON customer_transactions.transaction_id = transactions_log.transaction_id;",
      "SELECT customer_id, account_type, SUM(account_balance) AS total_balance FROM customer_accounts GROUP BY customer_id, account_type HAVING SUM(account_balance) > 10000;",
      "SELECT customer_id, AVG(account_balance) AS avg_balance FROM customer_accounts WHERE account_type = 'Checking' GROUP BY customer_id;",
      "SELECT customer_id, COUNT(*) AS transaction_count, MAX(transaction_date) AS last_transaction_date FROM customer_transactions GROUP BY customer_id HAVING COUNT(*) > 3;",
      "SELECT customer_id, AVG(amount) AS avg_amount FROM customer_transactions WHERE transaction_date > '2022-01-01' GROUP BY customer_id ORDER BY avg_amount DESC LIMIT 5;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_id, customer_name, customer_email FROM customers;",
      "SELECT customer_name, customer_phone FROM customers WHERE customer_id = 1;",
      "SELECT * FROM accounts;",
      "SELECT account_id, customer_id, account_type FROM accounts;",
      "SELECT account_id, balance FROM accounts WHERE customer_id = 1;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, account_id, amount FROM transactions;",
      "SELECT transaction_id, transaction_type, transaction_date FROM transactions WHERE account_id = 1;",
      "SELECT * FROM transaction_history;",
      "SELECT history_id, transaction_id, transaction_status FROM transaction_history;",
      "SELECT history_id, remark FROM transaction_history WHERE transaction_id = 1;",
      "SELECT customer_id, customer_name, account_type, balance FROM customers c JOIN accounts a ON c.customer_id = a.customer_id;",
      "SELECT customer_name, account_type, amount, transaction_date FROM customers c JOIN accounts a ON c.customer_id = a.customer_id JOIN transactions t ON a.account_id = t.account_id;",
      "SELECT c.customer_name, t.transaction_type, th.transaction_status, th.remark FROM customers c JOIN accounts a ON c.customer_id = a.customer_id JOIN transactions t ON a.account_id = t.account_id JOIN transaction_history th ON t.transaction_id = th.transaction_id;",
      "SELECT customer_name, account_type, SUM(balance) AS total_balance FROM customers c JOIN accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_name, account_type;",
      "SELECT customer_name, COUNT(transaction_id) AS num_transactions FROM customers c JOIN accounts a ON c.customer_id = a.customer_id JOIN transactions t ON a.account_id = t.account_id GROUP BY c.customer_name;",
      "SELECT customer_name, MAX(amount) AS max_transaction_amount FROM customers c JOIN accounts a ON c.customer_id = a.customer_id JOIN transactions t ON a.account_id = t.account_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, AVG(amount) AS avg_transaction_amount FROM customers c JOIN accounts a ON c.customer_id = a.customer_id JOIN transactions t ON a.account_id = t.account_id GROUP BY c.customer_name;",
      "SELECT * FROM customers WHERE customer_name LIKE 'A%' ORDER BY customer_id DESC;",
      "SELECT customer_name, customer_email FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id WHERE account_type = 'Savings';",
      "SELECT * FROM transactions WHERE amount > 10000 AND transaction_date > '2022-01-01';",
      "SELECT customer_name, balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id WHERE transaction_type = 'Deposit' AND amount > 5000;",
      "SELECT customer_name, SUM(amount) AS total_amount FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id GROUP BY customer_name;",
      "SELECT customer_name, AVG(balance) AS avg_balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_name HAVING avg_balance > 5000;",
      "SELECT T1.transaction_id, T1.amount, T2.transaction_status FROM transactions T1 LEFT JOIN transaction_history T2 ON T1.transaction_id = T2.transaction_id;",
      "SELECT customer_name, COUNT(DISTINCT account_type) AS num_account_types FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_name HAVING num_account_types > 1;",
      "SELECT customer_name, MAX(balance) AS max_balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_name ORDER BY max_balance DESC;",
      "SELECT customer_name, sum(amount) AS total_deposit_amount, sum(CASE WHEN transaction_type = 'Withdrawal' THEN amount ELSE 0 END) AS total_withdrawal_amount FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id GROUP BY customer_name;",
      "SELECT customer_name, MAX(balance) AS highest_balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_name HAVING highest_balance > 10000;",
      "SELECT customer_name, AVG(balance) AS avg_balance, COUNT(transaction_type) AS num_transactions FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id GROUP BY customer_name HAVING num_transactions > 5 ORDER BY avg_balance DESC;",
      "SELECT customer_name, transaction_date FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id WHERE transaction_date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT customer_name, MAX(balance) AS max_balance, MIN(balance) AS min_balance, SUM(balance) AS total_balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_name;",
      "SELECT customer_name, COUNT(transaction_type) AS num_transactions, AVG(amount) AS avg_transaction_amount FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id GROUP BY customer_name HAVING num_transactions > 3;",
      "SELECT customer_name, MAX(transaction_date) AS latest_transaction_date FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id GROUP BY customer_name;",
      "SELECT customer_name, AVG(balance) AS avg_balance, MIN(transaction_date) AS earliest_transaction_date FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id GROUP BY customer_name ORDER BY earliest_transaction_date ASC;",
      "SELECT customer_name, transaction_status, remark FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id JOIN transaction_history ON transactions.transaction_id = transaction_history.transaction_id WHERE transaction_date > '2022-01-01' AND transaction_status = 'Success';",
      "SELECT customer_name, transaction_type, amount, transaction_date FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id WHERE amount > 10000 AND transaction_date < '2022-03-01' AND transaction_type = 'Deposit';",
      "SELECT customer_name, account_type, balance, transaction_date FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id WHERE balance < 0;",
      "SELECT T1.customer_name, T2.transaction_type, T2.amount, T2.transaction_date FROM customers T1 JOIN accounts T3 ON T1.customer_id = T3.customer_id JOIN transactions T2 ON T3.account_id = T2.account_id WHERE T2.amount > 5000 AND T2.transaction_date > '2022-04-01';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customer_transactions WHERE transaction_id = 1001;",
      "SELECT customer_id, transaction_amount FROM customer_transactions WHERE transaction_date = '2022-01-01';",
      "SELECT account_id, account_balance FROM customer_accounts WHERE customer_id = 2001;",
      "SELECT * FROM customer_info WHERE customer_id = 3001;",
      "SELECT account_id, transaction_amount FROM account_transactions WHERE transaction_date = '2022-01-01';",
      "SELECT account_type, opening_date FROM account_details WHERE account_id = 4001;",
      "SELECT first_name, last_name, email FROM customer_info WHERE customer_id = 3002;",
      "SELECT * FROM customer_transactions WHERE customer_id = 2002;",
      "SELECT account_id, transaction_amount FROM account_transactions WHERE account_id = 4002;",
      "SELECT * FROM customer_accounts WHERE account_balance > 1000.00;",
      "SELECT first_name, last_name FROM customer_info WHERE email = 'test@example.com';",
      "SELECT * FROM account_details WHERE opening_date < '2022-01-01';",
      "SELECT account_id, account_type FROM account_details WHERE opening_date > '2022-01-01';",
      "SELECT customer_id, SUM(transaction_amount) AS total_amount FROM customer_transactions GROUP BY customer_id;",
      "SELECT customer_id, AVG(transaction_amount) AS average_amount FROM customer_transactions GROUP BY customer_id;",
      "SELECT account_id, MAX(transaction_amount) AS max_amount FROM account_transactions GROUP BY account_id;",
      "SELECT account_id, MIN(transaction_amount) AS min_amount FROM account_transactions GROUP BY account_id;",
      "SELECT COUNT(*) AS total_accounts FROM customer_accounts;",
      "SELECT COUNT(DISTINCT customer_id) AS unique_customers FROM customer_info;",
      "SELECT customer_id, COUNT(*) AS total_transactions FROM customer_transactions GROUP BY customer_id;",
      "SELECT * FROM customer_transactions WHERE transaction_amount > 1000;",
      "SELECT customer_id, COUNT(*) AS transaction_count FROM customer_transactions GROUP BY customer_id HAVING COUNT(*) > 5;",
      "SELECT customer_id, SUM(transaction_amount) AS total_amount FROM customer_transactions GROUP BY customer_id;",
      "SELECT * FROM customer_accounts JOIN customer_info ON customer_accounts.customer_id = customer_info.customer_id;",
      "SELECT * FROM customer_accounts WHERE customer_id IN (SELECT customer_id FROM customer_info WHERE first_name = 'John');",
      "SELECT * FROM customer_transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-02-28';",
      "SELECT customer_id, AVG(transaction_amount) AS avg_amount FROM customer_transactions GROUP BY customer_id HAVING AVG(transaction_amount) > 500;",
      "SELECT * FROM customer_accounts JOIN account_transactions ON customer_accounts.account_id = account_transactions.account_id;",
      "SELECT customer_id, MAX(transaction_amount) AS max_amount FROM customer_transactions GROUP BY customer_id;",
      "SELECT * FROM customer_info WHERE email LIKE '%@gmail.com';",
      "SELECT * FROM customer_transactions JOIN customer_accounts ON customer_transactions.customer_id = customer_accounts.customer_id JOIN account_details ON customer_accounts.account_id = account_details.account_id;",
      "SELECT * FROM customer_transactions WHERE customer_id = (SELECT customer_id FROM customer_info WHERE last_name = 'Smith');",
      "SELECT DISTINCT account_id, account_balance FROM customer_accounts;",
      "SELECT first_name, last_name FROM customer_info ORDER BY last_name ASC, first_name ASC;",
      "SELECT * FROM account_transactions WHERE transaction_amount < 0;",
      "SELECT * FROM customer_transactions WHERE transaction_date > '2022-03-15' AND customer_id IN (SELECT customer_id FROM customer_info WHERE first_name = 'Alice');",
      "SELECT customer_id, MIN(transaction_amount) AS min_amount FROM customer_transactions GROUP BY customer_id HAVING MIN(transaction_amount) < 100;",
      "SELECT * FROM customer_info WHERE customer_id NOT IN (SELECT customer_id FROM customer_accounts);",
      "SELECT * FROM account_details WHERE opening_date < '2022-01-01' ORDER BY opening_date ASC;",
      "SELECT COUNT(DISTINCT customer_id) AS unique_customers FROM customer_transactions;"
    ]
  }
]