[
  {
    "statements": [
      "SELECT * FROM table_name1;",
      "SELECT column1, column2 FROM table_name2;",
      "SELECT column1, column2 FROM table_name3 WHERE column1 = 'value';",
      "SELECT column1, SUM(column2) FROM table_name4 GROUP BY column1;",
      "SELECT DISTINCT column1 FROM table_name5;",
      "SELECT * FROM table_name6 WHERE column1 LIKE '%value%';",
      "SELECT column1, column2 FROM table_name7 ORDER BY column1 ASC;",
      "SELECT column1 FROM table_name8 WHERE column2 > 100;",
      "SELECT column1, column2, column3 FROM table_name9 LIMIT 10;",
      "SELECT column1, column2 FROM table_name10 OFFSET 5;",
      "SELECT * FROM table_name11 WHERE column1 IN ('value1', 'value2');",
      "SELECT column1, AVG(column2) FROM table_name12 GROUP BY column1 HAVING AVG(column2) > 50;",
      "SELECT * FROM table_name13 WHERE column1 IS NULL;",
      "SELECT COUNT(*) FROM table_name14;",
      "SELECT column1, column2 FROM table_name15 WHERE column1 BETWEEN 10 AND 50;",
      "SELECT column1, column2 FROM table_name16 WHERE column1 <> 'value';",
      "SELECT column1, SUM(column2) FROM table_name17 GROUP BY column1 HAVING SUM(column2) > 1000;",
      "SELECT column1, column2, column3 FROM table_name18 WHERE column1 = 'value' OR column2 = 100;",
      "SELECT column1, column2 FROM table_name19 WHERE column1 = 'value1' AND column2 = 'value2';",
      "SELECT * FROM table_name20 ORDER BY column1 DESC;",
      "SELECT * FROM table1 WHERE column1 = 'value' AND column2 > 100",
      "SELECT column1, column2, AVG(column3) FROM table2 GROUP BY column1 HAVING COUNT(*) > 5",
      "SELECT MAX(column1), MIN(column2) FROM table3 WHERE column3 LIKE '%keyword%'",
      "SELECT DISTINCT column1 FROM table4 ORDER BY column2 ASC LIMIT 10",
      "SELECT * FROM table5 WHERE column1 IN (SELECT column1 FROM subtable WHERE column2 = 'value')",
      "SELECT column1, COUNT(*), SUM(column2) FROM table6 GROUP BY column1 HAVING SUM(column2) > 1000",
      "SELECT column1, column2 FROM table7 WHERE column1 LIKE '%value1%' OR column2 LIKE '%value2%'",
      "SELECT * FROM table8 INNER JOIN table9 ON table8.column1 = table9.column1 WHERE table8.column2 = 'value'",
      "SELECT column1, column2 FROM table10 LEFT JOIN table11 ON table10.column1 = table11.column1 WHERE table11.column2 IS NULL",
      "SELECT AVG(column1), COUNT(*), MAX(column2) FROM table12 WHERE column3 BETWEEN 'date1' AND 'date2'",
      "SELECT column1, column2 FROM table13 WHERE column1 = 'value1' UNION SELECT column1, column2 FROM table13 WHERE column1 = 'value2'",
      "SELECT * FROM table14 WHERE column1 LIKE 'value%' AND (column2 = 'value1' OR column2 = 'value2')",
      "SELECT * FROM table15 WHERE column1 NOT IN ('value1', 'value2', 'value3')",
      "SELECT column1, column2 FROM table16 WHERE column1 = 'value' AND column2 <> 'value'",
      "SELECT AVG(column1) AS average, SUM(column2) AS total FROM table17",
      "SELECT column1, COUNT(*) AS total_records FROM table18 GROUP BY column1 HAVING COUNT(*) > 10",
      "SELECT column1, column2 FROM table19 UNION SELECT column1, column2 FROM table20",
      "SELECT column1, column2 FROM table21 INTERSECT SELECT column1, column2 FROM table22",
      "SELECT * FROM table23 EXCEPT SELECT * FROM table24",
      "SELECT * FROM table25 WHERE EXISTS (SELECT * FROM subtable WHERE subtable.column1 = table25.column1)"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT first_name, last_name FROM customers;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, transaction_date FROM transactions;",
      "SELECT customer_id, amount FROM transactions;",
      "SELECT first_name, last_name, email FROM customers;",
      "SELECT customer_id, first_name, last_name FROM customers WHERE customer_id > 100;",
      "SELECT * FROM transactions WHERE amount > 1000;",
      "SELECT * FROM customers WHERE last_name LIKE 'S%';",
      "SELECT customer_id, first_name, last_name, phone_number FROM customers;",
      "SELECT * FROM transactions WHERE product_name = 'Laptop';",
      "SELECT customer_id, transaction_date, amount FROM transactions WHERE amount < 500;",
      "SELECT first_name, last_name, email, phone_number FROM customers WHERE first_name = 'John';",
      "SELECT * FROM customers WHERE first_name = 'Alice' OR first_name = 'Bob';",
      "SELECT customer_id, product_name FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT customer_id, amount FROM transactions WHERE amount BETWEEN 500 AND 1000;",
      "SELECT * FROM customers ORDER BY last_name ASC;",
      "SELECT * FROM customers ORDER BY first_name DESC;",
      "SELECT SUM(amount) FROM transactions;",
      "SELECT AVG(amount) FROM transactions;",
      "SELECT * FROM customers;",
      "SELECT first_name, last_name, email FROM customers WHERE phone_number LIKE '+1%';",
      "SELECT COUNT(*) AS total_customers FROM customers;",
      "SELECT customer_id, first_name, last_name, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customer_id, first_name, last_name, transaction_date FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE amount >= 1000;",
      "SELECT customer_id, first_name, last_name, SUM(amount) AS total_spent FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_id;",
      "SELECT customer_id, first_name, last_name, AVG(amount) AS avg_transaction_amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_id;",
      "SELECT customer_id, first_name, last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM transactions WHERE amount > 500);",
      "SELECT customer_id, first_name, last_name, MAX(amount) AS max_transaction_amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_id;",
      "SELECT customer_id, first_name, last_name, MIN(amount) AS min_transaction_amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_id;",
      "SELECT customer_id, first_name, last_name, COUNT(transaction_id) AS total_transactions FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_id;",
      "SELECT customer_id, first_name, last_name, transaction_date FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id ORDER BY transaction_date DESC;",
      "SELECT customer_id, first_name, last_name, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transaction_date >= '2022-01-01' AND transaction_date <= '2022-12-31';",
      "SELECT customer_id, first_name, last_name, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE product_name LIKE '%shirt%';",
      "SELECT customer_id, first_name, last_name, amount, product_name FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE product_name IN ('Shoes', 'Pants');",
      "SELECT customer_id, first_name, last_name, transaction_date FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE EXTRACT(MONTH FROM transaction_date) = 12;",
      "SELECT customer_id, first_name, last_name, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE EXTRACT(YEAR FROM transaction_date) = 2022;",
      "SELECT customer_id, first_name, last_name, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE amount > (SELECT AVG(amount) FROM transactions);",
      "SELECT customer_id, first_name, last_name, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE customer_id NOT IN (SELECT customer_id FROM transactions WHERE amount <= 100);",
      "SELECT customer_id, first_name, last_name, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE customer_id = 1 AND transaction_date >= '2022-01-01' AND transaction_date <= '2022-12-31';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, customer_email FROM customers;",
      "SELECT customer_id, customer_name, customer_email FROM customers WHERE customer_id = 1;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, customer_id, transaction_date FROM transactions;",
      "SELECT transaction_id, amount FROM transactions WHERE amount > 100;",
      "SELECT * FROM preferences;",
      "SELECT preference_name, preference_value FROM preferences;",
      "SELECT preference_name, preference_value FROM preferences WHERE customer_id = 1;",
      "SELECT customer_name, transaction_date, amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customer_name, preference_name, preference_value FROM customers JOIN preferences ON customers.customer_id = preferences.customer_id;",
      "SELECT customers.customer_name, transactions.amount, preferences.preference_name FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id JOIN preferences ON customers.customer_id = preferences.customer_id;",
      "SELECT customers.customer_name, transactions.amount, preferences.preference_name FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id LEFT JOIN preferences ON customers.customer_id = preferences.customer_id;",
      "SELECT customers.customer_name, transactions.transaction_date, preferences.preference_value FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id LEFT JOIN preferences ON customers.customer_id = preferences.customer_id;",
      "SELECT customers.customer_name, transactions.amount * 0.9 AS discounted_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customers.customer_name, SUM(transactions.amount) AS total_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
      "SELECT customers.customer_name, AVG(transactions.amount) AS avg_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
      "SELECT customers.customer_name, COUNT(transactions.transaction_id) AS total_transactions FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_name, COUNT(transaction_id) AS total_transactions FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_name HAVING total_transactions > 5;",
      "SELECT customers.customer_name, MAX(transactions.amount) AS max_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, customer_email FROM customers WHERE customer_id = 1;",
      "SELECT transaction_id, transaction_date FROM transactions WHERE amount > 1000;",
      "SELECT customer_name, preference_name, preference_value FROM customers c JOIN preferences p ON c.customer_id = p.customer_id;",
      "SELECT customer_name, transaction_date, amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id;",
      "SELECT customer_name, customer_email, amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE amount > 500;",
      "SELECT COUNT(*) AS total_customers FROM customers;",
      "SELECT SUM(amount) AS total_amount FROM transactions;",
      "SELECT AVG(amount) AS avg_amount FROM transactions;",
      "SELECT customer_name, COUNT(*) AS total_transactions FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY customer_name;",
      "SELECT preference_name, COUNT(*) AS total_customers_using_preference FROM preferences GROUP BY preference_name;",
      "SELECT MAX(amount) AS max_amount FROM transactions;",
      "SELECT customer_name, MIN(amount) AS min_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY customer_name;",
      "SELECT customer_name, preference_name, preference_value FROM customers c JOIN preferences p ON c.customer_id = p.customer_id WHERE preference_name = 'theme';",
      "SELECT customer_name, customer_email, transaction_date, amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE customer_name LIKE '%John%';",
      "SELECT * FROM customers c WHERE EXISTS (SELECT * FROM transactions t WHERE c.customer_id = t.customer_id AND amount > 2000);",
      "SELECT customer_name, customer_phone, preference_value FROM customers c LEFT JOIN preferences p ON c.customer_id = p.customer_id;",
      "SELECT customer_name, transaction_date, amount FROM customers c RIGHT JOIN transactions t ON c.customer_id = t.customer_id;",
      "SELECT customer_name, transaction_date, preference_name FROM customers c FULL JOIN preferences p ON c.customer_id = p.customer_id;",
      "SELECT customer_name AS Customer, transaction_date AS Purchase_Date, amount AS Purchase_Amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, email FROM customers;",
      "SELECT customer_id, address FROM customers WHERE registration_date > '2021-01-01';",
      "SELECT customer_name, phone_number FROM customers WHERE customer_id = 1001;",
      "SELECT * FROM transactions;",
      "SELECT transaction_date, total_amount FROM transactions WHERE customer_id = 2001;",
      "SELECT customer_name, total_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id;",
      "SELECT * FROM preferences;",
      "SELECT preference_name, preference_value FROM preferences WHERE customer_id = 3001;",
      "SELECT customer_name, preference_name, preference_value FROM customers c JOIN preferences p ON c.customer_id = p.customer_id;",
      "SELECT * FROM logs;",
      "SELECT log_type, description FROM logs WHERE log_date > '2021-06-01';",
      "SELECT log_date, description FROM logs WHERE log_type = 'error';",
      "SELECT customer_id, log_type FROM customers c JOIN logs l ON c.customer_id = l.customer_id;",
      "SELECT customer_name, log_type, description FROM customers c JOIN logs l ON c.customer_id = l.customer_id WHERE log_type = 'warning';",
      "SELECT c.customer_id, c.customer_name, t.total_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.payment_method = 'credit';",
      "SELECT p.preference_name, l.description FROM preferences p JOIN logs l ON p.customer_id = l.log_id;",
      "SELECT c.customer_name, t.total_amount, l.log_type FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN logs l ON c.customer_id = l.customer_id;",
      "SELECT * FROM customers WHERE customer_id IN (1001, 1002, 1003);",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-06-30';",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, email, phone_number FROM customers WHERE registration_date >= '2022-01-01';",
      "SELECT customer_name, transaction_date, total_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.total_amount > 1000;",
      "SELECT preference_name, preference_value FROM customers JOIN preferences ON customers.customer_id = preferences.customer_id WHERE customers.customer_id = 3;",
      "SELECT customer_name, preference_name, preference_value FROM customers JOIN preferences ON customers.customer_id = preferences.customer_id WHERE preference_name = 'theme';",
      "SELECT customer_name, transaction_date, total_amount, payment_method FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE customers.address LIKE '%Ave%' ORDER BY transaction_date DESC;",
      "SELECT customer_name, transaction_id, total_amount, payment_method FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE customers.customer_id = 5 AND transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_name HAVING total_spent > 5000;",
      "SELECT customer_name, COUNT(transaction_id) AS total_transactions FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_name HAVING total_transactions >= 3;",
      "SELECT customer_name, AVG(total_amount) AS avg_spent FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE registration_date BETWEEN '2022-01-01' AND '2022-06-30' GROUP BY customer_name;",
      "SELECT MIN(total_amount) AS min_transaction_amount, MAX(total_amount) AS max_transaction_amount FROM transactions;",
      "SELECT customer_name, preference_name, preference_value FROM customers LEFT JOIN preferences ON customers.customer_id = preferences.customer_id;",
      "SELECT customer_name, transaction_date, total_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transaction_date <= CURDATE();",
      "SELECT customer_name, payment_method, SUM(total_amount) AS total_spent FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE payment_method = 'Credit Card' GROUP BY customer_name;",
      "SELECT customer_name, preference_name, preference_value FROM customers JOIN preferences ON customers.customer_id = preferences.customer_id ORDER BY preference_name, preference_value;",
      "SELECT customer_name, transaction_date, total_amount, payment_method FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.total_amount BETWEEN 500 AND 1000 ORDER BY transaction_date ASC;",
      "SELECT customer_name, count(log_id) AS total_logs FROM customers LEFT JOIN logs ON customers.customer_id = logs.log_id GROUP BY customer_name;",
      "SELECT customer_name, transaction_date, total_amount, payment_method FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transaction_date = '2022-10-15';",
      "SELECT customer_name, preference_name, preference_value FROM customers JOIN preferences ON customers.customer_id = preferences.customer_id WHERE preference_name IN ('theme', 'language');",
      "SELECT customer_name, transaction_date, total_amount, payment_method FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE customers.email LIKE '%gmail.com';",
      "SELECT customer_name, registration_date, DATEDIFF(CURDATE(), registration_date) AS days_since_registration FROM customers WHERE DATEDIFF(CURDATE(), registration_date) > 365;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT name, email FROM customers;",
      "SELECT customer_id, name, email FROM customers WHERE customer_id = 1;",
      "SELECT * FROM transactions;",
      "SELECT customer_id, SUM(amount) AS total_amount FROM transactions GROUP BY customer_id;",
      "SELECT * FROM products;",
      "SELECT name, category, price FROM products WHERE price > 100;",
      "SELECT * FROM preferences;",
      "SELECT customer_id, product_id, preference_score FROM preferences WHERE customer_id = 1;",
      "SELECT * FROM recommendations;",
      "SELECT customer_id, product_id, recommendation_score FROM recommendations WHERE customer_id = 1;",
      "SELECT c.name AS customer_name, p.name AS product_name, r.recommendation_score FROM customers c INNER JOIN recommendations r ON c.customer_id = r.customer_id INNER JOIN products p ON r.product_id = p.product_id;",
      "SELECT c.name AS customer_name, SUM(p.price * pr.preference_score) AS total_preference_value FROM customers c INNER JOIN preferences pr ON c.customer_id = pr.customer_id INNER JOIN products p ON pr.product_id = p.product_id GROUP BY c.customer_id;",
      "SELECT c.name AS customer_name, MAX(r.recommendation_score) AS highest_recommendation_score FROM customers c INNER JOIN recommendations r ON c.customer_id = r.customer_id GROUP BY c.customer_id;",
      "SELECT p.category, AVG(p.price) AS avg_price FROM products p GROUP BY p.category;",
      "SELECT c.customer_id, c.name, COUNT(r.product_id) AS num_recommendations FROM customers c LEFT JOIN recommendations r ON c.customer_id = r.customer_id GROUP BY c.customer_id;",
      "SELECT c.name AS customer_name, MAX(pr.preference_score) AS max_preference_score FROM customers c INNER JOIN preferences pr ON c.customer_id = pr.customer_id GROUP BY c.customer_id;",
      "SELECT p.name AS product_name, MAX(pr.preference_score) AS max_preference_score FROM products p INNER JOIN preferences pr ON p.product_id = pr.product_id GROUP BY p.product_id;",
      "SELECT COUNT(DISTINCT customer_id) AS num_customers FROM transactions;",
      "SELECT AVG(amount) AS avg_transaction_amount FROM transactions;",
      "SELECT * FROM customers;",
      "SELECT customers.name, customers.email, transactions.amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customers.name AS customer_name, transactions.amount AS transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.amount > 1000;",
      "SELECT customers.name, products.name AS product_name FROM customers JOIN preferences ON customers.customer_id = preferences.customer_id JOIN products ON preferences.product_id = products.product_id;",
      "SELECT customers.name, recommendations.recommendation_score FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id WHERE recommendations.recommendation_score > 80;",
      "SELECT customers.name, transactions.amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.transaction_date >= '2022-01-01';",
      "SELECT customers.name, products.name AS product_name, products.price FROM customers JOIN preferences ON customers.customer_id = preferences.customer_id JOIN products ON preferences.product_id = products.product_id WHERE products.price < 50;",
      "SELECT customers.name, SUM(transactions.amount) AS total_spent FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name;",
      "SELECT customers.name, COUNT(recommendations.product_id) AS num_recommendations FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id GROUP BY customers.name;",
      "SELECT customers.name, AVG(transactions.amount) AS average_transaction FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name HAVING AVG(transactions.amount) > 500;",
      "SELECT customers.name, products.category, AVG(preferences.preference_score) AS avg_preference_score FROM customers JOIN preferences ON customers.customer_id = preferences.customer_id JOIN products ON preferences.product_id = products.product_id GROUP BY customers.name, products.category;",
      "SELECT customers.name, recommendations.recommendation_score, products.name AS product_name, products.price FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id WHERE products.price < 100 ORDER BY recommendations.recommendation_score DESC;",
      "SELECT customers.name, transactions.amount, transactions.transaction_date FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id ORDER BY transactions.transaction_date DESC;",
      "SELECT customers.name, COUNT(DISTINCT products.category) AS num_categories FROM customers JOIN preferences ON customers.customer_id = preferences.customer_id JOIN products ON preferences.product_id = products.product_id;",
      "SELECT customers.name, MAX(recommendations.recommendation_score) AS max_recommendation_score FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id GROUP BY customers.name;",
      "SELECT customers.name, MIN(transactions.amount) AS min_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name;",
      "SELECT customers.name, SUM(transactions.amount) AS total_spent, AVG(transactions.amount) AS avg_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name;",
      "SELECT customers.name, products.name AS product_name, AVG(preferences.preference_score) AS avg_preference_score FROM customers JOIN preferences ON customers.customer_id = preferences.customer_id JOIN products ON preferences.product_id = products.product_id GROUP BY customers.name, products.name;",
      "SELECT customers.name, transactions.amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.amount >= (SELECT AVG(amount) FROM transactions);",
      "SELECT customers.name, products.name AS product_name, recommendations.recommendation_score FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id WHERE recommendations.recommendation_score >= 70 ORDER BY recommendations.recommendation_score DESC LIMIT 5;",
      "SELECT customers.name, transactions.amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.amount BETWEEN 100 AND 500;"
    ]
  }
]