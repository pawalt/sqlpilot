[
  {
    "statements": [
      "SELECT * FROM fashion_sales_data;",
      "SELECT product_name, unit_price FROM fashion_sales_data;",
      "SELECT product_id, category, quantity_sold FROM fashion_sales_data;",
      "SELECT * FROM fashion_sales_data WHERE category = 'Shoes';",
      "SELECT product_name, unit_price FROM fashion_sales_data WHERE quantity_sold > 100;",
      "SELECT product_id, product_name, unit_price FROM fashion_sales_data WHERE sale_date > '2022-01-01';",
      "SELECT COUNT(*) FROM fashion_sales_data;",
      "SELECT category, SUM(quantity_sold) AS total_quantity_sold FROM fashion_sales_data GROUP BY category;",
      "SELECT AVG(unit_price) AS avg_price FROM fashion_sales_data;",
      "SELECT MAX(unit_price) AS max_price FROM fashion_sales_data;",
      "SELECT MIN(unit_price) AS min_price FROM fashion_sales_data;",
      "SELECT product_name, unit_price FROM fashion_sales_data ORDER BY unit_price DESC;",
      "SELECT product_name, unit_price FROM fashion_sales_data ORDER BY unit_price ASC;",
      "SELECT product_name, category, quantity_sold FROM fashion_sales_data WHERE category IN ('Clothing', 'Accessories');",
      "SELECT product_name, category, quantity_sold FROM fashion_sales_data WHERE product_name LIKE '%dress%';",
      "SELECT DISTINCT category FROM fashion_sales_data;",
      "SELECT product_name, category, quantity_sold FROM fashion_sales_data LIMIT 10;",
      "SELECT product_name, category, quantity_sold FROM fashion_sales_data OFFSET 5;",
      "SELECT product_name, category, quantity_sold FROM fashion_sales_data WHERE quantity_sold BETWEEN 50 AND 100;",
      "SELECT * FROM fashion_sales_data WHERE category = 'Accessories' AND unit_price > 50;",
      "SELECT * FROM fashion_sales_data WHERE category = 'Shoes';",
      "SELECT product_name, SUM(unit_price * quantity_sold) AS total_sales FROM fashion_sales_data GROUP BY product_name;",
      "SELECT MAX(unit_price) AS highest_price FROM fashion_sales_data;",
      "SELECT * FROM fashion_sales_data WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT category, AVG(unit_price) AS avg_price FROM fashion_sales_data GROUP BY category;",
      "SELECT product_name, quantity_sold, unit_price, (unit_price * quantity_sold) AS revenue FROM fashion_sales_data ORDER BY revenue DESC;",
      "SELECT DISTINCT category FROM fashion_sales_data;",
      "SELECT product_name, category, quantity_sold FROM fashion_sales_data WHERE quantity_sold > 100;",
      "SELECT AVG(quantity_sold) AS avg_quantity FROM fashion_sales_data;",
      "SELECT product_name, unit_price, quantity_sold, (unit_price * quantity_sold) AS total_price FROM fashion_sales_data WHERE total_price > 1000;",
      "SELECT COUNT(*) AS total_records FROM fashion_sales_data;",
      "SELECT product_name, category, unit_price FROM fashion_sales_data WHERE unit_price > 50 ORDER BY unit_price ASC;",
      "SELECT category, SUM(quantity_sold) AS total_quantity_sold FROM fashion_sales_data GROUP BY category HAVING total_quantity_sold > 500;",
      "SELECT product_name, quantity_sold FROM fashion_sales_data WHERE quantity_sold > (SELECT AVG(quantity_sold) FROM fashion_sales_data);",
      "SELECT category, COUNT(*) AS total_products FROM fashion_sales_data GROUP BY category HAVING total_products > 5;",
      "SELECT MAX(quantity_sold) AS max_quantity_sold FROM fashion_sales_data;",
      "SELECT product_name, category, sale_date FROM fashion_sales_data WHERE sale_date = '2022-10-15';",
      "SELECT * FROM fashion_sales_data WHERE product_id IN (1, 3, 5, 7);",
      "SELECT AVG(unit_price) AS avg_price FROM fashion_sales_data WHERE category = 'Tops';",
      "SELECT DISTINCT sale_date FROM fashion_sales_data ORDER BY sale_date DESC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM SalesData;",
      "SELECT product_name, units_sold FROM SalesData;",
      "SELECT SUM(units_sold) FROM SalesData;",
      "SELECT AVG(sale_amount) FROM SalesData;",
      "SELECT product_name, sale_amount FROM SalesData WHERE units_sold > 100;",
      "SELECT * FROM Inventory;",
      "SELECT product_name, available_units FROM Inventory;",
      "SELECT MAX(available_units) FROM Inventory;",
      "SELECT MIN(available_units) FROM Inventory;",
      "SELECT product_name, last_updated FROM Inventory WHERE available_units < 50;",
      "SELECT * FROM SalesData JOIN Inventory ON SalesData.product_name = Inventory.product_name;",
      "SELECT SalesData.product_name, SUM(SalesData.units_sold) AS TotalUnitsSold FROM SalesData JOIN Inventory ON SalesData.product_name = Inventory.product_name GROUP BY SalesData.product_name;",
      "SELECT AVG(sale_amount) AS AvgSaleAmount FROM SalesData WHERE units_sold > 50;",
      "SELECT product_name, available_units FROM Inventory ORDER BY available_units DESC;",
      "SELECT DISTINCT product_name FROM Inventory;",
      "SELECT * FROM SalesData WHERE product_name LIKE 'A%';",
      "SELECT product_name, units_sold FROM SalesData WHERE units_sold BETWEEN 50 AND 100;",
      "SELECT product_name, available_units FROM Inventory WHERE last_updated > '2022-01-01';",
      "SELECT COUNT(*) AS TotalSales FROM SalesData;",
      "SELECT COUNT(DISTINCT product_name) AS TotalProducts FROM Inventory;",
      "SELECT product_name, units_sold FROM SalesData WHERE units_sold > 100",
      "SELECT * FROM SalesData INNER JOIN Inventory ON SalesData.product_name = Inventory.product_name",
      "SELECT product_name, SUM(sale_amount) AS total_sales FROM SalesData GROUP BY product_name",
      "SELECT product_name, AVG(units_sold) AS avg_units FROM SalesData GROUP BY product_name HAVING AVG(units_sold) > 50",
      "SELECT product_name, available_units FROM Inventory WHERE available_units < 10",
      "SELECT product_name, units_sold, sale_amount FROM SalesData WHERE sale_amount > 500 AND units_sold > 50",
      "SELECT product_name, units_sold, sale_amount FROM SalesData WHERE units_sold IN (50, 100, 150)",
      "SELECT COUNT(*) AS total_sales FROM SalesData",
      "SELECT product_name, sale_amount FROM SalesData ORDER BY sale_amount DESC",
      "SELECT product_name, units_sold FROM SalesData WHERE product_name LIKE '%apple%'",
      "SELECT product_name, units_sold FROM SalesData WHERE units_sold BETWEEN 50 AND 100",
      "SELECT product_name, units_sold FROM SalesData WHERE product_name = 'Banana' AND units_sold < 50",
      "SELECT product_name, units_sold FROM SalesData WHERE units_sold < (SELECT AVG(units_sold) FROM SalesData)",
      "SELECT product_name, units_sold FROM SalesData WHERE units_sold = (SELECT MAX(units_sold) FROM SalesData)",
      "SELECT product_name, units_sold FROM SalesData WHERE units_sold = (SELECT MIN(units_sold) FROM SalesData)",
      "SELECT product_name, sale_amount, last_updated FROM SalesData INNER JOIN Inventory ON SalesData.product_name = Inventory.product_name",
      "SELECT product_name, sale_amount FROM SalesData WHERE product_name IN (SELECT product_name FROM Inventory)",
      "SELECT product_name, sale_amount FROM SalesData WHERE product_name NOT IN (SELECT product_name FROM Inventory)",
      "SELECT product_name, SUM(units_sold) AS total_units_sold FROM SalesData GROUP BY product_name HAVING SUM(units_sold) > 200",
      "SELECT product_name, AVG(sale_amount) AS avg_sale_amount FROM SalesData GROUP BY product_name HAVING AVG(sale_amount) > 100"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Sales;",
      "SELECT product_name, sale_amount FROM Sales;",
      "SELECT sale_date FROM Sales WHERE sale_amount > 100;",
      "SELECT * FROM Inventory;",
      "SELECT product_name, stock_quantity FROM Inventory WHERE stock_quantity < 50;",
      "SELECT last_stock_update FROM Inventory WHERE product_name = 'Product A';",
      "SELECT * FROM Trends;",
      "SELECT trend_name, trend_end_date FROM Trends WHERE trend_start_date < '2022-01-01';",
      "SELECT trend_id, trend_name, trend_start_date, trend_end_date FROM Trends;",
      "SELECT * FROM Sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT product_name FROM Inventory WHERE last_stock_update > '2022-01-10' ORDER BY last_stock_update DESC;",
      "SELECT AVG(sale_amount) FROM Sales;",
      "SELECT MAX(stock_quantity) FROM Inventory;",
      "SELECT MIN(sale_amount) FROM Sales;",
      "SELECT COUNT(*) FROM Sales;",
      "SELECT SUM(sale_amount) FROM Sales;",
      "SELECT DISTINCT product_name FROM Inventory;",
      "SELECT COUNT(DISTINCT product_name) FROM Inventory;",
      "SELECT * FROM Sales WHERE sale_amount = (SELECT MAX(sale_amount) FROM Sales);",
      "SELECT * FROM Inventory WHERE stock_quantity = (SELECT MIN(stock_quantity) FROM Inventory);",
      "SELECT * FROM Sales WHERE sale_id = 1001;",
      "SELECT product_name, sale_amount FROM Sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT product_name, stock_quantity FROM Inventory WHERE product_name LIKE 'iPhone%';",
      "SELECT sale_id, sale_amount FROM Sales JOIN Inventory ON Sales.product_name = Inventory.product_name;",
      "SELECT MAX(sale_amount), MIN(sale_amount) FROM Sales;",
      "SELECT AVG(sale_amount) FROM Sales WHERE sale_date >= '2022-01-01';",
      "SELECT product_name, stock_quantity, last_stock_update FROM Inventory ORDER BY last_stock_update DESC;",
      "SELECT COUNT(*) as TotalSales FROM Sales WHERE sale_date >= '2022-01-01';",
      "SELECT DISTINCT product_name FROM Inventory;",
      "SELECT SUM(sale_amount) as TotalSales FROM Sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-03-01';",
      "SELECT trend_name, trend_start_date, trend_end_date FROM Trends WHERE trend_start_date BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT product_name, SUM(stock_quantity) as TotalStock FROM Inventory GROUP BY product_name;",
      "SELECT AVG(stock_quantity) as AvgStock FROM Inventory WHERE stock_quantity > 0;",
      "SELECT trend_name, COUNT(*) as TotalTrends FROM Trends GROUP BY trend_name;",
      "SELECT product_name, sale_amount FROM Sales WHERE sale_amount > 1000;",
      "SELECT trend_name, DATEDIFF(trend_end_date, trend_start_date) as TrendDuration FROM Trends;",
      "SELECT product_name, SUM(stock_quantity) as TotalStock FROM Inventory WHERE stock_quantity > 0 GROUP BY product_name HAVING TotalStock > 100;",
      "SELECT trend_name, COUNT(*) as TotalTrends FROM Trends WHERE trend_end_date < CURRENT_DATE();",
      "SELECT product_name, AVG(sale_amount) as AvgSale FROM Sales GROUP BY product_name HAVING AvgSale > 500;",
      "SELECT trend_name, MAX(trend_end_date) FROM Trends GROUP BY trend_name;",
      "SELECT DISTINCT product_name FROM Inventory WHERE stock_quantity < 10 ORDER BY last_stock_update ASC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM retailers;",
      "SELECT name, location FROM retailers;",
      "SELECT * FROM products;",
      "SELECT name, category, price FROM products;",
      "SELECT * FROM sales;",
      "SELECT product_id, sale_date, sale_amount FROM sales;",
      "SELECT * FROM trends;",
      "SELECT product_id, trend_description FROM trends;",
      "SELECT name, price FROM products WHERE category = 'Electronics';",
      "SELECT name, sale_date, sale_amount FROM sales WHERE retailer_id = 1;",
      "SELECT * FROM sales WHERE sale_amount > 100;",
      "SELECT name, trend_description FROM products INNER JOIN trends ON products.product_id = trends.product_id;",
      "SELECT name, category, sale_amount FROM products LEFT JOIN sales ON products.product_id = sales.product_id;",
      "SELECT DISTINCT category FROM products;",
      "SELECT name, price FROM products ORDER BY price DESC;",
      "SELECT name, location, sale_date FROM retailers JOIN sales ON retailers.retailer_id = sales.retailer_id;",
      "SELECT name, category, price, sale_amount FROM products JOIN sales ON products.product_id = sales.product_id;",
      "SELECT name, trend_description FROM products JOIN trends ON products.product_id = trends.product_id;",
      "SELECT name, trend_description FROM products LEFT JOIN trends ON products.product_id = trends.product_id;",
      "SELECT * FROM retailers WHERE location='New York';",
      "SELECT name, category, price FROM products WHERE price > 100;",
      "SELECT p.name, r.name AS retailer_name, s.sale_date FROM products p JOIN sales s ON p.product_id = s.product_id JOIN retailers r ON s.retailer_id = r.retailer_id;",
      "SELECT t.trend_id, p.name AS product_name, t.trend_description FROM trends t JOIN products p ON t.product_id = p.product_id;",
      "SELECT r.name AS retailer_name, COUNT(*) AS total_sales FROM sales s JOIN retailers r ON s.retailer_id = r.retailer_id GROUP BY r.name;",
      "SELECT p.name, SUM(s.sale_amount) AS total_sales_amount FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.name HAVING total_sales_amount > 1000;",
      "SELECT t.trend_description, COUNT(*) AS total_products FROM trends t JOIN products p ON t.product_id = p.product_id GROUP BY t.trend_description ORDER BY total_products DESC;",
      "SELECT r.name AS retailer_name, AVG(p.price) AS average_price FROM products p JOIN sales s ON p.product_id = s.product_id JOIN retailers r ON s.retailer_id = r.retailer_id GROUP BY r.name;",
      "SELECT p.name AS product_name, MAX(s.sale_amount) AS max_sale_amount FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.name ORDER BY max_sale_amount DESC;",
      "SELECT r.name AS retailer_name, COUNT(DISTINCT p.category) AS unique_categories FROM products p JOIN sales s ON p.product_id = s.product_id JOIN retailers r ON s.retailer_id = r.retailer_id GROUP BY r.name HAVING unique_categories > 1;",
      "SELECT p.name, COUNT(*) AS sale_count, SUM(p.quantity) AS total_quantity_sold FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.name HAVING total_quantity_sold > 100;",
      "SELECT r.name AS retailer_name, AVG(s.sale_amount) AS average_sale_amount FROM sales s JOIN retailers r ON s.retailer_id = r.retailer_id GROUP BY r.name HAVING average_sale_amount > 50;",
      "SELECT p.name, AVG(s.quantity) AS average_quantity_sold FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.name HAVING average_quantity_sold > 10;",
      "SELECT DISTINCT r.name AS retailer_name FROM retailers r JOIN sales s ON r.retailer_id = s.retailer_id JOIN products p ON p.product_id = s.product_id WHERE p.price < 50;",
      "SELECT p.name AS product_name, SUM(s.sale_amount) AS total_revenue FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.name ORDER BY total_revenue DESC;",
      "SELECT r.name AS retailer_name, SUM(p.quantity) AS total_units_sold FROM products p JOIN sales s ON p.product_id = s.product_id JOIN retailers r ON s.retailer_id = r.retailer_id GROUP BY r.name ORDER BY total_units_sold DESC;",
      "SELECT p.name AS product_name, COUNT(*) AS total_sales, MIN(s.sale_amount) AS min_sale_amount, MAX(s.sale_amount) AS max_sale_amount FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.name HAVING total_sales > 5;",
      "SELECT r.name AS retailer_name, SUM(s.sale_amount) AS total_sales_amount FROM sales s JOIN retailers r ON s.retailer_id = r.retailer_id GROUP BY r.name HAVING total_sales_amount < 5000;",
      "SELECT p.name AS product_name, AVG(s.sale_amount) AS average_sale_amount FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.name HAVING average_sale_amount > 20;",
      "SELECT r.name AS retailer_name, COUNT(*) AS total_sales FROM sales s JOIN retailers r ON s.retailer_id = r.retailer_id GROUP BY r.name HAVING total_sales < 10;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM retailers;",
      "SELECT id, name, location FROM retailers;",
      "SELECT * FROM products;",
      "SELECT id, name, price, category FROM products;",
      "SELECT * FROM sales;",
      "SELECT id, product_id, sale_date, quantity, amount FROM sales;",
      "SELECT * FROM trends;",
      "SELECT id, name FROM trends;",
      "SELECT * FROM inventory;",
      "SELECT id, product_id, quantity, last_updated FROM inventory;",
      "SELECT name, location FROM retailers WHERE industry = 'Clothing';",
      "SELECT name, price, category FROM products WHERE retailer_id = 1;",
      "SELECT product_id, sale_date, quantity FROM sales WHERE amount > 100;",
      "SELECT name, description FROM trends WHERE id = 1;",
      "SELECT * FROM inventory WHERE last_updated >= '2022-01-01';",
      "SELECT name, price FROM products WHERE price BETWEEN 50.00 AND 100.00;",
      "SELECT id, name, location FROM retailers ORDER BY name ASC;",
      "SELECT id, product_id, quantity FROM inventory ORDER BY quantity DESC;",
      "SELECT name, price FROM products WHERE category = 'Electronics' AND price < 500.00;",
      "SELECT id, product_id, sale_date FROM sales WHERE quantity >= 10;",
      "SELECT * FROM retailers;",
      "SELECT id, name, location, industry FROM retailers WHERE industry='Electronics';",
      "SELECT name, price FROM products WHERE price > 100;",
      "SELECT p.name AS product_name, s.sale_date AS date, s.quantity * s.amount AS total_amount FROM products p INNER JOIN sales s ON p.id = s.product_id;",
      "SELECT r.name AS retailer_name, SUM(s.quantity) AS total_quantity_sold FROM retailers r INNER JOIN products p ON r.id = p.retailer_id INNER JOIN sales s ON p.id = s.product_id GROUP BY r.name;",
      "SELECT p.name AS product_name, t.description AS trend_description FROM products p INNER JOIN trends t ON p.category = t.name;",
      "SELECT r.name AS retailer_name, i.quantity AS available_quantity FROM retailers r INNER JOIN products p ON r.id = p.retailer_id INNER JOIN inventory i ON p.id = i.product_id;",
      "SELECT r.name AS retailer_name, AVG(p.price) AS avg_product_price FROM retailers r INNER JOIN products p ON r.id = p.retailer_id GROUP BY r.name;",
      "SELECT r.name AS retailer_name, COUNT(*) AS total_products_sold FROM retailers r INNER JOIN products p ON r.id = p.retailer_id INNER JOIN sales s ON p.id = s.product_id GROUP BY r.name;",
      "SELECT t.name AS trend_name, COUNT(*) AS total_products_trended FROM trends t INNER JOIN products p ON t.name = p.category GROUP BY t.name;",
      "SELECT r.name AS retailer_name, MAX(s.sale_date) AS latest_sale_date FROM retailers r INNER JOIN products p ON r.id = p.retailer_id INNER JOIN sales s ON p.id = s.product_id GROUP BY r.name;",
      "SELECT r.name AS retailer_name, MIN(p.price) AS cheapest_product_price FROM retailers r INNER JOIN products p ON r.id = p.retailer_id GROUP BY r.name;",
      "SELECT t.name AS trend_name, AVG(p.price) AS avg_product_price FROM trends t INNER JOIN products p ON t.name = p.category GROUP BY t.name;",
      "SELECT r.name AS retailer_name, MIN(i.last_updated) AS earliest_inventory_update FROM retailers r INNER JOIN products p ON r.id = p.retailer_id INNER JOIN inventory i ON p.id = i.product_id GROUP BY r.name;",
      "SELECT p.category, SUM(s.quantity) AS total_quantity_sold, AVG(s.amount) AS avg_amount FROM products p INNER JOIN sales s ON p.id = s.product_id GROUP BY p.category;",
      "SELECT r.name AS retailer_name, COUNT(*) AS total_sales, SUM(s.quantity) AS total_quantity_sold, SUM(s.amount) AS total_sales_amount FROM retailers r INNER JOIN products p ON r.id = p.retailer_id INNER JOIN sales s ON p.id = s.product_id GROUP BY r.name;",
      "SELECT t.name AS trend_name, COUNT(DISTINCT p.retailer_id) AS total_retailers_trending FROM trends t INNER JOIN products p ON t.name = p.category GROUP BY t.name;",
      "SELECT r.name AS retailer_name, COUNT(*) AS total_products, SUM(i.quantity) AS total_inventory_quantity FROM retailers r INNER JOIN products p ON r.id = p.retailer_id INNER JOIN inventory i ON p.id = i.product_id GROUP BY r.name;",
      "SELECT p.name AS product_name, COUNT(s.id) AS total_sales FROM products p LEFT JOIN sales s ON p.id = s.product_id GROUP BY p.name;",
      "SELECT r.name AS retailer_name, AVG(s.amount) AS avg_sale_amount FROM retailers r INNER JOIN products p ON r.id = p.retailer_id INNER JOIN sales s ON p.id = s.product_id GROUP BY r.name;"
    ]
  }
]