[
  {
    "statements": [
      "SELECT * FROM FashionTrends;",
      "SELECT trend_name, season FROM FashionTrends;",
      "SELECT * FROM FashionTrends WHERE year = 2022;",
      "SELECT trend_name, year FROM FashionTrends WHERE season = 'Summer';",
      "SELECT DISTINCT season FROM FashionTrends;",
      "SELECT * FROM FashionTrends ORDER BY year;",
      "SELECT trend_name, trend_description FROM FashionTrends WHERE year > 2020;",
      "SELECT * FROM FashionTrends WHERE id = 5;",
      "SELECT COUNT(*) FROM FashionTrends;",
      "SELECT trend_name, season, year FROM FashionTrends WHERE season = 'Fall' AND year > 2019;",
      "SELECT MAX(year) FROM FashionTrends;",
      "SELECT MIN(year) FROM FashionTrends;",
      "SELECT trend_name, season, year FROM FashionTrends ORDER BY year DESC;",
      "SELECT COUNT(DISTINCT season) FROM FashionTrends;",
      "SELECT * FROM FashionTrends WHERE trend_description IS NULL;",
      "SELECT AVG(year) FROM FashionTrends;",
      "SELECT trend_name, season FROM FashionTrends WHERE trend_name LIKE '%sneakers%';",
      "SELECT * FROM FashionTrends WHERE season IN ('Spring', 'Summer');",
      "SELECT trend_name, year FROM FashionTrends WHERE year >= 2018 AND year <= 2020;",
      "SELECT * FROM FashionTrends WHERE trend_description LIKE '%vintage%';",
      "SELECT * FROM FashionTrends WHERE season = 'Summer' AND year = 2022;",
      "SELECT trend_name, season FROM FashionTrends WHERE trend_description IS NOT NULL;",
      "SELECT COUNT(*) AS total_trends FROM FashionTrends WHERE year >= 2020;",
      "SELECT AVG(year) AS avg_year FROM FashionTrends;",
      "SELECT DISTINCT season FROM FashionTrends;",
      "SELECT trend_name, COUNT(*) AS trend_count FROM FashionTrends GROUP BY trend_name;",
      "SELECT trend_name, trend_description FROM FashionTrends WHERE trend_name LIKE 'Casual%';",
      "SELECT * FROM FashionTrends WHERE trend_description ILIKE '%vibrant%';",
      "SELECT * FROM FashionTrends WHERE year IN (2020, 2021, 2022);",
      "SELECT trend_name, season, year FROM FashionTrends WHERE season = 'Spring' OR season = 'Fall';",
      "SELECT trend_name, trend_description FROM FashionTrends WHERE year BETWEEN 2018 AND 2021;",
      "SELECT * FROM FashionTrends WHERE year < 2019 ORDER BY year DESC;",
      "SELECT trend_name, season, COUNT(*) AS trend_count FROM FashionTrends GROUP BY trend_name, season;",
      "SELECT DISTINCT year FROM FashionTrends ORDER BY year DESC;",
      "SELECT * FROM FashionTrends WHERE trend_name = 'Vintage' AND (season = 'Spring' OR season = 'Fall');",
      "SELECT SUM(year) AS total_years FROM FashionTrends;",
      "SELECT trend_name, COUNT(*) AS trend_count FROM FashionTrends GROUP BY trend_name HAVING COUNT(*) > 1;",
      "SELECT trend_name, season FROM FashionTrends WHERE trend_description IS NOT NULL AND trend_description <> '';",
      "SELECT AVG(year) AS avg_year, MAX(year) AS max_year, MIN(year) AS min_year FROM FashionTrends WHERE season = 'Summer';",
      "SELECT * FROM FashionTrends WHERE trend_description IS NULL OR trend_description = '';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM fashion_trends;",
      "SELECT trend_name, start_date FROM fashion_trends;",
      "SELECT forecast_id, trend_id, forecast_date FROM trend_forecast;",
      "SELECT trend_name, start_date, end_date FROM fashion_trends WHERE trend_id = 1;",
      "SELECT forecast_text FROM trend_forecast WHERE trend_id = 2;",
      "SELECT * FROM fashion_trends WHERE start_date > '2022-01-01';",
      "SELECT trend_name FROM fashion_trends WHERE end_date < '2023-01-01';",
      "SELECT forecast_id, forecast_date, forecast_text FROM trend_forecast WHERE trend_id = 3;",
      "SELECT * FROM fashion_trends WHERE trend_name LIKE '%summer%';",
      "SELECT forecast_text FROM trend_forecast WHERE forecast_date = '2022-05-25';",
      "SELECT trend_name, start_date FROM fashion_trends ORDER BY start_date ASC;",
      "SELECT forecast_id, trend_id, forecast_date FROM trend_forecast ORDER BY forecast_date DESC;",
      "SELECT trend_name, start_date FROM fashion_trends LIMIT 5;",
      "SELECT forecast_id, trend_id, forecast_date FROM trend_forecast LIMIT 10;",
      "SELECT * FROM fashion_trends WHERE start_date = '2022-06-15' AND end_date = '2022-09-15';",
      "SELECT forecast_text FROM trend_forecast WHERE forecast_date BETWEEN '2022-07-01' AND '2022-09-30';",
      "SELECT trend_name FROM fashion_trends WHERE trend_id IN (1, 2, 3);",
      "SELECT forecast_id, trend_id, forecast_date FROM trend_forecast WHERE trend_id = 1 OR trend_id = 2;",
      "SELECT * FROM fashion_trends WHERE start_date < '2022-07-01' AND end_date > '2022-09-30';",
      "SELECT trend_name, end_date FROM fashion_trends WHERE trend_name = 'Fall 2022';",
      "SELECT * FROM fashion_trends WHERE start_date > '2022-01-01'",
      "SELECT trend_name, start_date, end_date FROM fashion_trends WHERE trend_name LIKE '%summer%'",
      "SELECT f.forecast_text, t.trend_name FROM fashion_trends t INNER JOIN trend_forecast f ON t.trend_id = f.trend_id",
      "SELECT COUNT(*) AS total_forecasts FROM trend_forecast WHERE forecast_date BETWEEN '2022-06-01' AND '2022-12-31'",
      "SELECT DISTINCT trend_name FROM fashion_trends WHERE start_date < '2023-01-01'",
      "SELECT t.trend_name, f.forecast_text FROM fashion_trends t LEFT JOIN trend_forecast f ON t.trend_id = f.trend_id",
      "SELECT AVG(DATEDIFF(end_date, start_date)) AS avg_trend_duration FROM fashion_trends",
      "SELECT trend_name, COUNT(forecast_id) AS num_forecasts FROM fashion_trends t LEFT JOIN trend_forecast f ON t.trend_id = f.trend_id GROUP BY trend_name",
      "SELECT trend_name, start_date, end_date FROM fashion_trends ORDER BY start_date DESC LIMIT 5",
      "SELECT trend_name, forecast_text FROM fashion_trends t INNER JOIN trend_forecast f ON t.trend_id = f.trend_id WHERE forecast_text LIKE '%trendy%'",
      "SELECT trend_name, start_date, end_date, forecast_text FROM fashion_trends t LEFT JOIN trend_forecast f ON t.trend_id = f.trend_id WHERE forecast_date > '2022-12-31'",
      "SELECT t.trend_name, COUNT(f.forecast_id) AS num_forecasts FROM fashion_trends t INNER JOIN trend_forecast f ON t.trend_id = f.trend_id GROUP BY t.trend_name HAVING num_forecasts > 5",
      "SELECT forecast_id, trend_name FROM trend_forecast f INNER JOIN fashion_trends t ON f.trend_id = t.trend_id",
      "SELECT MAX(DATEDIFF(end_date, start_date)) AS max_trend_duration FROM fashion_trends",
      "SELECT trend_name, SUM(DATEDIFF(end_date, start_date)) AS total_duration FROM fashion_trends GROUP BY trend_name ORDER BY total_duration DESC",
      "SELECT t.trend_name, COUNT(f.forecast_id) AS num_forecasts FROM fashion_trends t INNER JOIN trend_forecast f ON t.trend_id = f.trend_id GROUP BY t.trend_name ORDER BY num_forecasts DESC LIMIT 3",
      "SELECT DISTINCT trend_name FROM fashion_trends WHERE end_date < '2022-12-31'",
      "SELECT trend_name, AVG(DATEDIFF(end_date, start_date)) AS avg_duration FROM fashion_trends GROUP BY trend_name ORDER BY avg_duration DESC",
      "SELECT t.trend_name, COUNT(f.forecast_id) AS num_forecasts FROM fashion_trends t LEFT JOIN trend_forecast f ON t.trend_id = f.trend_id GROUP BY t.trend_name ORDER BY num_forecasts ASC",
      "SELECT trend_name, start_date, end_date FROM fashion_trends WHERE trend_id IN (SELECT trend_id FROM trend_forecast WHERE forecast_date > '2022-12-31')"
    ]
  },
  {
    "statements": [
      "SELECT * FROM FashionTrends;",
      "SELECT trend_name, trend_start_date, trend_end_date FROM FashionTrends;",
      "SELECT * FROM HistoricalData;",
      "SELECT year, sales_volume FROM HistoricalData;",
      "SELECT * FROM TrendForecasts;",
      "SELECT trend_id, forecast_date, forecast_description FROM TrendForecasts;",
      "SELECT * FROM FashionTrends WHERE id = 1;",
      "SELECT * FROM HistoricalData WHERE sales_volume > 1000;",
      "SELECT * FROM TrendForecasts WHERE forecast_date > '2022-01-01';",
      "SELECT trend_name FROM FashionTrends WHERE trend_start_date > '2022-01-01';",
      "SELECT trend_description FROM FashionTrends WHERE trend_end_date < '2022-12-31';",
      "SELECT trend_id, SUM(sales_volume) AS total_sales FROM HistoricalData GROUP BY trend_id;",
      "SELECT trend_id, COUNT(*) AS total_forecasts FROM TrendForecasts GROUP BY trend_id;",
      "SELECT trend_name, forecast_date, forecast_description FROM FashionTrends INNER JOIN TrendForecasts ON FashionTrends.id = TrendForecasts.trend_id;",
      "SELECT trend_name, trend_description, year, sales_volume FROM FashionTrends INNER JOIN HistoricalData ON FashionTrends.id = HistoricalData.trend_id;",
      "SELECT trend_name, trend_start_date, forecast_date, forecast_description FROM FashionTrends INNER JOIN TrendForecasts ON FashionTrends.id = TrendForecasts.trend_id;",
      "SELECT ft.trend_name, hd.sales_volume, tf.forecast_description FROM FashionTrends ft INNER JOIN HistoricalData hd ON ft.id = hd.trend_id INNER JOIN TrendForecasts tf ON ft.id = tf.trend_id;",
      "SELECT ft.trend_name, COUNT(hd.year) AS num_years FROM FashionTrends ft LEFT JOIN HistoricalData hd ON ft.id = hd.trend_id GROUP BY ft.id;",
      "SELECT ft.trend_name, MAX(hd.sales_volume) AS max_sales FROM FashionTrends ft LEFT JOIN HistoricalData hd ON ft.id = hd.trend_id GROUP BY ft.id;",
      "SELECT ft.trend_name, MIN(tf.forecast_date) AS earliest_forecast_date FROM FashionTrends ft LEFT JOIN TrendForecasts tf ON ft.id = tf.trend_id GROUP BY ft.id;",
      "SELECT * FROM FashionTrends;",
      "SELECT trend_name, trend_start_date FROM FashionTrends WHERE trend_end_date > '2021-12-31';",
      "SELECT trend_name, COUNT(*) AS num_forecasts FROM FashionTrends INNER JOIN TrendForecasts ON FashionTrends.id = TrendForecasts.trend_id GROUP BY trend_name;",
      "SELECT trend_name, COUNT(*) AS num_years FROM FashionTrends INNER JOIN HistoricalData ON FashionTrends.id = HistoricalData.trend_id GROUP BY trend_name HAVING num_years > 5;",
      "SELECT trend_name, MAX(sales_volume) AS max_sales FROM FashionTrends INNER JOIN HistoricalData ON FashionTrends.id = HistoricalData.trend_id GROUP BY trend_name;",
      "SELECT trend_name, forecast_date, forecast_description FROM FashionTrends INNER JOIN TrendForecasts ON FashionTrends.id = TrendForecasts.trend_id WHERE forecast_date > '2022-01-01';",
      "SELECT DISTINCT trend_name FROM FashionTrends INNER JOIN HistoricalData ON FashionTrends.id = HistoricalData.trend_id WHERE sales_volume > 1000;",
      "SELECT trend_name, AVG(sales_volume) AS avg_sales FROM FashionTrends INNER JOIN HistoricalData ON FashionTrends.id = HistoricalData.trend_id GROUP BY trend_name HAVING avg_sales > 500;",
      "SELECT trend_name, trend_start_date, COUNT(*) AS num_forecasts FROM FashionTrends INNER JOIN TrendForecasts ON FashionTrends.id = TrendForecasts.trend_id GROUP BY trend_name HAVING num_forecasts < 3;",
      "SELECT trend_name, trend_end_date FROM FashionTrends WHERE trend_end_date IS NOT NULL;",
      "SELECT trend_name, MAX(sales_volume) AS max_sales, year FROM FashionTrends INNER JOIN HistoricalData ON FashionTrends.id = HistoricalData.trend_id GROUP BY trend_name, year;",
      "SELECT trend_name, forecast_date FROM FashionTrends INNER JOIN TrendForecasts ON FashionTrends.id = TrendForecasts.trend_id ORDER BY forecast_date DESC;",
      "SELECT trend_name, trend_start_date, sales_volume FROM FashionTrends INNER JOIN HistoricalData ON FashionTrends.id = HistoricalData.trend_id WHERE sales_volume > 500 ORDER BY trend_start_date;",
      "SELECT trend_name, forecast_description FROM FashionTrends INNER JOIN TrendForecasts ON FashionTrends.id = TrendForecasts.trend_id WHERE forecast_description LIKE '%positive%';",
      "SELECT trend_name, trend_start_date, year FROM FashionTrends INNER JOIN HistoricalData ON FashionTrends.id = HistoricalData.trend_id WHERE year = 2020;",
      "SELECT trend_name, trend_end_date, forecast_date FROM FashionTrends INNER JOIN TrendForecasts ON FashionTrends.id = TrendForecasts.trend_id WHERE forecast_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT trend_name, trend_start_date, sales_volume AS last_year_sales FROM FashionTrends INNER JOIN HistoricalData ON FashionTrends.id = HistoricalData.trend_id WHERE year = YEAR(NOW()) - 1;",
      "SELECT trend_name, AVG(sales_volume) AS avg_sales FROM FashionTrends INNER JOIN HistoricalData ON FashionTrends.id = HistoricalData.trend_id GROUP BY trend_name HAVING avg_sales BETWEEN 200 AND 500;",
      "SELECT trend_name, trend_start_date, trend_end_date, sales_volume FROM FashionTrends INNER JOIN HistoricalData ON FashionTrends.id = HistoricalData.trend_id WHERE sales_volume > 1000 AND trend_start_date BETWEEN '2021-01-01' AND '2021-12-31';",
      "SELECT trend_name, trend_start_date, trend_end_date, forecast_date FROM FashionTrends INNER JOIN TrendForecasts ON FashionTrends.id = TrendForecasts.trend_id WHERE forecast_date > '2022-01-01' AND trend_start_date < '2022-01-01';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM fashion_trends;",
      "SELECT trend_name, trend_category FROM fashion_trends WHERE trend_start_date > '2021-01-01';",
      "SELECT trend_name, trend_description FROM fashion_trends WHERE trend_category = 'Casual';",
      "SELECT trend_name, trend_start_date, trend_end_date FROM fashion_trends WHERE trend_end_date < '2022-01-01';",
      "SELECT trend_name, trend_start_date, trend_end_date FROM fashion_trends WHERE trend_name LIKE '%Summer%';",
      "SELECT * FROM historical_data;",
      "SELECT trend_name, data_date, data_value FROM fashion_trends JOIN historical_data ON fashion_trends.trend_id = historical_data.trend_id;",
      "SELECT trend_name, data_date, data_value FROM fashion_trends JOIN historical_data ON fashion_trends.trend_id = historical_data.trend_id WHERE data_date = '2021-06-15';",
      "SELECT trend_name, data_date, data_value FROM fashion_trends JOIN historical_data ON fashion_trends.trend_id = historical_data.trend_id WHERE data_value > 100;",
      "SELECT * FROM trend_forecast;",
      "SELECT trend_name, forecast_date, forecast_value FROM fashion_trends JOIN trend_forecast ON fashion_trends.trend_id = trend_forecast.trend_id;",
      "SELECT forecast_date, forecast_value FROM trend_forecast WHERE forecast_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT * FROM collection_plans;",
      "SELECT trend_name, plan_date, plan_description FROM fashion_trends JOIN collection_plans ON fashion_trends.trend_id = collection_plans.trend_id;",
      "SELECT plan_date, plan_description FROM collection_plans WHERE plan_date > '2022-06-01';",
      "SELECT trend_name, plan_date, plan_description FROM fashion_trends JOIN collection_plans ON fashion_trends.trend_id = collection_plans.trend_id WHERE plan_date < '2022-06-01';",
      "SELECT trend_name, data_value, forecast_value FROM fashion_trends JOIN historical_data ON fashion_trends.trend_id = historical_data.trend_id JOIN trend_forecast ON fashion_trends.trend_id = trend_forecast.trend_id WHERE data_date = '2021-01-01';",
      "SELECT trend_name, trend_description, plan_description FROM fashion_trends JOIN collection_plans ON fashion_trends.trend_id = collection_plans.trend_id;",
      "SELECT trend_name, trend_category, data_value, forecast_value FROM fashion_trends JOIN historical_data ON fashion_trends.trend_id = historical_data.trend_id JOIN trend_forecast ON fashion_trends.trend_id = trend_forecast.trend_id WHERE data_value > 100 AND forecast_value < 200;",
      "SELECT trend_name, trend_start_date, trend_end_date FROM fashion_trends WHERE trend_category = 'Formal' ORDER BY trend_start_date DESC;",
      "SELECT trend_name, trend_start_date, trend_end_date FROM fashion_trends WHERE trend_category = 'Casual' ORDER BY trend_end_date ASC;",
      "SELECT * FROM fashion_trends;",
      "SELECT trend_name, trend_category FROM fashion_trends WHERE trend_start_date >= '2022-01-01';",
      "SELECT t.trend_name, tf.forecast_value FROM fashion_trends t INNER JOIN trend_forecast tf ON t.trend_id = tf.trend_id;",
      "SELECT th.data_date, th.data_value FROM historical_data th JOIN fashion_trends t ON th.trend_id = t.trend_id WHERE t.trend_category = 'Summer';",
      "SELECT COUNT(*) AS total_records FROM trend_forecast WHERE forecast_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT MAX(data_value) AS max_value FROM historical_data WHERE data_date = '2022-09-15';",
      "SELECT AVG(forecast_value) AS avg_forecast_value FROM trend_forecast tf JOIN fashion_trends t ON tf.trend_id = t.trend_id WHERE t.trend_category = 'Winter';",
      "SELECT p.plan_id, t.trend_name, p.plan_date FROM collection_plans p JOIN fashion_trends t ON p.trend_id = t.trend_id WHERE p.plan_date >= '2022-06-01';",
      "SELECT t.trend_name, tf.forecast_value, th.data_value FROM fashion_trends t LEFT JOIN trend_forecast tf ON t.trend_id = tf.trend_id LEFT JOIN historical_data th ON t.trend_id = th.trend_id;",
      "SELECT t.trend_name, COUNT(*) AS total_forecasts FROM fashion_trends t LEFT JOIN trend_forecast tf ON t.trend_id = tf.trend_id GROUP BY t.trend_name;",
      "SELECT t.trend_name, tf.forecast_value FROM fashion_trends t INNER JOIN trend_forecast tf ON t.trend_id = tf.trend_id WHERE tf.forecast_date = '2022-12-01';",
      "SELECT t.trend_name, th.data_date, th.data_value FROM fashion_trends t INNER JOIN historical_data th ON t.trend_id = th.trend_id WHERE th.data_date BETWEEN '2022-04-01' AND '2022-06-30';",
      "SELECT t.trend_category, AVG(data_value) AS avg_data_value FROM fashion_trends t JOIN historical_data th ON t.trend_id = th.trend_id GROUP BY t.trend_category;",
      "SELECT t.trend_name, MAX(data_value) AS max_data_value FROM fashion_trends t JOIN historical_data th ON t.trend_id = th.trend_id WHERE t.trend_category = 'Fall';",
      "SELECT t.trend_name, tf.forecast_date, tf.forecast_value FROM fashion_trends t INNER JOIN trend_forecast tf ON t.trend_id = tf.trend_id WHERE tf.forecast_value > 100;",
      "SELECT t.trend_name, COUNT(DISTINCT p.plan_date) AS unique_plan_dates FROM fashion_trends t LEFT JOIN collection_plans p ON t.trend_id = p.trend_id GROUP BY t.trend_name;",
      "SELECT t.trend_name, th.data_date, th.data_value, tf.forecast_value FROM fashion_trends t LEFT JOIN historical_data th ON t.trend_id = th.trend_id LEFT JOIN trend_forecast tf ON t.trend_id = tf.trend_id;",
      "SELECT t1.trend_name AS trend_1, t2.trend_name AS trend_2 FROM fashion_trends t1 CROSS JOIN fashion_trends t2 WHERE t1.trend_id <> t2.trend_id;",
      "SELECT t.trend_name, th.data_date, th.data_value FROM fashion_trends t LEFT JOIN historical_data th ON t.trend_id = th.trend_id WHERE th.data_value IS NULL;",
      "SELECT t.trend_name, tf.forecast_value FROM fashion_trends t LEFT JOIN trend_forecast tf ON t.trend_id = tf.trend_id WHERE tf.forecast_value IS NULL;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM fashion_brands;",
      "SELECT brand_name, founded_year FROM fashion_brands;",
      "SELECT category_name FROM clothing_categories;",
      "SELECT item_name, category_id, brand_id FROM fashion_items;",
      "SELECT record_id, sale_date, sale_price FROM sales_records;",
      "SELECT forecast_id, forecast_date, trend_description FROM trend_forecasts;",
      "SELECT * FROM fashion_brands WHERE brand_id = 1;",
      "SELECT * FROM fashion_items WHERE category_id = 1;",
      "SELECT * FROM sales_records WHERE sale_price > 100;",
      "SELECT * FROM trend_forecasts WHERE forecast_date > '2022-01-01';",
      "SELECT item_name, sale_price FROM fashion_items JOIN sales_records ON fashion_items.item_id = sales_records.item_id;",
      "SELECT brand_name, sale_price FROM fashion_items JOIN sales_records ON fashion_items.brand_id = fashion_brands.brand_id;",
      "SELECT f.brand_name, i.item_name, s.sale_price FROM fashion_brands f JOIN fashion_items i ON f.brand_id = i.brand_id JOIN sales_records s ON i.item_id = s.item_id;",
      "SELECT c.category_name, f.brand_name, s.sale_price FROM clothing_categories c JOIN fashion_items f ON c.category_id = f.category_id JOIN sales_records s ON f.item_id = s.item_id;",
      "SELECT COUNT(*) FROM fashion_brands;",
      "SELECT AVG(sale_price) FROM sales_records;",
      "SELECT MIN(founded_year) FROM fashion_brands;",
      "SELECT MAX(sale_price) FROM sales_records;",
      "SELECT AVG(sale_price), MAX(sale_price), MIN(sale_price) FROM sales_records WHERE sale_date > '2022-01-01';",
      "SELECT * FROM fashion_brands;",
      "SELECT brand_name FROM fashion_brands WHERE founded_year > 2000;",
      "SELECT item_name, sale_date FROM fashion_items JOIN sales_records ON fashion_items.item_id = sales_records.item_id;",
      "SELECT brand_name, trend_description FROM fashion_brands JOIN fashion_items ON fashion_brands.brand_id = fashion_items.brand_id JOIN trend_forecasts ON trend_forecasts.forecast_date > '2022-01-01';",
      "SELECT category_name, AVG(sale_price) AS avg_sale_price FROM clothing_categories JOIN fashion_items ON clothing_categories.category_id = fashion_items.category_id JOIN sales_records ON fashion_items.item_id = sales_records.item_id GROUP BY category_name;",
      "SELECT brand_name, COUNT(item_name) AS total_items FROM fashion_items JOIN fashion_brands ON fashion_items.brand_id = fashion_brands.brand_id GROUP BY brand_name HAVING COUNT(item_name) > 5;",
      "SELECT brand_name, COUNT(DISTINCT item_name) AS distinct_items FROM fashion_items JOIN fashion_brands ON fashion_items.brand_id = fashion_brands.brand_id GROUP BY brand_name;",
      "SELECT category_name, MAX(sale_price) AS max_sale_price FROM clothing_categories JOIN fashion_items ON clothing_categories.category_id = fashion_items.category_id JOIN sales_records ON fashion_items.item_id = sales_records.item_id GROUP BY category_name HAVING MAX(sale_price) > 1000;",
      "SELECT brand_name, AVG(founded_year) AS avg_founded_year FROM fashion_brands GROUP BY brand_name HAVING AVG(founded_year) < 1990;",
      "SELECT brand_name, COUNT(DISTINCT category_name) AS total_categories FROM fashion_items JOIN fashion_brands ON fashion_items.brand_id = fashion_brands.brand_id JOIN clothing_categories ON fashion_items.category_id = clothing_categories.category_id GROUP BY brand_name HAVING COUNT(DISTINCT category_name) > 2;",
      "SELECT DISTINCT brand_name FROM fashion_brands;",
      "SELECT brand_name, category_name FROM fashion_items JOIN fashion_brands ON fashion_items.brand_id = fashion_brands.brand_id JOIN clothing_categories ON fashion_items.category_id = clothing_categories.category_id ORDER BY brand_name, category_name;",
      "SELECT brand_name, COUNT(item_id) AS total_sales FROM fashion_brands LEFT JOIN fashion_items ON fashion_brands.brand_id = fashion_items.brand_id LEFT JOIN sales_records ON fashion_items.item_id = sales_records.item_id GROUP BY brand_name ORDER BY total_sales DESC;",
      "SELECT brand_name, MAX(sale_price) AS max_sale_price FROM fashion_brands JOIN fashion_items ON fashion_brands.brand_id = fashion_items.brand_id JOIN sales_records ON fashion_items.item_id = sales_records.item_id WHERE sale_date >= '2022-01-01' GROUP BY brand_name;",
      "SELECT brand_name, MIN(founded_year) AS min_founded_year FROM fashion_brands GROUP BY brand_name HAVING MIN(founded_year) > 1995;",
      "SELECT brand_name, AVG(sale_price) AS avg_sale_price FROM fashion_brands JOIN fashion_items ON fashion_brands.brand_id = fashion_items.brand_id JOIN sales_records ON fashion_items.item_id = sales_records.item_id GROUP BY brand_name ORDER BY avg_sale_price DESC;",
      "SELECT brand_name, COUNT(*) AS total_records FROM fashion_brands JOIN fashion_items ON fashion_brands.brand_id = fashion_items.brand_id JOIN sales_records ON fashion_items.item_id = sales_records.item_id GROUP BY brand_name HAVING total_records > 10;",
      "SELECT brand_name, AVG(sale_price) AS avg_sale_price FROM fashion_brands JOIN fashion_items ON fashion_brands.brand_id = fashion_items.brand_id JOIN sales_records ON fashion_items.item_id = sales_records.item_id WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY brand_name ORDER BY avg_sale_price ASC;",
      "SELECT brand_name, MAX(founded_year) - MIN(founded_year) AS year_range FROM fashion_brands GROUP BY brand_name HAVING year_range > 50;",
      "SELECT brand_name, AVG(sale_price) AS avg_sale_price, COUNT(DISTINCT category_name) AS total_categories FROM fashion_brands JOIN fashion_items ON fashion_brands.brand_id = fashion_items.brand_id JOIN sales_records ON fashion_items.item_id = sales_records.item_id JOIN clothing_categories ON fashion_items.category_id = clothing_categories.category_id GROUP BY brand_name HAVING avg_sale_price > 1000;"
    ]
  }
]