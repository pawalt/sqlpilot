[
  {
    "statements": [
      "SELECT * FROM transaction_data LIMIT 10;",
      "SELECT transaction_id, transaction_date, transaction_amount FROM transaction_data ORDER BY transaction_date DESC;",
      "SELECT * FROM transaction_data WHERE transaction_id = '12345678-1234-1234-1234-1234567890AB';",
      "SELECT account_number, transaction_amount FROM transaction_data WHERE transaction_type = 'debit' ORDER BY transaction_date ASC;",
      "SELECT * FROM transaction_data WHERE transaction_amount > 1000;",
      "SELECT transaction_type, COUNT(*) FROM transaction_data GROUP BY transaction_type;",
      "SELECT AVG(transaction_amount) AS average_amount FROM transaction_data;",
      "SELECT * FROM transaction_data WHERE account_number LIKE '123%';",
      "SELECT * FROM transaction_data WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT MAX(transaction_amount) AS max_amount FROM transaction_data;",
      "SELECT MIN(transaction_amount) AS min_amount FROM transaction_data;",
      "SELECT * FROM transaction_data WHERE account_number IN ('1234567890', '0987654321');",
      "SELECT transaction_id, transaction_amount FROM transaction_data WHERE transaction_type IN ('credit', 'debit');",
      "SELECT * FROM transaction_data WHERE transaction_date >= '2022-01-01' AND transaction_date <= '2022-01-31';",
      "SELECT DISTINCT account_number FROM transaction_data;",
      "SELECT * FROM transaction_data ORDER BY transaction_amount DESC LIMIT 5;",
      "SELECT * FROM transaction_data WHERE transaction_type LIKE '%deposit%';",
      "SELECT COUNT(*) FROM transaction_data;",
      "SELECT transaction_type, SUM(transaction_amount) AS total_amount FROM transaction_data GROUP BY transaction_type;",
      "SELECT * FROM transaction_data WHERE transaction_amount < 500;",
      "SELECT transaction_id, transaction_date, transaction_amount FROM transaction_data WHERE transaction_type = 'deposit';",
      "SELECT * FROM transaction_data WHERE transaction_amount > 1000.00 AND transaction_type = 'withdrawal';",
      "SELECT transaction_date, transaction_amount FROM transaction_data WHERE account_number = '123456';",
      "SELECT COUNT(transaction_id) AS total_transactions FROM transaction_data WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT transaction_id, account_number, MAX(transaction_amount) AS max_transaction_amount FROM transaction_data GROUP BY account_number;",
      "SELECT AVG(transaction_amount) AS avg_amount_per_transaction FROM transaction_data WHERE transaction_type = 'transfer';",
      "SELECT DISTINCT transaction_type FROM transaction_data;",
      "SELECT transaction_id, transaction_date, transaction_amount FROM transaction_data WHERE transaction_date >= '2022-06-01';",
      "SELECT AVG(transaction_amount) AS avg_amount_per_day, DATE_TRUNC('day', transaction_date) AS day FROM transaction_data GROUP BY day;",
      "SELECT SUM(transaction_amount) AS total_amount FROM transaction_data WHERE transaction_type = 'deposit';",
      "SELECT transaction_date, SUM(transaction_amount) AS total_amount_per_day FROM transaction_data GROUP BY transaction_date;",
      "SELECT transaction_id, SUM(transaction_amount) AS total_amount_per_type FROM transaction_data GROUP BY transaction_type;",
      "SELECT COUNT(DISTINCT account_number) AS total_accounts FROM transaction_data;",
      "SELECT transaction_id, transaction_date, transaction_amount FROM transaction_data WHERE account_number LIKE '123%';",
      "SELECT COUNT(*) AS total_transactions FROM transaction_data;",
      "SELECT transaction_id, transaction_date, transaction_amount FROM transaction_data WHERE transaction_amount < 0 AND transaction_type = 'withdrawal';",
      "SELECT account_number, transaction_type, SUM(transaction_amount) AS total_amount FROM transaction_data GROUP BY account_number, transaction_type;",
      "SELECT AVG(transaction_amount) AS avg_amount_per_month, DATE_TRUNC('month', transaction_date) AS month FROM transaction_data GROUP BY month;",
      "SELECT MIN(transaction_amount) AS min_amount, MAX(transaction_amount) AS max_amount FROM transaction_data;",
      "SELECT transaction_id, transaction_date, transaction_amount FROM transaction_data WHERE transaction_type = 'chargeback';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM transaction_data;",
      "SELECT transaction_id, transaction_date FROM transaction_data WHERE amount > 100;",
      "SELECT MAX(amount) FROM transaction_data;",
      "SELECT AVG(amount) FROM transaction_data;",
      "SELECT MIN(transaction_date) FROM transaction_data;",
      "SELECT COUNT(*) FROM transaction_data;",
      "SELECT * FROM financial_activities;",
      "SELECT activity_id, activity_type FROM financial_activities WHERE account_id = 100;",
      "SELECT SUM(transaction_id) FROM financial_activities;",
      "SELECT DISTINCT account_id FROM financial_activities;",
      "SELECT COUNT(DISTINCT transaction_id) FROM financial_activities;",
      "SELECT * FROM transaction_data JOIN financial_activities ON transaction_data.transaction_id = financial_activities.transaction_id;",
      "SELECT * FROM transaction_data LEFT JOIN financial_activities ON transaction_data.transaction_id = financial_activities.transaction_id;",
      "SELECT * FROM transaction_data RIGHT JOIN financial_activities ON transaction_data.transaction_id = financial_activities.transaction_id;",
      "SELECT * FROM transaction_data INNER JOIN financial_activities ON transaction_data.transaction_id = financial_activities.transaction_id;",
      "SELECT * FROM transaction_data WHERE description LIKE '%payment%';",
      "SELECT * FROM financial_activities WHERE activity_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT AVG(amount) FROM transaction_data GROUP BY transaction_date;",
      "SELECT * FROM financial_activities ORDER BY activity_date DESC;",
      "SELECT AVG(amount), account_id FROM financial_activities GROUP BY account_id HAVING COUNT(*) > 1;",
      "SELECT * FROM transaction_data WHERE amount > 1000",
      "SELECT description, transaction_date FROM transaction_data WHERE transaction_date > '2022-01-01'",
      "SELECT DISTINCT account_id FROM financial_activities WHERE activity_date >= '2022-01-15'",
      "SELECT transaction_id, amount FROM transaction_data WHERE description LIKE '%payment%'",
      "SELECT COUNT(*) FROM financial_activities WHERE activity_type = 'deposit'",
      "SELECT MAX(amount) FROM transaction_data",
      "SELECT MIN(amount) FROM transaction_data",
      "SELECT AVG(amount) FROM transaction_data",
      "SELECT transaction_id, account_id FROM financial_activities WHERE activity_type = 'transfer' AND activity_date BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT transaction_id, description, amount FROM transaction_data WHERE amount BETWEEN 500 AND 1000",
      "SELECT account_id, SUM(amount) AS total_amount FROM financial_activities GROUP BY account_id",
      "SELECT transaction_id, description FROM transaction_data ORDER BY transaction_date DESC LIMIT 5",
      "SELECT activity_id, activity_date FROM financial_activities WHERE account_id IN (SELECT account_id FROM financial_activities WHERE activity_type = 'transfer')",
      "SELECT COUNT(DISTINCT account_id) FROM financial_activities",
      "SELECT AVG(amount) AS avg_amount, MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM transaction_data",
      "SELECT transaction_id, transaction_date, amount FROM transaction_data UNION SELECT transaction_id, activity_date, NULL AS amount FROM financial_activities",
      "SELECT * FROM transaction_data INNER JOIN financial_activities ON transaction_data.transaction_id = financial_activities.transaction_id",
      "SELECT t.transaction_id, t.amount, f.activity_type FROM transaction_data t LEFT JOIN financial_activities f ON t.transaction_id = f.transaction_id",
      "SELECT t.transaction_id, t.amount, f.activity_type FROM transaction_data t RIGHT JOIN financial_activities f ON t.transaction_id = f.transaction_id",
      "SELECT t.transaction_id, t.description, f.activity_type FROM transaction_data t FULL JOIN financial_activities f ON t.transaction_id = f.transaction_id"
    ]
  },
  {
    "statements": [
      "SELECT * FROM transactions;",
      "SELECT transaction_id, amount, transaction_date FROM transactions;",
      "SELECT account_name, balance FROM accounts;",
      "SELECT user_id, username, email FROM users;",
      "SELECT account_id, account_name, balance FROM accounts WHERE balance > 1000;",
      "SELECT * FROM transactions WHERE amount >= 500;",
      "SELECT * FROM users WHERE email IS NOT NULL;",
      "SELECT transaction_id, amount, transaction_date FROM transactions ORDER BY transaction_date DESC;",
      "SELECT user_id, username FROM users WHERE username LIKE 'John%';",
      "SELECT account_id, account_name FROM accounts WHERE account_name ILIKE '%savings%';",
      "SELECT SUM(amount) FROM transactions;",
      "SELECT account_name, SUM(balance) FROM accounts GROUP BY account_name;",
      "SELECT COUNT(*) FROM transactions;",
      "SELECT AVG(balance) FROM accounts;",
      "SELECT MAX(amount) FROM transactions;",
      "SELECT MIN(balance) FROM accounts;",
      "SELECT transaction_id, amount, transaction_date FROM transactions WHERE transaction_date > '2022-01-01';",
      "SELECT user_id, username FROM users WHERE email LIKE '%gmail.com';",
      "SELECT account_id, account_name, balance FROM accounts ORDER BY balance DESC;",
      "SELECT * FROM transactions LIMIT 10 OFFSET 5;",
      "SELECT * FROM transactions WHERE amount > 100 AND transaction_date > '2021-01-01';",
      "SELECT account_name, balance FROM accounts WHERE balance < 0;",
      "SELECT username, email FROM users WHERE email IS NOT NULL;",
      "SELECT transaction_id, amount, transaction_date FROM transactions WHERE description LIKE '%payment%';",
      "SELECT * FROM accounts JOIN users ON accounts.account_id = users.user_id;",
      "SELECT * FROM transactions LEFT JOIN accounts ON transactions.transaction_id = accounts.account_id;",
      "SELECT account_name, SUM(amount) AS total_amount FROM transactions JOIN accounts ON transactions.transaction_id = accounts.account_id GROUP BY account_name;",
      "SELECT AVG(balance) FROM accounts;",
      "SELECT user_id, username FROM users WHERE user_id IN (SELECT account_id FROM accounts WHERE balance < 0);",
      "SELECT user_id, COUNT(transaction_id) AS num_transactions FROM transactions GROUP BY user_id HAVING COUNT(transaction_id) > 5;",
      "SELECT username, MAX(balance) AS max_balance FROM accounts JOIN users ON accounts.account_id = users.user_id GROUP BY username;",
      "SELECT * FROM transactions ORDER BY transaction_date DESC;",
      "SELECT account_id, account_name FROM accounts WHERE balance BETWEEN 100 AND 500;",
      "SELECT user_id, SUM(balance) AS total_balance FROM accounts GROUP BY user_id HAVING SUM(balance) > 1000;",
      "SELECT username, email FROM users WHERE email LIKE '%gmail.com';",
      "SELECT COUNT(transaction_id) AS num_transactions FROM transactions;",
      "SELECT user_id, AVG(balance) AS avg_balance FROM accounts GROUP BY user_id;",
      "SELECT account_id, COUNT(transaction_id) AS num_transactions FROM transactions GROUP BY account_id;",
      "SELECT user_id, MIN(balance) AS min_balance FROM accounts GROUP BY user_id HAVING MIN(balance) < 0;",
      "SELECT username, email FROM users WHERE username LIKE 'A%';",
      "SELECT account_name, MAX(balance) AS max_balance FROM accounts GROUP BY account_name;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM transactions",
      "SELECT transaction_id, amount FROM transactions",
      "SELECT * FROM customers",
      "SELECT customer_id, name, email FROM customers",
      "SELECT * FROM accounts",
      "SELECT account_id, account_type FROM accounts",
      "SELECT * FROM categories",
      "SELECT category_id, name FROM categories",
      "SELECT transaction_id, customer_id FROM transactions",
      "SELECT customer_id, name FROM customers",
      "SELECT account_id, balance FROM accounts",
      "SELECT category_id, name FROM categories",
      "SELECT customer_id, email, phone_number FROM customers",
      "SELECT account_id, balance, account_type FROM accounts",
      "SELECT * FROM transactions WHERE customer_id=123",
      "SELECT * FROM customers WHERE name='John Doe'",
      "SELECT * FROM accounts WHERE balance > 1000",
      "SELECT * FROM transactions WHERE transaction_date='2022-01-15'",
      "SELECT * FROM categories WHERE name='Food'",
      "SELECT * FROM customers WHERE email LIKE '%@example.com'",
      "SELECT * FROM transactions WHERE amount > 100",
      "SELECT transaction_id, amount, transaction_date FROM transactions WHERE amount > 500",
      "SELECT t.transaction_id, t.amount, c.name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id",
      "SELECT t.transaction_id, t.amount, c.name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.email LIKE '%gmail.com'",
      "SELECT t.transaction_id, t.amount, c.name, a.balance FROM transactions t JOIN customers c ON t.customer_id = c.customer_id JOIN accounts a ON c.customer_id = a.customer_id",
      "SELECT MAX(amount) AS max_amount FROM transactions",
      "SELECT AVG(amount) AS avg_amount FROM transactions",
      "SELECT c.name, SUM(t.amount) AS total_spent FROM transactions t JOIN customers c ON t.customer_id = c.customer_id GROUP BY c.name",
      "SELECT c.name, COUNT(t.transaction_id) AS num_transactions FROM transactions t JOIN customers c ON t.customer_id = c.customer_id GROUP BY c.name",
      "SELECT c.name, COUNT(t.transaction_id) AS num_transactions FROM transactions t JOIN customers c ON t.customer_id = c.customer_id GROUP BY c.name HAVING COUNT(t.transaction_id) > 5",
      "SELECT c.name, SUM(t.amount) AS total_spent FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.amount > 100 GROUP BY c.name",
      "SELECT c.name, SUM(t.amount) AS total_spent FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.amount > 100 GROUP BY c.name HAVING SUM(t.amount) > 1000",
      "SELECT t.transaction_id, t.amount, c.name, a.balance FROM transactions t JOIN customers c ON t.customer_id = c.customer_id JOIN accounts a ON c.customer_id = a.customer_id WHERE a.balance > 500",
      "SELECT MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM transactions",
      "SELECT AVG(balance) AS avg_balance FROM accounts",
      "SELECT c.name, MAX(balance) AS max_balance FROM customers c JOIN accounts a ON c.customer_id = a.customer_id GROUP BY c.name",
      "SELECT c.name, MIN(balance) AS min_balance FROM customers c JOIN accounts a ON c.customer_id = a.customer_id GROUP BY c.name",
      "SELECT c.name, account_type, sum(balance) AS total_balance FROM customers c JOIN accounts a ON c.customer_id = a.customer_id GROUP BY c.name, account_type",
      "SELECT c.name, category_id, name FROM customers c JOIN categories ca ON c.customer_id = ca.category_id"
    ]
  },
  {
    "statements": [
      "SELECT * FROM transactions;",
      "SELECT transaction_id, date, amount, description FROM transactions;",
      "SELECT * FROM accounts;",
      "SELECT account_id, account_name, balance FROM accounts;",
      "SELECT * FROM customers;",
      "SELECT customer_id, customer_name, email FROM customers;",
      "SELECT * FROM categories;",
      "SELECT category_id, category_name FROM categories;",
      "SELECT * FROM transaction_logs;",
      "SELECT log_id, transaction_id, action, timestamp FROM transaction_logs;",
      "SELECT transaction_id, date, amount, description, account_id, account_name FROM transactions JOIN accounts ON transactions.transaction_id = accounts.account_id;",
      "SELECT transaction_id, date, amount, description, customer_id, customer_name FROM transactions JOIN customers ON transactions.transaction_id = customers.customer_id;",
      "SELECT transaction_id, date, amount, description, category_id, category_name FROM transactions JOIN categories ON transactions.transaction_id = categories.category_id;",
      "SELECT log_id, transaction_id, action, timestamp, date, amount FROM transaction_logs JOIN transactions ON transaction_logs.transaction_id = transactions.transaction_id;",
      "SELECT log_id, transaction_id, action, timestamp, account_id, balance FROM transaction_logs JOIN accounts ON transaction_logs.transaction_id = accounts.account_id;",
      "SELECT log_id, transaction_id, action, timestamp, customer_id, email FROM transaction_logs JOIN customers ON transaction_logs.transaction_id = customers.customer_id;",
      "SELECT log_id, transaction_id, action, timestamp, category_id, category_name FROM transaction_logs JOIN categories ON transaction_logs.transaction_id = categories.category_id;",
      "SELECT * FROM transactions WHERE amount > 100;",
      "SELECT * FROM transactions WHERE DATE > '2022-01-01';",
      "SELECT * FROM transactions WHERE amount > 1000;",
      "SELECT transaction_id, date FROM transactions WHERE date >= '2022-01-01';",
      "SELECT t.transaction_id, t.date, a.account_name FROM transactions t INNER JOIN accounts a ON t.transaction_id = a.account_id;",
      "SELECT c.customer_id, c.customer_name, t.amount FROM customers c INNER JOIN transactions t ON c.customer_id = t.transaction_id WHERE t.amount < 0;",
      "SELECT t.transaction_id, t.date, c.category_name FROM transactions t INNER JOIN categories c ON t.transaction_id = c.category_id;",
      "SELECT account_name, balance FROM accounts WHERE balance < 0;",
      "SELECT SUM(amount) FROM transactions;",
      "SELECT customer_name, email FROM customers WHERE customer_name LIKE 'J%';",
      "SELECT t.transaction_id, t.date, COUNT(log_id) AS total_logs FROM transactions t LEFT JOIN transaction_logs l ON t.transaction_id = l.transaction_id GROUP BY t.transaction_id;",
      "SELECT c.category_name, COUNT(t.transaction_id) AS total_transactions FROM categories c LEFT JOIN transactions t ON c.category_id = t.transaction_id GROUP BY c.category_name;",
      "SELECT t.transaction_id, t.amount, l.action FROM transactions t INNER JOIN transaction_logs l ON t.transaction_id = l.transaction_id WHERE l.action = 'approved';",
      "SELECT customer_id, customer_name, SUM(amount) AS total_spent FROM customers c INNER JOIN transactions t ON c.customer_id = t.transaction_id GROUP BY customer_id;",
      "SELECT account_id, account_name, AVG(balance) AS avg_balance FROM accounts GROUP BY account_id, account_name;",
      "SELECT t.transaction_id, t.date, amount, l.timestamp FROM transactions t INNER JOIN transaction_logs l ON t.transaction_id = l.transaction_id WHERE l.timestamp > '2022-01-01';",
      "SELECT category_name, SUM(amount) AS total_amount FROM categories c INNER JOIN transactions t ON c.category_id = t.transaction_id GROUP BY category_name;",
      "SELECT customer_id, customer_name, email FROM customers WHERE customer_id IN (SELECT customer_id FROM transactions WHERE amount > 1000);",
      "SELECT t.transaction_id, t.date, c.category_name FROM transactions t INNER JOIN categories c ON t.transaction_id = c.category_id WHERE t.amount < (SELECT AVG(amount) FROM transactions);",
      "SELECT * FROM transactions ORDER BY date DESC LIMIT 10;",
      "SELECT account_name, balance FROM accounts WHERE account_name LIKE '%Savings%';",
      "SELECT customer_name, SUM(amount) AS total_spent FROM customers c INNER JOIN transactions t ON c.customer_id = t.transaction_id GROUP BY customer_name HAVING total_spent > 10000;",
      "SELECT t.transaction_id, t.date, amount, l.timestamp FROM transactions t INNER JOIN transaction_logs l ON t.transaction_id = l.transaction_id WHERE l.action IN ('approved', 'rejected');"
    ]
  }
]