[
  {
    "statements": [
      "SELECT * FROM pharm_sales_data LIMIT 10;",
      "SELECT product_name, sale_amount FROM pharm_sales_data WHERE location='New York';",
      "SELECT DISTINCT location FROM pharm_sales_data;",
      "SELECT product_id, sale_date FROM pharm_sales_data ORDER BY sale_date DESC;",
      "SELECT AVG(sale_amount) AS avg_sale_amount FROM pharm_sales_data;",
      "SELECT COUNT(*) AS total_sales FROM pharm_sales_data;",
      "SELECT product_name, sale_amount FROM pharm_sales_data WHERE sale_amount > 1000;",
      "SELECT location, COUNT(*) AS total_sales FROM pharm_sales_data GROUP BY location;",
      "SELECT * FROM pharm_sales_data WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT MAX(sale_amount) AS max_sale_amount FROM pharm_sales_data;",
      "SELECT MIN(sale_amount) AS min_sale_amount FROM pharm_sales_data;",
      "SELECT location, AVG(sale_amount) AS avg_sale_amount FROM pharm_sales_data GROUP BY location;",
      "SELECT * FROM pharm_sales_data WHERE location='California' AND sale_amount > 500;",
      "SELECT product_name, sale_date FROM pharm_sales_data WHERE sale_date = CURRENT_DATE;",
      "SELECT location, SUM(sale_amount) AS total_sales FROM pharm_sales_data GROUP BY location;",
      "SELECT COUNT(DISTINCT product_name) AS total_products FROM pharm_sales_data;",
      "SELECT product_id, sale_amount FROM pharm_sales_data WHERE sale_amount BETWEEN 500 AND 1000;",
      "SELECT product_name, sale_amount FROM pharm_sales_data WHERE sale_date = '2022-07-01';",
      "SELECT location, MAX(sale_amount) AS max_sale_amount FROM pharm_sales_data GROUP BY location LIMIT 5;",
      "SELECT AVG(sale_amount) AS avg_sale_amount FROM pharm_sales_data WHERE location='Texas';",
      "SELECT * FROM pharm_sales_data WHERE location = 'New York' AND sale_amount > 1000 ORDER BY sale_date DESC LIMIT 5",
      "SELECT AVG(sale_amount) AS avg_sale_amount FROM pharm_sales_data WHERE location = 'Los Angeles'",
      "SELECT product_name, SUM(sale_amount) AS total_sales FROM pharm_sales_data GROUP BY product_name HAVING total_sales > 5000",
      "SELECT DATE_TRUNC('month', sale_date) AS month, AVG(sale_amount) AS avg_sale_amount FROM pharm_sales_data GROUP BY month ORDER BY month",
      "SELECT product_name, COUNT(*) AS total_sales_count FROM pharm_sales_data WHERE sale_date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY product_name ORDER BY total_sales_count DESC",
      "SELECT DISTINCT location FROM pharm_sales_data ORDER BY location ASC",
      "SELECT product_name, SUM(sale_amount) AS total_sales FROM pharm_sales_data WHERE location = 'Chicago' GROUP BY product_name HAVING SUM(sale_amount) > 2000",
      "SELECT COUNT(*) AS total_sales_count FROM pharm_sales_data WHERE sale_date < '2022-03-01'",
      "SELECT location, COUNT(DISTINCT product_id) AS unique_products_count FROM pharm_sales_data GROUP BY location",
      "SELECT product_name, sale_amount FROM pharm_sales_data WHERE sale_date = CURRENT_DATE"
    ]
  },
  {
    "statements": [
      "SELECT * FROM sales_data;",
      "SELECT id, product_name FROM sales_data;",
      "SELECT sales_date, quantity FROM sales_data;",
      "SELECT * FROM market_trends;",
      "SELECT trend_name, month_year FROM market_trends;",
      "SELECT trend_id, revenue_change FROM market_trends;",
      "SELECT product_name, quantity FROM sales_data WHERE sales_date > '2022-01-01';",
      "SELECT trend_name, revenue_change FROM market_trends WHERE market_share > 0.5;",
      "SELECT * FROM sales_data WHERE quantity > 100;",
      "SELECT * FROM market_trends WHERE revenue_change < 0;",
      "SELECT SUM(revenue) FROM sales_data;",
      "SELECT AVG(quantity) FROM sales_data;",
      "SELECT MAX(revenue) FROM sales_data;",
      "SELECT MIN(market_share) FROM market_trends;",
      "SELECT COUNT(*) FROM sales_data;",
      "SELECT COUNT(*) FROM market_trends;",
      "SELECT product_name, SUM(revenue) AS total_revenue FROM sales_data GROUP BY product_name;",
      "SELECT AVG(revenue_change) AS avg_revenue_change FROM market_trends GROUP BY trend_name;",
      "SELECT product_name, AVG(quantity) AS avg_quantity, SUM(revenue) AS total_revenue FROM sales_data GROUP BY product_name HAVING total_revenue > 1000;",
      "SELECT trend_name, AVG(revenue_change) AS avg_revenue_change, SUM(market_share) AS total_market_share FROM market_trends GROUP BY trend_name HAVING total_market_share < 50;",
      "SELECT * FROM sales_data WHERE quantity > 100 AND revenue > 500.00",
      "SELECT product_name, sales_date FROM sales_data WHERE quantity BETWEEN 50 AND 100",
      "SELECT * FROM sales_data WHERE sales_date >= '2021-01-01' AND sales_date <= '2021-12-31'",
      "SELECT product_name, SUM(quantity) AS total_quantity FROM sales_data GROUP BY product_name",
      "SELECT product_name, AVG(revenue) AS avg_revenue FROM sales_data GROUP BY product_name HAVING COUNT(*) > 2",
      "SELECT * FROM sales_data WHERE product_name LIKE '%iPhone%' AND quantity > 50",
      "SELECT product_name, SUM(revenue) AS total_revenue FROM sales_data WHERE sales_date >= '2021-01-01' AND sales_date <= '2021-03-31' GROUP BY product_name",
      "SELECT product_name, revenue AS total_revenue, SUM(quantity) AS total_quantity FROM sales_data GROUP BY product_name, revenue HAVING revenue > 1000.00",
      "SELECT product_name, MAX(revenue) AS max_revenue FROM sales_data GROUP BY product_name HAVING COUNT(*) >= 5",
      "SELECT trend_name, market_share FROM market_trends WHERE revenue_change > 5.00",
      "SELECT trend_name, month_year FROM market_trends WHERE month_year BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT trend_name, market_share FROM market_trends WHERE trend_name LIKE '%Top%' AND market_share >= 0.5",
      "SELECT trend_name, SUM(revenue_change) AS total_revenue_change FROM market_trends WHERE month_year >= '2021-01-01' AND month_year <= '2021-06-30' GROUP BY trend_name",
      "SELECT trend_name, AVG(market_share) AS avg_market_share FROM market_trends GROUP BY trend_name HAVING COUNT(*) > 3",
      "SELECT * FROM market_trends WHERE revenue_change = (SELECT MAX(revenue_change) FROM market_trends)",
      "SELECT trend_name, AVG(revenue_change) AS avg_revenue_change, MAX(market_share) AS max_market_share FROM market_trends GROUP BY trend_name HAVING avg_revenue_change > 3.00",
      "SELECT * FROM sales_data AS s INNER JOIN market_trends AS m ON s.revenue = m.revenue_change",
      "SELECT s.product_name, m.trend_name FROM sales_data AS s INNER JOIN market_trends AS m ON s.sales_date = m.month_year",
      "SELECT s.product_name, m.trend_name FROM sales_data AS s LEFT JOIN market_trends AS m ON s.revenue = m.revenue_change",
      "SELECT product_name, revenue, revenue_change FROM sales_data JOIN market_trends USING (revenue)",
      "SELECT s.product_name, m.trend_name FROM sales_data AS s CROSS JOIN market_trends AS m"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Sales;",
      "SELECT sale_id, product_name, sale_date FROM Sales;",
      "SELECT product_name, quantity, unit_price FROM Sales;",
      "SELECT * FROM Products;",
      "SELECT product_id, product_name, category FROM Products;",
      "SELECT manufacturer, price FROM Products;",
      "SELECT * FROM Customers;",
      "SELECT customer_id, customer_name, email FROM Customers;",
      "SELECT phone_number, address FROM Customers;",
      "SELECT sale_id, product_name, quantity, unit_price FROM Sales WHERE quantity > 10;",
      "SELECT product_name, category, price FROM Products WHERE price < 50;",
      "SELECT customer_name, email, phone_number FROM Customers WHERE customer_id = 1;",
      "SELECT customer_name, email, address FROM Customers WHERE email LIKE '%gmail.com%';",
      "SELECT sale_id, product_name, sale_date FROM Sales ORDER BY sale_date DESC;",
      "SELECT product_id, product_name, price FROM Products ORDER BY price ASC;",
      "SELECT customer_id, customer_name, address FROM Customers ORDER BY customer_name ASC;",
      "SELECT SUM(quantity) AS total_quantity FROM Sales;",
      "SELECT AVG(unit_price) AS avg_price FROM Sales;",
      "SELECT MAX(price) AS max_price FROM Products;",
      "SELECT MIN(quantity) AS min_quantity FROM Sales;",
      "SELECT product_name, sale_date, quantity FROM Sales WHERE sale_date >= '2021-01-01' AND sale_date <= '2021-12-31';",
      "SELECT product_name, SUM(quantity) AS total_quantity FROM Sales GROUP BY product_name HAVING total_quantity > 100;",
      "SELECT Customers.customer_name, Customers.email, Sales.product_name, Sales.sale_date FROM Customers INNER JOIN Sales ON Customers.customer_id = Sales.sale_id;",
      "SELECT category, COUNT(*) AS total_sales FROM Products GROUP BY category ORDER BY total_sales DESC;",
      "SELECT product_name, unit_price FROM Sales WHERE unit_price > 50 AND quantity > 10 ORDER BY unit_price DESC;",
      "SELECT * FROM Products WHERE manufacturer = 'Apple' ORDER BY price ASC;",
      "SELECT Customers.customer_name, Customers.phone_number, Products.product_name, Sales.quantity, Sales.unit_price FROM Customers INNER JOIN Sales ON Customers.customer_id = Sales.sale_id INNER JOIN Products ON Sales.product_name = Products.product_name;",
      "SELECT DISTINCT product_name FROM Sales WHERE sale_date BETWEEN '2021-01-01' AND '2021-03-31';",
      "SELECT manufacturer, AVG(price) AS average_price FROM Products GROUP BY manufacturer HAVING COUNT(*) > 1;",
      "SELECT product_name, quantity, unit_price, quantity * unit_price AS total_price FROM Sales WHERE sale_date > '2021-06-30';",
      "SELECT customer_name, email, address FROM Customers WHERE phone_number LIKE '%555%';",
      "SELECT Customers.customer_name, SUM(Sales.quantity * Sales.unit_price) AS total_revenue FROM Customers INNER JOIN Sales ON Customers.customer_id = Sales.sale_id GROUP BY Customers.customer_name ORDER BY total_revenue DESC;",
      "SELECT product_name, category, price FROM Products WHERE price BETWEEN 50 AND 100;",
      "SELECT Customers.customer_name, Customers.email, Products.product_name, Products.category, Sales.quantity, Sales.unit_price FROM Customers INNER JOIN Sales ON Customers.customer_id = Sales.sale_id INNER JOIN Products ON Sales.product_name = Products.product_name WHERE Sales.quantity > 5 AND Products.price < 100;",
      "SELECT DISTINCT customer_name, email, phone_number FROM Customers WHERE address LIKE '%Street%';",
      "SELECT product_name, SUM(quantity) AS total_quantity FROM Sales GROUP BY product_name HAVING total_quantity < 50;",
      "SELECT product_name, unit_price * quantity AS total_amount FROM Sales WHERE sale_date < '2021-05-01';",
      "SELECT manufacturer, AVG(price) AS average_price FROM Products GROUP BY manufacturer HAVING AVG(price) < 50;",
      "SELECT customer_name, email, phone_number, address FROM Customers WHERE customer_id IN (SELECT sale_id FROM Sales WHERE quantity > 20);",
      "SELECT product_name, category, COUNT(*) AS total_sales FROM Products GROUP BY product_name, category;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM product_sales;",
      "SELECT product_id, product_name, sales_date FROM product_sales;",
      "SELECT * FROM product_inventory;",
      "SELECT product_id, product_name, current_stock FROM product_inventory;",
      "SELECT * FROM sales_rep;",
      "SELECT rep_id, rep_name, territory FROM sales_rep;",
      "SELECT * FROM market_trends;",
      "SELECT trend_id, trend_description, trend_date FROM market_trends;",
      "SELECT product_id, product_name, quantity_sold, revenue FROM product_sales WHERE revenue > 1000;",
      "SELECT product_id, product_name, quantity_sold, revenue FROM product_sales WHERE sales_date > '2021-01-01';",
      "SELECT rep_id, rep_name, territory FROM sales_rep WHERE hire_date < '2022-01-01';",
      "SELECT product_id, product_name, current_stock FROM product_inventory WHERE current_stock < 100;",
      "SELECT * FROM market_trends WHERE trend_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT trend_id, trend_description, market_impact FROM market_trends WHERE CHAR_LENGTH(trend_description) > 50;",
      "SELECT product_id, product_name, sales_date, revenue FROM product_sales ORDER BY revenue DESC;",
      "SELECT rep_id, rep_name, hire_date FROM sales_rep ORDER BY hire_date;",
      "SELECT product_name, quantity_sold FROM product_sales GROUP BY product_name;",
      "SELECT territory, COUNT(rep_id) AS total_reps FROM sales_rep GROUP BY territory;",
      "SELECT territory, AVG(DATEDIFF(NOW(), hire_date)) AS avg_days_working FROM sales_rep GROUP BY territory;",
      "SELECT product_id, product_name, sales_date, revenue FROM product_sales LIMIT 10;",
      "SELECT rep_id, rep_name, territory FROM sales_rep LIMIT 5;",
      "SELECT product_name, sales_date, quantity_sold, revenue FROM product_sales WHERE sales_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT product_name, SUM(quantity_sold) AS total_quantity_sold, AVG(revenue) AS avg_revenue FROM product_sales GROUP BY product_name;",
      "SELECT product_name, sales_date, revenue FROM product_sales WHERE quantity_sold > 100;",
      "SELECT product_name, sales_date, quantity_sold FROM product_sales WHERE revenue > 1000;",
      "SELECT product_name, sales_date, revenue FROM product_sales WHERE revenue BETWEEN 500 AND 1000;",
      "SELECT product_name, sales_date, quantity_sold FROM product_sales WHERE revenue < 500;",
      "SELECT product_name, sales_date, quantity_sold, revenue FROM product_sales ORDER BY revenue DESC;",
      "SELECT product_name, COUNT(*) AS total_sales FROM product_sales GROUP BY product_name HAVING total_sales > 10;",
      "SELECT product_name, sales_date, AVG(revenue) AS avg_revenue FROM product_sales GROUP BY product_name HAVING avg_revenue > 500;",
      "SELECT p.product_name, p.sales_date, s.rep_name FROM product_sales p INNER JOIN sales_rep s ON p.product_id = s.rep_id;",
      "SELECT p.product_name, p.sales_date, i.current_stock FROM product_sales p JOIN product_inventory i ON p.product_id = i.product_id;",
      "SELECT p.product_name, p.sales_date, t.trend_description FROM product_sales p LEFT JOIN market_trends t ON p.product_id = t.trend_id;",
      "SELECT product_name, sales_date, SUM(quantity_sold) AS total_quantity_sold FROM product_sales GROUP BY product_name HAVING total_quantity_sold > 1000;",
      "SELECT product_name, MAX(revenue) AS max_revenue FROM product_sales GROUP BY product_name;",
      "SELECT sales_date, SUM(revenue) AS total_revenue FROM product_sales GROUP BY sales_date;",
      "SELECT product_name, sales_date, quantity_sold FROM product_sales WHERE quantity_sold IN (50, 100, 150);",
      "SELECT product_name, sales_date, quantity_sold FROM product_sales WHERE sales_date < NOW();",
      "SELECT product_name, sales_date, quantity_sold FROM product_sales WHERE sales_date > '2022-06-01';",
      "SELECT product_name, sales_date, revenue FROM product_sales WHERE sales_date > hire_date;",
      "SELECT product_name, sales_date, quantity_sold FROM product_sales WHERE revenue > current_stock * 100;",
      "SELECT product_name, sales_date, quantity_sold FROM product_sales WHERE quantity_sold < current_stock AND revenue < 1000;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM sales_data",
      "SELECT sale_id, amount FROM sales_data",
      "SELECT product_name, unit_price FROM product",
      "SELECT * FROM revenue",
      "SELECT trend_description, trend_date FROM market_trends",
      "SELECT person_name, person_role, location FROM sales_person",
      "SELECT product_id, product_name, manufacturer FROM product",
      "SELECT sale_id, product_id, amount, quantity FROM sales_data",
      "SELECT revenue_id, sale_id, revenue_amount FROM revenue",
      "SELECT person_id, person_name, person_role, location FROM sales_person",
      "SELECT * FROM product",
      "SELECT sale_id, sale_date, amount FROM sales_data",
      "SELECT product_id, product_name, manufacturer, unit_price FROM product",
      "SELECT trend_description FROM market_trends",
      "SELECT person_name, location FROM sales_person",
      "SELECT sale_id, amount FROM sales_data",
      "SELECT product_name, unit_price FROM product",
      "SELECT trend_description FROM market_trends",
      "SELECT person_role, location FROM sales_person",
      "SELECT * FROM sales_data",
      "SELECT * FROM sales_data;",
      "SELECT product_id, product_name, unit_price FROM product;",
      "SELECT sale_id, sale_date, amount, quantity FROM sales_data WHERE sale_date > '2022-01-01';",
      "SELECT product_id, manufacturer, category, unit_price FROM product WHERE manufacturer = 'Example Manufacturer';",
      "SELECT sale_id, amount, quantity FROM sales_data WHERE quantity > 10 AND amount > 1000;",
      "SELECT revenue_id, sale_id, revenue_amount FROM revenue WHERE revenue_amount > 5000;",
      "SELECT product_id, product_name, unit_price FROM product ORDER BY unit_price DESC;",
      "SELECT sale_id, sale_date, amount FROM sales_data WHERE amount BETWEEN 1000 AND 5000;",
      "SELECT person_id, person_name, person_role FROM sales_person WHERE location = 'New York';",
      "SELECT trend_id, trend_description FROM market_trends WHERE trend_date = '2022-03-15';",
      "SELECT sale_id, product_id, amount FROM sales_data JOIN product ON sales_data.product_id = product.product_id;",
      "SELECT sale_id, sale_date, amount, person_name FROM sales_data JOIN sales_person ON sales_data.person_id = sales_person.person_id;",
      "SELECT product_id, product_name, unit_price, manufacturer FROM product WHERE unit_price > 50 AND manufacturer <> 'Example Manufacturer';",
      "SELECT sale_id, amount, quantity FROM sales_data WHERE sale_date BETWEEN '2022-01-01' AND '2022-02-28';",
      "SELECT person_id, person_name, location, person_role FROM sales_person WHERE person_role LIKE '%Manager%';",
      "SELECT product_name, category, unit_price FROM product WHERE category IN ('Electronics', 'Clothing');",
      "SELECT sale_id, sale_date, amount, quantity FROM sales_data WHERE sale_date < '2022-03-01' AND amount > 2000;",
      "SELECT person_id, person_name, location FROM sales_person WHERE location NOT IN ('New York', 'Los Angeles');",
      "SELECT sale_id, amount, quantity, product_name FROM sales_data JOIN product ON sales_data.product_id = product.product_id WHERE quantity > 5;",
      "SELECT revenue.revenue_id, revenue.revenue_amount, sales_data.amount FROM revenue JOIN sales_data ON revenue.sale_id = sales_data.sale_id WHERE revenue.revenue_amount > sales_data.amount;"
    ]
  }
]