[
  {
    "statements": [
      "SELECT * FROM QuantumSimulations;",
      "SELECT simulation_id, circuit_name FROM QuantumSimulations;",
      "SELECT * FROM QuantumSimulations WHERE num_qubits = 5;",
      "SELECT * FROM QuantumSimulations WHERE algorithm_type = 'Grover';",
      "SELECT circuit_name, execution_time FROM QuantumSimulations;",
      "SELECT * FROM QuantumSimulations WHERE execution_time > '1 day';",
      "SELECT simulation_id, algorithm_type FROM QuantumSimulations;",
      "SELECT * FROM QuantumSimulations WHERE num_qubits < 10;",
      "SELECT simulation_id, circuit_name, num_qubits FROM QuantumSimulations;",
      "SELECT * FROM QuantumSimulations WHERE algorithm_type = 'Shor';",
      "SELECT circuit_name, execution_time FROM QuantumSimulations WHERE num_qubits = 8;",
      "SELECT simulation_id, algorithm_type FROM QuantumSimulations WHERE execution_time < '2 hours';",
      "SELECT * FROM QuantumSimulations WHERE algorithm_type = 'Quantum Fourier Transform';",
      "SELECT circuit_name, execution_time FROM QuantumSimulations WHERE num_qubits > 4;",
      "SELECT * FROM QuantumSimulations WHERE execution_time < '30 minutes';",
      "SELECT simulation_id, circuit_name, algorithm_type FROM QuantumSimulations WHERE num_qubits = 3;",
      "SELECT * FROM QuantumSimulations WHERE algorithm_type = 'Variational Quantum Eigensolver';",
      "SELECT simulation_id, execution_time FROM QuantumSimulations WHERE execution_time > '4 hours';",
      "SELECT * FROM QuantumSimulations WHERE num_qubits = 4;",
      "SELECT circuit_name, execution_time FROM QuantumSimulations WHERE algorithm_type = 'QAOA';",
      "SELECT * FROM QuantumSimulations WHERE num_qubits > 5;",
      "SELECT DISTINCT algorithm_type FROM QuantumSimulations;",
      "SELECT circuit_name, num_qubits FROM QuantumSimulations WHERE algorithm_type = 'Grover';",
      "SELECT * FROM QuantumSimulations WHERE execution_time BETWEEN '00:05:00' AND '01:00:00';",
      "SELECT * FROM QuantumSimulations WHERE circuit_name LIKE 'QFT%';",
      "SELECT COUNT(*) FROM QuantumSimulations WHERE num_qubits = 10;",
      "SELECT AVG(num_qubits) AS avg_qubits FROM QuantumSimulations;",
      "SELECT circuit_name, execution_time FROM QuantumSimulations ORDER BY execution_time DESC;",
      "SELECT * FROM QuantumSimulations WHERE algorithm_type = 'QAOA' AND num_qubits >= 20;",
      "SELECT AVG(EXTRACT(HOUR FROM execution_time)) AS avg_execution_hours FROM QuantumSimulations;",
      "SELECT circuit_name, num_qubits, algorithm_type FROM QuantumSimulations WHERE algorithm_type IN ('HHL', 'VQE');",
      "SELECT * FROM QuantumSimulations WHERE simulation_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT DISTINCT circuit_name, algorithm_type FROM QuantumSimulations;",
      "SELECT algorithm_type, AVG(num_qubits) AS avg_qubits FROM QuantumSimulations GROUP BY algorithm_type;",
      "SELECT * FROM QuantumSimulations WHERE execution_time < INTERVAL '1 day';",
      "SELECT circuit_name FROM QuantumSimulations WHERE num_qubits > 5 LIMIT 5;",
      "SELECT circuit_name, algorithm_type FROM QuantumSimulations WHERE num_qubits = (SELECT MAX(num_qubits) FROM QuantumSimulations);",
      "SELECT * FROM QuantumSimulations WHERE circuit_name = 'Teleportation' AND algorithm_type = 'QFT';",
      "SELECT * FROM QuantumSimulations WHERE algorithm_type LIKE 'V%';",
      "SELECT circuit_name, execution_time FROM QuantumSimulations WHERE algorithm_type = 'SWAP' OR algorithm_type = 'QFT';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM circuits;",
      "SELECT circuit_id, circuit_name FROM circuits WHERE qubits > 5;",
      "SELECT circuit_id, gates FROM circuits WHERE qubits = 10;",
      "SELECT circuit_name FROM circuits WHERE gates < 20;",
      "SELECT * FROM simulations;",
      "SELECT simulation_id, simulation_name FROM simulations WHERE execution_time > 100;",
      "SELECT simulation_id, circuit_id FROM simulations WHERE simulation_name LIKE '%quantum%';",
      "SELECT circuit_name, execution_time FROM circuits JOIN simulations ON circuits.circuit_id = simulations.circuit_id;",
      "SELECT circuits.circuit_name, simulations.simulation_name FROM circuits, simulations WHERE circuits.circuit_id = simulations.circuit_id;",
      "SELECT circuit_id, simulation_id FROM simulations WHERE circuit_id IN (SELECT circuit_id FROM circuits WHERE qubits = 8);",
      "SELECT AVG(execution_time) AS average_execution_time FROM simulations;",
      "SELECT MAX(qubits) AS max_qubits FROM circuits;",
      "SELECT MIN(gates) AS min_gates FROM circuits;",
      "SELECT COUNT(simulation_id) AS num_simulations FROM simulations;",
      "SELECT circuit_name, COUNT(simulation_id) AS num_simulations FROM circuits LEFT JOIN simulations ON circuits.circuit_id = simulations.circuit_id GROUP BY circuits.circuit_name;",
      "SELECT circuit_name, SUM(execution_time) AS total_execution_time FROM circuits JOIN simulations ON circuits.circuit_id = simulations.circuit_id GROUP BY circuit_name;",
      "SELECT circuit_id, AVG(execution_time) AS avg_execution_time FROM simulations GROUP BY circuit_id;",
      "SELECT circuit_name, SUM(gates) AS total_gates FROM circuits GROUP BY circuit_name HAVING total_gates > 50;",
      "SELECT circuit_name, MAX(execution_time) AS max_execution_time FROM simulations JOIN circuits ON simulations.circuit_id = circuits.circuit_id GROUP BY circuit_name HAVING max_execution_time > 200;",
      "SELECT circuit_id, COUNT(simulation_id) AS num_simulations FROM simulations GROUP BY circuit_id HAVING num_simulations >= 5;",
      "SELECT * FROM circuits JOIN simulations ON circuits.circuit_id = simulations.circuit_id WHERE qubits > 5 AND gates < 10 ORDER BY execution_time DESC LIMIT 10;",
      "SELECT circuit_name, simulation_name, execution_time FROM circuits INNER JOIN simulations ON circuits.circuit_id = simulations.circuit_id WHERE qubits >= 2 AND gates <= 7;",
      "SELECT circuit_id, circuit_name, qubits, gates, simulation_name FROM circuits LEFT JOIN simulations ON circuits.circuit_id = simulations.circuit_id;",
      "SELECT circuit_id, circuit_name, qubits, COUNT(simulation_id) AS num_simulations FROM circuits LEFT JOIN simulations ON circuits.circuit_id = simulations.circuit_id GROUP BY circuit_id HAVING num_simulations > 2;",
      "SELECT MAX(qubits) AS max_qubits, AVG(gates) AS avg_gates FROM circuits;",
      "SELECT DISTINCT circuit_name FROM circuits;",
      "SELECT circuit_name, AVG(execution_time) AS avg_execution_time FROM circuits JOIN simulations ON circuits.circuit_id = simulations.circuit_id GROUP BY circuit_name HAVING avg_execution_time > 10;",
      "SELECT circuit_id, simulation_name, execution_time FROM simulations WHERE circuit_id IN (SELECT circuit_id FROM circuits WHERE qubits = 3);",
      "SELECT circuit_id, circuit_name, qubits, gates, simulation_name FROM circuits CROSS JOIN simulations;",
      "SELECT circuit_id, circuit_name, qubits, gates FROM circuits UNION SELECT circuit_id, simulation_name, qubits, execution_time FROM simulations ORDER BY circuit_id ASC;",
      "SELECT circuit_id, circuit_name, qubits, gates FROM circuits UNION SELECT circuit_id, simulation_name, qubits, execution_time FROM simulations ORDER BY qubits DESC;",
      "SELECT circuit_id, AVG(execution_time) AS avg_execution_time FROM simulations GROUP BY circuit_id HAVING avg_execution_time > 5;",
      "SELECT circuit_name, COUNT(simulation_id) AS num_simulations FROM simulations JOIN circuits ON simulations.circuit_id = circuits.circuit_id GROUP BY circuit_name HAVING num_simulations > 1;",
      "SELECT circuit_name, qubits, SUM(gates) AS total_gates FROM circuits GROUP BY circuit_name, qubits HAVING total_gates < 20;",
      "SELECT circuit_id, circuit_name, qubits, gates, execution_time FROM circuits FULL JOIN simulations ON circuits.circuit_id = simulations.circuit_id WHERE execution_time IS NULL;",
      "SELECT circuit_id, circuit_name, qubits, gates FROM circuits WHERE circuit_id BETWEEN 3 AND 7;",
      "SELECT * FROM circuits WHERE circuit_name LIKE '%quantum%';",
      "SELECT circuit_name, CAST(qubits AS VARCHAR) AS qubits_str, CAST(gates AS VARCHAR) AS gates_str FROM circuits;",
      "SELECT circuit_id, circuit_name, qubits, gates FROM circuits LIMIT 5 OFFSET 10;",
      "SELECT * FROM simulations WHERE circuit_id NOT IN (SELECT circuit_id FROM circuits WHERE qubits >= 4);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM quantum_circuits;",
      "SELECT circuit_name, qubit_count FROM quantum_circuits;",
      "SELECT circuit_name, gate_count FROM quantum_circuits WHERE qubit_count > 5;",
      "SELECT * FROM simulation_results;",
      "SELECT circuit_id, execution_time FROM simulation_results;",
      "SELECT * FROM algorithm_analysis;",
      "SELECT algorithm_name, gate_utilization FROM algorithm_analysis;",
      "SELECT algorithm_name, error_rate FROM algorithm_analysis WHERE gate_utilization < 0.5;",
      "SELECT qc.circuit_id, qc.circuit_name, sr.execution_time FROM quantum_circuits qc JOIN simulation_results sr ON qc.circuit_id = sr.circuit_id;",
      "SELECT qc.circuit_name, aa.algorithm_name, aa.error_rate FROM quantum_circuits qc JOIN algorithm_analysis aa ON qc.circuit_id = aa.analysis_id;",
      "SELECT qc.circuit_name, sr.execution_time, aa.error_rate FROM quantum_circuits qc JOIN simulation_results sr ON qc.circuit_id = sr.circuit_id JOIN algorithm_analysis aa ON qc.circuit_id = aa.analysis_id;",
      "SELECT COUNT(*) FROM quantum_circuits;",
      "SELECT AVG(qubit_count) FROM quantum_circuits;",
      "SELECT MIN(gate_count) FROM quantum_circuits;",
      "SELECT MAX(execution_time) FROM simulation_results;",
      "SELECT SUM(gate_utilization) FROM algorithm_analysis;",
      "SELECT DISTINCT algorithm_name FROM algorithm_analysis;",
      "SELECT DISTINCT circuit_name, qubit_count FROM quantum_circuits WHERE gate_count > 10;",
      "SELECT * FROM quantum_circuits ORDER BY qubit_count DESC;",
      "SELECT * FROM algorithm_analysis ORDER BY error_rate ASC;",
      "SELECT * FROM quantum_circuits WHERE qubit_count > 5;",
      "SELECT circuit_name, gate_count FROM quantum_circuits WHERE circuit_id = 'a4c13465-39e2-4c22-b302-5a43431a29ff';",
      "SELECT c.circuit_name, r.execution_time FROM quantum_circuits c JOIN simulation_results r ON c.circuit_id = r.circuit_id;",
      "SELECT a.algorithm_name, a.error_rate FROM algorithm_analysis a WHERE gate_utilization > 0.8;",
      "SELECT COUNT(*) FROM quantum_circuits;",
      "SELECT MAX(qubit_count) FROM quantum_circuits;",
      "SELECT AVG(gate_utilization) FROM algorithm_analysis;",
      "SELECT circuit_name FROM quantum_circuits WHERE circuit_name LIKE 'Quantum%';",
      "SELECT r.execution_time FROM quantum_circuits c JOIN simulation_results r ON c.circuit_id = r.circuit_id WHERE success = TRUE;",
      "SELECT c.circuit_name, a.algorithm_name FROM quantum_circuits c JOIN algorithm_analysis a ON c.qubit_count = a.gate_utilization;",
      "SELECT circuit_name, gate_count FROM quantum_circuits WHERE qubit_count BETWEEN 3 AND 5;",
      "SELECT circuit_id, SUM(gate_count) AS total_gates FROM quantum_circuits GROUP BY circuit_id;",
      "SELECT AVG(execution_time) FROM simulation_results WHERE success = TRUE;",
      "SELECT * FROM quantum_circuits ORDER BY qubit_count DESC;",
      "SELECT a.algorithm_name, COUNT(*) AS num_circuits FROM algorithm_analysis a JOIN quantum_circuits c ON a.gate_utilization = c.qubit_count GROUP BY a.algorithm_name;",
      "SELECT c.circuit_name, r.execution_time FROM quantum_circuits c LEFT JOIN simulation_results r ON c.circuit_id = r.circuit_id;",
      "SELECT DISTINCT a.algorithm_name FROM algorithm_analysis a;",
      "SELECT circuit_name, gate_count, execution_time FROM quantum_circuits c, simulation_results r WHERE c.circuit_id = r.circuit_id;",
      "SELECT circuit_name, gate_count FROM quantum_circuits UNION SELECT circuit_name, gate_count FROM simulation_results;",
      "SELECT circuit_name, gate_count, execution_time, algorithm_name FROM quantum_circuits c JOIN simulation_results r ON c.circuit_id = r.circuit_id JOIN algorithm_analysis a ON c.qubit_count = a.gate_utilization;",
      "SELECT * FROM algorithm_analysis WHERE error_rate > 0.5;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM circuits;",
      "SELECT circuit_name, qubits FROM circuits;",
      "SELECT circuit_id, circuit_name, qubits, gates FROM circuits WHERE qubits > 4;",
      "SELECT * FROM measurements;",
      "SELECT circuit_name, measurement_result FROM circuits JOIN measurements ON circuits.circuit_id = measurements.circuit_id;",
      "SELECT DISTINCT circuit_id FROM measurements;",
      "SELECT * FROM algorithms;",
      "SELECT algorithm_name FROM algorithms WHERE quantum_computer IS NOT NULL;",
      "SELECT * FROM performances;",
      "SELECT algorithm_name, circuit_name, execution_time FROM algorithms JOIN performances ON algorithms.algorithm_id = performances.algorithm_id JOIN circuits ON performances.circuit_id = circuits.circuit_id;",
      "SELECT circuit_name, execution_time FROM circuits JOIN performances ON circuits.circuit_id = performances.circuit_id WHERE execution_time < 100;",
      "SELECT circuit_name, algorithm_name FROM performances JOIN algorithms ON performances.algorithm_id = algorithms.algorithm_id JOIN circuits ON performances.circuit_id = circuits.circuit_id;",
      "SELECT AVG(execution_time) AS avg_execution_time FROM performances;",
      "SELECT COUNT(*) FROM circuits;",
      "SELECT algorithm_name, COUNT(*) AS num_experiments FROM algorithms JOIN performances ON algorithms.algorithm_id = performances.algorithm_id GROUP BY algorithm_name;",
      "SELECT circuit_id, MAX(execution_time) AS max_execution_time FROM performances GROUP BY circuit_id;",
      "SELECT DISTINCT quantum_computer FROM algorithms;",
      "SELECT circuit_name, qubits, AVG(execution_time) AS avg_execution_time FROM circuits JOIN performances ON circuits.circuit_id = performances.circuit_id GROUP BY circuit_name;",
      "SELECT circuit_name, algorithm_name, execution_time FROM circuits JOIN performances ON circuits.circuit_id = performances.circuit_id JOIN algorithms ON performances.algorithm_id = algorithms.algorithm_id ORDER BY execution_time DESC;",
      "SELECT algorithm_name, AVG(execution_time) AS avg_execution_time FROM algorithms JOIN performances ON algorithms.algorithm_id = performances.algorithm_id GROUP BY algorithm_name HAVING AVG(execution_time) > 50;",
      "SELECT * FROM circuits WHERE circuit_id IN (1, 3, 5);",
      "SELECT * FROM circuits",
      "SELECT circuit_name, qubits FROM circuits",
      "SELECT algorithm_name, quantum_computer FROM algorithms",
      "SELECT algorithm_name, execution_time FROM algorithms JOIN performances ON algorithms.algorithm_id = performances.algorithm_id",
      "SELECT circuit_name, measurement_result FROM circuits JOIN measurements ON circuits.circuit_id = measurements.circuit_id",
      "SELECT algorithm_name, circuit_name, execution_time FROM algorithms JOIN performances ON algorithms.algorithm_id = performances.algorithm_id JOIN circuits ON circuits.circuit_id = performances.circuit_id",
      "SELECT * FROM measurements JOIN circuits ON measurements.circuit_id = circuits.circuit_id",
      "SELECT * FROM performances JOIN algorithms ON performances.algorithm_id = algorithms.algorithm_id JOIN circuits ON performances.circuit_id = circuits.circuit_id",
      "SELECT algorithm_name, circuit_name, quantum_computer, execution_time FROM algorithms JOIN performances ON algorithms.algorithm_id = performances.algorithm_id JOIN circuits ON circuits.circuit_id = performances.circuit_id",
      "SELECT measurement_result, circuit_name FROM measurements JOIN circuits ON measurements.circuit_id = circuits.circuit_id"
    ]
  },
  {
    "statements": [
      "SELECT * FROM circuits;",
      "SELECT circuit_name, qubits FROM circuits WHERE qubits > 5;",
      "SELECT circuit_name, gates FROM circuits WHERE circuit_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT simulation_name, start_time, end_time FROM simulations;",
      "SELECT simulation_name, circuit_name FROM simulations JOIN circuits ON simulations.circuit_id = circuits.circuit_id;",
      "SELECT circuit_name, result_data FROM simulations JOIN results ON simulations.simulation_id = results.simulation_id JOIN circuits ON simulations.circuit_id = circuits.circuit_id;",
      "SELECT * FROM simulations WHERE start_time > '2022-01-01 00:00:00';",
      "SELECT algorithm_name FROM algorithms WHERE description LIKE '%optimization%';",
      "SELECT algorithm_name, description FROM algorithms ORDER BY algorithm_name DESC;",
      "SELECT circuit_name, metric_name, metric_value FROM circuits JOIN simulations ON circuits.circuit_id = simulations.circuit_id JOIN results ON simulations.simulation_id = results.simulation_id JOIN performance_metrics ON results.result_id = performance_metrics.result_id;",
      "SELECT * FROM algorithms WHERE algorithm_name IN ('Grover', 'Shor', 'QAOA');",
      "SELECT circuit_name, qubits FROM circuits WHERE circuit_name LIKE 'QFT%';",
      "SELECT * FROM simulations WHERE end_time IS NULL;",
      "SELECT circuit_name, qubits, gates FROM circuits WHERE qubits > 3 AND circuit_name ILIKE '%bell%';",
      "SELECT algorithm_name, description FROM algorithms WHERE LENGTH(description) > 100;",
      "SELECT metric_name, AVG(metric_value) AS avg_metric_value FROM performance_metrics GROUP BY metric_name;",
      "SELECT circuit_name, SUM(metric_value) AS total_metric_value FROM circuits JOIN simulations ON circuits.circuit_id = simulations.circuit_id JOIN results ON simulations.simulation_id = results.simulation_id JOIN performance_metrics ON results.result_id = performance_metrics.result_id GROUP BY circuit_name;",
      "SELECT algorithm_name, COUNT(*) AS num_simulations FROM algorithms JOIN results ON algorithms.algorithm_id = results.algorithm_id GROUP BY algorithm_name;",
      "SELECT circuit_name, MAX(qubits) AS max_qubits FROM circuits GROUP BY circuit_name HAVING MAX(qubits) > 5;",
      "SELECT * FROM circuits WHERE qubits > 5;",
      "SELECT circuit_name, qubits FROM circuits WHERE circuit_id = '1234';",
      "SELECT circuits.circuit_name, simulations.simulation_name FROM circuits INNER JOIN simulations ON circuits.circuit_id = simulations.circuit_id;",
      "SELECT simulations.simulation_name, results.result_data FROM simulations LEFT JOIN results ON simulations.simulation_id = results.simulation_id;",
      "SELECT algorithms.algorithm_name, performance_metrics.metric_value FROM algorithms INNER JOIN performance_metrics ON algorithms.algorithm_id = performance_metrics.metric_id;",
      "SELECT * FROM circuits WHERE circuit_id IN (SELECT circuit_id FROM simulations WHERE simulation_name = 'Example');",
      "SELECT simulation_id, circuit_id FROM simulations WHERE start_time > '2022-01-01';",
      "SELECT circuit_name, gates->'Hadamard' AS hadamard_gates FROM circuits WHERE gates->'Hadamard' > 3;",
      "SELECT circuit_name, qubits, results.result_data->'measurement' AS measurement_result FROM circuits INNER JOIN results ON circuits.circuit_id = results.simulation_id;",
      "SELECT DISTINCT algorithm_name FROM algorithms;",
      "SELECT AVG(metric_value) AS avg_metric_value, MAX(metric_value) AS max_metric_value FROM performance_metrics GROUP BY result_id;",
      "SELECT * FROM performance_metrics WHERE metric_value BETWEEN 0.5 AND 1.0;",
      "SELECT circuit_name, simulation_name, result_data FROM circuits JOIN simulations ON circuits.circuit_id = simulations.circuit_id JOIN results ON simulations.simulation_id = results.simulation_id;",
      "SELECT circuit_name, simulation_name, metric_name, metric_value FROM circuits JOIN simulations ON circuits.circuit_id = simulations.circuit_id JOIN results ON simulations.simulation_id = results.simulation_id JOIN performance_metrics ON results.result_id = performance_metrics.result_id;",
      "SELECT algorithm_name, simulation_name FROM simulations JOIN results ON simulations.simulation_id = results.simulation_id JOIN algorithms ON algorithms.algorithm_id = results.result_id;",
      "SELECT algorithm_name, description FROM algorithms WHERE description LIKE '%optimization%';",
      "SELECT * FROM simulations WHERE start_time >= '2022-01-01' AND end_time <= '2022-02-01';",
      "SELECT circuit_name, COUNT(simulation_id) AS num_simulations FROM circuits LEFT JOIN simulations ON circuits.circuit_id = simulations.circuit_id GROUP BY circuit_name;",
      "SELECT algorithm_name, AVG(metric_value) AS avg_metric_value FROM algorithms JOIN results ON algorithms.algorithm_id = results.result_id JOIN performance_metrics ON results.result_id = performance_metrics.result_id GROUP BY algorithm_name;",
      "SELECT circuit_name, simulation_name, metric_value FROM circuits JOIN simulations ON circuits.circuit_id = simulations.circuit_id JOIN results ON simulations.simulation_id = results.simulation_id JOIN performance_metrics ON results.result_id = performance_metrics.result_id;"
    ]
  }
]