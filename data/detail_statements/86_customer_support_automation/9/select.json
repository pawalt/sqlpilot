[
  {
    "statements": [
      "SELECT * FROM knowledge_base;",
      "SELECT solution_title, solution_description FROM knowledge_base;",
      "SELECT solution_id, solution_title, agent_category FROM knowledge_base;",
      "SELECT * FROM knowledge_base WHERE solution_id = 1;",
      "SELECT solution_title FROM knowledge_base WHERE agent_category = 'Technical';",
      "SELECT * FROM knowledge_base WHERE solution_title LIKE '%error%';",
      "SELECT solution_id, solution_description FROM knowledge_base WHERE agent_category = 'Sales';",
      "SELECT * FROM knowledge_base ORDER BY solution_title ASC;",
      "SELECT solution_title, solution_description FROM knowledge_base ORDER BY solution_id DESC;",
      "SELECT COUNT(*) FROM knowledge_base;",
      "SELECT DISTINCT agent_category FROM knowledge_base;",
      "SELECT AVG(solution_id) FROM knowledge_base;",
      "SELECT MIN(solution_id) FROM knowledge_base;",
      "SELECT MAX(solution_id) FROM knowledge_base;",
      "SELECT UPPER(agent_category) FROM knowledge_base;",
      "SELECT LOWER(solution_title) FROM knowledge_base;",
      "SELECT solution_title || ' - ' || solution_description FROM knowledge_base;",
      "SELECT * FROM knowledge_base LIMIT 5;",
      "SELECT * FROM knowledge_base OFFSET 10;",
      "SELECT * FROM knowledge_base WHERE solution_id IN (1, 2, 3);",
      "SELECT * FROM knowledge_base;",
      "SELECT solution_id, solution_title FROM knowledge_base WHERE agent_category = 'Technical Support';",
      "SELECT * FROM knowledge_base WHERE solution_id = 10;",
      "SELECT solution_title, solution_description FROM knowledge_base WHERE agent_category = 'Sales';",
      "SELECT COUNT(solution_id) FROM knowledge_base;",
      "SELECT solution_id, solution_title FROM knowledge_base ORDER BY solution_id DESC;",
      "SELECT solution_title, LENGTH(solution_description) AS description_length FROM knowledge_base;",
      "SELECT solution_title, LOWER(agent_category) AS category FROM knowledge_base;",
      "SELECT DISTINCT agent_category FROM knowledge_base;",
      "SELECT solution_id, UPPER(solution_title) FROM knowledge_base WHERE agent_category = 'Customer Support';",
      "SELECT AVG(LENGTH(solution_description)) AS avg_description_length FROM knowledge_base;",
      "SELECT solution_id, solution_title FROM knowledge_base WHERE solution_title LIKE '%troubleshoot%';",
      "SELECT MAX(LENGTH(solution_description)) AS max_description_length FROM knowledge_base;",
      "SELECT solution_id, solution_description FROM knowledge_base WHERE CHAR_LENGTH(solution_description) > 100;",
      "SELECT solution_id, solution_title FROM knowledge_base WHERE agent_category IN ('Technical Support', 'Customer Support');",
      "SELECT solution_id, solution_title FROM knowledge_base WHERE solution_description ILIKE '%error%';",
      "SELECT solution_id, solution_title FROM knowledge_base WHERE solution_id BETWEEN 5 AND 10;",
      "SELECT solution_id, solution_title FROM knowledge_base WHERE agent_category NOT IN ('Technical Support');",
      "SELECT AVG(solution_id) AS avg_solution_id FROM knowledge_base;",
      "SELECT solution_id, solution_title FROM knowledge_base WHERE agent_category = 'Sales' ORDER BY agent_category DESC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM solutions;",
      "SELECT solution_id, solution_title FROM solutions;",
      "SELECT solution_id, solution_title, solution_description FROM solutions;",
      "SELECT * FROM best_practices;",
      "SELECT practice_id, practice_title FROM best_practices;",
      "SELECT practice_id, practice_title, practice_description FROM best_practices;",
      "SELECT solution_id, solution_title FROM solutions WHERE solution_id = 1;",
      "SELECT practice_id, practice_title FROM best_practices WHERE practice_id = 1;",
      "SELECT solution_title, solution_description FROM solutions WHERE solution_id = 1;",
      "SELECT practice_title, practice_description FROM best_practices WHERE practice_id = 1;",
      "SELECT * FROM solutions ORDER BY solution_id DESC;",
      "SELECT * FROM best_practices ORDER BY practice_title ASC;",
      "SELECT solution_title, solution_description FROM solutions WHERE solution_id > 10;",
      "SELECT practice_title, practice_description FROM best_practices WHERE practice_id > 5;",
      "SELECT COUNT(*) FROM solutions;",
      "SELECT MAX(solution_id) FROM solutions;",
      "SELECT MIN(practice_id) FROM best_practices;",
      "SELECT AVG(solution_id) FROM solutions;",
      "SELECT DISTINCT solution_title FROM solutions;",
      "SELECT DISTINCT practice_title FROM best_practices;",
      "SELECT * FROM solutions WHERE solution_id = 1;",
      "SELECT solution_title FROM solutions WHERE solution_id = 1;",
      "SELECT * FROM solutions WHERE solution_id > 5 AND solution_id < 10;",
      "SELECT * FROM solutions WHERE solution_title LIKE '%database%';",
      "SELECT solution_title, solution_description FROM solutions WHERE solution_id = 1;",
      "SELECT * FROM solutions JOIN best_practices ON solutions.solution_id = best_practices.practice_id;",
      "SELECT solutions.*, best_practices.* FROM solutions JOIN best_practices ON solutions.solution_id = best_practices.practice_id;",
      "SELECT solutions.solution_title, best_practices.practice_title FROM solutions JOIN best_practices ON solutions.solution_id = best_practices.practice_id;",
      "SELECT solutions.*, best_practices.* FROM solutions LEFT JOIN best_practices ON solutions.solution_id = best_practices.practice_id;",
      "SELECT solutions.solution_title, best_practices.practice_title FROM solutions LEFT JOIN best_practices ON solutions.solution_id = best_practices.practice_id;",
      "SELECT solutions.*, best_practices.* FROM solutions RIGHT JOIN best_practices ON solutions.solution_id = best_practices.practice_id;",
      "SELECT solutions.solution_title, best_practices.practice_title FROM solutions RIGHT JOIN best_practices ON solutions.solution_id = best_practices.practice_id;",
      "SELECT COUNT(*) FROM solutions;",
      "SELECT AVG(solution_id) FROM solutions;",
      "SELECT solution_id, COUNT(*) FROM solutions GROUP BY solution_id;",
      "SELECT solution_id, COUNT(*) FROM solutions GROUP BY solution_id HAVING COUNT(*) > 1;",
      "SELECT MAX(solution_id) FROM solutions;",
      "SELECT MIN(solution_id) FROM solutions;",
      "SELECT * FROM solutions ORDER BY solution_id DESC;",
      "SELECT * FROM solutions ORDER BY solution_title ASC, solution_id DESC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM solutions;",
      "SELECT title, description FROM solutions WHERE category = 'Tech';",
      "SELECT id, title, category FROM solutions WHERE id = 1;",
      "SELECT * FROM agents;",
      "SELECT name, email FROM agents WHERE name LIKE 'A%';",
      "SELECT id, name FROM agents WHERE email = 'example@email.com';",
      "SELECT * FROM interactions;",
      "SELECT agent_id, solution_id, interaction_date FROM interactions WHERE agent_id = 2;",
      "SELECT agent_id, solution_id, interaction_date, notes FROM interactions WHERE solution_id = 3;",
      "SELECT * FROM solutions WHERE id > 5 AND category = 'Health';",
      "SELECT title, description FROM solutions WHERE id = 10 OR category = 'Education';",
      "SELECT id, name, email FROM agents WHERE id < 5;",
      "SELECT * FROM interactions WHERE interaction_date > '2022-01-01';",
      "SELECT agent_id, solution_id FROM interactions WHERE notes LIKE '%urgent%';",
      "SELECT * FROM solutions WHERE category IN ('Tech', 'Finance');",
      "SELECT id, title FROM solutions WHERE title LIKE '%security%' AND category = 'Tech';",
      "SELECT agent_id, COUNT(solution_id) AS total_interactions FROM interactions GROUP BY agent_id;",
      "SELECT category, COUNT(*) AS total FROM solutions GROUP BY category;",
      "SELECT solution_id, AVG(DATE_PART('day', NOW()::timestamp - interaction_date)) AS avg_response_time FROM interactions GROUP BY solution_id;",
      "SELECT id, name, email FROM agents ORDER BY name DESC, id ASC;",
      "SELECT * FROM solutions WHERE category = 'Technology' AND title LIKE '%Software%'",
      "SELECT solutions.title, solutions.category, agents.name FROM solutions JOIN agents ON solutions.id = agents.id WHERE agents.name = 'John Doe'",
      "SELECT solutions.title AS 'Solution Title', solutions.description AS 'Solution Description', interactions.interaction_date FROM solutions INNER JOIN interactions ON solutions.id = interactions.solution_id WHERE interactions.agent_id = 1 ORDER BY interactions.interaction_date DESC",
      "SELECT solutions.title, solutions.category, COUNT(interactions.id) AS 'Interaction Count' FROM solutions LEFT JOIN interactions ON solutions.id = interactions.solution_id GROUP BY solutions.title",
      "SELECT agents.name AS 'Agent Name', solutions.title AS 'Solution Title', interactions.notes AS 'Interaction Notes' FROM agents INNER JOIN interactions ON agents.id = interactions.agent_id INNER JOIN solutions ON interactions.solution_id = solutions.id WHERE agents.name = 'Alice Smith' AND interactions.notes IS NOT NULL ORDER BY interactions.interaction_date DESC",
      "SELECT solutions.title, interactions.interaction_date, interactions.notes FROM solutions LEFT JOIN interactions ON solutions.id = interactions.solution_id WHERE solutions.category = 'Finance' AND interactions.interaction_date >= '2022-01-01' ORDER BY interactions.interaction_date ASC LIMIT 10",
      "SELECT agents.name, solutions.title, interactions.interaction_date FROM agents JOIN interactions ON agents.id = interactions.agent_id JOIN solutions ON interactions.solution_id = solutions.id WHERE agents.email LIKE '%@company.com' ORDER BY interactions.interaction_date DESC",
      "SELECT solutions.title, interactions.interaction_date, agents.email AS 'Agent Email' FROM solutions JOIN interactions ON solutions.id = interactions.solution_id JOIN agents ON interactions.agent_id = agents.id WHERE agents.email NOT LIKE '%@gmail.com' ORDER BY interactions.interaction_date DESC",
      "SELECT solutions.category, interactions.interaction_date, agents.name AS 'Agent Name' FROM interactions JOIN solutions ON interactions.solution_id = solutions.id JOIN agents ON interactions.agent_id = agents.id WHERE solutions.category = 'Healthcare' AND agents.name IN ('Bob Johnson', 'Eva Brown') ORDER BY interactions.interaction_date DESC",
      "SELECT solutions.category, interactions.interaction_date, agents.name AS 'Agent Name', agents.email FROM solutions JOIN interactions ON solutions.id = interactions.solution_id JOIN agents ON interactions.agent_id = agents.id WHERE solutions.category IN ('Technology', 'Business') AND agents.name LIKE '%Doe%' ORDER BY interactions.interaction_date DESC",
      "SELECT agents.name, solutions.title, interactions.interaction_date FROM agents JOIN interactions ON agents.id = interactions.agent_id JOIN solutions ON interactions.solution_id = solutions.id WHERE agents.name = 'John Doe' AND solutions.category = 'Technology' ORDER BY interactions.interaction_date DESC",
      "SELECT solutions.title AS 'Solution Title', solutions.category AS 'Solution Category', agents.name AS 'Agent Name', interactions.interaction_date AS 'Interaction Date' FROM solutions JOIN interactions ON solutions.id = interactions.solution_id JOIN agents ON interactions.agent_id = agents.id WHERE solutions.category = 'Technology' AND agents.name = 'John Doe' ORDER BY interactions.interaction_date DESC",
      "SELECT COUNT(DISTINCT solutions.id) AS 'Solution Count', MAX(interactions.interaction_date) AS 'Latest Interaction Date' FROM solutions LEFT JOIN interactions ON solutions.id = interactions.solution_id WHERE interactions.interaction_date IS NOT NULL",
      "SELECT solutions.title, interactions.interaction_date, COUNT(DISTINCT agents.id) AS 'Agent Count' FROM solutions JOIN interactions ON solutions.id = interactions.solution_id JOIN agents ON interactions.agent_id = agents.id WHERE agents.email LIKE '%@company.com' GROUP BY solutions.title",
      "SELECT solutions.title, interactions.interaction_date, AVG(LENGTH(interactions.notes)) AS 'Average Note Length' FROM solutions JOIN interactions ON solutions.id = interactions.solution_id WHERE interactions.notes IS NOT NULL GROUP BY solutions.title",
      "SELECT agents.name, COUNT(interactions.id) AS 'Interaction Count' FROM agents LEFT JOIN interactions ON agents.id = interactions.agent_id GROUP BY agents.name HAVING COUNT(interactions.id) > 5",
      "SELECT solutions.title, AVG(LENGTH(interactions.notes)) AS 'Average Note Length' FROM solutions INNER JOIN interactions ON solutions.id = interactions.solution_id WHERE LENGTH(interactions.notes) > 0 GROUP BY solutions.title",
      "SELECT interactions.interaction_date, SUM(LENGTH(interactions.notes)) AS 'Total Note Length' FROM interactions WHERE interactions.interaction_date >= '2022-01-01' GROUP BY interactions.interaction_date",
      "SELECT agents.name AS 'Agent Name', COUNT(interactions.id) AS 'Interaction Count', AVG(LENGTH(interactions.notes)) AS 'Average Note Length' FROM agents JOIN interactions ON agents.id = interactions.agent_id GROUP BY agents.name"
    ]
  },
  {
    "statements": [
      "SELECT * FROM solutions;",
      "SELECT id, title, solution_text FROM solutions;",
      "SELECT category, COUNT(*) FROM solutions GROUP BY category;",
      "SELECT * FROM agents;",
      "SELECT name, email FROM agents;",
      "SELECT id, name, phone FROM agents;",
      "SELECT * FROM interactions;",
      "SELECT agent_id, interaction_time, interaction_text FROM interactions;",
      "SELECT * FROM categories;",
      "SELECT id, category_name FROM categories;",
      "SELECT agent_id, COUNT(*) FROM interactions GROUP BY agent_id;",
      "SELECT customer_id, COUNT(*) FROM interactions GROUP BY customer_id;",
      "SELECT agent_id, COUNT(*) FROM interactions WHERE interaction_time > '2022-01-01' GROUP BY agent_id;",
      "SELECT * FROM interactions WHERE interaction_text LIKE '%issue%';",
      "SELECT * FROM solutions WHERE category = 'Troubleshooting';",
      "SELECT * FROM solutions WHERE category = 'Technical Support' AND title LIKE '%error%';",
      "SELECT agent_id, COUNT(*) FROM interactions WHERE interaction_text LIKE '%complaint%' GROUP BY agent_id;",
      "SELECT interaction_time, interaction_text FROM interactions ORDER BY interaction_time DESC;",
      "SELECT * FROM solutions ORDER BY id DESC;",
      "SELECT category, COUNT(*) FROM solutions WHERE id > 50 GROUP BY category;",
      "SELECT agent_id, AVG(interaction_time) FROM interactions GROUP BY agent_id;",
      "SELECT * FROM solutions WHERE category='Database'",
      "SELECT title, solution_text FROM solutions WHERE id=5",
      "SELECT agents.name, agents.email, interactions.interaction_text FROM agents JOIN interactions ON agents.id = interactions.agent_id",
      "SELECT solutions.title, categories.category_name FROM solutions JOIN categories ON solutions.category = categories.id",
      "SELECT DISTINCT category_name FROM categories",
      "SELECT agents.name, COUNT(interactions.id) AS interaction_count FROM agents JOIN interactions ON agents.id = interactions.agent_id GROUP BY agents.name",
      "SELECT * FROM solutions WHERE id IN (SELECT id FROM solutions WHERE category='Security' ORDER BY title DESC LIMIT 5)",
      "SELECT solutions.title, interactions.interaction_text FROM solutions JOIN interactions ON solutions.id = interactions.agent_id WHERE category='Database'",
      "SELECT agents.name, interactions.interaction_text FROM agents JOIN interactions ON agents.id = interactions.agent_id WHERE agents.name IN ('Alice', 'Bob', 'Charlie')",
      "SELECT solutions.title, interactions.interaction_time FROM solutions JOIN interactions ON solutions.id = interactions.agent_id WHERE interactions.interaction_time BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT agents.name, COUNT(DISTINCT interactions.customer_id) AS unique_customers FROM agents JOIN interactions ON agents.id = interactions.agent_id GROUP BY agents.name",
      "SELECT solutions.category, AVG(LENGTH(solution_text)) AS avg_solution_length FROM solutions GROUP BY solutions.category HAVING avg_solution_length > 500",
      "SELECT agents.name, COUNT(DISTINCT interactions.customer_id) AS unique_customers FROM agents JOIN interactions ON agents.id = interactions.agent_id WHERE interactions.interaction_text LIKE '%sensitive%' GROUP BY agents.name",
      "SELECT category_name, COUNT(s.id) AS solution_count FROM categories LEFT JOIN solutions s ON categories.id = s.category GROUP BY category_name",
      "SELECT agents.name, COUNT(interactions.id) AS interaction_count FROM agents JOIN interactions ON agents.id = interactions.agent_id WHERE interactions.interaction_time > '2022-01-01'"
    ]
  },
  {
    "statements": [
      "SELECT * FROM solutions;",
      "SELECT solution_id, solution_title, solution_category FROM solutions;",
      "SELECT solution_id, solution_title FROM solutions WHERE solution_category = 'Tech';",
      "SELECT solution_title, solution_description FROM solutions WHERE solution_id = 1;",
      "SELECT * FROM best_practices;",
      "SELECT practice_name, practice_description FROM best_practices;",
      "SELECT practice_name, practice_description FROM best_practices WHERE practice_category = 'Security';",
      "SELECT * FROM agents;",
      "SELECT agent_name, agent_department FROM agents;",
      "SELECT agent_name FROM agents WHERE agent_department = 'Sales';",
      "SELECT * FROM interactions;",
      "SELECT interaction_id, interaction_date FROM interactions;",
      "SELECT interaction_id, agent_id, customer_id FROM interactions WHERE solution_id = 1;",
      "SELECT * FROM customers;",
      "SELECT customer_name, customer_email FROM customers;",
      "SELECT customer_name, customer_phone FROM customers WHERE customer_id = 1;",
      "SELECT solutions.solution_title, best_practices.practice_name FROM solutions JOIN interactions ON solutions.solution_id = interactions.solution_id JOIN best_practices ON interactions.practice_id = best_practices.practice_id;",
      "SELECT solutions.solution_id, interactions.agent_id, agents.agent_name FROM solutions JOIN interactions ON solutions.solution_id = interactions.solution_id JOIN agents ON interactions.agent_id = agents.agent_id;",
      "SELECT customers.customer_name, interactions.interaction_date FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id;",
      "SELECT interactions.interaction_id, agents.agent_name, best_practices.practice_name FROM interactions JOIN agents ON interactions.agent_id = agents.agent_id JOIN best_practices ON interactions.practice_id = best_practices.practice_id;",
      "SELECT * FROM solutions;",
      "SELECT solution_title, solution_category FROM solutions WHERE solution_category='Technical';",
      "SELECT practice_name, practice_category FROM best_practices WHERE practice_category='Compliance';",
      "SELECT DISTINCT solution_category FROM solutions;",
      "SELECT COUNT(*) FROM solutions;",
      "SELECT solution_id, solution_title FROM solutions WHERE solution_id BETWEEN 1 AND 10;",
      "SELECT practice_name, practice_description FROM best_practices WHERE LENGTH(practice_description) > 100;",
      "SELECT * FROM agents WHERE agent_department='Sales' ORDER BY agent_name ASC;",
      "SELECT customer_name, customer_email FROM customers WHERE LENGTH(customer_email) > 0;",
      "SELECT agent_name, interaction_date FROM agents INNER JOIN interactions ON agents.agent_id = interactions.agent_id;",
      "SELECT interaction_date, agent_name, customer_name FROM interactions JOIN agents ON interactions.agent_id = agents.agent_id JOIN customers ON interactions.customer_id = customers.customer_id;",
      "SELECT solution_id, solution_title, customer_name FROM solutions LEFT JOIN interactions ON solutions.solution_id = interactions.solution_id JOIN customers ON interactions.customer_id = customers.customer_id;",
      "SELECT agent_id, AVG(satisfaction_score) AS avg_score FROM interactions GROUP BY agent_id HAVING AVG(satisfaction_score) > 4;",
      "SELECT MAX(interaction_date) AS latest_interaction FROM interactions;",
      "SELECT agent_id, COUNT(DISTINCT customer_id) AS unique_customers FROM interactions GROUP BY agent_id ORDER BY unique_customers DESC;",
      "SELECT customer_name, COUNT(*), AVG(satisfaction_score) AS avg_score FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id GROUP BY customer_name HAVING COUNT(*) > 1;",
      "SELECT a.agent_name, b.agent_name FROM agents a, agents b WHERE a.agent_department = b.agent_department AND a.agent_name < b.agent_name;",
      "SELECT solution_id, solution_title FROM solutions UNION SELECT practice_id, practice_name FROM best_practices;",
      "SELECT solution_category, COUNT(*) AS total_count FROM solutions GROUP BY solution_category HAVING total_count > 1;",
      "SELECT agent_name, COUNT(*) AS total_interactions FROM agents JOIN interactions ON agents.agent_id = interactions.agent_id GROUP BY agent_name HAVING total_interactions > 3;"
    ]
  }
]