[
  {
    "statements": [
      "SELECT * FROM security_logs WHERE log_id = 1;",
      "SELECT log_id, timestamp FROM security_logs WHERE sensor_type = 'motion';",
      "SELECT DISTINCT(sensor_type) FROM security_logs;",
      "SELECT COUNT(*) FROM security_logs WHERE activity_type = 'login';",
      "SELECT sensor_id, activity_type FROM security_logs WHERE activity_type = 'triggered';",
      "SELECT * FROM security_logs WHERE timestamp > '2022-01-01';",
      "SELECT AVG(sensor_id) FROM security_logs;",
      "SELECT MAX(log_id) FROM security_logs;",
      "SELECT MIN(timestamp) FROM security_logs;",
      "SELECT sensor_type, COUNT(*) FROM security_logs GROUP BY sensor_type;",
      "SELECT log_id, sensor_id, activity_type FROM security_logs WHERE sensor_type = 'door';",
      "SELECT * FROM security_logs WHERE sensor_type LIKE '%camera%';",
      "SELECT DISTINCT(sensor_id) FROM security_logs;",
      "SELECT log_id, sensor_type FROM security_logs WHERE sensor_type = 'motion' AND activity_type = 'triggered';",
      "SELECT * FROM security_logs WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT sensor_id, COUNT(*) FROM security_logs GROUP BY sensor_id;",
      "SELECT sensor_type, MAX(sensor_id) FROM security_logs GROUP BY sensor_type;",
      "SELECT sensor_type, SUM(sensor_id) FROM security_logs GROUP BY sensor_type;",
      "SELECT sensor_type, AVG(sensor_id) FROM security_logs GROUP BY sensor_type;",
      "SELECT DISTINCT(activity_type) FROM security_logs;",
      "SELECT * FROM security_logs WHERE sensor_type = 'motion' AND activity_type = 'intrusion';",
      "SELECT sensor_id, COUNT(log_id) AS total_logs FROM security_logs GROUP BY sensor_id HAVING total_logs > 10;",
      "SELECT DISTINCT sensor_type FROM security_logs WHERE timestamp >= '2022-01-01';",
      "SELECT sensor_id, AVG(log_id) AS avg_logs FROM security_logs GROUP BY sensor_id ORDER BY avg_logs DESC;",
      "SELECT sensor_id, MAX(timestamp) AS last_activity FROM security_logs GROUP BY sensor_id;",
      "SELECT sensor_id, MIN(timestamp) AS first_activity FROM security_logs GROUP BY sensor_id;",
      "SELECT COUNT(DISTINCT sensor_type) AS total_sensor_types FROM security_logs;",
      "SELECT timestamp, COUNT(*) AS total_logs FROM security_logs GROUP BY timestamp ORDER BY timestamp;",
      "SELECT sensor_id, COUNT(*) AS total_logs FROM security_logs WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY sensor_id;",
      "SELECT sensor_id, COUNT(*) AS total_logs FROM security_logs WHERE EXTRACT(MONTH FROM timestamp) = 5 GROUP BY sensor_id;",
      "SELECT sensor_type, COUNT(*) AS total_logs FROM security_logs WHERE EXTRACT(HOUR FROM timestamp) BETWEEN 9 AND 17 GROUP BY sensor_type;",
      "SELECT sensor_id, SUM(log_id) AS total_sum_logs FROM security_logs GROUP BY sensor_id;",
      "SELECT sensor_type, AVG(log_id) AS avg_logs FROM security_logs WHERE EXTRACT(YEAR FROM timestamp) = 2022 GROUP BY sensor_type;",
      "SELECT sensor_id, stdDev(log_id) AS log_std_dev FROM security_logs GROUP BY sensor_id ORDER BY log_std_dev DESC;",
      "SELECT sensor_id, MAX(log_id) - MIN(log_id) AS log_range FROM security_logs GROUP BY sensor_id HAVING log_range > 1000;",
      "SELECT sensor_type, MAX(sensor_id) AS max_sensor_id FROM security_logs GROUP BY sensor_type;",
      "SELECT sensor_id, COUNT(*) AS total_logs FROM security_logs WHERE timestamp > '2022-06-01' AND timestamp < '2022-07-01' GROUP BY sensor_id;",
      "SELECT sensor_id, sensor_type, COUNT(*) AS total_logs FROM security_logs GROUP BY sensor_id, sensor_type HAVING COUNT(*) > 5;",
      "SELECT sensor_type, AVG(sensor_id) AS avg_sensor_id FROM security_logs GROUP BY sensor_type;",
      "SELECT sensor_id, DATE_PART('month', timestamp) AS month FROM security_logs WHERE DATE_PART('year', timestamp) = 2022 GROUP BY sensor_id, month ORDER BY sensor_id, month ASC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM SecurityEvents;",
      "SELECT event_id, event_timestamp FROM SecurityEvents;",
      "SELECT event_id, sensor_type FROM SecurityEvents;",
      "SELECT * FROM Users;",
      "SELECT user_id, username FROM Users;",
      "SELECT user_id, email FROM Users;",
      "SELECT event_id, event_type FROM SecurityEvents WHERE sensor_type = 'motion';",
      "SELECT * FROM Users WHERE username = 'john_doe';",
      "SELECT full_name, email FROM Users WHERE username = 'alice_smith';",
      "SELECT user_id, username, email FROM Users WHERE username LIKE 'b%';",
      "SELECT * FROM SecurityEvents ORDER BY event_timestamp DESC;",
      "SELECT * FROM Users ORDER BY full_name ASC;",
      "SELECT COUNT(*) FROM SecurityEvents;",
      "SELECT COUNT(DISTINCT sensor_type) FROM SecurityEvents;",
      "SELECT AVG(event_id) FROM SecurityEvents;",
      "SELECT DISTINCT sensor_type FROM SecurityEvents;",
      "SELECT sensor_type, COUNT(*) FROM SecurityEvents GROUP BY sensor_type;",
      "SELECT event_type, COUNT(*) FROM SecurityEvents GROUP BY event_type;",
      "SELECT username, email, COUNT(*) FROM Users GROUP BY username, email;",
      "SELECT username, email, COUNT(*) FROM Users GROUP BY username, email HAVING COUNT(*) > 1;",
      "SELECT * FROM SecurityEvents WHERE sensor_type = 'Motion' AND event_type = 'Alert';",
      "SELECT event_id, event_timestamp FROM SecurityEvents WHERE sensor_type = 'Temperature';",
      "SELECT user_id, full_name FROM Users WHERE username = 'admin';",
      "SELECT event_id, event_timestamp, sensor_type FROM SecurityEvents WHERE event_timestamp >= '2022-01-01';",
      "SELECT * FROM Users WHERE email LIKE '%@gmail.com';",
      "SELECT * FROM SecurityEvents WHERE event_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT user_id, username FROM Users WHERE full_name LIKE '%Smith%';",
      "SELECT * FROM SecurityEvents WHERE sensor_type IN ('Motion', 'Fire');",
      "SELECT event_id, sensor_type FROM SecurityEvents WHERE event_type = 'Alert' ORDER BY event_timestamp DESC;",
      "SELECT * FROM Users WHERE username = 'john.doe' OR email = 'john.doe@example.com';",
      "SELECT COUNT(*) FROM SecurityEvents;",
      "SELECT event_type, COUNT(*) AS event_count FROM SecurityEvents GROUP BY event_type;",
      "SELECT user_id, username FROM Users WHERE user_id BETWEEN 5 AND 10;",
      "SELECT event_id, sensor_type FROM SecurityEvents WHERE sensor_type LIKE 'Fi%';",
      "SELECT * FROM Users WHERE email NOT LIKE '%@yahoo.com';",
      "SELECT * FROM SecurityEvents WHERE event_timestamp::DATE = CURRENT_DATE;",
      "SELECT event_id, event_timestamp, sensor_type, event_type FROM SecurityEvents WHERE sensor_type = 'Temperature' AND event_type = 'Warning';",
      "SELECT * FROM Users ORDER BY full_name ASC;",
      "SELECT * FROM SecurityEvents WHERE EXTRACT(HOUR FROM event_timestamp) < 12;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM security_events",
      "SELECT event_id, sensor_id, event_type FROM security_events",
      "SELECT event_id, event_timestamp FROM security_events",
      "SELECT event_description FROM security_events",
      "SELECT sensor_id, sensor_type, sensor_location FROM sensor_devices",
      "SELECT * FROM sensor_devices",
      "SELECT user_id, user_name FROM security_users",
      "SELECT user_email FROM security_users",
      "SELECT * FROM security_events WHERE sensor_id='e6f99517-53bf-49b4-8e70-cc2736ee090e'",
      "SELECT * FROM security_events WHERE event_type='alert'",
      "SELECT * FROM sensor_devices WHERE sensor_type='motion'",
      "SELECT * FROM sensor_devices WHERE sensor_location='entrance'",
      "SELECT * FROM security_users WHERE user_role='admin'",
      "SELECT * FROM security_users WHERE user_email='john.doe@example.com'",
      "SELECT COUNT(*) FROM security_events",
      "SELECT MAX(event_timestamp) FROM security_events",
      "SELECT MIN(event_timestamp) FROM security_events",
      "SELECT AVG(event_timestamp) FROM security_events",
      "SELECT DISTINCT event_type FROM security_events",
      "SELECT * FROM security_events WHERE event_type = 'intrusion' AND sensor_id = '11111111-1111-1111-1111-111111111111';",
      "SELECT event_id, event_type, event_timestamp FROM security_events WHERE event_timestamp >= '2022-01-01 00:00:00';",
      "SELECT user_name, user_email FROM security_users WHERE user_role = 'admin';",
      "SELECT sensor_id, sensor_type, sensor_location FROM sensor_devices WHERE sensor_location = 'Room A' ORDER BY sensor_type ASC;",
      "SELECT * FROM security_events INNER JOIN sensor_devices ON security_events.sensor_id = sensor_devices.sensor_id;",
      "SELECT event_id, event_timestamp, sensor_type FROM security_events LEFT JOIN sensor_devices ON security_events.sensor_id = sensor_devices.sensor_id;",
      "SELECT event_description FROM security_events WHERE event_type = 'fire' UNION SELECT event_description FROM security_events WHERE event_type = 'water leak';",
      "SELECT user_id, user_name, sensor_location FROM security_users CROSS JOIN sensor_devices;",
      "SELECT event_id, event_type, event_timestamp FROM security_events WHERE event_type LIKE '%thre%';",
      "SELECT * FROM sensor_devices WHERE sensor_type IN ('motion sensor', 'door sensor');",
      "SELECT COUNT(*) AS total_events FROM security_events;",
      "SELECT DISTINCT sensor_type FROM sensor_devices ORDER BY sensor_type;",
      "SELECT AVG(TIMESTAMPDIFF(SECOND, event_timestamp, NOW())) AS avg_event_age FROM security_events;",
      "SELECT event_type, COUNT(*) AS event_count FROM security_events GROUP BY event_type ORDER BY event_count DESC;",
      "SELECT user_name, user_email, COUNT(event_id) AS total_events FROM security_users INNER JOIN security_events ON security_users.user_id = security_events.sensor_id GROUP BY user_name, user_email ORDER BY total_events DESC;",
      "SELECT event_id, event_timestamp, event_description FROM security_events WHERE event_type = 'intrusion' AND event_timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-06-30 23:59:59';",
      "SELECT user_name, sensor_location FROM security_users LEFT JOIN sensor_devices ON security_users.user_id = sensor_devices.sensor_id;",
      "SELECT sensor_id, COUNT(event_id) AS total_events FROM security_events GROUP BY sensor_id HAVING total_events > 10;",
      "SELECT user_role, COUNT(user_id) AS total_users FROM security_users GROUP BY user_role ORDER BY total_users DESC;",
      "SELECT event_id, event_description, sensor_location FROM security_events LEFT JOIN sensor_devices ON security_events.sensor_id = sensor_devices.sensor_id WHERE sensor_type = 'camera';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM door_sensor_events;",
      "SELECT event_id, timestamp FROM window_sensor_events;",
      "SELECT sensor_id, action FROM alarm_events;",
      "SELECT * FROM door_sensor_events WHERE sensor_id = 1;",
      "SELECT event_id, action FROM window_sensor_events WHERE action = 'open';",
      "SELECT sensor_type, alert_message FROM alarm_events WHERE sensor_type = 'motion';",
      "SELECT event_id, timestamp FROM log_events WHERE log_type = 'error';",
      "SELECT * FROM door_sensor_events ORDER BY timestamp DESC;",
      "SELECT sensor_id, timestamp FROM window_sensor_events ORDER BY timestamp ASC;",
      "SELECT * FROM alarm_events LIMIT 10;",
      "SELECT event_id, description FROM log_events WHERE event_id BETWEEN 100 AND 200;",
      "SELECT MAX(event_id) FROM door_sensor_events;",
      "SELECT AVG(sensor_id) FROM window_sensor_events;",
      "SELECT COUNT(*) FROM alarm_events WHERE sensor_type = 'fire';",
      "SELECT sensor_id, timestamp FROM door_sensor_events WHERE timestamp > '2022-01-01';",
      "SELECT MIN(timestamp) FROM window_sensor_events;",
      "SELECT event_id, log_type FROM log_events WHERE description LIKE '%critical%';",
      "SELECT DISTINCT sensor_type FROM alarm_events;",
      "SELECT sensor_id, action, timestamp FROM door_sensor_events WHERE sensor_id = 2 AND action = 'closed';",
      "SELECT AVG(event_id) FROM window_sensor_events;",
      "SELECT * FROM door_sensor_events WHERE event_id = 1;",
      "SELECT sensor_id, timestamp FROM window_sensor_events WHERE action = 'opened';",
      "SELECT event_id, sensor_type, timestamp FROM alarm_events WHERE timestamp >= '2022-01-01';",
      "SELECT event_id, log_type FROM log_events WHERE description LIKE '%error%';",
      "SELECT * FROM door_sensor_events INNER JOIN window_sensor_events ON door_sensor_events.sensor_id = window_sensor_events.sensor_id;",
      "SELECT * FROM alarm_events LEFT JOIN log_events ON alarm_events.event_id = log_events.event_id;",
      "SELECT sensor_id, COUNT(*) AS num_events FROM door_sensor_events GROUP BY sensor_id HAVING num_events > 10;",
      "SELECT DISTINCT sensor_id FROM window_sensor_events;",
      "SELECT sensor_id, timestamp FROM door_sensor_events WHERE sensor_id IN (SELECT sensor_id FROM window_sensor_events WHERE action = 'smashed');",
      "SELECT event_id, sensor_type, timestamp FROM alarm_events ORDER BY timestamp DESC LIMIT 5;",
      "SELECT sensor_id, MAX(timestamp) AS latest_timestamp FROM window_sensor_events GROUP BY sensor_id;",
      "SELECT log_type, COUNT(*) AS num_logs FROM log_events GROUP BY log_type ORDER BY num_logs DESC;",
      "SELECT sensor_id, MIN(timestamp) AS earliest_timestamp FROM door_sensor_events GROUP BY sensor_id;",
      "SELECT sensor_id, AVG(timestamp) AS avg_timestamp FROM door_sensor_events GROUP BY sensor_id HAVING avg_timestamp > '2022-01-01';",
      "SELECT sensor_id, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS time_diff FROM door_sensor_events GROUP BY sensor_id;",
      "SELECT sensor_id, COUNT(*) AS total_events FROM window_sensor_events UNION SELECT sensor_id, COUNT(*) AS total_events FROM door_sensor_events;",
      "SELECT sensor_id, DATE(timestamp) AS event_date FROM alarm_events WHERE sensor_type = 'motion_detector' ORDER BY event_date;",
      "SELECT sensor_id, COUNT(*) AS num_events FROM window_sensor_events GROUP BY sensor_id ORDER BY num_events DESC;",
      "SELECT sensor_id, COUNT(*) AS num_events FROM door_sensor_events WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY sensor_id;",
      "SELECT sensor_id, AVG(CAST(SUBSTRING(action, 4) AS DECIMAL)) AS avg_action_number FROM door_sensor_events GROUP BY sensor_id HAVING avg_action_number > 0;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM security_events;",
      "SELECT event_id, event_type, event_time FROM security_events;",
      "SELECT sensor_id, sensor_type FROM sensors;",
      "SELECT * FROM sensors WHERE sensor_location='Room A';",
      "SELECT user_id, username FROM users;",
      "SELECT * FROM users WHERE email LIKE '%@example.com';",
      "SELECT door_id, door_location, door_status FROM doors;",
      "SELECT * FROM doors WHERE door_status='locked';",
      "SELECT window_id, window_location, window_status FROM windows;",
      "SELECT * FROM windows WHERE window_status='open';",
      "SELECT event_id, event_type, sensor_type, sensor_id, event_time FROM security_events WHERE event_type='Intrusion';",
      "SELECT event_id, event_type, sensor_type, sensor_id FROM security_events WHERE sensor_id=1;",
      "SELECT user_id, username FROM users WHERE user_id=100;",
      "SELECT door_id, door_location, door_status FROM doors WHERE door_location='Main Entrance';",
      "SELECT window_id, window_location, window_status FROM windows WHERE window_location='Bedroom';",
      "SELECT event_id, event_type, sensor_type, sensor_id, event_time FROM security_events WHERE event_time > '2021-01-01';",
      "SELECT * FROM security_events ORDER BY event_time DESC;",
      "SELECT * FROM sensors ORDER BY sensor_id;",
      "SELECT * FROM doors ORDER BY door_location;",
      "SELECT * FROM windows ORDER BY window_id DESC;",
      "SELECT * FROM security_events WHERE event_type = 'intrusion';",
      "SELECT sensor_type, sensor_location FROM sensors WHERE sensor_type = 'motion_sensor';",
      "SELECT * FROM users WHERE username LIKE 'admin%';",
      "SELECT event_id, event_type, sensor_type FROM security_events WHERE event_time BETWEEN '2022-01-01 00:00:00' AND '2022-01-31 23:59:59';",
      "SELECT DISTINCT sensor_type FROM sensors;",
      "SELECT username, email FROM users WHERE email LIKE '%example.com';",
      "SELECT * FROM security_events WHERE sensor_id = (SELECT sensor_id FROM sensors WHERE sensor_type = 'motion_sensor');",
      "SELECT door_id, door_location, door_status FROM doors WHERE door_status = 'open';",
      "SELECT DISTINCT sensor_location FROM sensors WHERE sensor_type = 'security_sensor';",
      "SELECT * FROM security_events ORDER BY event_time DESC;",
      "SELECT * FROM sensors WHERE sensor_type IN ('temperature_sensor', 'motion_sensor');",
      "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM security_events);",
      "SELECT sensor_type, COUNT(sensor_id) AS sensor_count FROM sensors GROUP BY sensor_type;",
      "SELECT * FROM doors WHERE door_location LIKE '%lobby%';",
      "SELECT COUNT(event_id) AS total_events FROM security_events;",
      "SELECT * FROM windows WHERE window_status = 'open';",
      "SELECT event_id, event_type, sensor_id FROM security_events WHERE event_time > '2022-02-15';",
      "SELECT sensor_id, sensor_location FROM sensors ORDER BY sensor_id ASC;",
      "SELECT * FROM users WHERE user_id = (SELECT MAX(user_id) FROM users);",
      "SELECT * FROM security_events WHERE sensor_id IN (SELECT sensor_id FROM sensors WHERE sensor_location = 'hallway');"
    ]
  }
]