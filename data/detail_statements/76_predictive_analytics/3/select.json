[
  {
    "statements": [
      "SELECT * FROM fraudulent_transactions LIMIT 10;",
      "SELECT transaction_id, amount FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
      "SELECT user_id, merchant_id, amount FROM fraudulent_transactions WHERE amount > 1000;",
      "SELECT * FROM fraudulent_transactions WHERE transaction_date = '2022-03-15';",
      "SELECT COUNT(transaction_id) FROM fraudulent_transactions;",
      "SELECT AVG(amount) AS average_amount FROM fraudulent_transactions;",
      "SELECT MAX(amount) AS max_amount FROM fraudulent_transactions;",
      "SELECT MIN(amount) AS min_amount FROM fraudulent_transactions;",
      "SELECT DISTINCT user_id FROM fraudulent_transactions;",
      "SELECT user_id, COUNT(*) AS transaction_count FROM fraudulent_transactions GROUP BY user_id HAVING COUNT(*) > 5;",
      "SELECT user_id, AVG(amount) AS average_amount FROM fraudulent_transactions GROUP BY user_id;",
      "SELECT merchant_id, SUM(amount) AS total_amount FROM fraudulent_transactions GROUP BY merchant_id;",
      "SELECT * FROM fraudulent_transactions ORDER BY transaction_date DESC LIMIT 5;",
      "SELECT * FROM fraudulent_transactions WHERE is_fraudulent = FALSE ORDER BY amount DESC;",
      "SELECT * FROM fraudulent_transactions WHERE transaction_date BETWEEN '2022-03-01' AND '2022-03-31';",
      "SELECT * FROM fraudulent_transactions WHERE user_id = '123456' AND is_fraudulent = TRUE;",
      "SELECT * FROM fraudulent_transactions WHERE amount BETWEEN 500 AND 1000;",
      "SELECT * FROM fraudulent_transactions WHERE is_fraudulent = TRUE AND transaction_date < '2022-03-15';",
      "SELECT user_id, AVG(amount) AS average_amount FROM fraudulent_transactions WHERE is_fraudulent = FALSE GROUP BY user_id HAVING AVG(amount) > 500;",
      "SELECT transaction_id, amount FROM fraudulent_transactions WHERE user_id = '789101' AND is_fraudulent = TRUE;",
      "SELECT transaction_id, amount, merchant_id, user_id, transaction_date, is_fraudulent FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
      "SELECT * FROM fraudulent_transactions WHERE amount > 1000 AND transaction_date >= '2022-01-01';",
      "SELECT user_id, COUNT(*) AS num_transactions FROM fraudulent_transactions GROUP BY user_id HAVING num_transactions > 5;",
      "SELECT merchant_id, AVG(amount) AS avg_amount FROM fraudulent_transactions GROUP BY merchant_id HAVING avg_amount > 500;",
      "SELECT user_id, SUM(amount) AS total_spent FROM fraudulent_transactions GROUP BY user_id ORDER BY total_spent DESC LIMIT 3;",
      "SELECT COUNT(*) AS num_fraudulent_transactions FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
      "SELECT user_id, MAX(amount) AS max_amount FROM fraudulent_transactions GROUP BY user_id;",
      "SELECT DISTINCT merchant_id FROM fraudulent_transactions WHERE amount > 1000;",
      "SELECT user_id, MIN(amount) AS min_amount FROM fraudulent_transactions GROUP BY user_id;",
      "SELECT * FROM fraudulent_transactions WHERE user_id = '123e4567-e89b-12d3-a456-426614174001';",
      "SELECT user_id, AVG(amount) AS avg_amount FROM fraudulent_transactions WHERE is_fraudulent = FALSE GROUP BY user_id HAVING avg_amount < 500;",
      "SELECT COUNT(DISTINCT user_id) AS num_users_with_fraudulent_transactions FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
      "SELECT transaction_id, transaction_date FROM fraudulent_transactions ORDER BY transaction_date DESC LIMIT 10;",
      "SELECT AVG(amount) AS avg_amount FROM fraudulent_transactions;",
      "SELECT * FROM fraudulent_transactions WHERE user_id IN ('123e4567-e89b-12d3-a456-426614174001', '223e4567-e89b-12d3-a456-426614174002');",
      "SELECT SUM(amount) AS total_amount FROM fraudulent_transactions WHERE transaction_date >= '2022-01-01';",
      "SELECT merchant_id, COUNT(*) AS num_transactions FROM fraudulent_transactions WHERE is_fraudulent = FALSE GROUP BY merchant_id HAVING num_transactions > 2;",
      "SELECT AVG(amount) AS avg_amount FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
      "SELECT DISTINCT user_id FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
      "SELECT user_id, COUNT(*) AS num_transactions FROM fraudulent_transactions WHERE amount > 500 GROUP BY user_id HAVING num_transactions > 3;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM transactions;",
      "SELECT transaction_id, amount, description FROM transactions;",
      "SELECT transaction_id, amount, description, is_fraud FROM transactions WHERE is_fraud = TRUE;",
      "SELECT * FROM machine_learning_models;",
      "SELECT model_name, algorithm FROM machine_learning_models;",
      "SELECT model_id, model_name, accuracy FROM machine_learning_models WHERE accuracy > 0.8;",
      "SELECT description FROM transactions WHERE amount > 100;",
      "SELECT * FROM transactions WHERE transaction_id = 123;",
      "SELECT model_id, model_name FROM machine_learning_models WHERE algorithm = 'Random Forest';",
      "SELECT transaction_id, description FROM transactions WHERE description LIKE '%fraud%';",
      "SELECT * FROM transactions ORDER BY amount DESC;",
      "SELECT model_id, model_name, accuracy FROM machine_learning_models ORDER BY accuracy DESC;",
      "SELECT AVG(amount) AS avg_amount FROM transactions;",
      "SELECT COUNT(*) AS total_transactions FROM transactions;",
      "SELECT MAX(accuracy) AS max_accuracy FROM machine_learning_models;",
      "SELECT MIN(amount) AS min_amount FROM transactions;",
      "SELECT SUM(amount) AS total_amount FROM transactions;",
      "SELECT * FROM transactions WHERE transaction_id BETWEEN 100 AND 200;",
      "SELECT model_id, model_name FROM machine_learning_models WHERE accuracy >= 0.7 AND accuracy <= 0.9;",
      "SELECT COUNT(*) AS total_fraud_transactions FROM transactions WHERE is_fraud = TRUE;",
      "SELECT * FROM transactions WHERE amount > 1000 AND description LIKE '%fraud%';",
      "SELECT transaction_id, description FROM transactions WHERE is_fraud = TRUE;",
      "SELECT model_name, algorithm FROM machine_learning_models WHERE accuracy > 0.9;",
      "SELECT COUNT(*) AS total_transactions FROM transactions;",
      "SELECT AVG(amount) AS average_amount FROM transactions;",
      "SELECT * FROM transactions t JOIN machine_learning_models m ON t.transaction_id = m.model_id;",
      "SELECT t.*, m.model_name FROM transactions t JOIN machine_learning_models m ON t.transaction_id = m.model_id;",
      "SELECT t.transaction_id, m.model_name FROM transactions t JOIN machine_learning_models m ON t.transaction_id = m.model_id WHERE t.amount > 500;",
      "SELECT t.transaction_id, m.model_name FROM transactions t LEFT JOIN machine_learning_models m ON t.transaction_id = m.model_id;",
      "SELECT t.transaction_id, COALESCE(m.model_name, 'No Model') AS model_name FROM transactions t LEFT JOIN machine_learning_models m ON t.transaction_id = m.model_id;",
      "SELECT transaction_id, amount, CASE WHEN amount >= 1000 THEN 'large' ELSE 'small' END AS transaction_size FROM transactions;",
      "SELECT transaction_id, amount, description, ROW_NUMBER() OVER (ORDER BY transaction_id) AS row_num FROM transactions;",
      "SELECT model_name, algorithm, RANK() OVER (ORDER BY accuracy DESC) AS model_rank FROM machine_learning_models;",
      "SELECT t.transaction_id, m.model_name FROM transactions t FULL OUTER JOIN machine_learning_models m ON t.transaction_id = m.model_id;",
      "SELECT MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM transactions;",
      "SELECT COUNT(*) AS total_fraudulent_transactions FROM transactions WHERE is_fraud = TRUE;",
      "SELECT model_name, AVG(accuracy) AS avg_accuracy FROM machine_learning_models GROUP BY model_name;",
      "SELECT AVG(amount) AS avg_amount, algorithm FROM transactions t JOIN machine_learning_models m ON t.transaction_id = m.model_id GROUP BY algorithm;",
      "SELECT t.transaction_id, m.model_name, AVG(amount) AS avg_amount FROM transactions t JOIN machine_learning_models m ON t.transaction_id = m.model_id GROUP BY t.transaction_id, m.model_name;",
      "SELECT model_name, COUNT(*) AS total_models FROM machine_learning_models GROUP BY model_name HAVING COUNT(*) > 1;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM transactions;",
      "SELECT transaction_id, amount, merchant FROM transactions WHERE is_fraudulent = TRUE;",
      "SELECT customer_id, name, email FROM customers;",
      "SELECT * FROM fraud_predictions WHERE prediction_result = TRUE;",
      "SELECT transaction_id, amount, merchant, is_fraudulent FROM transactions WHERE amount > 1000;",
      "SELECT * FROM customers WHERE phone_number LIKE '%1234';",
      "SELECT prediction_id, transaction_id, prediction_result FROM fraud_predictions WHERE model_version = 'v1.0';",
      "SELECT transaction_id, amount, transaction_date, merchant FROM transactions WHERE is_fraudulent = FALSE;",
      "SELECT * FROM customers WHERE email LIKE '%@example.com';",
      "SELECT prediction_id, transaction_id, model_version FROM fraud_predictions WHERE prediction_result = FALSE;",
      "SELECT transaction_id, amount, transaction_date, merchant FROM transactions WHERE amount BETWEEN 500 AND 1000;",
      "SELECT * FROM customers WHERE name LIKE 'J%';",
      "SELECT prediction_id, transaction_id, prediction_result FROM fraud_predictions WHERE prediction_date > '2022-01-01';",
      "SELECT transaction_id, amount, merchant, is_fraudulent FROM transactions ORDER BY amount DESC;",
      "SELECT * FROM customers WHERE email LIKE '%gmail.com';",
      "SELECT prediction_id, transaction_id, prediction_result FROM fraud_predictions WHERE model_version = 'v2.0';",
      "SELECT transaction_id, amount, transaction_date, merchant FROM transactions WHERE is_fraudulent = TRUE AND amount > 500;",
      "SELECT * FROM customers WHERE phone_number = '123-456-7890';",
      "SELECT prediction_id, transaction_id, model_version FROM fraud_predictions WHERE prediction_result = TRUE;",
      "SELECT transaction_id, amount, merchant, is_fraudulent FROM transactions WHERE transaction_date > '2022-03-01';",
      "SELECT * FROM transactions WHERE amount > 1000",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT COUNT(*) FROM transactions WHERE merchant = 'Amazon'",
      "SELECT transaction_id, amount, transaction_date FROM transactions WHERE is_fraudulent = TRUE",
      "SELECT * FROM customers WHERE name LIKE 'J%'",
      "SELECT customer_id, email FROM customers WHERE phone_number IS NULL",
      "SELECT * FROM fraud_predictions WHERE prediction_result = FALSE",
      "SELECT * FROM fraud_predictions WHERE prediction_date > '2022-01-01'",
      "SELECT transaction_id, prediction_result FROM fraud_predictions WHERE model_version = 'v1'",
      "SELECT COUNT(*) FROM fraud_predictions WHERE model_version = 'v2'",
      "SELECT t.transaction_id, t.amount, f.prediction_result FROM transactions t JOIN fraud_predictions f ON t.transaction_id = f.transaction_id",
      "SELECT c.name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.transaction_id WHERE t.amount > 500",
      "SELECT c.name, COUNT(*) AS total_transactions FROM customers c JOIN transactions t ON c.customer_id = t.transaction_id GROUP BY c.name",
      "SELECT * FROM transactions WHERE transaction_id IN (SELECT transaction_id FROM fraud_predictions WHERE prediction_result = TRUE)",
      "SELECT * FROM transactions WHERE transaction_id NOT IN (SELECT transaction_id FROM fraud_predictions WHERE prediction_result = TRUE)",
      "SELECT MAX(amount) FROM transactions",
      "SELECT AVG(amount) FROM transactions",
      "SELECT MIN(amount) FROM transactions",
      "SELECT SUM(amount) FROM transactions",
      "SELECT AVG(amount) AS avg_amount, MAX(amount) AS max_amount, MIN(amount) AS min_amount, SUM(amount) AS total_amount FROM transactions"
    ]
  },
  {
    "statements": [
      "SELECT * FROM transactions LIMIT 10;",
      "SELECT user_id, name FROM users WHERE email LIKE '%gmail.com';",
      "SELECT model_name, model_accuracy FROM models ORDER BY model_accuracy DESC;",
      "SELECT * FROM predictions WHERE confidence > 0.8 AND prediction_result = true;",
      "SELECT transaction_id, amount, timestamp FROM transactions WHERE is_fraudulent = true ORDER BY timestamp DESC LIMIT 5;",
      "SELECT user_id, COUNT(transaction_id) AS num_transactions FROM transactions GROUP BY user_id;",
      "SELECT model_id, AVG(model_accuracy) AS avg_accuracy FROM models GROUP BY model_id;",
      "SELECT user_id, name, email FROM users WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT prediction_id, model_id, prediction_result FROM predictions WHERE transaction_id = '98765432-aaaa-bbbb-cccc-210987654321';",
      "SELECT user_id, name FROM users WHERE name LIKE '%Alice%' OR name LIKE '%Bob%';",
      "SELECT SUM(amount) AS total_amount FROM transactions;",
      "SELECT name, email FROM users WHERE email LIKE '%yahoo.com';",
      "SELECT * FROM models WHERE model_accuracy >= 0.9;",
      "SELECT transaction_id, MAX(amount) AS max_amount FROM transactions;",
      "SELECT model_id, AVG(confidence) AS avg_confidence FROM predictions GROUP BY model_id;",
      "SELECT user_id, COUNT(DISTINCT transaction_id) AS num_unique_transactions FROM transactions GROUP BY user_id;",
      "SELECT model_name, model_accuracy FROM models WHERE model_accuracy BETWEEN 0.7 AND 0.8;",
      "SELECT * FROM predictions WHERE prediction_result = false;",
      "SELECT * FROM transactions WHERE timestamp >= '2022-01-01';",
      "SELECT user_id, COUNT(*) AS num_records FROM users GROUP BY user_id HAVING COUNT(*) > 1;",
      "SELECT * FROM transactions WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT * FROM users WHERE email LIKE '%@example.com';",
      "SELECT transaction_id, amount FROM transactions ORDER BY timestamp DESC LIMIT 10;",
      "SELECT COUNT(*) FROM predictions WHERE prediction_result = true;",
      "SELECT users.name, transactions.amount FROM users JOIN transactions ON users.user_id = transactions.user_id;",
      "SELECT predictions.prediction_result, models.model_name FROM predictions JOIN models ON predictions.model_id = models.model_id;",
      "SELECT AVG(amount) FROM transactions WHERE is_fraudulent = true;",
      "SELECT users.name, COUNT(transactions.transaction_id) AS transaction_count FROM users JOIN transactions ON users.user_id = transactions.user_id GROUP BY users.name ORDER BY transaction_count DESC;",
      "SELECT COUNT(*) AS total_predictions FROM predictions WHERE confidence > 0.8;",
      "SELECT users.name, AVG(models.model_accuracy) AS avg_accuracy FROM users JOIN predictions ON users.user_id = predictions.user_id JOIN models ON predictions.model_id = models.model_id GROUP BY users.name HAVING avg_accuracy > 0.9;",
      "SELECT DISTINCT users.name FROM users JOIN transactions ON users.user_id = transactions.user_id WHERE transactions.amount > 1000;",
      "SELECT MAX(timestamp) FROM transactions;",
      "SELECT model_name, MAX(model_accuracy) FROM models;",
      "SELECT users.name, SUM(transactions.amount) AS total_amount FROM users JOIN transactions ON users.user_id = transactions.user_id GROUP BY users.name ORDER BY total_amount DESC;",
      "SELECT prediction_id, transaction_id, model_name FROM predictions JOIN models ON predictions.model_id = models.model_id;",
      "SELECT user_id, email, COUNT(transaction_id) AS total_transactions FROM users LEFT JOIN transactions ON users.user_id = transactions.user_id GROUP BY user_id;",
      "SELECT DISTINCT model_name FROM models WHERE model_accuracy > 0.95;",
      "SELECT AVG(confidence) AS avg_confidence FROM predictions WHERE model_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT COUNT(DISTINCT user_id) FROM transactions;",
      "SELECT predictions.prediction_result, models.model_name, users.name FROM predictions JOIN models ON predictions.model_id = models.model_id JOIN users ON predictions.user_id = users.user_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM fraudulent_transactions;",
      "SELECT transaction_id, transaction_amount FROM fraudulent_transactions WHERE fraud_probability > 0.8;",
      "SELECT transaction_date FROM fraudulent_transactions WHERE transaction_date >= '2022-01-01';",
      "SELECT * FROM customer_details;",
      "SELECT customer_name, customer_address FROM customer_details WHERE customer_email LIKE '%gmail.com';",
      "SELECT * FROM fraud_detection_models;",
      "SELECT model_name, model_accuracy FROM fraud_detection_models WHERE model_accuracy > 0.9;",
      "SELECT * FROM transaction_logs;",
      "SELECT log_id, transaction_id FROM transaction_logs WHERE log_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT * FROM flagging_rules;",
      "SELECT rule_name, rule_action FROM flagging_rules WHERE rule_condition LIKE '%high_risk%';",
      "SELECT * FROM fraudulent_transactions JOIN customer_details ON fraudulent_transactions.transaction_id = customer_details.customer_id;",
      "SELECT * FROM customer_details JOIN fraud_detection_models ON customer_details.customer_name = fraud_detection_models.model_name;",
      "SELECT * FROM fraudulent_transactions JOIN transaction_logs ON fraudulent_transactions.transaction_id = transaction_logs.transaction_id;",
      "SELECT * FROM fraudulent_transactions JOIN flagging_rules ON fraudulent_transactions.fraud_probability > 0.5 AND flagging_rules.rule_action = 'flag';",
      "SELECT * FROM customer_details JOIN transaction_logs ON customer_details.customer_name LIKE '%Alice%' AND transaction_logs.transaction_id = 1234;",
      "SELECT MIN(transaction_amount) AS min_amount, MAX(transaction_amount) AS max_amount FROM fraudulent_transactions;",
      "SELECT AVG(model_accuracy) AS avg_accuracy FROM fraud_detection_models;",
      "SELECT COUNT(*) AS total_transactions FROM transaction_logs;",
      "SELECT model_name, AVG(model_accuracy) AS avg_accuracy FROM fraud_detection_models GROUP BY model_name;",
      "SELECT customer_address, COUNT(*) AS total_transactions FROM customer_details JOIN transaction_logs ON customer_details.customer_id = transaction_logs.transaction_id GROUP BY customer_address HAVING COUNT(*) > 10;",
      "SELECT * FROM fraudulent_transactions;",
      "SELECT transaction_id, transaction_amount, transaction_date FROM fraudulent_transactions WHERE fraud_probability > 0.8;",
      "SELECT customer_name, customer_email FROM customer_details WHERE LENGTH(customer_address) > 50;",
      "SELECT model_name, model_accuracy FROM fraud_detection_models WHERE model_accuracy > 0.9;",
      "SELECT * FROM transaction_logs ORDER BY log_timestamp DESC;",
      "SELECT transaction_id, log_details FROM transaction_logs JOIN fraudulent_transactions ON transaction_logs.transaction_id = fraudulent_transactions.transaction_id;",
      "SELECT rule_name, rule_action FROM flagging_rules WHERE LENGTH(rule_condition) > 10;",
      "SELECT transaction_id, log_details FROM transaction_logs WHERE EXTRACT(YEAR FROM log_timestamp) = 2022;",
      "SELECT model_name, model_accuracy FROM fraud_detection_models WHERE model_parameters->>'algorithm' = 'Random Forest';",
      "SELECT transaction_id, SUM(transaction_amount) AS total_amount FROM fraudulent_transactions GROUP BY transaction_id HAVING COUNT(*) > 1;",
      "SELECT customer_name, COUNT(transaction_id) AS num_transactions FROM customer_details JOIN fraudulent_transactions ON customer_details.customer_id = fraudulent_transactions.transaction_id GROUP BY customer_name HAVING num_transactions > 3;",
      "SELECT DISTINCT model_name FROM fraud_detection_models;",
      "SELECT rule_name, COUNT(*) AS num_logs FROM flagging_rules JOIN transaction_logs ON flagging_rules.rule_id = transaction_logs.log_id GROUP BY rule_name HAVING num_logs > 5;",
      "SELECT * FROM fraudulent_transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT AVG(fraud_probability) AS avg_prob FROM fraudulent_transactions;",
      "SELECT customer_name, MAX(transaction_amount) AS max_amount FROM customer_details JOIN fraudulent_transactions ON customer_details.customer_id = fraudulent_transactions.transaction_id GROUP BY customer_name;",
      "SELECT DISTINCT rule_name FROM flagging_rules WHERE rule_action = 'Flag as Fraud';",
      "SELECT model_name, MAX(model_accuracy) AS max_accuracy FROM fraud_detection_models GROUP BY model_name;",
      "SELECT COUNT(*) AS total_logs FROM transaction_logs;",
      "SELECT customer_name, AVG(transaction_amount) AS avg_amount FROM customer_details JOIN fraudulent_transactions ON customer_details.customer_id = fraudulent_transactions.transaction_id GROUP BY customer_name HAVING AVG(transaction_amount) > 1000;"
    ]
  }
]