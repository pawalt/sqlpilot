[
  {
    "statements": [
      "SELECT * FROM EmployeeAttrition;",
      "SELECT employee_id, performance_score FROM EmployeeAttrition;",
      "SELECT * FROM EmployeeAttrition WHERE performance_score > 80;",
      "SELECT * FROM EmployeeAttrition WHERE engagement_score < 50;",
      "SELECT AVG(performance_score) FROM EmployeeAttrition;",
      "SELECT MAX(engagement_score) FROM EmployeeAttrition;",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeeAttrition WHERE performance_score >= 70 AND engagement_score <= 60;",
      "SELECT COUNT(employee_id) FROM EmployeeAttrition;",
      "SELECT MIN(performance_score) FROM EmployeeAttrition;",
      "SELECT employee_id, performance_score FROM EmployeeAttrition WHERE performance_score BETWEEN 60 AND 80;",
      "SELECT * FROM EmployeeAttrition ORDER BY performance_score DESC;",
      "SELECT DISTINCT engagement_score FROM EmployeeAttrition;",
      "SELECT * FROM EmployeeAttrition WHERE employee_id = 1001;",
      "SELECT AVG(performance_score), MAX(engagement_score) FROM EmployeeAttrition;",
      "SELECT * FROM EmployeeAttrition WHERE performance_score < 70 OR engagement_score > 40;",
      "SELECT SUM(performance_score) FROM EmployeeAttrition;",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeeAttrition WHERE employee_id IN (1001, 1002, 1003);",
      "SELECT * FROM EmployeeAttrition WHERE performance_score = (SELECT MAX(performance_score) FROM EmployeeAttrition);",
      "SELECT COUNT(DISTINCT performance_score) FROM EmployeeAttrition;",
      "SELECT * FROM EmployeeAttrition WHERE employee_id = (SELECT MIN(employee_id) FROM EmployeeAttrition);",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeeAttrition;",
      "SELECT * FROM EmployeeAttrition WHERE performance_score > 80;",
      "SELECT AVG(performance_score) AS avg_performance FROM EmployeeAttrition;",
      "SELECT MAX(engagement_score) AS max_engagement FROM EmployeeAttrition;",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeeAttrition ORDER BY performance_score DESC;",
      "SELECT * FROM EmployeeAttrition WHERE performance_score > 70 AND engagement_score < 50;",
      "SELECT COUNT(employee_id) AS total_employees FROM EmployeeAttrition;",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeeAttrition WHERE performance_score < engagement_score;",
      "SELECT DISTINCT performance_score FROM EmployeeAttrition;",
      "SELECT employee_id, AVG(performance_score) AS avg_performance FROM EmployeeAttrition GROUP BY employee_id;",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeeAttrition WHERE performance_score > 85 OR engagement_score < 40;",
      "SELECT SUM(performance_score) AS total_performance FROM EmployeeAttrition;",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeeAttrition WHERE performance_score > 60 AND engagement_score > 50;",
      "SELECT MIN(engagement_score) AS min_engagement FROM EmployeeAttrition;",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeeAttrition WHERE performance_score = 90;",
      "SELECT employee_id, AVG(engagement_score) AS avg_engagement FROM EmployeeAttrition GROUP BY employee_id;",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeeAttrition WHERE performance_score IN (75, 80, 85);",
      "SELECT DISTINCT engagement_score FROM EmployeeAttrition;",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeeAttrition WHERE engagement_score BETWEEN 40 AND 60;",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeeAttrition WHERE employee_id < 100000;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM employees;",
      "SELECT employee_id, employee_name FROM employees;",
      "SELECT employee_id, performance_score, engagement_score FROM employees;",
      "SELECT * FROM attrition_predictions;",
      "SELECT employee_id, attrition_probability FROM attrition_predictions;",
      "SELECT employee_id, prediction_date FROM attrition_predictions;",
      "SELECT employee_name FROM employees WHERE performance_score > 80;",
      "SELECT employee_name FROM employees WHERE engagement_score < 60;",
      "SELECT employee_name, performance_score FROM employees WHERE employee_id = 1001;",
      "SELECT * FROM employees WHERE performance_score < 70 AND engagement_score < 50;",
      "SELECT * FROM employees ORDER BY engagement_score DESC;",
      "SELECT * FROM employees ORDER BY performance_score ASC;",
      "SELECT employee_id, employee_name, performance_score FROM employees WHERE performance_score > 90;",
      "SELECT COUNT(employee_id) FROM employees;",
      "SELECT AVG(performance_score) FROM employees;",
      "SELECT MAX(engagement_score) FROM employees;",
      "SELECT MIN(performance_score) FROM employees;",
      "SELECT AVG(attrition_probability) FROM attrition_predictions;",
      "SELECT * FROM attrition_predictions WHERE attrition_probability > 0.5;",
      "SELECT * FROM attrition_predictions WHERE prediction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT employee_name, performance_score FROM employees WHERE performance_score > 80;",
      "SELECT employee_name, engagement_score FROM employees WHERE engagement_score < 50;",
      "SELECT employee_name, performance_score, engagement_score FROM employees WHERE performance_score > 70 AND engagement_score > 60;",
      "SELECT * FROM employees WHERE employee_id = 100;",
      "SELECT * FROM employees WHERE employee_name LIKE 'J%';",
      "SELECT employee_name, performance_score FROM employees WHERE performance_score BETWEEN 60 AND 80;",
      "SELECT employee_name, performance_score, engagement_score FROM employees JOIN attrition_predictions ON employees.employee_id = attrition_predictions.employee_id;",
      "SELECT employee_name, performance_score, prediction_date FROM employees JOIN attrition_predictions ON employees.employee_id = attrition_predictions.employee_id WHERE attrition_probability > 0.7;",
      "SELECT AVG(performance_score) AS avg_performance_score FROM employees;",
      "SELECT employee_name, MAX(engagement_score) AS max_engagement_score FROM employees;",
      "SELECT COUNT(employee_id) AS total_employees FROM employees;",
      "SELECT employee_name, prediction_date, attrition_probability FROM employees JOIN attrition_predictions ON employees.employee_id = attrition_predictions.employee_id WHERE prediction_date = '2022-12-31';",
      "SELECT employee_name, performance_score, attrition_probability FROM employees JOIN attrition_predictions ON employees.employee_id = attrition_predictions.employee_id WHERE attrition_probability < 0.3;",
      "SELECT employee_name, performance_score, engagement_score FROM employees WHERE performance_score > 70 OR engagement_score < 50;",
      "SELECT employee_name, performance_score, engagement_score FROM employees WHERE (performance_score > 80 AND engagement_score > 70) OR (performance_score < 60 AND engagement_score < 40);",
      "SELECT employee_name, performance_score FROM employees ORDER BY performance_score DESC;",
      "SELECT employee_name, performance_score FROM employees ORDER BY performance_score ASC;",
      "SELECT employee_name, AVG(performance_score) AS avg_performance_score FROM employees GROUP BY employee_name;",
      "SELECT employee_name, COUNT(employee_id) AS total_records FROM employees GROUP BY employee_name;",
      "SELECT employee_name, MAX(performance_score) AS max_performance_score FROM employees GROUP BY employee_name;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM EmployeePerformance;",
      "SELECT employee_id, performance_score FROM EmployeePerformance;",
      "SELECT MAX(performance_score) FROM EmployeePerformance;",
      "SELECT employee_id, engagement_score FROM EmployeePerformance WHERE performance_score > 80;",
      "SELECT * FROM AttritionData;",
      "SELECT employee_id, department FROM AttritionData WHERE attrition_status = 'Inactive';",
      "SELECT AVG(years_in_company) FROM AttritionData;",
      "SELECT * FROM PredictionResults;",
      "SELECT employee_id, prediction_result FROM PredictionResults;",
      "SELECT COUNT(prediction_result) FROM PredictionResults WHERE prediction_result = 'Promotion';",
      "SELECT employee_id, performance_score, engagement_score FROM EmployeePerformance WHERE performance_score > 90;",
      "SELECT * FROM EmployeePerformance ORDER BY performance_score DESC;",
      "SELECT employee_id, attrition_status, department FROM AttritionData WHERE years_in_company <= 5;",
      "SELECT MIN(performance_score) FROM EmployeePerformance;",
      "SELECT DISTINCT(department) FROM AttritionData;",
      "SELECT * FROM PredictionResults WHERE employee_id = 123;",
      "SELECT employee_id, prediction_result FROM PredictionResults WHERE prediction_result = 'Promotion';",
      "SELECT department, COUNT(*) FROM AttritionData GROUP BY department;",
      "SELECT employee_id, attrition_status, department, years_in_company FROM AttritionData WHERE years_in_company > 5;",
      "SELECT AVG(performance_score) FROM EmployeePerformance;",
      "SELECT employee_id, engagement_score FROM EmployeePerformance WHERE engagement_score < 60;",
      "SELECT * FROM EmployeePerformance;",
      "SELECT employee_id, performance_score FROM EmployeePerformance WHERE performance_score > 80;",
      "SELECT AVG(performance_score) AS avg_performance_score FROM EmployeePerformance;",
      "SELECT department, AVG(years_in_company) AS avg_years_in_company FROM AttritionData GROUP BY department;",
      "SELECT employee_id, attrition_status FROM AttritionData WHERE years_in_company > 5;",
      "SELECT employee_id, prediction_result FROM PredictionResults WHERE employee_id IN (SELECT employee_id FROM AttritionData WHERE years_in_company > 3);",
      "SELECT * FROM EmployeePerformance ep JOIN AttritionData ad ON ep.employee_id = ad.employee_id WHERE ep.engagement_score > 70;",
      "SELECT employee_id, department, prediction_result FROM AttritionData ad JOIN PredictionResults pr ON ad.employee_id = pr.employee_id WHERE attrition_status = 'Resigned';",
      "SELECT employee_id, performance_score FROM EmployeePerformance WHERE performance_score < (SELECT AVG(performance_score) FROM EmployeePerformance);",
      "SELECT department, COUNT(*) AS num_employees FROM AttritionData GROUP BY department ORDER BY num_employees DESC;",
      "SELECT MAX(engagement_score) AS max_engagement_score FROM EmployeePerformance;",
      "SELECT AVG(performance_score) AS avg_performance_score, MAX(engagement_score) AS max_engagement_score FROM EmployeePerformance;",
      "SELECT employee_id, department, years_in_company FROM AttritionData WHERE department = 'HR' AND years_in_company > 2;",
      "SELECT department, AVG(performance_score) AS avg_performance_score FROM EmployeePerformance ep JOIN AttritionData ad ON ep.employee_id = ad.employee_id GROUP BY department HAVING AVG(performance_score) > 70;",
      "SELECT employee_id, prediction_result FROM PredictionResults WHERE prediction_result = 'Promoted' UNION SELECT employee_id, prediction_result FROM PredictionResults WHERE prediction_result = 'Top Performer';",
      "SELECT employee_id, department, years_in_company FROM AttritionData WHERE years_in_company >= 3 AND department IN ('IT', 'Finance');",
      "SELECT employee_id, attrition_status FROM AttritionData WHERE attrition_status = 'Resigned' AND years_in_company BETWEEN 1 AND 3;",
      "SELECT employee_id, performance_score FROM EmployeePerformance WHERE performance_score >= (SELECT AVG(performance_score) FROM EmployeePerformance WHERE employee_id = 1);",
      "SELECT * FROM EmployeePerformance ep LEFT JOIN AttritionData ad ON ep.employee_id = ad.employee_id WHERE ad.employee_id IS NULL;",
      "SELECT department, COUNT(*) AS num_employees, AVG(years_in_company) AS avg_years_in_company FROM AttritionData GROUP BY department HAVING COUNT(*) > 1 AND AVG(years_in_company) < 5;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM employees;",
      "SELECT employee_id, name, department FROM employees;",
      "SELECT employee_id, performance_rating FROM employees;",
      "SELECT * FROM attrition_reasons;",
      "SELECT reason_id, reason_description FROM attrition_reasons;",
      "SELECT * FROM attrition_predictions;",
      "SELECT prediction_id, employee_id, predicted_score FROM attrition_predictions;",
      "SELECT * FROM attrition_history;",
      "SELECT history_id, employee_id, attrition_date FROM attrition_history;",
      "SELECT employees.name, attrition_history.attrition_date FROM employees JOIN attrition_history ON employees.employee_id = attrition_history.employee_id;",
      "SELECT employees.name, attrition_history.attrition_date, attrition_reasons.reason_description FROM employees JOIN attrition_history ON employees.employee_id = attrition_history.employee_id JOIN attrition_reasons ON attrition_history.attrition_reason_id = attrition_reasons.reason_id;",
      "SELECT AVG(performance_rating) AS avg_performance_rating FROM employees;",
      "SELECT department, COUNT(*) AS num_employees FROM employees GROUP BY department;",
      "SELECT AVG(engagement_score) AS avg_engagement_score, MAX(engagement_score) AS max_engagement_score, MIN(engagement_score) AS min_engagement_score FROM employees;",
      "SELECT attrition_reasons.reason_description, COUNT(*) AS num_cases FROM attrition_reasons JOIN attrition_history ON attrition_reasons.reason_id = attrition_history.attrition_reason_id GROUP BY attrition_reasons.reason_description;",
      "SELECT employee_id, COUNT(*) AS num_attritions FROM attrition_history GROUP BY employee_id;",
      "SELECT employees.name, MAX(attrition_history.attrition_date) AS last_attrition_date FROM employees JOIN attrition_history ON employees.employee_id = attrition_history.employee_id GROUP BY employees.name;",
      "SELECT employees.name, COUNT(*) AS num_predictions FROM employees JOIN attrition_predictions ON employees.employee_id = attrition_predictions.employee_id GROUP BY employees.name HAVING COUNT(*) > 1;",
      "SELECT * FROM employees WHERE performance_rating > 4;",
      "SELECT * FROM employees WHERE department = 'IT';",
      "SELECT * FROM employees;",
      "SELECT employee_id, name, department FROM employees WHERE performance_rating > 3;",
      "SELECT employee_id, name, department, engagement_score FROM employees WHERE department = 'HR';",
      "SELECT employee_id, name, department, performance_rating FROM employees WHERE performance_rating > 4 AND engagement_score < 70;",
      "SELECT employee_id, name, department, performance_rating FROM employees WHERE department = 'IT' ORDER BY performance_rating DESC;",
      "SELECT e.employee_id, e.name, a.reason_description FROM employees e JOIN attrition_history ah ON e.employee_id = ah.employee_id JOIN attrition_reasons a ON ah.attrition_reason_id = a.reason_id;",
      "SELECT e.employee_id, e.name, a.reason_description, ah.attrition_date FROM employees e JOIN attrition_history ah ON e.employee_id = ah.employee_id JOIN attrition_reasons a ON ah.attrition_reason_id = a.reason_id WHERE ah.attrition_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT e.employee_id, e.name, p.predicted_attrition_date, p.predicted_score FROM employees e JOIN attrition_predictions p ON e.employee_id = p.employee_id;",
      "SELECT e.employee_id, e.name, p.predicted_attrition_date, p.predicted_score FROM employees e JOIN attrition_predictions p ON e.employee_id = p.employee_id WHERE p.predicted_score > 0.7;",
      "SELECT a.reason_description, COUNT(*) AS attrition_count FROM attrition_history ah JOIN attrition_reasons a ON ah.attrition_reason_id = a.reason_id GROUP BY a.reason_description;",
      "SELECT department, AVG(performance_rating) AS avg_performance_rating FROM employees GROUP BY department;",
      "SELECT department, AVG(engagement_score) AS avg_engagement_score FROM employees GROUP BY department HAVING AVG(engagement_score) < 80;",
      "SELECT e.employee_id, e.name, p.predicted_attrition_date FROM employees e LEFT JOIN attrition_predictions p ON e.employee_id = p.employee_id;",
      "SELECT e.employee_id, e.name, p.predicted_attrition_date FROM employees e LEFT JOIN attrition_predictions p ON e.employee_id = p.employee_id WHERE p.predicted_attrition_date IS NULL;",
      "SELECT department, SUM(engagement_score) AS total_engagement_score FROM employees GROUP BY department ORDER BY total_engagement_score DESC LIMIT 3;",
      "SELECT department, COUNT(*) AS employee_count FROM employees GROUP BY department ORDER BY employee_count;",
      "SELECT DISTINCT department FROM employees;",
      "SELECT employee_id, name FROM employees UNION SELECT reason_id, reason_description FROM attrition_reasons;",
      "SELECT e.employee_id, e.name, MAX(p.predicted_score) AS max_predicted_score FROM employees e JOIN attrition_predictions p ON e.employee_id = p.employee_id GROUP BY e.employee_id;",
      "SELECT e.employee_id, e.name, a.reason_description FROM employees e JOIN attrition_history ah ON e.employee_id = ah.employee_id JOIN attrition_reasons a ON ah.attrition_reason_id = a.reason_id WHERE a.reason_description LIKE '%layoff%';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM employees;",
      "SELECT employee_name, performance_rating FROM employees;",
      "SELECT * FROM departments;",
      "SELECT department_name FROM departments;",
      "SELECT * FROM attrition_reasons;",
      "SELECT reason_description FROM attrition_reasons;",
      "SELECT * FROM employee_attendance;",
      "SELECT employee_id, date, hours_worked FROM employee_attendance;",
      "SELECT * FROM employee_reviews;",
      "SELECT review_text FROM employee_reviews;",
      "SELECT e.employee_name, d.department_name FROM employees e JOIN departments d ON e.employee_id = d.department_id;",
      "SELECT e.employee_name, a.reason_description FROM employees e JOIN attrition_reasons a ON e.employee_id = a.reason_id;",
      "SELECT e.employee_name, a.attendance_id, r.review_text FROM employees e JOIN employee_attendance a ON e.employee_id = a.employee_id JOIN employee_reviews r ON e.employee_id = r.employee_id;",
      "SELECT e.employee_name, COUNT(a.attendance_id) AS total_attendance FROM employees e JOIN employee_attendance a ON e.employee_id = a.employee_id GROUP BY e.employee_name;",
      "SELECT e.employee_name, AVG(a.hours_worked) AS avg_hours_worked FROM employees e JOIN employee_attendance a ON e.employee_id = a.employee_id GROUP BY e.employee_name;",
      "SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.employee_id GROUP BY d.department_name;",
      "SELECT d.department_name, MAX(e.performance_rating) AS max_performance_rating FROM departments d LEFT JOIN employees e ON d.department_id = e.employee_id GROUP BY d.department_name;",
      "SELECT e.employee_name, ARBITRARY(arr.reason_description) AS random_reason FROM employees e JOIN attrition_reasons arr ON e.employee_id = arr.reason_id GROUP BY e.employee_name;",
      "SELECT AVG(e.performance_rating) AS avg_performance_rating FROM employees e;",
      "SELECT MAX(hours_worked) AS max_hours_worked FROM employee_attendance;",
      "SELECT MIN(hours_worked) AS min_hours_worked FROM employee_attendance;",
      "SELECT * FROM employees WHERE performance_rating > 3;",
      "SELECT employee_name, performance_rating FROM employees WHERE engagement_score < 50;",
      "SELECT e.employee_name, d.department_name FROM employees e JOIN departments d ON e.employee_id = d.department_id;",
      "SELECT * FROM employee_attendance WHERE date = '2022-05-15';",
      "SELECT employee_name, review_text FROM employees e JOIN employee_reviews r ON e.employee_id = r.employee_id WHERE r.review_date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT DISTINCT department_name FROM departments;",
      "SELECT AVG(hours_worked) AS avg_hours_worked FROM employee_attendance;",
      "SELECT employee_name, MAX(performance_rating) AS top_performance_rating FROM employees;",
      "SELECT reason_description FROM attrition_reasons WHERE reason_id = 1;",
      "SELECT e.employee_name, e.performance_rating, AVG(a.hours_worked) AS avg_hours_worked FROM employees e JOIN employee_attendance a ON e.employee_id = a.employee_id GROUP BY e.employee_name, e.performance_rating;",
      "SELECT e.employee_name, COUNT(r.review_id) AS review_count FROM employees e LEFT JOIN employee_reviews r ON e.employee_id = r.employee_id GROUP BY e.employee_name;",
      "SELECT MIN(performance_rating) AS lowest_performance_rating FROM employees;",
      "SELECT e.employee_id, e.employee_name, COUNT(r.review_id) AS review_count FROM employees e LEFT JOIN employee_reviews r ON e.employee_id = r.employee_id GROUP BY e.employee_id, e.employee_name;",
      "SELECT COUNT(employee_id) AS employee_count FROM employees;",
      "SELECT department_name, AVG(performance_rating) AS avg_performance_rating FROM employees e JOIN departments d ON e.employee_id = d.department_id GROUP BY department_name;",
      "SELECT CONCAT(employee_name, ' - ', engagement_score) AS employee_engagement FROM employees;",
      "SELECT e.employee_name, AVG(r.performance_rating) AS avg_performance_rating FROM employees e JOIN employee_reviews r ON e.employee_id = r.employee_id GROUP BY e.employee_name;",
      "SELECT e.employee_name, d.department_name, a.hours_worked FROM employees e LEFT JOIN departments d ON e.employee_id = d.department_id LEFT JOIN employee_attendance a ON e.employee_id = a.employee_id;",
      "SELECT employee_id, employee_name, CASE WHEN performance_rating >= 3 THEN 'Positive' ELSE 'Negative' END AS performance_status FROM employees;",
      "SELECT department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.employee_id GROUP BY department_name;"
    ]
  }
]