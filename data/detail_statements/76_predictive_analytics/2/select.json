[
  {
    "statements": [
      "SELECT * FROM ForecastingInventoryLevels",
      "SELECT product_name, quantity FROM ForecastingInventoryLevels",
      "SELECT product_id, product_name, quantity FROM ForecastingInventoryLevels",
      "SELECT * FROM ForecastingInventoryLevels WHERE product_id = 1",
      "SELECT * FROM ForecastingInventoryLevels WHERE quantity > 100",
      "SELECT * FROM ForecastingInventoryLevels ORDER BY last_updated DESC",
      "SELECT COUNT(*) FROM ForecastingInventoryLevels",
      "SELECT AVG(quantity) FROM ForecastingInventoryLevels",
      "SELECT product_id, product_name, quantity, last_updated FROM ForecastingInventoryLevels WHERE quantity < 50",
      "SELECT * FROM ForecastingInventoryLevels LIMIT 5",
      "SELECT product_id, product_name FROM ForecastingInventoryLevels WHERE last_updated >= '2022-01-01'",
      "SELECT product_name, quantity FROM ForecastingInventoryLevels WHERE product_name LIKE 'A%'",
      "SELECT MAX(quantity) FROM ForecastingInventoryLevels",
      "SELECT MIN(quantity) FROM ForecastingInventoryLevels",
      "SELECT DISTINCT product_name FROM ForecastingInventoryLevels",
      "SELECT * FROM ForecastingInventoryLevels WHERE product_name IS NULL",
      "SELECT product_name, quantity FROM ForecastingInventoryLevels WHERE last_updated BETWEEN '2022-01-01' AND '2022-06-30'",
      "SELECT product_id, product_name FROM ForecastingInventoryLevels WHERE product_name = 'Sample Product'",
      "SELECT * FROM ForecastingInventoryLevels WHERE last_updated > current_timestamp - INTERVAL '1 day'",
      "SELECT product_id, product_name, quantity FROM ForecastingInventoryLevels WHERE quantity BETWEEN 50 AND 100",
      "SELECT * FROM ForecastingInventoryLevels WHERE quantity > 100 ORDER BY last_updated DESC;",
      "SELECT product_id, product_name, quantity FROM ForecastingInventoryLevels WHERE last_updated BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT product_name, COUNT(*) AS total_count FROM ForecastingInventoryLevels GROUP BY product_name HAVING quantity < 50;",
      "SELECT product_id, product_name, SUM(quantity) AS total_quantity FROM ForecastingInventoryLevels WHERE last_updated >= '2022-06-01' GROUP BY product_id;",
      "SELECT product_name, MIN(quantity) AS min_quantity FROM ForecastingInventoryLevels GROUP BY product_name;",
      "SELECT AVG(quantity) AS avg_quantity FROM ForecastingInventoryLevels WHERE product_id = 123;",
      "SELECT product_id, product_name, quantity, last_updated FROM ForecastingInventoryLevels WHERE quantity > (SELECT AVG(quantity) FROM ForecastingInventoryLevels);",
      "SELECT product_id, product_name, quantity, last_updated FROM ForecastingInventoryLevels WHERE last_updated IN (SELECT MAX(last_updated) FROM ForecastingInventoryLevels);",
      "SELECT product_id, product_name, quantity FROM ForecastingInventoryLevels WHERE product_name LIKE 'A%';",
      "SELECT product_name, quantity, DATEDIFF(NOW(), last_updated) AS days_since_updated FROM ForecastingInventoryLevels;",
      "SELECT product_name, quantity FROM ForecastingInventoryLevels WHERE DATE(last_updated) = CURDATE();",
      "SELECT product_name, quantity FROM ForecastingInventoryLevels WHERE MONTH(last_updated) = 6;",
      "SELECT product_id, product_name, quantity FROM ForecastingInventoryLevels WHERE YEAR(last_updated) = 2022;",
      "SELECT product_name, quantity FROM ForecastingInventoryLevels WHERE last_updated BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY);",
      "SELECT product_id, product_name, quantity FROM ForecastingInventoryLevels WHERE quantity > 0 AND YEAR(last_updated) = YEAR(CURDATE());",
      "SELECT COUNT(DISTINCT product_id) AS total_products FROM ForecastingInventoryLevels;",
      "SELECT product_name, quantity FROM ForecastingInventoryLevels WHERE product_id IN (SELECT product_id FROM OtherTable WHERE condition = 'value');",
      "SELECT product_name, quantity FROM ForecastingInventoryLevels WHERE product_id NOT IN (SELECT product_id FROM ExcludedProductsTable);",
      "SELECT product_name, quantity FROM ForecastingInventoryLevels WHERE quantity BETWEEN 50 AND 100;",
      "SELECT product_id, COUNT(*) AS total_rows FROM ForecastingInventoryLevels GROUP BY product_id HAVING COUNT(*) > 1;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM inventory_levels;",
      "SELECT product_id, quantity FROM inventory_levels;",
      "SELECT * FROM inventory_levels WHERE quantity > 100;",
      "SELECT product_id, forecast_date FROM inventory_levels WHERE forecast_date >= '2022-01-01';",
      "SELECT SUM(quantity) AS total_quantity FROM inventory_levels;",
      "SELECT * FROM supply_chain;",
      "SELECT supplier_id, product_id, quantity_delivered FROM supply_chain WHERE delivery_date = '2022-01-15';",
      "SELECT supplier_id, delivery_date FROM supply_chain WHERE product_id = 123;",
      "SELECT MAX(quantity_delivered) AS max_delivery FROM supply_chain;",
      "SELECT supplier_id, COUNT(*) AS total_orders FROM supply_chain GROUP BY supplier_id;",
      "SELECT supplier_id, SUM(quantity_delivered) AS total_quantity_delivered FROM supply_chain GROUP BY supplier_id;",
      "SELECT inventory_levels.product_id, SUM(quantity_delivered) AS total_quantity_delivered FROM supply_chain INNER JOIN inventory_levels ON supply_chain.product_id = inventory_levels.product_id GROUP BY inventory_levels.product_id;",
      "SELECT supplier_id, product_id, quantity_delivered FROM supply_chain ORDER BY quantity_delivered DESC;",
      "SELECT DISTINCT supplier_id FROM supply_chain;",
      "SELECT supplier_id, product_id, quantity_delivered FROM supply_chain WHERE supplier_id IN (1, 2, 3);",
      "SELECT supplier_id, product_id, quantity_delivered FROM supply_chain WHERE supplier_id NOT IN (4, 5);",
      "SELECT supplier_id, AVG(quantity_delivered) AS avg_quantity FROM supply_chain GROUP BY supplier_id HAVING AVG(quantity_delivered) > 50;",
      "SELECT supplier_id, product_id, SUM(quantity_delivered) AS total_delivered FROM supply_chain GROUP BY supplier_id, product_id;",
      "SELECT supplier_id, product_id, delivery_date, quantity_delivered FROM supply_chain LIMIT 10;",
      "SELECT * FROM inventory_levels WHERE quantity > 100",
      "SELECT product_id, SUM(quantity) FROM inventory_levels GROUP BY product_id",
      "SELECT * FROM supply_chain WHERE delivery_date BETWEEN '2022-01-01' AND '2022-02-01'",
      "SELECT supplier_id, COUNT(DISTINCT product_id) FROM supply_chain GROUP BY supplier_id",
      "SELECT COUNT(*) FROM inventory_levels JOIN supply_chain ON inventory_levels.product_id = supply_chain.product_id",
      "SELECT DISTINCT supplier_id FROM supply_chain WHERE quantity_delivered > 50",
      "SELECT product_id, AVG(quantity) FROM inventory_levels WHERE forecast_date < '2022-03-01' GROUP BY product_id",
      "SELECT supplier_id, MAX(delivery_date) FROM supply_chain GROUP BY supplier_id",
      "SELECT product_id, MAX(quantity) FROM inventory_levels GROUP BY product_id HAVING MAX(quantity) > 200",
      "SELECT supplier_id, AVG(quantity_delivered) FROM supply_chain GROUP BY supplier_id HAVING AVG(quantity_delivered) > 30",
      "SELECT product_id, SUM(quantity_delivered) FROM supply_chain GROUP BY product_id HAVING SUM(quantity_delivered) > 100",
      "SELECT supplier_id, delivery_date, quantity_delivered FROM supply_chain ORDER BY supplier_id, delivery_date DESC",
      "SELECT product_id, quantity FROM inventory_levels UNION SELECT product_id, quantity_delivered FROM supply_chain",
      "SELECT * FROM inventory_levels WHERE product_id IN (SELECT product_id FROM supply_chain)",
      "SELECT supplier_id, product_id, delivery_date FROM supply_chain WHERE product_id NOT IN (SELECT product_id FROM inventory_levels)",
      "SELECT supplier_id, SUM(quantity_delivered) AS total_quantity FROM supply_chain GROUP BY supplier_id ORDER BY total_quantity DESC",
      "SELECT supplier_id, COUNT(*) AS total_orders FROM supply_chain GROUP BY supplier_id ORDER BY total_orders DESC",
      "SELECT * FROM inventory_levels WHERE forecast_date > (SELECT MIN(delivery_date) FROM supply_chain)",
      "SELECT supplier_id, AVG(quantity_delivered) FROM supply_chain WHERE delivery_date > '2022-03-01' GROUP BY supplier_id HAVING AVG(quantity_delivered) > 20"
    ]
  },
  {
    "statements": [
      "SELECT * FROM InventoryForecast;",
      "SELECT ProductID, ProductName FROM InventoryForecast;",
      "SELECT ForecastDate, ForecastQuantity FROM InventoryForecast;",
      "SELECT * FROM InventoryLevels;",
      "SELECT ProductID, ProductName FROM InventoryLevels;",
      "SELECT CurrentQuantity, ReorderLevel FROM InventoryLevels;",
      "SELECT * FROM SupplyChainManagement;",
      "SELECT SupplierID, SupplierName FROM SupplyChainManagement;",
      "SELECT ProductID, DeliveryDate FROM SupplyChainManagement;",
      "SELECT InventoryForecast.ProductID, InventoryLevels.CurrentQuantity FROM InventoryForecast JOIN InventoryLevels ON InventoryForecast.ProductID = InventoryLevels.ProductID;",
      "SELECT InventoryForecast.ForecastDate, SupplyChainManagement.DeliveryDate FROM InventoryForecast JOIN SupplyChainManagement ON InventoryForecast.ProductID = SupplyChainManagement.ProductID;",
      "SELECT InventoryLevels.ProductName, SupplyChainManagement.SupplierName FROM InventoryLevels JOIN SupplyChainManagement ON InventoryLevels.ProductID = SupplyChainManagement.ProductID;",
      "SELECT * FROM InventoryForecast WHERE ProductID = 1;",
      "SELECT * FROM InventoryLevels WHERE CurrentQuantity < ReorderLevel;",
      "SELECT * FROM SupplyChainManagement WHERE DeliveryDate > '2022-01-01';",
      "SELECT InventoryForecast.ProductID, InventoryLevels.CurrentQuantity FROM InventoryForecast JOIN InventoryLevels ON InventoryForecast.ProductID = InventoryLevels.ProductID WHERE InventoryLevels.CurrentQuantity < 50;",
      "SELECT InventoryLevels.ProductName, SupplyChainManagement.SupplierName FROM InventoryLevels JOIN SupplyChainManagement ON InventoryLevels.ProductID = SupplyChainManagement.ProductID WHERE SupplyChainManagement.SupplierID = 1;",
      "SELECT SUM(ForecastQuantity) FROM InventoryForecast;",
      "SELECT AVG(CurrentQuantity) FROM InventoryLevels;",
      "SELECT COUNT(*) FROM SupplyChainManagement WHERE DeliveryDate < '2022-06-01';",
      "SELECT * FROM InventoryForecast WHERE ForecastDate BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT ProductName, ForecastQuantity FROM InventoryForecast WHERE ForecastQuantity > 1000",
      "SELECT ProductName, CurrentQuantity FROM InventoryLevels WHERE CurrentQuantity < ReorderLevel",
      "SELECT i.ProductName, s.SupplierName FROM InventoryLevels i JOIN SupplyChainManagement s ON i.ProductID = s.ProductID",
      "SELECT ProductName, CurrentQuantity, DeliveryDate FROM InventoryLevels l JOIN SupplyChainManagement s ON l.ProductID = s.ProductID",
      "SELECT ProductName, ForecastQuantity, DeliveryDate FROM InventoryForecast f JOIN SupplyChainManagement s ON f.ProductID = s.ProductID",
      "SELECT i.ProductName, l.CurrentQuantity, s.SupplierName FROM InventoryLevels l JOIN SupplyChainManagement s ON l.ProductID = s.ProductID JOIN InventoryForecast f ON s.ProductID = f.ProductID",
      "SELECT COUNT(*) AS TotalForecasts FROM InventoryForecast",
      "SELECT AVG(CurrentQuantity) AS AvgQuantity FROM InventoryLevels",
      "SELECT MAX(ForecastQuantity) AS MaxForecast FROM InventoryForecast",
      "SELECT MIN(ReorderLevel) AS MinReorderLevel FROM InventoryLevels",
      "SELECT ProductName, SUM(ForecastQuantity) AS TotalForecast FROM InventoryForecast GROUP BY ProductName",
      "SELECT ProductName, COUNT(*) AS TotalDeliveries FROM SupplyChainManagement GROUP BY ProductName",
      "SELECT SupplierName, COUNT(DISTINCT ProductID) AS UniqueProducts FROM SupplyChainManagement GROUP BY SupplierName",
      "SELECT ProductName, COUNT(*) AS TotalForecasts FROM InventoryForecast WHERE ForecastQuantity > 1000 GROUP BY ProductName",
      "SELECT SupplierName, AVG(CurrentQuantity) AS AvgQuantity FROM InventoryLevels l JOIN SupplyChainManagement s ON l.ProductID = s.ProductID GROUP BY SupplierName",
      "SELECT ForecastDate, SUM(ForecastQuantity) AS TotalForecast FROM InventoryForecast GROUP BY ForecastDate",
      "SELECT ProductName, DeliveryDate, SUM(ForecastQuantity) AS TotalForecast FROM InventoryForecast f JOIN SupplyChainManagement s ON f.ProductID = s.ProductID GROUP BY ProductName, DeliveryDate",
      "SELECT SupplierName, DeliveryDate, SUM(ForecastQuantity) AS TotalForecast FROM InventoryForecast f JOIN SupplyChainManagement s ON f.ProductID = s.ProductID GROUP BY SupplierName, DeliveryDate",
      "SELECT DISTINCT ProductName FROM InventoryForecast ORDER BY ProductName ASC"
    ]
  },
  {
    "statements": [
      "SELECT * FROM forecasted_demand;",
      "SELECT product_id, forecasted_quantity, forecasted_date FROM forecasted_demand;",
      "SELECT forecasted_date, forecasted_quantity FROM forecasted_demand WHERE forecasted_quantity > 100;",
      "SELECT product_id, forecasted_quantity FROM forecasted_demand WHERE forecasted_date = '2023-06-30';",
      "SELECT * FROM current_inventory;",
      "SELECT product_id, in_stock_quantity, last_updated FROM current_inventory;",
      "SELECT product_id, in_stock_quantity FROM current_inventory WHERE in_stock_quantity < 10;",
      "SELECT product_id, last_updated FROM current_inventory WHERE last_updated >= '2023-07-15';",
      "SELECT * FROM suppliers;",
      "SELECT supplier_id, supplier_name, supplier_email FROM suppliers;",
      "SELECT supplier_id, supplier_phone FROM suppliers WHERE supplier_name = 'Supplier A';",
      "SELECT * FROM orders;",
      "SELECT order_id, product_id, order_quantity, order_date FROM orders;",
      "SELECT order_id, order_date FROM orders WHERE order_quantity > 50;",
      "SELECT product_id, order_quantity FROM orders WHERE order_date = '2023-08-15';",
      "SELECT * FROM forecasted_demand WHERE forecasted_quantity > 100",
      "SELECT product_id, forecasted_quantity, forecasted_date FROM forecasted_demand WHERE forecasted_quantity < 50",
      "SELECT supplier_name, supplier_email FROM suppliers",
      "SELECT product_id, in_stock_quantity FROM current_inventory WHERE in_stock_quantity = 0",
      "SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31'",
      "SELECT forecasted_date, SUM(forecasted_quantity) AS total_forecast FROM forecasted_demand GROUP BY forecasted_date",
      "SELECT supplier_name, SUM(order_quantity) AS total_orders FROM suppliers INNER JOIN orders ON suppliers.supplier_id = orders.product_id GROUP BY supplier_name",
      "SELECT forecasted_demand.product_id, forecasted_quantity, in_stock_quantity FROM forecasted_demand LEFT JOIN current_inventory ON forecasted_demand.product_id = current_inventory.product_id",
      "SELECT suppliers.supplier_name, SUM(order_quantity) AS total_orders FROM suppliers LEFT JOIN orders ON suppliers.supplier_id = orders.product_id GROUP BY suppliers.supplier_name",
      "SELECT product_id, in_stock_quantity FROM current_inventory WHERE product_id IN (SELECT product_id FROM forecasted_demand WHERE forecasted_quantity < 50)",
      "SELECT supplier_name AS Supplier, forecasted_quantity FROM suppliers INNER JOIN forecasted_demand ON suppliers.supplier_id = forecasted_demand.product_id",
      "SELECT supplier_name, supplier_email FROM suppliers WHERE supplier_name LIKE '%Co%'",
      "SELECT DISTINCT product_id FROM current_inventory",
      "SELECT supplier_name, COUNT(*) AS total_orders FROM suppliers INNER JOIN orders ON suppliers.supplier_id = orders.product_id GROUP BY supplier_name HAVING total_orders > 10",
      "SELECT product_id, MAX(in_stock_quantity) AS max_quantity FROM current_inventory GROUP BY product_id",
      "SELECT supplier_name, MAX(order_quantity) AS max_order FROM suppliers INNER JOIN orders ON suppliers.supplier_id = orders.product_id GROUP BY supplier_name",
      "SELECT supplier_name, AVG(order_quantity) AS avg_order FROM suppliers INNER JOIN orders ON suppliers.supplier_id = orders.product_id GROUP BY supplier_name",
      "SELECT AVG(order_quantity) AS avg_order FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31'",
      "SELECT supplier_name, SUM(order_quantity) AS total_orders FROM suppliers INNER JOIN orders ON suppliers.supplier_id = orders.product_id WHERE order_quantity > 100 GROUP BY supplier_name",
      "SELECT supplier_name, COUNT(DISTINCT product_id) AS unique_products FROM suppliers INNER JOIN orders ON suppliers.supplier_id = orders.product_id GROUP BY supplier_name"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Forecast;",
      "SELECT id, product_name, forecasted_quantity FROM Inventory;",
      "SELECT warehouse_name, location FROM Warehouse;",
      "SELECT * FROM Supplier WHERE id = 1;",
      "SELECT id, product_id, shipment_date FROM Shipment WHERE warehouse_id = 1;",
      "SELECT product_name, quantity FROM Inventory WHERE quantity > 100;",
      "SELECT id, supplier_name, contact_info FROM Supplier;",
      "SELECT * FROM Warehouse WHERE location = 'New York';",
      "SELECT * FROM Forecast WHERE date = '2022-08-15';",
      "SELECT * FROM Inventory WHERE product_name LIKE 'A%';",
      "SELECT id, warehouse_id, shipment_date FROM Shipment WHERE supplier_id = 2;",
      "SELECT warehouse_name, location FROM Warehouse WHERE location = 'Los Angeles';",
      "SELECT * FROM Supplier WHERE contact_info LIKE '%email%';",
      "SELECT product_name, forecasted_quantity FROM Forecast WHERE forecasted_quantity < 50;",
      "SELECT * FROM Inventory WHERE quantity < 10;",
      "SELECT supplier_name, contact_info FROM Supplier WHERE supplier_name = 'Supplier A';",
      "SELECT id, warehouse_id, shipment_date FROM Shipment WHERE product_id = 3;",
      "SELECT * FROM Warehouse WHERE location IN ('London', 'Paris');",
      "SELECT * FROM Forecast WHERE date BETWEEN '2022-09-01' AND '2022-09-15';",
      "SELECT id, product_name, quantity FROM Inventory;",
      "SELECT f.product_name, f.forecasted_quantity, f.date, i.quantity, w.warehouse_name, w.location, s.supplier_name, s.contact_info, sh.shipment_date FROM Forecast f JOIN Inventory i ON f.product_name = i.product_name JOIN Warehouse w ON i.quantity > 10 AND w.warehouse_name = 'Warehouse A' JOIN Supplier s ON s.supplier_name = 'Supplier X' JOIN Shipment sh ON f.id = sh.product_id AND w.id = sh.warehouse_id AND s.id = sh.supplier_id WHERE f.forecasted_quantity > 100",
      "SELECT f.product_name, SUM(f.forecasted_quantity) AS total_forecasted_quantity FROM Forecast f GROUP BY f.product_name HAVING total_forecasted_quantity > 500",
      "SELECT f.product_name, COUNT(DISTINCT s.supplier_name) AS total_suppliers FROM Forecast f JOIN Shipment sh ON f.id = sh.product_id JOIN Supplier s ON sh.supplier_id = s.id GROUP BY f.product_name HAVING total_suppliers > 3",
      "SELECT f.product_name, AVG(f.forecasted_quantity) AS avg_forecasted_quantity FROM Forecast f GROUP BY f.product_name ORDER BY avg_forecasted_quantity DESC",
      "SELECT COUNT(*) AS total_shipments FROM Shipment WHERE shipment_date BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT f.product_name, SUM(i.quantity) AS total_inventory FROM Forecast f JOIN Inventory i ON f.product_name = i.product_name GROUP BY f.product_name HAVING total_inventory < 50",
      "SELECT w.warehouse_name, COUNT(*) AS total_shipments FROM Warehouse w JOIN Shipment sh ON w.id = sh.warehouse_id GROUP BY w.warehouse_name ORDER BY total_shipments DESC",
      "SELECT s.supplier_name, COUNT(*) AS total_shipments FROM Supplier s JOIN Shipment sh ON s.id = sh.supplier_id GROUP BY s.supplier_name ORDER BY total_shipments DESC",
      "SELECT f.product_name, s.supplier_name, COUNT(*) AS total_shipments FROM Forecast f JOIN Shipment sh ON f.id = sh.product_id JOIN Supplier s ON sh.supplier_id = s.id GROUP BY f.product_name, s.supplier_name ORDER BY total_shipments DESC",
      "SELECT f.product_name, f.forecasted_quantity, i.quantity, w.warehouse_name, s.supplier_name, sh.shipment_date FROM Forecast f JOIN Inventory i ON f.product_name = i.product_name JOIN Warehouse w ON f.id = w.id JOIN Supplier s ON f.id = s.id JOIN Shipment sh ON f.id = sh.product_id AND w.id = sh.warehouse_id AND s.id = sh.supplier_id WHERE f.forecasted_quantity > i.quantity"
    ]
  }
]