[
  {
    "statements": [
      "SELECT * FROM customer_churn_predictions WHERE age > 30;",
      "SELECT customer_id, email FROM customer_churn_predictions WHERE gender = 'Male';",
      "SELECT AVG(age) AS avg_age FROM customer_churn_predictions;",
      "SELECT customer_id, gender FROM customer_churn_predictions WHERE age BETWEEN 25 AND 35;",
      "SELECT DISTINCT gender FROM customer_churn_predictions;",
      "SELECT customer_id, total_sales FROM customer_churn_predictions WHERE total_sales > 1000;",
      "SELECT * FROM customer_churn_predictions WHERE email LIKE '%gmail.com';",
      "SELECT COUNT(customer_id) AS total_customers FROM customer_churn_predictions;",
      "SELECT customer_id FROM customer_churn_predictions WHERE gender = 'Female' ORDER BY age DESC;",
      "SELECT SUM(total_sales) AS total_sales_sum FROM customer_churn_predictions;",
      "SELECT customer_id, email, age FROM customer_churn_predictions WHERE age < 40 ORDER BY age;",
      "SELECT AVG(total_sales) AS avg_sales FROM customer_churn_predictions WHERE age > 30;",
      "SELECT customer_id, gender FROM customer_churn_predictions WHERE total_sales > 5000;",
      "SELECT * FROM customer_churn_predictions WHERE age <= 35 AND total_sales > 2000;",
      "SELECT customer_id, email, gender FROM customer_churn_predictions WHERE gender IN ('Male', 'Female');",
      "SELECT MAX(age) AS max_age FROM customer_churn_predictions;",
      "SELECT customer_id, email, total_sales FROM customer_churn_predictions WHERE total_sales BETWEEN 1000 AND 5000;",
      "SELECT MIN(age) AS min_age FROM customer_churn_predictions;",
      "SELECT customer_id, gender FROM customer_churn_predictions WHERE gender = 'Male' OR age > 40;",
      "SELECT * FROM customer_churn_predictions WHERE age >= 30 ORDER BY total_sales DESC;",
      "SELECT customer_id, email, age, total_sales FROM customer_churn_predictions WHERE age > 30 AND total_sales > 1000;",
      "SELECT * FROM customer_churn_predictions WHERE gender = 'Male' ORDER BY total_sales DESC;",
      "SELECT customer_id, email, AGE, gender FROM customer_churn_predictions WHERE total_sales BETWEEN 500 AND 1000;",
      "SELECT COUNT(customer_id) AS total_customers, AVG(age) AS average_age FROM customer_churn_predictions;",
      "SELECT gender, AVG(total_sales) AS avg_sales_per_gender FROM customer_churn_predictions GROUP BY gender;",
      "SELECT customer_id, total_sales * 1.1 AS total_sales_with_tax FROM customer_churn_predictions;",
      "SELECT DISTINCT customer_id, email FROM customer_churn_predictions;",
      "SELECT customer_id, email FROM customer_churn_predictions WHERE email LIKE '%gmail.com';",
      "SELECT customer_id, email, age FROM customer_churn_predictions WHERE age < 50 OR gender = 'Female';",
      "SELECT customer_id, total_sales FROM customer_churn_predictions WHERE gender = 'Female' AND age > 25 ORDER BY total_sales DESC LIMIT 5;",
      "SELECT customer_id, email FROM customer_churn_predictions WHERE age > 30 ORDER BY age ASC, total_sales DESC;",
      "SELECT customer_id, email, total_sales FROM customer_churn_predictions WHERE total_sales > (SELECT AVG(total_sales) FROM customer_churn_predictions);",
      "SELECT customer_id, email, total_sales FROM customer_churn_predictions WHERE age > 18 AND total_sales > 500 ORDER BY age DESC, total_sales ASC;",
      "SELECT customer_id, email, age FROM customer_churn_predictions WHERE gender IN ('Male', 'Female') AND age BETWEEN 20 AND 40;",
      "SELECT customer_id, email, total_sales FROM customer_churn_predictions WHERE total_sales = (SELECT MAX(total_sales) FROM customer_churn_predictions);",
      "SELECT customer_id, email, age, total_sales FROM customer_churn_predictions WHERE age <= 40 AND total_sales >= 500;",
      "SELECT customer_id, email, age, total_sales FROM customer_churn_predictions WHERE gender = 'Male' OR gender = 'Female';",
      "SELECT customer_id, email, total_sales FROM customer_churn_predictions WHERE email IS NOT NULL;",
      "SELECT customer_id, email, total_sales FROM customer_churn_predictions WHERE NOT age > 50;",
      "SELECT customer_id, email, total_sales FROM customer_churn_predictions WHERE age IS NULL OR total_sales IS NULL;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, customer_email FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, customer_phone FROM customers WHERE customer_since > '2022-01-01';",
      "SELECT * FROM sales;",
      "SELECT product_id, sale_amount FROM sales WHERE sale_date = '2022-01-01';",
      "SELECT customer_name, sale_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id;",
      "SELECT customer_id, SUM(sale_amount) AS total_sales FROM sales GROUP BY customer_id;",
      "SELECT customer_id, AVG(sale_amount) AS avg_sale_amount FROM sales GROUP BY customer_id HAVING AVG(sale_amount) > 100;",
      "SELECT COUNT(*) AS total_customers FROM customers;",
      "SELECT MAX(sale_amount) AS max_sale_amount FROM sales;",
      "SELECT MIN(sale_amount) AS min_sale_amount FROM sales;",
      "SELECT customer_id, COUNT(*) AS total_sales FROM sales GROUP BY customer_id HAVING COUNT(*) > 5;",
      "SELECT customer_name, customer_email FROM customers WHERE customer_id IN (1, 2, 3);",
      "SELECT customer_name, customer_email FROM customers WHERE customer_name LIKE 'A%';",
      "SELECT DISTINCT customer_id FROM sales;",
      "SELECT customer_id, DATE_FORMAT(sale_date, '%Y-%m-%d') AS formatted_sale_date FROM sales;",
      "SELECT customer_name, SUM(sale_amount) AS total_sales FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name;",
      "SELECT customer_id, AVG(sale_amount) AS avg_sale_amount FROM sales GROUP BY customer_id HAVING AVG(sale_amount) < 500;",
      "SELECT customer_id, COUNT(*) AS total_sales FROM sales WHERE product_id = 1 GROUP BY customer_id;",
      "SELECT customer_name, MAX(sale_amount) AS max_sale_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name HAVING MAX(sale_amount) > 1000;",
      "SELECT * FROM customers JOIN sales ON customers.customer_id = sales.customer_id WHERE customers.customer_name LIKE 'A%'",
      "SELECT customer_name, sale_date, sale_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id WHERE sale_amount > 1000",
      "SELECT customer_name, customer_email, customer_phone, sale_date, sale_amount FROM customers INNER JOIN sales ON customers.customer_id = sales.customer_id WHERE sale_date BETWEEN '2022-01-01' AND '2022-10-31'",
      "SELECT customer_name, customer_email FROM customers LEFT JOIN sales ON customers.customer_id = sales.customer_id WHERE sale_amount IS NULL",
      "SELECT customer_name, customer_email, sale_amount FROM customers LEFT JOIN sales ON customers.customer_id = sales.customer_id WHERE sale_amount < 500",
      "SELECT customer_name, customer_email, sale_amount FROM customers RIGHT JOIN sales ON customers.customer_id = sales.customer_id WHERE customer_name IS NULL",
      "SELECT customer_name, SUM(sale_amount) AS total_sales FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name HAVING total_sales > 5000",
      "SELECT customer_name, COUNT(sale_id) AS total_sales FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name HAVING total_sales >= 3",
      "SELECT customer_id, customer_name, customer_email, sale_date, sale_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id ORDER BY sale_amount DESC",
      "SELECT customer_name, customer_email, MAX(sale_amount) AS max_sale FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name",
      "SELECT customer_name, customer_email, MIN(sale_amount) AS min_sale FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name",
      "SELECT customer_name, AVG(sale_amount) AS avg_sale FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name",
      "SELECT customer_name, customer_email, sale_date, product_id FROM customers JOIN sales ON customers.customer_id = sales.customer_id WHERE product_id IN (1, 2, 3)",
      "SELECT customer_name, customer_email, sale_date, sale_amount, product_id FROM customers JOIN sales ON customers.customer_id = sales.customer_id LIMIT 10",
      "SELECT customer_name, customer_email, sale_date, product_id FROM customers JOIN sales ON customers.customer_id = sales.customer_id OFFSET 5",
      "SELECT customer_name, customer_email, sale_date, product_id FROM customers JOIN sales ON customers.customer_id = sales.customer_id LIMIT 5 OFFSET 5",
      "SELECT customer_name, customer_email, sale_date, sale_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id WHERE sale_date > '2022-05-01' AND sale_date < '2022-06-30'",
      "SELECT customer_name, customer_email, sale_date, sale_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id WHERE customer_name LIKE '%E%'",
      "SELECT customer_name, customer_email, sale_date, sale_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id WHERE sale_amount BETWEEN 500 AND 1000"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, address FROM customers;",
      "SELECT customer_name, phone_number FROM customers WHERE customer_id = 1;",
      "SELECT * FROM sales;",
      "SELECT sale_date, total_amount FROM sales WHERE customer_id = 1;",
      "SELECT customer_name, address, sale_date FROM customers JOIN sales ON customers.customer_id = sales.customer_id;",
      "SELECT customer_name, total_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id WHERE total_amount > 1000;",
      "SELECT * FROM churn_prediction;",
      "SELECT customer_name, last_purchase_date, churn_probability FROM churn_prediction WHERE churn_probability > 0.5;",
      "SELECT customer_name, average_purchase_amount FROM customers JOIN churn_prediction ON customers.customer_id = churn_prediction.customer_id;",
      "SELECT customer_name, total_amount, churn_probability FROM customers JOIN sales ON customers.customer_id = sales.customer_id JOIN churn_prediction ON customers.customer_id = churn_prediction.customer_id;",
      "SELECT DISTINCT customer_id FROM sales;",
      "SELECT MAX(total_amount) AS max_amount FROM sales;",
      "SELECT AVG(average_purchase_amount) AS avg_purchase_amount FROM churn_prediction;",
      "SELECT customer_id, count(*) AS total_sales FROM sales GROUP BY customer_id;",
      "SELECT customer_name, AVG(total_amount) AS avg_order_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name;",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name;",
      "SELECT customer_name, COUNT(sale_id) AS total_sales FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name;",
      "SELECT customer_name, AVG(average_purchase_amount) AS avg_purchase_amount FROM customers JOIN churn_prediction ON customers.customer_id = churn_prediction.customer_id GROUP BY customer_name;",
      "SELECT customer_name, MAX(total_amount) AS max_order_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name;",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, address FROM customers WHERE phone_number LIKE '%555%';",
      "SELECT customer_name, email FROM customers WHERE address LIKE '%Street%' ORDER BY customer_name ASC;",
      "SELECT * FROM customers JOIN sales ON customers.customer_id = sales.customer_id;",
      "SELECT customer_name, sale_date, total_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id WHERE total_amount > 1000;",
      "SELECT customer_id, MAX(total_amount) AS max_amount FROM sales GROUP BY customer_id HAVING max_amount > 5000;",
      "SELECT customer_name, AVG(total_amount) AS avg_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_id;",
      "SELECT customer_name, SUM(total_amount) AS total_sales FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_id HAVING total_sales > 5000;",
      "SELECT customer_name, churn_probability FROM customers JOIN churn_prediction ON customers.customer_id = churn_prediction.customer_id WHERE churn_probability > 0.5;",
      "SELECT customer_name, last_purchase_date FROM customers JOIN churn_prediction ON customers.customer_id = churn_prediction.customer_id WHERE last_purchase_date < '2022-01-01';",
      "SELECT customer_name, address, total_amount FROM customers LEFT JOIN sales ON customers.customer_id = sales.customer_id;",
      "SELECT customer_id, customer_name, payment_method FROM customers JOIN sales ON customers.customer_id = sales.customer_id WHERE payment_method = 'Credit Card';",
      "SELECT customer_id, customer_name, COUNT(sale_id) AS num_sales FROM customers LEFT JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_id;",
      "SELECT customer_name, AVG(average_purchase_amount) AS avg_purchase_amount FROM customers JOIN churn_prediction ON customers.customer_id = churn_prediction.customer_id;",
      "SELECT customer_name, MAX(average_purchase_amount) AS max_purchase_amount FROM customers JOIN churn_prediction ON customers.customer_id = churn_prediction.customer_id;",
      "SELECT customer_name, MIN(average_purchase_amount) AS min_purchase_amount FROM customers JOIN churn_prediction ON customers.customer_id = churn_prediction.customer_id;",
      "SELECT customer_name, payment_method, AVG(total_amount) AS avg_amount FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY payment_method;",
      "SELECT customer_name, address, payment_method, SUM(total_amount) AS total_sales FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_id ORDER BY total_sales DESC;",
      "SELECT customer_name, AVG(churn_probability) AS avg_churn_prob FROM customers JOIN churn_prediction ON customers.customer_id = churn_prediction.customer_id;",
      "SELECT customer_name, MAX(churn_probability) AS max_churn_prob FROM customers JOIN churn_prediction ON customers.customer_id = churn_prediction.customer_id;",
      "SELECT customer_name, COUNT(*) AS num_predictions FROM customers JOIN churn_prediction ON customers.customer_id = churn_prediction.customer_id GROUP BY customer_id HAVING num_predictions > 5;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers LIMIT 10;",
      "SELECT customer_name, address FROM customers WHERE total_purchases > 1000;",
      "SELECT product_name, category, unit_price FROM products WHERE unit_price > 50;",
      "SELECT * FROM sales_orders WHERE order_date >= '2022-01-01' AND order_date <= '2022-06-30';",
      "SELECT customer_name, total_purchases, churn_probability FROM customers WHERE churn_probability > 0.5;",
      "SELECT customer_name, address, total_purchases FROM customers ORDER BY total_purchases DESC LIMIT 5;",
      "SELECT product_name, category, unit_price FROM products ORDER BY unit_price ASC LIMIT 3;",
      "SELECT customer_name, address, total_purchases FROM customers WHERE churn_probability < 0.1 ORDER BY total_purchases DESC;",
      "SELECT * FROM sales_orders WHERE payment_method = 'Credit Card';",
      "SELECT customer_id, predicted_churn_date FROM churn_predictions WHERE predicted_churn_probability > 0.8;",
      "SELECT customer_name, address, total_purchases FROM customers WHERE customer_name LIKE 'A%';",
      "SELECT product_name, unit_price FROM products WHERE category = 'Electronics';",
      "SELECT customer_name, total_purchases FROM customers WHERE total_purchases BETWEEN 500 AND 1000;",
      "SELECT product_name, unit_price FROM products WHERE unit_price BETWEEN 20 AND 30;",
      "SELECT customer_name, address, total_purchases FROM customers WHERE total_purchases > 500 ORDER BY total_purchases DESC LIMIT 5;",
      "SELECT * FROM sales_orders WHERE order_date = '2022-09-15';",
      "SELECT customer_name, churn_probability FROM customers WHERE customer_id = 'xyz123';",
      "SELECT product_name, unit_price FROM products WHERE product_name LIKE '%Chair%';",
      "SELECT product_name, category, unit_price FROM products WHERE category IN ('Clothing', 'Accessories');",
      "SELECT * FROM sales_orders WHERE total_amount > 1000 ORDER BY total_amount DESC LIMIT 3;",
      "SELECT * FROM customers c JOIN sales_orders so ON c.customer_id = so.customer_id JOIN churn_predictions cp ON c.customer_id = cp.customer_id WHERE c.total_purchases > 1000 ORDER BY c.total_purchases DESC LIMIT 10",
      "SELECT c.customer_name, so.total_amount FROM customers c JOIN sales_orders so ON c.customer_id = so.customer_id WHERE so.order_date > '2022-01-01'",
      "SELECT p.product_name, p.category, SUM(so.total_amount) AS total_sales FROM products p JOIN sales_orders so ON p.product_id = so.product_id GROUP BY p.product_name, p.category ORDER BY total_sales DESC",
      "SELECT c.customer_name, cp.predicted_churn_probability FROM customers c JOIN churn_predictions cp ON c.customer_id = cp.customer_id WHERE cp.predicted_churn_probability > 0.5",
      "SELECT c.customer_name, so.payment_method FROM customers c JOIN sales_orders so ON c.customer_id = so.customer_id WHERE c.total_purchases < 500 AND so.total_amount > 100",
      "SELECT product_name, unit_price FROM products WHERE category = 'Electronics' ORDER BY unit_price DESC LIMIT 5",
      "SELECT customer_name, total_purchases FROM customers WHERE churn_probability < 0.1 ORDER BY total_purchases DESC",
      "SELECT customer_name, address FROM customers WHERE customer_id IN (SELECT customer_id FROM churn_predictions WHERE predicted_churn_probability > 0.8)",
      "SELECT c.customer_name, SUM(so.total_amount) AS total_spent FROM customers c JOIN sales_orders so ON c.customer_id = so.customer_id GROUP BY c.customer_name ORDER BY total_spent DESC LIMIT 5",
      "SELECT customer_name, total_purchases, ROUND(churn_probability*100, 2) AS churn_probability_percentage FROM customers WHERE total_purchases > 500 AND churn_probability < 0.3 ORDER BY total_purchases DESC",
      "SELECT customer_name, address FROM customers WHERE customer_name LIKE 'A%'",
      "SELECT product_name, category, unit_price FROM products WHERE unit_price BETWEEN 10 AND 50 ORDER BY category, unit_price",
      "SELECT c.customer_name, cp.predicted_churn_date FROM customers c JOIN churn_predictions cp ON c.customer_id = cp.customer_id WHERE cp.predicted_churn_date BETWEEN '2022-06-01' AND '2022-08-01'",
      "SELECT product_name, category, unit_price FROM products WHERE EXISTS (SELECT 1 FROM sales_orders WHERE product_id = products.product_id)",
      "SELECT customer_name, total_purchases, churn_probability FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM churn_predictions)",
      "SELECT c.customer_name, cp.predicted_churn_probability FROM customers c LEFT JOIN churn_predictions cp ON c.customer_id = cp.customer_id WHERE cp.customer_id IS NULL",
      "SELECT customer_name, total_purchases FROM customers UNION SELECT customer_name, total_amount FROM sales_orders",
      "SELECT category, AVG(unit_price) AS average_price FROM products GROUP BY category HAVING AVG(unit_price) > 50",
      "SELECT customer_name, total_purchases, CASE WHEN total_purchases > 1000 THEN 'High Value' ELSE 'Low Value' END AS customer_segment FROM customers"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, email, phone_number FROM customers;",
      "SELECT * FROM orders;",
      "SELECT order_id, customer_id, order_date FROM orders;",
      "SELECT * FROM products;",
      "SELECT product_id, product_name, category FROM products;",
      "SELECT * FROM sales;",
      "SELECT sale_id, order_id, product_id FROM sales;",
      "SELECT * FROM churn_predictions;",
      "SELECT prediction_id, customer_id, prediction_date FROM churn_predictions;",
      "SELECT customer_id, customer_name, email, phone_number, address FROM customers;",
      "SELECT order_id, order_date, total_amount FROM orders;",
      "SELECT product_id, product_name, category, price FROM products;",
      "SELECT sale_id, order_id, product_id, quantity, sale_amount FROM sales;",
      "SELECT prediction_id, customer_id, prediction_date, likelihood FROM churn_predictions;",
      "SELECT c.customer_id, c.customer_name, o.order_id, o.order_date, s.sale_id, s.quantity FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN sales s ON o.order_id = s.order_id;",
      "SELECT p.product_id, p.product_name, p.category, p.price, s.sale_id, s.sale_amount FROM products p JOIN sales s ON p.product_id = s.product_id;",
      "SELECT c.customer_name, o.order_date, p.product_name, s.quantity, s.sale_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN sales s ON o.order_id = s.order_id JOIN products p ON s.product_id = p.product_id;",
      "SELECT c.customer_name, o.order_date, SUM(s.sale_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN sales s ON o.order_id = s.order_id GROUP BY c.customer_name, o.order_date;",
      "SELECT p.category, AVG(p.price) AS avg_price, COUNT(s.product_id) AS total_sales FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.category;",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, email, address FROM customers WHERE phone_number IS NOT NULL;",
      "SELECT customer_id, customer_name, email, COUNT(*) AS total_orders FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
      "SELECT customer_name, email, COUNT(*) AS total_sales FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN sales ON orders.order_id = sales.order_id GROUP BY customer_name;",
      "SELECT customer_id, customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 1000;",
      "SELECT * FROM customers WHERE address LIKE '%Street%';",
      "SELECT product_name, price FROM products WHERE category = 'Electronics';",
      "SELECT product_id, product_name, SUM(quantity) AS total_quantity_sold FROM products JOIN sales ON products.product_id = sales.product_id GROUP BY product_id;",
      "SELECT prediction_date, likelihood FROM churn_predictions WHERE customer_id = 1;",
      "SELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > (SELECT AVG(total_amount) FROM orders);",
      "SELECT customer_id, MAX(total_amount) AS highest_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
      "SELECT customer_name, email, phone_number, address, order_date, total_amount, product_name, quantity, sale_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN sales ON orders.order_id = sales.order_id JOIN products ON sales.product_id = products.product_id;",
      "SELECT customer_id, customer_name, email, address, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
      "SELECT product_id, product_name, price, AVG(sale_amount) AS avg_sale_amount FROM products JOIN sales ON products.product_id = sales.product_id GROUP BY product_id;",
      "SELECT customer_name, email, MIN(total_amount) AS lowest_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
      "SELECT product_name, price FROM products WHERE product_id IN (SELECT product_id FROM sales GROUP BY product_id HAVING SUM(quantity) > 10);",
      "SELECT customer_id, customer_name, email, phone_number, address FROM customers WHERE customer_id IN (SELECT customer_id FROM churn_predictions WHERE prediction_date >= '2022-01-01');",
      "SELECT order_date, SUM(total_amount) AS total_sales FROM orders GROUP BY order_date;",
      "SELECT customer_name, email, phone_number, address FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM churn_predictions WHERE likelihood > 0.5);",
      "SELECT product_name, price, AVG(quantity) AS avg_quantity_sold FROM products JOIN sales ON products.product_id = sales.product_id GROUP BY product_name HAVING AVG(quantity) > 5;",
      "SELECT customer_id, customer_name, email, address, MAX(total_amount) AS highest_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;"
    ]
  }
]