[
  {
    "statements": [
      "SELECT * FROM price_elasticity;",
      "SELECT product_id, price FROM price_elasticity;",
      "SELECT product_id, demand FROM price_elasticity;",
      "SELECT product_id, revenue FROM price_elasticity;",
      "SELECT price, demand FROM price_elasticity;",
      "SELECT price, revenue FROM price_elasticity;",
      "SELECT demand, revenue FROM price_elasticity;",
      "SELECT product_id, price, demand FROM price_elasticity;",
      "SELECT product_id, price, revenue FROM price_elasticity;",
      "SELECT product_id, demand, revenue FROM price_elasticity;",
      "SELECT price, demand, revenue FROM price_elasticity;",
      "SELECT product_id, price, demand, revenue FROM price_elasticity;",
      "SELECT * FROM price_elasticity WHERE product_id = 1;",
      "SELECT * FROM price_elasticity WHERE price > 50;",
      "SELECT MAX(price) FROM price_elasticity;",
      "SELECT MIN(demand) FROM price_elasticity;",
      "SELECT AVG(revenue) FROM price_elasticity;",
      "SELECT SUM(demand) FROM price_elasticity;",
      "SELECT COUNT(product_id) FROM price_elasticity;",
      "SELECT product_id, price, demand, revenue FROM price_elasticity WHERE price < 100 AND demand > 50;",
      "SELECT * FROM price_elasticity WHERE price > 50 AND demand > 100",
      "SELECT product_id, price, demand FROM price_elasticity WHERE revenue > 5000",
      "SELECT COUNT(*) FROM price_elasticity",
      "SELECT AVG(price) FROM price_elasticity WHERE demand > 50",
      "SELECT SUM(demand) FROM price_elasticity WHERE price between 20 and 50",
      "SELECT MAX(revenue) FROM price_elasticity",
      "SELECT product_id, price, demand, revenue FROM price_elasticity WHERE demand BETWEEN 100 and 200 AND price > 40",
      "SELECT DISTINCT product_id FROM price_elasticity",
      "SELECT product_id, SUM(demand) as total_demand, SUM(revenue) as total_revenue FROM price_elasticity GROUP BY product_id",
      "SELECT product_id, price*demand as total_cost FROM price_elasticity WHERE revenue > 5000",
      "SELECT product_id, demand, revenue FROM price_elasticity WHERE demand >= demand*0.5",
      "SELECT AVG(price), MAX(price), MIN(price) FROM price_elasticity WHERE product_id = 1",
      "SELECT MIN(price), MAX(price) FROM price_elasticity WHERE demand <= 50",
      "SELECT product_id, demand, price, revenue FROM price_elasticity WHERE demand > 100 ORDER BY revenue DESC",
      "SELECT product_id, price, demand, revenue FROM price_elasticity WHERE price >= 30 AND price <= 50 ORDER BY price DESC",
      "SELECT product_id, price, demand, revenue FROM price_elasticity WHERE revenue < 2000 AND price > 30",
      "SELECT product_id, price, demand, revenue FROM price_elasticity WHERE revenue > 10000 AND price between 70 and 100",
      "SELECT product_id, AVG(price) as avg_price, AVG(revenue) as avg_revenue FROM price_elasticity GROUP BY product_id",
      "SELECT product_id, SUM(price) as total_price, SUM(revenue) as total_revenue FROM price_elasticity GROUP BY product_id",
      "SELECT product_id, AVG(demand) as avg_demand, AVG(revenue) as avg_revenue FROM price_elasticity WHERE revenue > 5000"
    ]
  },
  {
    "statements": [
      "SELECT * FROM pricing_data;",
      "SELECT product_id, price FROM pricing_data;",
      "SELECT * FROM pricing_data WHERE price > 50;",
      "SELECT product_id, quantity_sold FROM pricing_data WHERE quantity_sold < 100;",
      "SELECT * FROM price_elasticity;",
      "SELECT product_id, elasticity FROM price_elasticity;",
      "SELECT * FROM price_elasticity WHERE elasticity < 0;",
      "SELECT p.product_id, p.price, e.elasticity FROM pricing_data p JOIN price_elasticity e ON p.product_id = e.product_id;",
      "SELECT p.product_id, p.price, e.elasticity FROM pricing_data p LEFT JOIN price_elasticity e ON p.product_id = e.product_id;",
      "SELECT p.product_id, p.price, e.elasticity FROM pricing_data p RIGHT JOIN price_elasticity e ON p.product_id = e.product_id;",
      "SELECT p.product_id, p.price, e.elasticity FROM pricing_data p INNER JOIN price_elasticity e ON p.product_id = e.product_id;",
      "SELECT p.product_id, p.price, e.elasticity FROM pricing_data p FULL OUTER JOIN price_elasticity e ON p.product_id = e.product_id;",
      "SELECT p.product_id, p.price, e.elasticity FROM pricing_data p JOIN price_elasticity e ON p.product_id = e.product_id WHERE p.price > 50;",
      "SELECT p.product_id, p.price, e.elasticity FROM pricing_data p JOIN price_elasticity e ON p.product_id = e.product_id WHERE e.elasticity < 0;",
      "SELECT AVG(price) AS avg_price FROM pricing_data;",
      "SELECT SUM(quantity_sold) AS total_sold FROM pricing_data;",
      "SELECT product_id, avg(price) AS avg_price FROM pricing_data GROUP BY product_id;",
      "SELECT product_id, COUNT(*) AS num_records FROM pricing_data GROUP BY product_id HAVING COUNT(*) > 1;",
      "SELECT product_id, MAX(price) AS max_price FROM pricing_data GROUP BY product_id;",
      "SELECT product_id, MIN(price) AS min_price FROM pricing_data GROUP BY product_id;",
      "SELECT * FROM pricing_data WHERE price > 100 AND quantity_sold > 50;",
      "SELECT product_id, price FROM pricing_data WHERE quantity_sold < 1000;",
      "SELECT product_id, price, quantity_sold FROM pricing_data WHERE price < 50 OR quantity_sold = 0;",
      "SELECT * FROM price_elasticity WHERE elasticity > 0.5;",
      "SELECT product_id, elasticity FROM price_elasticity WHERE product_id IN (1, 2, 3);",
      "SELECT product_id, price FROM pricing_data WHERE product_id = 1;",
      "SELECT * FROM pricing_data pd JOIN price_elasticity pe ON pd.product_id = pe.product_id;",
      "SELECT pd.product_id, pd.price, pe.elasticity FROM pricing_data pd JOIN price_elasticity pe ON pd.product_id = pe.product_id;",
      "SELECT pd.product_id, pd.price, pd.quantity_sold, pe.elasticity FROM pricing_data pd JOIN price_elasticity pe ON pd.product_id = pe.product_id WHERE pe.elasticity > 0.3;",
      "SELECT pd.product_id, pd.price, SUM(pd.quantity_sold) AS total_quantity FROM pricing_data pd GROUP BY pd.product_id;",
      "SELECT pd.product_id, COUNT(pe.elasticity) AS num_elasticity FROM pricing_data pd LEFT JOIN price_elasticity pe ON pd.product_id = pe.product_id GROUP BY pd.product_id;",
      "SELECT pd.product_id, AVG(pe.elasticity) AS avg_elasticity FROM pricing_data pd LEFT JOIN price_elasticity pe ON pd.product_id = pe.product_id GROUP BY pd.product_id;",
      "SELECT pd.product_id, MAX(pd.price) AS max_price FROM pricing_data pd GROUP BY pd.product_id;",
      "SELECT pd.product_id, MIN(pd.price) AS min_price FROM pricing_data pd GROUP BY pd.product_id;",
      "SELECT pd.product_id, COUNT(pd.price) AS num_prices FROM pricing_data pd GROUP BY pd.product_id HAVING COUNT(pd.price) > 1;",
      "SELECT pd.product_id, price, quantity_sold, elasticity FROM pricing_data pd JOIN price_elasticity pe ON pd.product_id = pe.product_id WHERE price BETWEEN 50 AND 100 AND quantity_sold > 20;",
      "SELECT pd.product_id, price, quantity_sold, elasticity FROM pricing_data pd JOIN price_elasticity pe ON pd.product_id = pe.product_id ORDER BY pd.price DESC, pe.elasticity ASC;",
      "SELECT pd.product_id, price, quantity_sold, elasticity FROM pricing_data pd JOIN price_elasticity pe ON pd.product_id = pe.product_id WHERE pd.product_id BETWEEN 1 AND 5;",
      "SELECT pd.product_id, price, quantity_sold, elasticity FROM pricing_data pd JOIN price_elasticity pe ON pd.product_id = pe.product_id LIMIT 10;",
      "SELECT pd.product_id, price, quantity_sold, elasticity FROM pricing_data pd JOIN price_elasticity pe ON pd.product_id = pe.product_id WHERE pd.product_id = 1 UNION SELECT pd.product_id, price, quantity_sold, elasticity FROM pricing_data pd JOIN price_elasticity pe ON pd.product_id = pe.product_id WHERE pd.product_id = 2;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM PriceElasticityData;",
      "SELECT product_name, price FROM PriceElasticityData;",
      "SELECT id, product_name, quantity_sold FROM PriceElasticityData;",
      "SELECT * FROM CustomerFeedback;",
      "SELECT product_id, rating FROM CustomerFeedback;",
      "SELECT id, feedback_text FROM CustomerFeedback;",
      "SELECT * FROM CompetitorPrices;",
      "SELECT product_name, competitor_price FROM CompetitorPrices;",
      "SELECT id, product_name FROM CompetitorPrices;",
      "SELECT DISTINCT product_name FROM PriceElasticityData;",
      "SELECT product_name, price, quantity_sold FROM PriceElasticityData WHERE quantity_sold > 100;",
      "SELECT * FROM CustomerFeedback WHERE rating > 3;",
      "SELECT * FROM CompetitorPrices WHERE competitor_price < 50;",
      "SELECT product_name, price FROM PriceElasticityData WHERE price BETWEEN 10 AND 50;",
      "SELECT * FROM CustomerFeedback WHERE feedback_text LIKE '%good%';",
      "SELECT product_name, price FROM PriceElasticityData ORDER BY price DESC;",
      "SELECT id, product_name, competitor_price FROM PriceElasticityData JOIN CompetitorPrices ON PriceElasticityData.product_name = CompetitorPrices.product_name;",
      "SELECT AVG(price) AS avg_price FROM PriceElasticityData;",
      "SELECT MAX(price) AS max_price, MIN(price) AS min_price FROM PriceElasticityData;",
      "SELECT product_name, SUM(revenue) AS total_revenue FROM PriceElasticityData GROUP BY product_name;",
      "SELECT * FROM PriceElasticityData WHERE price > 100 AND quantity_sold > 50;",
      "SELECT product_name, price FROM PriceElasticityData WHERE revenue > 5000;",
      "SELECT product_name, price, quantity_sold, revenue FROM PriceElasticityData WHERE price < 50 OR quantity_sold < 20;",
      "SELECT product_id, feedback_text, rating FROM CustomerFeedback WHERE rating >= 4;",
      "SELECT product_name, competitor_price FROM CompetitorPrices WHERE competitor_price < 80;",
      "SELECT product_name, quantity_sold FROM PriceElasticityData WHERE quantity_sold < 10 AND revenue < 1000;",
      "SELECT * FROM PriceElasticityData WHERE price BETWEEN 50 AND 100;",
      "SELECT product_name, revenue FROM PriceElasticityData WHERE quantity_sold > 50 AND price > 75;",
      "SELECT product_id, rating FROM CustomerFeedback WHERE rating <= 2;",
      "SELECT * FROM CompetitorPrices WHERE competitor_price < (SELECT AVG(competitor_price) FROM CompetitorPrices);",
      "SELECT product_name, AVG(price) AS avg_price FROM PriceElasticityData GROUP BY product_name;",
      "SELECT COUNT(*) AS num_products, SUM(quantity_sold) AS total_quantity_sold FROM PriceElasticityData;",
      "SELECT product_name, revenue, competitor_price FROM PriceElasticityData INNER JOIN CompetitorPrices ON PriceElasticityData.product_name = CompetitorPrices.product_name;",
      "SELECT product_name, SUM(quantity_sold) AS total_quantity_sold FROM PriceElasticityData GROUP BY product_name HAVING total_quantity_sold > 100;",
      "SELECT product_name, MAX(price) AS max_price FROM PriceElasticityData GROUP BY product_name;",
      "SELECT product_name, AVG(revenue) AS avg_revenue, AVG(competitor_price) AS avg_competitor_price FROM PriceElasticityData INNER JOIN CompetitorPrices ON PriceElasticityData.product_name = CompetitorPrices.product_name GROUP BY product_name;",
      "SELECT product_name, SUM(revenue) AS total_revenue FROM PriceElasticityData GROUP BY product_name ORDER BY total_revenue DESC;",
      "SELECT product_name, quantity_sold, revenue FROM PriceElasticityData WHERE price < (SELECT AVG(price) FROM PriceElasticityData);",
      "SELECT product_id, product_name, rating FROM CustomerFeedback INNER JOIN PriceElasticityData ON CustomerFeedback.product_id = PriceElasticityData.id;",
      "SELECT product_name, quantity_sold, revenue FROM PriceElasticityData WHERE revenue > price * quantity_sold;",
      "SELECT * FROM PriceElasticityData WHERE id IN (SELECT product_id FROM CustomerFeedback WHERE rating >= 4);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM price_elasticity_data;",
      "SELECT id, product_name FROM price_elasticity_data;",
      "SELECT product_name, price FROM price_elasticity_data;",
      "SELECT * FROM customer_data;",
      "SELECT customer_id, customer_name FROM customer_data;",
      "SELECT customer_name, email FROM customer_data;",
      "SELECT * FROM competitor_prices;",
      "SELECT product_id, competitor_name FROM competitor_prices;",
      "SELECT competitor_name, price FROM competitor_prices;",
      "SELECT * FROM sales_trends;",
      "SELECT year, quarter FROM sales_trends;",
      "SELECT quarter, total_sales FROM sales_trends;",
      "SELECT product_name, price, quantity_sold FROM price_elasticity_data;",
      "SELECT customer_name, email, address FROM customer_data;",
      "SELECT competitor_name, price FROM competitor_prices WHERE price < 10;",
      "SELECT total_sales FROM sales_trends WHERE year = 2021;",
      "SELECT total_sales FROM sales_trends WHERE year = 2020 AND quarter = 2;",
      "SELECT product_name, price FROM price_elasticity_data ORDER BY price DESC;",
      "SELECT customer_name, email FROM customer_data ORDER BY customer_name;",
      "SELECT competitor_name, price FROM competitor_prices ORDER BY price ASC;",
      "SELECT year, SUM(total_sales) AS total_sales FROM sales_trends GROUP BY year;",
      "SELECT * FROM price_elasticity_data WHERE price < 10 AND quantity_sold > 100",
      "SELECT product_name, price, quantity_sold FROM price_elasticity_data WHERE price BETWEEN 20 AND 50",
      "SELECT * FROM customer_data WHERE customer_name LIKE '%John%'",
      "SELECT * FROM competitor_prices WHERE price > (SELECT AVG(price) FROM competitor_prices)",
      "SELECT * FROM sales_trends WHERE year = 2020 AND quarter = 1",
      "SELECT product_name, price, quantity_sold FROM price_elasticity_data ORDER BY price DESC",
      "SELECT competitor_name, AVG(price) AS avg_price FROM competitor_prices GROUP BY competitor_name",
      "SELECT customer_name, email FROM customer_data WHERE address = '123 Main Street'",
      "SELECT * FROM price_elasticity_data WHERE price * quantity_sold > 500",
      "SELECT competitor_name, COUNT(*) AS num_products FROM competitor_prices GROUP BY competitor_name HAVING num_products > 2",
      "SELECT AVG(price) FROM competitor_prices WHERE competitor_name = 'Competitor A'",
      "SELECT * FROM sales_trends WHERE total_sales IN (SELECT MAX(total_sales) FROM sales_trends)",
      "SELECT product_name, MAX(quantity_sold) AS max_quantity FROM price_elasticity_data GROUP BY product_name ORDER BY max_quantity DESC",
      "SELECT * FROM customer_data c INNER JOIN sales_trends s ON c.customer_id = s.year",
      "SELECT product_name, price, quantity_sold FROM price_elasticity_data WHERE product_name IN (SELECT DISTINCT product_name FROM competitor_prices)",
      "SELECT competitor_name, price FROM competitor_prices WHERE competitor_name = 'Competitor B' UNION SELECT customer_name, price FROM customer_data WHERE email LIKE '%@gmail.com'",
      "SELECT competitor_name, COUNT(*) AS num_products FROM competitor_prices GROUP BY competitor_name ORDER BY num_products DESC LIMIT 5",
      "SELECT MIN(price), MAX(price), AVG(price) FROM competitor_prices",
      "SELECT product_name, price, quantity_sold FROM price_elasticity_data WHERE price > 50 OR quantity_sold < 10",
      "SELECT c.customer_name, p.product_name, p.price FROM customer_data c, price_elasticity_data p WHERE c.customer_id = p.id"
    ]
  },
  {
    "statements": [
      "SELECT * FROM PricingStrategies;",
      "SELECT product_id, price FROM ElasticityCoefficients;",
      "SELECT competitor_name, market_share FROM CompetitorAnalysis;",
      "SELECT trend_description, impact_level FROM MarketTrends;",
      "SELECT customer_id, feedback_text FROM CustomerFeedback;",
      "SELECT product_id, price, sales_volume FROM PricingStrategies WHERE product_id = 1;",
      "SELECT product_id, elasticity_coefficient FROM ElasticityCoefficients WHERE product_id = 2;",
      "SELECT competitor_id, market_share FROM CompetitorAnalysis WHERE competitor_id = 3;",
      "SELECT trend_id, trend_description FROM MarketTrends WHERE trend_id = 4;",
      "SELECT customer_id, feedback_text FROM CustomerFeedback WHERE feedback_id = 5;",
      "SELECT product_id, price, sales_volume FROM PricingStrategies WHERE price > 50;",
      "SELECT product_id, elasticity_coefficient FROM ElasticityCoefficients WHERE elasticity_coefficient < 0.5;",
      "SELECT competitor_id, market_share FROM CompetitorAnalysis WHERE market_share > 0.2;",
      "SELECT trend_id, trend_description FROM MarketTrends WHERE impact_level > 0.8;",
      "SELECT customer_id, feedback_text FROM CustomerFeedback WHERE customer_id = 10;",
      "SELECT product_id, price, sales_volume FROM PricingStrategies ORDER BY price DESC;",
      "SELECT product_id, elasticity_coefficient FROM ElasticityCoefficients ORDER BY elasticity_coefficient ASC;",
      "SELECT competitor_id, market_share FROM CompetitorAnalysis ORDER BY market_share DESC;",
      "SELECT trend_id, trend_description FROM MarketTrends ORDER BY impact_level ASC;",
      "SELECT customer_id, feedback_text FROM CustomerFeedback ORDER BY feedback_id DESC;",
      "SELECT * FROM PricingStrategies WHERE sales_volume > 100 AND price < 50;",
      "SELECT product_id, elasticity_coefficient FROM ElasticityCoefficients WHERE demand_curve = 'high';",
      "SELECT competitor_name, market_share FROM CompetitorAnalysis ORDER BY market_share DESC;",
      "SELECT feedback_text FROM CustomerFeedback WHERE feedback_id = 5;",
      "SELECT AVG(price) AS avg_price, MAX(sales_volume) AS max_sales FROM PricingStrategies;",
      "SELECT * FROM MarketTrends WHERE impact_level > 0.8;",
      "SELECT COUNT(*) AS total_feedback FROM CustomerFeedback WHERE customer_id = 10;",
      "SELECT AVG(elasticity_coefficient) FROM ElasticityCoefficients WHERE product_id = 3;",
      "SELECT competitor_name, market_share FROM CompetitorAnalysis WHERE market_share BETWEEN 0.2 AND 0.5;",
      "SELECT SUM(sales_volume) AS total_sales FROM PricingStrategies;",
      "SELECT * FROM PricingStrategies JOIN ElasticityCoefficients ON PricingStrategies.product_id = ElasticityCoefficients.product_id;",
      "SELECT competitor_name, market_share FROM CompetitorAnalysis WHERE competitor_name LIKE '%corp%';",
      "SELECT MAX(price) AS max_price, MIN(price) AS min_price FROM PricingStrategies;",
      "SELECT feedback_text FROM CustomerFeedback WHERE feedback_text LIKE '%improve%';",
      "SELECT COUNT(DISTINCT customer_id) AS unique_customers FROM CustomerFeedback;",
      "SELECT trend_description, impact_level FROM MarketTrends WHERE trend_id = 7;",
      "SELECT SUM(market_share) AS total_market_share FROM CompetitorAnalysis;",
      "SELECT AVG(price/sales_volume) AS avg_price_per_sale FROM PricingStrategies;",
      "SELECT competitor_name, AVG(market_share) AS avg_market_share FROM CompetitorAnalysis GROUP BY competitor_name;",
      "SELECT feedback_id, COUNT(*) AS total_feedback_count FROM CustomerFeedback GROUP BY feedback_id HAVING COUNT(*) > 1;"
    ]
  }
]