[
  {
    "statements": [
      "SELECT * FROM data_pipeline;",
      "SELECT id, event_time, event_type FROM data_pipeline;",
      "SELECT id, event_type FROM data_pipeline WHERE id = 1;",
      "SELECT * FROM data_pipeline WHERE event_type = 'click';",
      "SELECT * FROM data_pipeline WHERE event_time >= '2022-01-01 00:00:00';",
      "SELECT * FROM data_pipeline WHERE payload ->> 'key' = 'value';",
      "SELECT id, event_type FROM data_pipeline ORDER BY event_time DESC;",
      "SELECT COUNT(*) FROM data_pipeline;",
      "SELECT AVG(id) FROM data_pipeline;",
      "SELECT MAX(event_time) FROM data_pipeline;",
      "SELECT id, COUNT(*) FROM data_pipeline GROUP BY id;",
      "SELECT DISTINCT event_type FROM data_pipeline;",
      "SELECT * FROM data_pipeline UNION SELECT * FROM data_pipeline;",
      "SELECT * FROM data_pipeline LIMIT 10;",
      "SELECT id, event_type FROM data_pipeline OFFSET 5;",
      "SELECT * FROM data_pipeline WHERE id IN (1, 2, 3);",
      "SELECT * FROM data_pipeline WHERE id BETWEEN 1 AND 5;",
      "SELECT id, event_type FROM data_pipeline WHERE event_time BETWEEN '2022-01-01 00:00:00' AND '2022-01-31 23:59:59';",
      "SELECT * FROM data_pipeline WHERE payload @> '{\"key1\": \"value1\"}';",
      "SELECT * FROM data_pipeline WHERE payload ->> 'key1' = 'value1';",
      "SELECT * FROM data_pipeline WHERE id = 1;",
      "SELECT id, event_time FROM data_pipeline WHERE event_type = 'purchase' ORDER BY event_time DESC;",
      "SELECT id, event_type, payload->>'customer_id' AS customer_id FROM data_pipeline WHERE event_type = 'registration';",
      "SELECT id, JSONB_EXISTS(payload, 'product_id') AS has_product_id FROM data_pipeline WHERE id > 10;",
      "SELECT id, event_time, event_type, payload->'order_details' AS order_details FROM data_pipeline WHERE payload @> '{\"status\": \"completed\"}';",
      "SELECT id, event_type, JSONB_ARRAY_ELEMENTS_TEXT(payload->'products') AS product_name FROM data_pipeline;",
      "SELECT id, event_type, COUNT(*) AS event_count FROM data_pipeline GROUP BY event_type;",
      "SELECT event_type, AVG(EXTRACT(EPOCH FROM event_time)) AS avg_event_time FROM data_pipeline GROUP BY event_type;",
      "SELECT DISTINCT event_type FROM data_pipeline;",
      "SELECT id, event_type, COUNT(*) AS event_count, SUM(JSONB_ARRAY_LENGTH(payload->'items')) AS total_items FROM data_pipeline GROUP BY id, event_type;",
      "SELECT id, event_type, event_time::DATE AS event_date FROM data_pipeline WHERE event_type IN ('registration', 'purchase') ORDER BY event_time;",
      "SELECT event_type, COUNT(*) AS event_count FROM data_pipeline WHERE event_type LIKE 'add%' GROUP BY event_type;",
      "SELECT id, JSONB_ARRAY_ELEMENTS(payload->'products') ->> 'name' AS product_name FROM data_pipeline;",
      "SELECT id, event_type, event_time, payload FROM data_pipeline WHERE event_time >= '2022-01-01'::TIMESTAMP AND event_time < '2022-02-01'::TIMESTAMP;",
      "SELECT id, event_type, jsonb_pretty(payload) AS pretty_payload FROM data_pipeline WHERE JSONB_EXISTS(payload, 'order_id');",
      "SELECT id, event_type, event_time, payload FROM data_pipeline WHERE payload->>'status' ILIKE 'shipped%';",
      "SELECT id, event_type, payload->'customer_info'->'address' AS customer_address FROM data_pipeline;",
      "SELECT DISTINCT event_type, COUNT(*) OVER(PARTITION BY event_type) AS event_type_count FROM data_pipeline;",
      "SELECT id, event_type, JSONB_OBJECT_KEYS(payload) AS payload_keys FROM data_pipeline WHERE id = 5;",
      "SELECT id, event_type, COUNT(*) AS event_count, SUM(JSONB_ARRAY_LENGTH(payload->'products')) AS total_products FROM data_pipeline GROUP BY event_type HAVING COUNT(*) > 1;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM data_pipeline;",
      "SELECT id, event_type FROM data_pipeline;",
      "SELECT * FROM data_pipeline WHERE event_type = 'click';",
      "SELECT id, event_timestamp FROM data_pipeline WHERE id = 100;",
      "SELECT * FROM data_pipeline ORDER BY event_timestamp DESC;",
      "SELECT * FROM data_pipeline WHERE event_timestamp > '2022-01-01';",
      "SELECT COUNT(*) FROM data_pipeline;",
      "SELECT AVG(id) FROM data_pipeline;",
      "SELECT MAX(event_timestamp) FROM data_pipeline;",
      "SELECT MIN(id) FROM data_pipeline;",
      "SELECT * FROM data_pipeline JOIN model_updates ON data_pipeline.id = model_updates.model_id;",
      "SELECT * FROM data_pipeline LEFT JOIN model_updates ON data_pipeline.id = model_updates.model_id;",
      "SELECT * FROM data_pipeline RIGHT JOIN model_updates ON data_pipeline.id = model_updates.model_id;",
      "SELECT * FROM data_pipeline INNER JOIN model_updates ON data_pipeline.id = model_updates.model_id;",
      "SELECT data_payload->'key' AS key_value FROM data_pipeline;",
      "SELECT id, JSONB_ARRAY_LENGTH(data_payload->'items') AS num_items FROM data_pipeline;",
      "SELECT id, event_timestamp, data_payload->>'value' AS value FROM data_pipeline;",
      "SELECT event_type, COUNT(*) FROM data_pipeline GROUP BY event_type;",
      "SELECT date_trunc('hour', event_timestamp) AS hour, COUNT(*) FROM data_pipeline GROUP BY hour;",
      "SELECT event_type, COUNT(*) FROM data_pipeline WHERE event_timestamp > '2022-01-01' GROUP BY event_type;",
      "SELECT * FROM data_pipeline WHERE id = 1;",
      "SELECT id, event_type FROM data_pipeline WHERE event_type = 'click';",
      "SELECT * FROM data_pipeline WHERE event_timestamp >= '2022-01-01 00:00:00' AND event_timestamp <= '2022-01-31 23:59:59';",
      "SELECT id, event_timestamp, data_payload->>'user_id' AS user_id FROM data_pipeline WHERE data_payload->>'country' = 'USA';",
      "SELECT id, event_type, event_timestamp, data_payload FROM data_pipeline WHERE data_payload @> '{\"device\": \"mobile\"}'::jsonb;",
      "SELECT id, event_timestamp FROM data_pipeline WHERE event_type IN ('purchase', 'add_to_cart') ORDER BY event_timestamp DESC LIMIT 10;",
      "SELECT id, event_type, date_trunc('hour', event_timestamp) AS event_hour FROM data_pipeline WHERE event_timestamp >= '2022-02-01 00:00:00' AND event_timestamp < '2022-02-02 00:00:00' GROUP BY id, event_type, event_hour;",
      "SELECT DISTINCT event_type FROM data_pipeline ORDER BY event_type;",
      "SELECT event_type, COUNT(*) AS event_count FROM data_pipeline GROUP BY event_type HAVING COUNT(*) > 100;",
      "SELECT event_type, AVG(EXTRACT(EPOCH FROM event_timestamp)) AS average_epoch FROM data_pipeline WHERE event_type = 'login' GROUP BY event_type;",
      "SELECT model_id, update_timestamp, updated_values FROM model_updates WHERE model_id = 5;",
      "SELECT model_id, update_timestamp, updated_values FROM model_updates WHERE update_timestamp >= '2022-01-01 00:00:00' AND update_timestamp <= '2022-01-31 23:59:59';",
      "SELECT model_id, date_trunc('day', update_timestamp) AS update_day FROM model_updates WHERE model_id = 10 GROUP BY model_id, update_day;",
      "SELECT model_id, COUNT(*) AS update_count FROM model_updates GROUP BY model_id HAVING COUNT(*) > 5;",
      "SELECT model_id, AVG(EXTRACT(EPOCH FROM update_timestamp)) AS average_epoch FROM model_updates WHERE model_id IN (1, 2, 3) GROUP BY model_id;",
      "SELECT model_id, max(EXTRACT(EPOCH FROM update_timestamp)) AS max_epoch FROM model_updates WHERE model_id = 5 GROUP BY model_id;",
      "SELECT model_id, MIN(EXTRACT(EPOCH FROM update_timestamp)) AS min_epoch FROM model_updates WHERE model_id = 10 GROUP BY model_id;",
      "SELECT m.model_id, m.update_timestamp, m.updated_values, d.event_type, d.data_payload->>'user_id' AS user_id FROM model_updates m JOIN data_pipeline d ON m.model_id = d.id;",
      "SELECT m.model_id, COUNT(*) AS update_count, AVG(EXTRACT(EPOCH FROM m.update_timestamp)) AS average_epoch, MAX(EXTRACT(EPOCH FROM m.update_timestamp)) AS max_epoch FROM model_updates m JOIN data_pipeline d ON m.model_id = d.id GROUP BY m.model_id;",
      "SELECT m.model_id, MAX(EXTRACT(EPOCH FROM m.update_timestamp)) - MIN(EXTRACT(EPOCH FROM m.update_timestamp)) AS time_diff FROM model_updates m JOIN data_pipeline d ON m.model_id = d.id GROUP BY m.model_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM real_time_data;",
      "SELECT id, event_name FROM real_time_data;",
      "SELECT * FROM model_updates;",
      "SELECT update_id, model_name FROM model_updates;",
      "SELECT * FROM data_pipeline_logs;",
      "SELECT log_id, log_timestamp FROM data_pipeline_logs;",
      "SELECT id, event_name, event_timestamp FROM real_time_data;",
      "SELECT update_id, model_name, update_timestamp FROM model_updates;",
      "SELECT log_id, log_timestamp, log_message FROM data_pipeline_logs;",
      "SELECT id, event_name, event_data FROM real_time_data;",
      "SELECT update_id, model_name, update_data FROM model_updates;",
      "SELECT log_id, log_timestamp, log_message FROM data_pipeline_logs;",
      "SELECT id, event_name, event_timestamp, event_data FROM real_time_data;",
      "SELECT update_id, model_name, update_timestamp, update_data FROM model_updates;",
      "SELECT log_id, log_timestamp, log_message FROM data_pipeline_logs;",
      "SELECT id, event_timestamp, event_data FROM real_time_data;",
      "SELECT update_id, update_timestamp, update_data FROM model_updates;",
      "SELECT log_id, log_message FROM data_pipeline_logs;",
      "SELECT id, event_data FROM real_time_data;",
      "SELECT update_id, update_data FROM model_updates;",
      "SELECT * FROM real_time_data WHERE id = 1;",
      "SELECT event_name, event_timestamp FROM real_time_data WHERE event_name = 'Event1' AND event_timestamp > '2022-01-01';",
      "SELECT * FROM model_updates WHERE update_timestamp BETWEEN '2022-01-01' AND '2022-05-01';",
      "SELECT model_name, update_data FROM model_updates WHERE update_id = 10;",
      "SELECT * FROM data_pipeline_logs WHERE log_timestamp >= '2022-01-01' AND log_timestamp <= '2022-06-01';",
      "SELECT COUNT(*) FROM real_time_data;",
      "SELECT AVG(id) FROM real_time_data;",
      "SELECT MAX(log_timestamp) FROM data_pipeline_logs;",
      "SELECT MIN(update_id) FROM model_updates;",
      "SELECT DISTINCT model_name FROM model_updates;",
      "SELECT event_name, COUNT(*) FROM real_time_data GROUP BY event_name;",
      "SELECT id, event_name, DATE(event_timestamp) FROM real_time_data WHERE id IN (1, 2, 3);",
      "SELECT MAX(id) AS max_id_real_time_data, MAX(update_id) AS max_update_id_model_updates FROM real_time_data, model_updates;",
      "SELECT * FROM real_time_data AS r JOIN model_updates AS m ON r.id = m.update_id;",
      "SELECT r.id AS real_time_id, m.model_name AS update_model, d.log_message AS pipeline_log FROM real_time_data AS r LEFT JOIN model_updates AS m ON r.id = m.update_id LEFT JOIN data_pipeline_logs AS d ON r.id = d.log_id;",
      "SELECT * FROM real_time_data WHERE event_name LIKE 'Event%';",
      "SELECT id, event_timestamp, EXTRACT(MONTH FROM event_timestamp) AS event_month FROM real_time_data;",
      "SELECT model_name, COUNT(*) AS update_count FROM model_updates GROUP BY model_name HAVING COUNT(*) > 5;",
      "SELECT AVG(EXTRACT(EPOCH FROM event_timestamp)) AS avg_epoch_time FROM real_time_data;",
      "SELECT * FROM real_time_data WHERE event_data->'key' = 'value';",
      "SELECT MAX(update_timestamp - event_timestamp) AS max_time_difference FROM real_time_data JOIN model_updates ON real_time_data.id = model_updates.update_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM DataPipeline;",
      "SELECT pipeline_name, pipeline_description FROM DataPipeline;",
      "SELECT id, created_at FROM DataPipeline;",
      "SELECT * FROM RealTimeDataIngestion;",
      "SELECT data_source, ingestion_status FROM RealTimeDataIngestion;",
      "SELECT id, ingestion_timestamp FROM RealTimeDataIngestion;",
      "SELECT * FROM ModelUpdates;",
      "SELECT model_name, last_updated FROM ModelUpdates;",
      "SELECT id, last_updated FROM ModelUpdates;",
      "SELECT * FROM IntegrationLogs;",
      "SELECT log_message, log_timestamp FROM IntegrationLogs;",
      "SELECT id, log_timestamp FROM IntegrationLogs;",
      "SELECT * FROM DataPipeline WHERE id = 1;",
      "SELECT pipeline_name FROM DataPipeline WHERE created_at > '2022-01-01';",
      "SELECT * FROM RealTimeDataIngestion WHERE ingestion_status = 'Failed';",
      "SELECT data_source FROM RealTimeDataIngestion WHERE ingestion_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT * FROM ModelUpdates WHERE last_updated > '2022-01-15';",
      "SELECT model_name FROM ModelUpdates WHERE id = 2;",
      "SELECT * FROM IntegrationLogs WHERE log_timestamp < '2022-02-01';",
      "SELECT * FROM DataPipeline WHERE id = 1;",
      "SELECT pipeline_name, pipeline_description FROM DataPipeline WHERE created_at >= '2022-01-01';",
      "SELECT * FROM RealTimeDataIngestion ORDER BY ingestion_timestamp DESC;",
      "SELECT data_source, ingestion_status FROM RealTimeDataIngestion WHERE ingestion_status = 'FAILED';",
      "SELECT * FROM ModelUpdates WHERE model_name LIKE '%forecast%';",
      "SELECT id, log_message FROM IntegrationLogs WHERE log_timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT DISTINCT model_name FROM ModelUpdates;",
      "SELECT pipeline_name, created_at FROM DataPipeline WHERE id IN (SELECT id FROM IntegrationLogs);",
      "SELECT MAX(ingestion_timestamp) AS latest_timestamp FROM RealTimeDataIngestion;",
      "SELECT pipeline_name, ingestion_status FROM DataPipeline INNER JOIN RealTimeDataIngestion ON DataPipeline.id = RealTimeDataIngestion.id;",
      "SELECT pipeline_name, data_source FROM DataPipeline LEFT JOIN RealTimeDataIngestion ON DataPipeline.id = RealTimeDataIngestion.id;",
      "SELECT pipeline_name, COUNT(*) AS total_ingestions FROM DataPipeline INNER JOIN RealTimeDataIngestion ON DataPipeline.id = RealTimeDataIngestion.id GROUP BY pipeline_name;",
      "SELECT model_name, MAX(last_updated) AS latest_update FROM ModelUpdates GROUP BY model_name;",
      "SELECT pipeline_name, COUNT(*) AS total_logs FROM DataPipeline LEFT JOIN IntegrationLogs ON DataPipeline.id = IntegrationLogs.id GROUP BY pipeline_name HAVING COUNT(*) > 0;",
      "SELECT model_name, CONCAT('Last updated on ', last_updated) AS update_info FROM ModelUpdates;",
      "SELECT model_name, DATEDIFF(NOW(), last_updated) AS days_since_update FROM ModelUpdates;",
      "SELECT COUNT(*) AS total_records FROM DataPipeline UNION ALL SELECT COUNT(*) FROM RealTimeDataIngestion UNION ALL SELECT COUNT(*) FROM ModelUpdates UNION ALL SELECT COUNT(*) FROM IntegrationLogs;",
      "SELECT AVG(ingestion_timestamp) AS avg_timestamp FROM RealTimeDataIngestion;",
      "SELECT model_name, COUNT(*) AS total_updates FROM ModelUpdates WHERE DATEDIFF(NOW(), last_updated) < 30 GROUP BY model_name;",
      "SELECT DISTINCT pipeline_name, SUBSTRING(pipeline_description, 1, 50) AS short_description FROM DataPipeline;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM data_ingestion;",
      "SELECT id, timestamp, data FROM model_updates;",
      "SELECT id, source_name FROM data_source;",
      "SELECT transformation_id, timestamp FROM data_transformation;",
      "SELECT model_name, data_source_id FROM model_metadata;",
      "SELECT id, timestamp FROM data_ingestion WHERE id = 1;",
      "SELECT * FROM model_updates WHERE model_id = 5;",
      "SELECT * FROM data_source WHERE id = 10;",
      "SELECT * FROM data_transformation WHERE timestamp >= '2022-01-01';",
      "SELECT id, model_name FROM model_metadata WHERE model_id = 3;",
      "SELECT COUNT(*) FROM data_ingestion;",
      "SELECT MAX(id) FROM model_updates;",
      "SELECT MIN(id) FROM data_source;",
      "SELECT AVG(transformation_id) FROM data_transformation;",
      "SELECT model_name, data_source_id FROM model_metadata WHERE data_source_id = 8;",
      "SELECT * FROM data_ingestion ORDER BY timestamp DESC;",
      "SELECT id, timestamp, data FROM model_updates WHERE model_id = 7;",
      "SELECT * FROM data_source WHERE source_name LIKE 'A%';",
      "SELECT * FROM model_metadata WHERE model_name = 'linear_regression';",
      "SELECT id, timestamp FROM data_transformation LIMIT 5;",
      "SELECT SUM(transformation_id) FROM data_transformation;",
      "SELECT * FROM data_ingestion;",
      "SELECT id, timestamp FROM data_ingestion WHERE id = 1;",
      "SELECT model_id, timestamp FROM model_updates WHERE model_id = 5 ORDER BY timestamp DESC;",
      "SELECT source_name FROM data_source WHERE id = 3;",
      "SELECT * FROM data_transformation WHERE transformation_id = 2 AND timestamp > '2022-01-01';",
      "SELECT model_name FROM model_metadata WHERE data_source_id = 4;",
      "SELECT COUNT(*) FROM data_ingestion;",
      "SELECT AVG(id) FROM data_ingestion WHERE id > 10;",
      "SELECT DISTINCT timestamp FROM data_transformation ORDER BY timestamp ASC;",
      "SELECT model_id, COUNT(*) FROM model_metadata GROUP BY model_id;",
      "SELECT id, source_name FROM data_source WHERE source_name LIKE '%sensor%';",
      "SELECT MAX(id), MIN(id) FROM model_updates;",
      "SELECT model_id, COUNT(*) AS num_updates FROM model_updates GROUP BY model_id HAVING num_updates > 3;",
      "SELECT data, timestamp FROM data_ingestion WHERE data LIKE '%",
      "%' AND timestamp < '2023-01-01';",
      "SELECT model_id, model_name FROM model_metadata WHERE model_id IN (1, 3, 5);",
      "SELECT timestamp, transformed_data FROM data_transformation WHERE transformation_id = 3 AND timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT source_name, COUNT(*) AS num_sources FROM data_source GROUP BY source_name HAVING num_sources >= 2;",
      "SELECT model_id, AVG(id) AS avg_id FROM model_updates GROUP BY model_id ORDER BY avg_id DESC;",
      "SELECT model_id, model_name, source_name FROM model_metadata INNER JOIN data_source ON model_metadata.data_source_id = data_source.id;",
      "SELECT id, timestamp FROM data_ingestion WHERE data LIKE '%Anomaly%' ORDER BY timestamp DESC LIMIT 10;"
    ]
  }
]