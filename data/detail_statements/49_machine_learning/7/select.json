[
  {
    "statements": [
      "SELECT * FROM preprocessed_data WHERE id = 1;",
      "SELECT id, data FROM preprocessed_data WHERE id > 5;",
      "SELECT COUNT(*) FROM preprocessed_data;",
      "SELECT data FROM preprocessed_data WHERE id = 10;",
      "SELECT id FROM preprocessed_data WHERE data = 'example';",
      "SELECT * FROM preprocessed_data ORDER BY id DESC;",
      "SELECT id, data FROM preprocessed_data WHERE id BETWEEN 5 AND 10;",
      "SELECT DISTINCT data FROM preprocessed_data;",
      "SELECT * FROM preprocessed_data WHERE data LIKE '%pattern%';",
      "SELECT id, data FROM preprocessed_data WHERE id % 2 = 0;",
      "SELECT MAX(id) FROM preprocessed_data;",
      "SELECT AVG(id) FROM preprocessed_data;",
      "SELECT MIN(id) FROM preprocessed_data;",
      "SELECT SUM(id) FROM preprocessed_data;",
      "SELECT * FROM preprocessed_data WHERE data IS NULL;",
      "SELECT data FROM preprocessed_data WHERE data IS NOT NULL;",
      "SELECT id, UPPER(data) FROM preprocessed_data;",
      "SELECT id, LOWER(data) FROM preprocessed_data;",
      "SELECT id, LENGTH(data) FROM preprocessed_data;",
      "SELECT id, CONCAT('ID:', id, ' Data:', data) AS information FROM preprocessed_data;",
      "SELECT id, SUBSTR(data, 1, 5) FROM preprocessed_data;",
      "SELECT * FROM preprocessed_data WHERE id = 10;",
      "SELECT id, data FROM preprocessed_data WHERE id > 100 AND data LIKE '%example%';",
      "SELECT COUNT(*) FROM preprocessed_data WHERE data IS NOT NULL;",
      "SELECT AVG(id) FROM preprocessed_data;",
      "SELECT DISTINCT data FROM preprocessed_data;",
      "SELECT id, SUBSTRING(data, 1, 5) AS truncated_data FROM preprocessed_data;",
      "SELECT id, LENGTH(data) AS data_length FROM preprocessed_data WHERE id < 50;",
      "SELECT id, UPPER(data) AS uppercase_data FROM preprocessed_data WHERE id BETWEEN 50 AND 100;",
      "SELECT * FROM preprocessed_data WHERE id IN (1, 5, 10);",
      "SELECT id, data FROM preprocessed_data WHERE data ILIKE 'pattern%';",
      "SELECT id, data FROM preprocessed_data ORDER BY id DESC;",
      "SELECT id AS identifier, data AS information FROM preprocessed_data;",
      "SELECT id, data FROM preprocessed_data WHERE data REGEXP '^A.*';",
      "SELECT id, data FROM preprocessed_data WHERE id BETWEEN 10 AND 20 OR data IS NULL;",
      "SELECT id, CONCAT('ID:', id, ' - ', data) AS combined_data FROM preprocessed_data WHERE id < 100;",
      "SELECT id, data FROM preprocessed_data WHERE id < 100 LIMIT 5;",
      "SELECT id, data FROM preprocessed_data WHERE data ~ 'pattern';",
      "SELECT id, data FROM preprocessed_data WHERE id BETWEEN 50 AND 100 AND data NOT LIKE '%example%';",
      "SELECT id, data FROM preprocessed_data WHERE id % 2 = 0;",
      "SELECT id, data FROM preprocessed_data WHERE id = (SELECT MAX(id) FROM preprocessed_data);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM ModelData;",
      "SELECT data FROM ModelData WHERE id = 1;",
      "SELECT id, data FROM ModelData WHERE data LIKE '%example%';",
      "SELECT * FROM ModelLabels;",
      "SELECT label FROM ModelLabels WHERE id = 1;",
      "SELECT id, label FROM ModelLabels WHERE label = 'category';",
      "SELECT id, data FROM ModelData ORDER BY id DESC;",
      "SELECT * FROM ModelLabels ORDER BY id ASC;",
      "SELECT id, data FROM ModelData WHERE id BETWEEN 1 AND 10;",
      "SELECT id, label FROM ModelLabels WHERE id > 5;",
      "SELECT COUNT(*) FROM ModelData;",
      "SELECT MAX(id) FROM ModelData;",
      "SELECT MIN(id) FROM ModelData;",
      "SELECT AVG(id) FROM ModelData;",
      "SELECT SUM(id) FROM ModelData;",
      "SELECT COUNT(*) FROM ModelLabels WHERE label LIKE '%example%';",
      "SELECT DISTINCT data FROM ModelData;",
      "SELECT DISTINCT label FROM ModelLabels;",
      "SELECT id, data, label FROM ModelData INNER JOIN ModelLabels ON ModelData.id = ModelLabels.id;",
      "SELECT id, data, label FROM ModelData LEFT JOIN ModelLabels ON ModelData.id = ModelLabels.id;",
      "SELECT id, data, label FROM ModelData RIGHT JOIN ModelLabels ON ModelData.id = ModelLabels.id;",
      "SELECT * FROM ModelData WHERE id = 1;",
      "SELECT data FROM ModelData WHERE id > 5 AND id < 10;",
      "SELECT id, data FROM ModelData WHERE data LIKE '%example%';",
      "SELECT id, label FROM ModelData JOIN ModelLabels ON ModelData.id = ModelLabels.id;",
      "SELECT id, data, label FROM ModelData JOIN ModelLabels ON ModelData.id = ModelLabels.id WHERE ModelData.id = 3;",
      "SELECT count(*) FROM ModelData WHERE data IS NOT NULL;",
      "SELECT MAX(id) FROM ModelData;",
      "SELECT MIN(id) FROM ModelData;",
      "SELECT AVG(id) FROM ModelData;",
      "SELECT SUM(id) FROM ModelData;",
      "SELECT id, COUNT(*) FROM ModelLabels GROUP BY id;",
      "SELECT ModelLabels.id, ModelLabels.label, COUNT(*) FROM ModelData JOIN ModelLabels ON ModelData.id = ModelLabels.id GROUP BY ModelLabels.id, ModelLabels.label;",
      "SELECT id, data, label FROM ModelData NATURAL JOIN ModelLabels;",
      "SELECT id, data, label FROM ModelData UNION SELECT id, data, label FROM ModelLabels;",
      "SELECT id, data, label FROM ModelData INTERSECT SELECT id, data, label FROM ModelLabels;",
      "SELECT id, data, label FROM ModelData EXCEPT SELECT id, data, label FROM ModelLabels;",
      "SELECT id, data FROM ModelData ORDER BY id ASC;",
      "SELECT id, data FROM ModelData ORDER BY id DESC;",
      "SELECT id, data FROM ModelData LIMIT 5 OFFSET 3;",
      "SELECT id, data FROM ModelData WHERE id IN (1, 2, 3);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM preprocessed_data;",
      "SELECT id, feature_1 FROM preprocessed_data;",
      "SELECT feature_1, target FROM preprocessed_data WHERE id = 1;",
      "SELECT COUNT(*) FROM preprocessed_data;",
      "SELECT AVG(feature_2) FROM preprocessed_data;",
      "SELECT MAX(feature_1) FROM preprocessed_data;",
      "SELECT MIN(feature_2) FROM preprocessed_data;",
      "SELECT id, feature_1, feature_2 FROM preprocessed_data ORDER BY id DESC;",
      "SELECT * FROM model_parameters;",
      "SELECT parameter_name, parameter_value FROM model_parameters;",
      "SELECT parameter_name FROM model_parameters WHERE parameter_value > 0.5;",
      "SELECT COUNT(*) FROM model_parameters;",
      "SELECT AVG(parameter_value) FROM model_parameters;",
      "SELECT MAX(parameter_value) FROM model_parameters;",
      "SELECT MIN(parameter_value) FROM model_parameters;",
      "SELECT * FROM data_statistics;",
      "SELECT stat_name, stat_value FROM data_statistics;",
      "SELECT stat_name FROM data_statistics WHERE stat_value < 10.0;",
      "SELECT COUNT(*) FROM data_statistics;",
      "SELECT AVG(stat_value) FROM data_statistics;",
      "SELECT MAX(stat_value) FROM data_statistics;",
      "SELECT id, feature_1, target FROM preprocessed_data WHERE feature_1 > 0.5 AND target = 'A'",
      "SELECT feature_1, feature_2 FROM preprocessed_data WHERE feature_2 >= 0.0",
      "SELECT * FROM preprocessed_data WHERE feature_1 + feature_2 > 1.0",
      "SELECT id, target FROM preprocessed_data WHERE id BETWEEN 10 AND 20",
      "SELECT AVG(feature_1), SUM(feature_2) FROM preprocessed_data WHERE target = 'B'",
      "SELECT COUNT(*) FROM preprocessed_data WHERE target = 'A'",
      "SELECT * FROM model_parameters WHERE parameter_value > 0.7",
      "SELECT parameter_name FROM model_parameters ORDER BY parameter_value DESC LIMIT 5",
      "SELECT MAX(stat_value) FROM data_statistics WHERE stat_name = 'max_value'",
      "SELECT MIN(id) FROM preprocessed_data WHERE feature_1 > 0.0",
      "SELECT DISTINCT target FROM preprocessed_data",
      "SELECT DISTINCT stat_name FROM data_statistics",
      "SELECT param.parameter_name, data.feature_1 FROM model_parameters param JOIN preprocessed_data data ON param.parameter_value = data.feature_1",
      "SELECT * FROM preprocessed_data WHERE id IN (SELECT MIN(id) FROM preprocessed_data)",
      "SELECT AVG(feature_1) AS mean_feature_1, SUM(feature_2) AS total_feature_2 FROM preprocessed_data GROUP BY target",
      "SELECT id, feature_1, feature_2 FROM preprocessed_data WHERE feature_1 IN (SELECT MAX(parameter_value) FROM model_parameters)",
      "SELECT stat_name, stat_value FROM data_statistics WHERE stat_name LIKE '%_value'",
      "SELECT * FROM model_parameters CROSS JOIN data_statistics",
      "SELECT param.parameter_name, AVG(data.feature_1) AS avg_feature_1 FROM model_parameters param JOIN preprocessed_data data ON param.parameter_value = data.feature_2 GROUP BY param.parameter_name",
      "SELECT id, feature_1, feature_2, target FROM preprocessed_data WHERE target LIKE 'A%' ORDER BY feature_1 ASC"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Preprocessed_Data;",
      "SELECT id, data_text FROM Preprocessed_Data WHERE id = 1;",
      "SELECT processed_data FROM Preprocessed_Data WHERE data_text LIKE '%example%';",
      "SELECT model_id, parameter_name, parameter_value FROM Model_Parameters WHERE model_id = 2;",
      "SELECT * FROM Training_Logs WHERE model_id = 1 ORDER BY training_time DESC;",
      "SELECT model_id, validation_result FROM Validation_Data WHERE model_id = 3 AND validation_result = 'passed';",
      "SELECT id, data_text, processed_data FROM Preprocessed_Data WHERE id BETWEEN 10 AND 20;",
      "SELECT * FROM Model_Parameters WHERE parameter_value > 0.5;",
      "SELECT * FROM Training_Logs WHERE model_id IN (1, 2, 3);",
      "SELECT validation_id, model_id FROM Validation_Data WHERE validation_result IS NOT NULL;",
      "SELECT * FROM Preprocessed_Data ORDER BY id DESC;",
      "SELECT MAX(parameter_value) AS max_value FROM Model_Parameters GROUP BY model_id;",
      "SELECT AVG(parameter_value) AS avg_value FROM Model_Parameters;",
      "SELECT DISTINCT model_id FROM Training_Logs;",
      "SELECT * FROM Validation_Data WHERE validation_result LIKE '%error%';",
      "SELECT COUNT(*) AS total_records FROM Preprocessed_Data;",
      "SELECT SUM(parameter_value) AS total_value FROM Model_Parameters;",
      "SELECT id, data_text FROM Preprocessed_Data WHERE data_text IS NOT NULL;",
      "SELECT model_id, COUNT(*) AS total_logs FROM Training_Logs GROUP BY model_id;",
      "SELECT MIN(training_time) AS first_training_time FROM Training_Logs;",
      "SELECT * FROM Preprocessed_Data WHERE id = 1",
      "SELECT data_text, processed_data FROM Preprocessed_Data",
      "SELECT model_id, parameter_name, parameter_value FROM Model_Parameters WHERE model_id = 1",
      "SELECT * FROM Model_Parameters WHERE parameter_value > 0.5",
      "SELECT model_id, training_time FROM Training_Logs WHERE model_id = 1",
      "SELECT * FROM Training_Logs WHERE EXTRACT(MONTH FROM training_time) = 10",
      "SELECT model_id, validation_result FROM Validation_Data WHERE validation_id = 1",
      "SELECT validation_id, validation_result FROM Validation_Data WHERE model_id = 1",
      "SELECT pd.data_text, vp.parameter_name FROM Preprocessed_Data pd JOIN Model_Parameters vp ON pd.id = vp.model_id",
      "SELECT pl.model_id, COUNT(pl.log_id) as num_logs FROM Training_Logs pl GROUP BY pl.model_id",
      "SELECT avg(vp.parameter_value) as avg_param_value FROM Model_Parameters vp",
      "SELECT min(training_time) as min_training_time FROM Training_Logs",
      "SELECT COUNT(*) as num_records FROM Preprocessed_Data",
      "SELECT DISTINCT model_id FROM Training_Logs",
      "SELECT parameter_name, SUM(parameter_value) as sum_param_value FROM Model_Parameters GROUP BY parameter_name",
      "SELECT * FROM Validation_Data ORDER BY validation_id DESC",
      "SELECT model_id, AVG(CAST(parameter_value as FLOAT)) as avg_param_value FROM Model_Parameters GROUP BY model_id",
      "SELECT model_id, MAX(CAST(parameter_value as FLOAT)) as max_param_value FROM Model_Parameters GROUP BY model_id",
      "SELECT model_id, MIN(CAST(parameter_value as FLOAT)) as min_param_value FROM Model_Parameters GROUP BY model_id",
      "SELECT model_id, COUNT(*) as num_validations FROM Validation_Data GROUP BY model_id"
    ]
  },
  {
    "statements": [
      "SELECT * FROM preprocessing_data;",
      "SELECT data_name, data_type FROM preprocessing_data WHERE id = 1;",
      "SELECT dataset_name, target_variable FROM training_data;",
      "SELECT model_name, algorithm FROM model_details;",
      "SELECT * FROM model_performance WHERE model_id = 1;",
      "SELECT source_name, source_type FROM data_sources;",
      "SELECT id, data_type, preprocessing_steps FROM preprocessing_data WHERE data_name LIKE 'example%';",
      "SELECT dataset_name, features FROM training_data WHERE id = 2;",
      "SELECT model_name, algorithm, hyperparameters FROM model_details WHERE model_id = 3;",
      "SELECT evaluation_metric, metric_value FROM model_performance WHERE model_id = 2;",
      "SELECT source_name, source_description FROM data_sources WHERE source_type = 'CSV';",
      "SELECT * FROM preprocessing_data WHERE id BETWEEN 5 AND 10;",
      "SELECT dataset_name, target_variable FROM training_data WHERE id IN (1, 3, 5);",
      "SELECT model_name, algorithm FROM model_details WHERE algorithm = 'Random Forest';",
      "SELECT * FROM model_performance WHERE evaluation_metric = 'accuracy';",
      "SELECT source_name, source_description FROM data_sources WHERE source_name = 'Example';",
      "SELECT id, data_name, data_type FROM preprocessing_data ORDER BY id DESC;",
      "SELECT dataset_name, features FROM training_data ORDER BY dataset_name ASC;",
      "SELECT model_id, model_name, algorithm FROM model_details ORDER BY model_id;",
      "SELECT model_id, evaluation_metric, metric_value FROM model_performance ORDER BY model_id, evaluation_metric;",
      "SELECT * FROM preprocessing_data WHERE id = 1;",
      "SELECT data_name, preprocessing_steps FROM preprocessing_data WHERE data_type = 'image';",
      "SELECT * FROM training_data WHERE target_variable = 'income';",
      "SELECT dataset_name, features FROM training_data WHERE features LIKE '%numeric%';",
      "SELECT * FROM model_details WHERE algorithm = 'Random Forest';",
      "SELECT model_name, hyperparameters FROM model_details WHERE algorithm = 'Logistic Regression';",
      "SELECT * FROM model_performance WHERE metric_value > 0.8;",
      "SELECT model_id, evaluation_metric, metric_value FROM model_performance WHERE evaluation_metric = 'accuracy';",
      "SELECT * FROM data_sources WHERE source_type = 'database';",
      "SELECT source_name, source_description FROM data_sources WHERE source_type = 'API';",
      "SELECT preprocessing_data.id, data_name, model_name FROM preprocessing_data JOIN model_details ON preprocessing_data.id = model_details.model_id;",
      "SELECT training_data.dataset_name, model_name, metric_value FROM training_data JOIN model_details ON training_data.id = model_details.model_id JOIN model_performance ON model_details.model_id = model_performance.model_id;",
      "SELECT * FROM preprocessing_data pd JOIN training_data td ON pd.id = td.id JOIN model_details md ON pd.id = md.model_id JOIN model_performance mp ON md.model_id = mp.model_id JOIN data_sources ds ON pd.id = ds.source_id WHERE pd.data_type = 'text' AND td.features LIKE '%categorical%';",
      "SELECT model_id, model_name, algorithm, source_name FROM model_details JOIN data_sources ON model_details.model_id = data_sources.source_id;",
      "SELECT data_name, preprocessing_steps, dataset_name, features, model_name, metric_value FROM preprocessing_data JOIN training_data ON preprocessing_data.id = training_data.id JOIN model_details ON preprocessing_data.id = model_details.model_id JOIN model_performance ON model_details.model_id = model_performance.model_id;",
      "SELECT * FROM preprocessing_data WHERE data_name IN ('data1', 'data2', 'data3');",
      "SELECT dataset_name, features, target_variable FROM training_data WHERE dataset_name LIKE '%set%';",
      "SELECT * FROM model_details WHERE hyperparameters->>'learning_rate' = '0.01';",
      "SELECT model_id, evaluation_metric, metric_value FROM model_performance WHERE model_id IN (SELECT model_id FROM model_details WHERE algorithm = 'SVM');",
      "SELECT * FROM data_sources WHERE source_description ILIKE '%cloud%';"
    ]
  }
]