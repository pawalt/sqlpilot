[
  {
    "statements": [
      "SELECT * FROM Accounts;",
      "SELECT account_id, account_name FROM Accounts;",
      "SELECT account_id, account_name, balance FROM Accounts;",
      "SELECT * FROM Accounts WHERE balance > 1000;",
      "SELECT * FROM Accounts WHERE balance < 0;",
      "SELECT * FROM Accounts WHERE account_name LIKE 'S%';",
      "SELECT account_id, account_name, balance FROM Accounts WHERE balance > 5000;",
      "SELECT * FROM Accounts ORDER BY balance DESC;",
      "SELECT * FROM Accounts ORDER BY balance ASC;",
      "SELECT account_id, SUM(balance) as total_balance FROM Accounts GROUP BY account_id;",
      "SELECT account_id, AVG(balance) as avg_balance FROM Accounts GROUP BY account_id;",
      "SELECT AVG(balance) as overall_avg_balance FROM Accounts;",
      "SELECT account_id, MIN(balance) as min_balance FROM Accounts GROUP BY account_id;",
      "SELECT account_id, MAX(balance) as max_balance FROM Accounts GROUP BY account_id;",
      "SELECT account_id, COUNT(*) as transaction_count FROM Accounts, jsonb_array_elements(transaction_history) GROUP BY account_id;",
      "SELECT * FROM Accounts WHERE transaction_history @> '[{\"type\": \"deposit\"}]';",
      "SELECT * FROM Accounts WHERE transaction_history @> '[{\"amount\": 500}]';",
      "SELECT account_id, account_name, jsonb_array_elements(transaction_history) as transaction FROM Accounts WHERE account_id = 123;",
      "SELECT account_id, account_name, balance, jsonb_array_elements(transaction_history) as transaction FROM Accounts WHERE balance > 5000;",
      "SELECT * FROM Accounts WHERE transaction_history @> '[{\"type\": \"withdrawal\", \"amount\": 1000}]';",
      "SELECT account_id, account_name, balance FROM Accounts WHERE balance > 1000;",
      "SELECT account_name, SUM(balance) AS total_balance FROM Accounts GROUP BY account_name;",
      "SELECT * FROM Accounts WHERE account_id = 1001 AND balance = 5000;",
      "SELECT account_name, COUNT(*) AS total_transactions FROM Accounts WHERE jsonb_array_length(transaction_history) > 5 GROUP BY account_name;",
      "SELECT * FROM Accounts ORDER BY balance DESC;",
      "SELECT account_id, account_name, balance FROM Accounts WHERE account_name LIKE 'S%' AND balance > 500;",
      "SELECT account_id, account_name, balance, jsonb_array_elements_text(transaction_history) AS transaction FROM Accounts WHERE balance < 0;",
      "SELECT account_name, jsonb_pretty(transaction_history) AS formatted_transaction FROM Accounts WHERE account_id = 2003;",
      "SELECT account_name, jsonb_extract_path_text(transaction_history, 'transaction', 'amount') AS transaction_amount FROM Accounts WHERE account_id = 3001;",
      "SELECT * FROM Accounts WHERE to_number(jsonb_extract_path_text(transaction_history, 'transaction', 'amount'), '9999999.99') > 1000;",
      "SELECT DISTINCT account_name FROM Accounts WHERE jsonb_extract_path_text(transaction_history, 'transaction', 'type') = 'credit';",
      "SELECT account_id, account_name, jsonb_array_elements_text(transaction_history->'transactions') AS transaction FROM Accounts WHERE transaction->>'type' = 'debit';",
      "SELECT account_id, account_name, balance FROM Accounts WHERE transaction_history @> '[{\"type\": \"transfer\", \"amount\": 5000}]';",
      "SELECT account_id, account_name, balance FROM Accounts WHERE jsonb_typeof(transaction_history) = 'array';",
      "SELECT * FROM Accounts WHERE jsonb_exists(transaction_history, 'currency');",
      "SELECT account_name, jsonb_array_elements(transaction_history) AS transaction FROM Accounts WHERE jsonb_typeof(transaction_history) = 'array';",
      "SELECT account_id, jsonb_object_keys(transaction_history) AS transaction_types FROM Accounts;",
      "SELECT account_id, account_name, jsonb_set(transaction_history, '{transactions,0,processed}', 'true') AS updated_transaction FROM Accounts WHERE balance > 10000;",
      "SELECT account_id, account_name, jsonb_strip_nulls(transaction_history) AS cleaned_transaction FROM Accounts WHERE balance < 0;",
      "SELECT account_id, account_name, jsonb_typeof(transaction_history) AS transaction_type FROM Accounts WHERE balance IS NULL;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Accounts;",
      "SELECT account_id, account_balance FROM Accounts;",
      "SELECT account_id, account_balance FROM Accounts WHERE account_id = 1;",
      "SELECT account_id, account_balance FROM Accounts WHERE account_balance > 1000;",
      "SELECT transaction_id, account_id, transaction_amount, transaction_date FROM Transactions;",
      "SELECT transaction_id, account_id, transaction_amount, transaction_date FROM Transactions WHERE account_id = 1;",
      "SELECT transaction_id, account_id, transaction_amount, transaction_date FROM Transactions WHERE transaction_amount > 500;",
      "SELECT account_id, SUM(transaction_amount) AS total_transaction_amount FROM Transactions GROUP BY account_id;",
      "SELECT account_id, COUNT(transaction_id) AS total_transactions FROM Transactions GROUP BY account_id;",
      "SELECT account_id, MAX(transaction_amount) AS max_transaction_amount FROM Transactions GROUP BY account_id;",
      "SELECT account_id, MIN(transaction_amount) AS min_transaction_amount FROM Transactions GROUP BY account_id;",
      "SELECT account_id, AVG(transaction_amount) AS avg_transaction_amount FROM Transactions GROUP BY account_id;",
      "SELECT account_id, transaction_date FROM Transactions WHERE DATE(transaction_date) = '2022-12-31';",
      "SELECT account_id, SUM(CASE WHEN transaction_amount > 0 THEN transaction_amount ELSE 0 END) AS total_positive_transactions FROM Transactions GROUP BY account_id;",
      "SELECT account_id, COUNT(CASE WHEN transaction_amount < 0 THEN 1 END) AS total_negative_transactions FROM Transactions GROUP BY account_id;",
      "SELECT account_id, AVG(DATEDIFF(NOW(), transaction_date)) AS avg_days_since_last_transaction FROM Transactions GROUP BY account_id;",
      "SELECT account_id, EXTRACT(MONTH FROM transaction_date) AS transaction_month FROM Transactions;",
      "SELECT account_id, EXTRACT(YEAR FROM transaction_date) AS transaction_year FROM Transactions;",
      "SELECT MAX(account_balance) AS highest_balance FROM Accounts;",
      "SELECT MIN(account_balance) AS lowest_balance FROM Accounts;",
      "SELECT * FROM Accounts JOIN Transactions ON Accounts.account_id = Transactions.account_id WHERE Accounts.account_balance > 1000 AND Transactions.transaction_amount < 0",
      "SELECT account_id, SUM(transaction_amount) AS total_transactions FROM Transactions GROUP BY account_id HAVING total_transactions < -500",
      "SELECT account_id FROM Accounts WHERE account_balance > (SELECT AVG(account_balance) FROM Accounts)",
      "SELECT COUNT(DISTINCT account_id) AS unique_accounts FROM Transactions",
      "SELECT MAX(transaction_amount) AS largest_transaction FROM Transactions JOIN Accounts ON Transactions.account_id = Accounts.account_id",
      "SELECT MIN(transaction_amount) AS smallest_transaction FROM Transactions JOIN Accounts ON Transactions.account_id = Accounts.account_id",
      "SELECT transaction_date, AVG(transaction_amount) AS avg_transaction_amount FROM Transactions GROUP BY transaction_date ORDER BY avg_transaction_amount DESC",
      "SELECT account_id, COUNT(*) AS total_transactions FROM Transactions GROUP BY account_id ORDER BY total_transactions DESC",
      "SELECT account_id, MAX(transaction_amount) - MIN(transaction_amount) AS transaction_range FROM Transactions GROUP BY account_id ORDER BY transaction_range DESC",
      "SELECT DISTINCT account_id, COUNT(*) AS num_transactions FROM Transactions GROUP BY account_id HAVING num_transactions > 5",
      "SELECT account_id, transaction_amount, transaction_date FROM Transactions WHERE transaction_amount > 100 AND transaction_date BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT account_id, transaction_amount, DATE_FORMAT(transaction_date, '%Y-%m') AS transaction_month FROM Transactions WHERE transaction_amount < 0 AND transaction_date BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT account_id, SUM(transaction_amount) AS total_transactions FROM Transactions WHERE transaction_date >= '2021-06-01' GROUP BY account_id ORDER BY total_transactions DESC",
      "SELECT account_id, AVG(transaction_amount) AS avg_transaction_amount FROM Transactions WHERE transaction_amount < 0 GROUP BY account_id HAVING avg_transaction_amount < -50",
      "SELECT account_id, COUNT(*) AS num_transactions, MAX(transaction_amount) AS largest_transaction FROM Transactions WHERE transaction_date BETWEEN '2021-06-01' AND '2021-12-31' GROUP BY account_id HAVING num_transactions > 3"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Accounts;",
      "SELECT account_id, account_name FROM Accounts;",
      "SELECT account_id, balance FROM Accounts WHERE balance > 1000;",
      "SELECT * FROM Accounts WHERE open_date >= '2022-01-01';",
      "SELECT MAX(balance) AS max_balance FROM Accounts;",
      "SELECT MIN(balance) AS min_balance FROM Accounts;",
      "SELECT AVG(balance) AS avg_balance FROM Accounts;",
      "SELECT SUM(balance) AS total_balance FROM Accounts;",
      "SELECT COUNT(*) AS total_accounts FROM Accounts;",
      "SELECT account_id, account_name, balance, open_date FROM Accounts WHERE account_id = 1;",
      "SELECT * FROM Accounts ORDER BY balance DESC;",
      "SELECT * FROM Accounts ORDER BY open_date ASC;",
      "SELECT * FROM Accounts WHERE account_name LIKE 'S%';",
      "SELECT * FROM Accounts WHERE balance BETWEEN 1000 AND 5000;",
      "SELECT * FROM Accounts WHERE account_name = 'John' AND balance > 2000;",
      "SELECT * FROM Accounts WHERE open_date BETWEEN '2022-01-01' AND '2022-03-31';",
      "SELECT account_id, SUM(balance) AS total_balance FROM Accounts GROUP BY account_id;",
      "SELECT DATE_FORMAT(open_date, '%Y-%m-%d') AS formatted_date FROM Accounts;",
      "SELECT * FROM Accounts LIMIT 10;",
      "SELECT * FROM Accounts OFFSET 5;",
      "SELECT * FROM Accounts WHERE balance > 1000",
      "SELECT account_name, balance FROM Accounts WHERE open_date >= '2022-01-01'",
      "SELECT account_id, MAX(balance) AS max_balance FROM Accounts GROUP BY account_id",
      "SELECT account_name, SUM(balance) AS total_balance FROM Accounts GROUP BY account_name HAVING total_balance > 5000",
      "SELECT * FROM Accounts WHERE account_name LIKE '%Savings%' AND balance < 5000",
      "SELECT account_id, account_name, balance, open_date FROM Accounts WHERE open_date BETWEEN '2022-01-01' AND '2022-06-30'",
      "SELECT account_name, AVG(balance) AS avg_balance FROM Accounts GROUP BY account_name HAVING avg_balance > 2000",
      "SELECT DISTINCT account_name FROM Accounts",
      "SELECT account_id, account_name, balance FROM Accounts ORDER BY balance DESC LIMIT 5",
      "SELECT account_name, COUNT(*) AS total_accounts FROM Accounts GROUP BY account_name HAVING total_accounts > 1",
      "SELECT account_name, balance FROM Accounts WHERE balance BETWEEN 1000 AND 5000",
      "SELECT account_id, account_name, open_date FROM Accounts WHERE MONTH(open_date) = 10",
      "SELECT account_name, balance FROM Accounts WHERE YEAR(open_date) = 2022",
      "SELECT account_id, account_name, balance FROM Accounts WHERE account_name IN ('Checking', 'Savings')",
      "SELECT account_name, balance FROM Accounts WHERE account_name NOT LIKE '%Credit%'",
      "SELECT account_id, account_name, balance FROM Accounts WHERE DATE_FORMAT(open_date, '%Y-%m-%d') = '2022-05-20'",
      "SELECT account_name, balance FROM Accounts WHERE account_name = 'Savings Account'",
      "SELECT account_id, account_name, balance FROM Accounts WHERE balance >= 5000 AND balance <= 10000",
      "SELECT account_name, balance FROM Accounts WHERE DAY(open_date) = 1",
      "SELECT account_name, balance FROM Accounts WHERE account_name = 'Checking' OR balance <= 2000"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Accounts;",
      "SELECT account_name, balance FROM Accounts;",
      "SELECT account_name, balance FROM Accounts WHERE balance > 1000;",
      "SELECT * FROM Transactions;",
      "SELECT account_id, SUM(amount) FROM Transactions GROUP BY account_id;",
      "SELECT * FROM Users;",
      "SELECT user_id, username FROM Users;",
      "SELECT * FROM TransactionsHistory;",
      "SELECT account_id, transaction_date FROM TransactionsHistory;",
      "SELECT * FROM Accounts WHERE balance < 0;",
      "SELECT * FROM Transactions WHERE amount < 0;",
      "SELECT * FROM TransactionsHistory WHERE status = 'pending';",
      "SELECT account_id, SUM(amount) FROM Transactions WHERE amount < 0 GROUP BY account_id;",
      "SELECT account_id, AVG(balance) FROM Accounts GROUP BY account_id;",
      "SELECT transaction_id, account_id, amount, transaction_date FROM Transactions WHERE account_id = 10;",
      "SELECT user_id, username, email FROM Users WHERE user_id = 1;",
      "SELECT account_name, balance, status FROM Accounts INNER JOIN TransactionsHistory ON Accounts.account_id = TransactionsHistory.account_id;",
      "SELECT * FROM TransactionsHistory WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT account_id, COUNT(*) FROM Transactions GROUP BY account_id HAVING COUNT(*) > 10;",
      "SELECT user_id, COUNT(transaction_id) FROM Users LEFT JOIN Transactions ON Users.user_id = Transactions.account_id GROUP BY user_id HAVING COUNT(transaction_id) < 5;",
      "SELECT * FROM Accounts;",
      "SELECT account_id, account_name FROM Accounts WHERE balance > 1000;",
      "SELECT * FROM Transactions WHERE amount < 0;",
      "SELECT account_name, balance FROM Accounts JOIN Transactions ON Accounts.account_id = Transactions.account_id WHERE amount > 500;",
      "SELECT * FROM Users WHERE username LIKE 'A%';",
      "SELECT MAX(balance) AS max_balance FROM Accounts;",
      "SELECT MIN(amount) AS min_amount FROM Transactions WHERE account_id = 1;",
      "SELECT account_id, SUM(amount) AS total_amount FROM Transactions GROUP BY account_id;",
      "SELECT * FROM Transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT account_name, amount FROM Accounts LEFT JOIN Transactions ON Accounts.account_id = Transactions.account_id;",
      "SELECT account_id, COUNT(*) AS transaction_count FROM Transactions GROUP BY account_id HAVING COUNT(*) > 5;",
      "SELECT * FROM Users ORDER BY email DESC;",
      "SELECT account_id, AVG(balance) AS avg_balance FROM Accounts;",
      "SELECT account_id, MAX(amount) AS max_amount FROM Transactions GROUP BY account_id HAVING MAX(amount) > 1000;",
      "SELECT * FROM TransactionsHistory WHERE status = 'completed';",
      "SELECT account_name, balance FROM Accounts ORDER BY balance ASC;",
      "SELECT COUNT(*) AS total_transactions FROM Transactions;",
      "SELECT * FROM Transactions WHERE amount = (SELECT MAX(amount) FROM Transactions);",
      "SELECT account_id, AVG(amount) AS avg_amount FROM Transactions GROUP BY account_id;",
      "SELECT * FROM Users WHERE user_id = 1;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Accounts;",
      "SELECT account_number, account_name FROM Accounts;",
      "SELECT id, balance FROM Accounts;",
      "SELECT * FROM Transactions;",
      "SELECT account_id, timestamp, amount FROM Transactions;",
      "SELECT * FROM Deposits;",
      "SELECT account_id, timestamp, deposit_amount FROM Deposits;",
      "SELECT * FROM Withdrawals;",
      "SELECT account_id, timestamp, withdrawal_amount FROM Withdrawals;",
      "SELECT * FROM Transfers;",
      "SELECT sender_account_id, receiver_account_id, timestamp, transfer_amount FROM Transfers;",
      "SELECT account_name, balance FROM Accounts WHERE id = 1;",
      "SELECT * FROM Transactions WHERE amount > 1000;",
      "SELECT * FROM Deposits WHERE deposit_amount < 500;",
      "SELECT * FROM Withdrawals WHERE withdrawal_amount > 100;",
      "SELECT * FROM Transfers WHERE transfer_amount = 500;",
      "SELECT id, account_number, account_name, balance FROM Accounts WHERE balance < 0;",
      "SELECT * FROM Accounts INNER JOIN Transactions ON Accounts.id = Transactions.account_id;",
      "SELECT * FROM Accounts LEFT JOIN Deposits ON Accounts.id = Deposits.account_id;",
      "SELECT * FROM Withdrawals RIGHT JOIN Accounts ON Withdrawals.account_id = Accounts.id;",
      "SELECT * FROM Transfers INNER JOIN Accounts AS sender ON Transfers.sender_account_id = sender.id INNER JOIN Accounts AS receiver ON Transfers.receiver_account_id = receiver.id;",
      "SELECT * FROM Accounts;",
      "SELECT account_number, account_name, balance FROM Accounts WHERE balance > 1000;",
      "SELECT * FROM Transactions JOIN Accounts ON Transactions.account_id = Accounts.id;",
      "SELECT * FROM Deposits JOIN Accounts ON Deposits.account_id = Accounts.id WHERE deposit_amount > 500;",
      "SELECT * FROM Withdrawals JOIN Accounts ON Withdrawals.account_id = Accounts.id WHERE withdrawal_amount > 200;",
      "SELECT * FROM Transfers JOIN Accounts AS SenderAccount ON Transfers.sender_account_id = SenderAccount.id JOIN Accounts AS ReceiverAccount ON Transfers.receiver_account_id = ReceiverAccount.id WHERE transfer_amount > 1000;",
      "SELECT account_name, balance FROM Accounts WHERE balance < (SELECT MIN(balance) FROM Accounts);",
      "SELECT account_number, SUM(amount) AS total_amount FROM Transactions JOIN Accounts ON Transactions.account_id = Accounts.id GROUP BY account_number HAVING total_amount > 5000;",
      "SELECT account_number, COUNT(*) AS num_transactions FROM Transactions JOIN Accounts ON Transactions.account_id = Accounts.id GROUP BY account_number HAVING num_transactions > 5;",
      "SELECT account_name, SUM(deposit_amount) AS total_deposits FROM Deposits JOIN Accounts ON Deposits.account_id = Accounts.id GROUP BY account_name HAVING total_deposits > 2000;",
      "SELECT * FROM Accounts WHERE id = (SELECT account_id FROM Transactions WHERE amount = (SELECT MAX(amount) FROM Transactions));",
      "SELECT DISTINCT account_name FROM Accounts;",
      "SELECT account_number, AVG(balance) AS avg_balance FROM Accounts GROUP BY account_number HAVING avg_balance > 500;",
      "SELECT account_number, MAX(balance) AS max_balance FROM Accounts GROUP BY account_number HAVING max_balance < 10000;",
      "SELECT account_name, MIN(balance) AS min_balance FROM Accounts GROUP BY account_name HAVING min_balance < 0;",
      "SELECT account_number, ROUND(balance, 2) AS rounded_balance FROM Accounts;",
      "SELECT * FROM Deposits WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT * FROM Accounts ORDER BY balance DESC;",
      "SELECT * FROM Transactions WHERE account_id IN (SELECT id FROM Accounts WHERE balance < 0);",
      "SELECT * FROM Withdrawals WHERE account_id IN (SELECT id FROM Accounts WHERE balance > 5000);"
    ]
  }
]