[
  {
    "statements": [
      "SELECT * FROM customer_spending_patterns WHERE total_spending > 1000;",
      "SELECT customer_id, first_name, last_name FROM customer_spending_patterns WHERE last_purchase_date > '2022-01-01';",
      "SELECT first_name, last_name, email FROM customer_spending_patterns WHERE total_spending < 500;",
      "SELECT * FROM customer_spending_patterns WHERE email LIKE '%gmail.com';",
      "SELECT customer_id, total_spending FROM customer_spending_patterns WHERE last_purchase_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT DISTINCT first_name FROM customer_spending_patterns;",
      "SELECT * FROM customer_spending_patterns WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT count(*) FROM customer_spending_patterns WHERE total_spending > 500;",
      "SELECT customer_id, first_name, last_name, email FROM customer_spending_patterns WHERE first_name = 'John' AND last_name = 'Doe';",
      "SELECT * FROM customer_spending_patterns WHERE total_spending = (SELECT MAX(total_spending) FROM customer_spending_patterns);",
      "SELECT AVG(total_spending) FROM customer_spending_patterns WHERE last_purchase_date > '2021-01-01';",
      "SELECT first_name, last_name FROM customer_spending_patterns WHERE email IS NULL;",
      "SELECT customer_id, total_spending FROM customer_spending_patterns WHERE first_name LIKE 'A%';",
      "SELECT * FROM customer_spending_patterns WHERE last_purchase_date < '2022-06-01' AND total_spending > 500;",
      "SELECT customer_id, first_name, last_name FROM customer_spending_patterns WHERE last_purchase_date < '2022-01-01' ORDER BY last_purchase_date DESC;",
      "SELECT * FROM customer_spending_patterns ORDER BY total_spending DESC, last_purchase_date ASC;",
      "SELECT customer_id, first_name, last_name FROM customer_spending_patterns WHERE last_purchase_date > '2022-03-01' LIMIT 5;",
      "SELECT COUNT(DISTINCT customer_id) FROM customer_spending_patterns WHERE total_spending > 1000;",
      "SELECT * FROM customer_spending_patterns WHERE total_spending = (SELECT MIN(total_spending) FROM customer_spending_patterns);",
      "SELECT customer_id, total_spending FROM customer_spending_patterns WHERE last_purchase_date < '2022-01-01';",
      "SELECT * FROM customer_spending_patterns WHERE total_spending > 1000 ORDER BY last_purchase_date DESC LIMIT 5",
      "SELECT first_name, last_name, total_spending FROM customer_spending_patterns WHERE last_purchase_date BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT customer_id, email FROM customer_spending_patterns WHERE last_purchase_date >= '2022-01-01' AND last_purchase_date < '2023-01-01'",
      "SELECT * FROM customer_spending_patterns WHERE total_spending < 500 ORDER BY total_spending ASC LIMIT 3",
      "SELECT first_name, last_name, email, total_spending FROM customer_spending_patterns WHERE total_spending BETWEEN 500 AND 1000",
      "SELECT * FROM customer_spending_patterns WHERE email LIKE '%@gmail.com'",
      "SELECT customer_id, first_name, last_name, total_spending FROM customer_spending_patterns WHERE total_spending > 2000",
      "SELECT * FROM customer_spending_pa...                                                                                                                                                                                                                                                                                5abe733b-c843-4b39-822d-3dedd17e2d5d"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT name, email FROM customers;",
      "SELECT customer_id, account_balance FROM customers;",
      "SELECT * FROM transactions;",
      "SELECT transaction_amount, transaction_date FROM transactions;",
      "SELECT transaction_id, customer_id, category FROM transactions;",
      "SELECT customers.name, transactions.transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customers.name, transactions.transaction_amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customers.name, transactions.transaction_amount FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customers.name, transactions.transaction_amount FROM customers RIGHT JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customers.name, transactions.transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.category = 'Shopping';",
      "SELECT customers.name, transactions.transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.transaction_amount > 100;",
      "SELECT customers.name, SUM(transactions.transaction_amount) AS total_spent FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name;",
      "SELECT customers.name, COUNT(transactions.transaction_id) AS total_transactions FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name;",
      "SELECT DISTINCT customers.name FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customers.name, AVG(transactions.transaction_amount) AS avg_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name;",
      "SELECT customers.name, MAX(transactions.transaction_amount) AS max_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name;",
      "SELECT customers.name, MIN(transactions.transaction_amount) AS min_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name;",
      "SELECT customers.name, COUNT(*) AS total_transactions FROM transactions WHERE transactions.customer_id = customers.customer_id GROUP BY customers.name;",
      "SELECT transaction_date, SUM(transaction_amount) AS total_amount FROM transactions GROUP BY transaction_date;",
      "SELECT date_part('year', transaction_date) AS year, SUM(transaction_amount) AS total_amount FROM transactions GROUP BY year;",
      "SELECT * FROM customers WHERE account_balance > 1000",
      "SELECT name, account_balance FROM customers WHERE last_transaction_date >= '2022-01-01'",
      "SELECT * FROM customers WHERE customer_id = 101",
      "SELECT name, email FROM customers WHERE account_balance < 0",
      "SELECT SUM(account_balance) AS total_balance FROM customers",
      "SELECT name, MAX(account_balance) AS max_balance FROM customers",
      "SELECT AVG(account_balance) AS avg_balance FROM customers",
      "SELECT * FROM transactions WHERE transaction_amount > 500",
      "SELECT customer_id, SUM(transaction_amount) AS total_spent FROM transactions GROUP BY customer_id",
      "SELECT category, COUNT(*) AS transaction_count FROM transactions GROUP BY category",
      "SELECT * FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id",
      "SELECT customers.name, transactions.transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id",
      "SELECT customers.name, transactions.transaction_amount FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id",
      "SELECT customers.name, transactions.transaction_amount FROM customers RIGHT JOIN transactions ON customers.customer_id = transactions.customer_id",
      "SELECT customers.name, transactions.transaction_amount FROM customers FULL JOIN transactions ON customers.customer_id = transactions.customer_id",
      "SELECT customers.name, SUM(transactions.transaction_amount) AS total_spent FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name",
      "SELECT customers.name, SUM(transactions.transaction_amount) AS total_spent FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name",
      "SELECT customers.name, SUM(transactions.transaction_amount) AS total_spent FROM customers RIGHT JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name",
      "SELECT customers.name, SUM(transactions.transaction_amount) AS total_spent FROM customers FULL JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.name"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, customer_email FROM customers;",
      "SELECT customer_name, customer_age FROM customers WHERE customer_age > 30;",
      "SELECT customer_name, customer_email, customer_age FROM customers WHERE customer_age BETWEEN 25 AND 40;",
      "SELECT * FROM transactions;",
      "SELECT transaction_date, amount FROM transactions WHERE amount > 100;",
      "SELECT transaction_id, customer_id FROM transactions WHERE customer_id = 101;",
      "SELECT * FROM recommendations;",
      "SELECT recommendation_text FROM recommendations;",
      "SELECT customer_id, recommendation_date FROM recommendations WHERE customer_id = 102;",
      "SELECT DISTINCT customer_id FROM transactions;",
      "SELECT customer_name, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customer_name, recommendation_text FROM customers INNER JOIN recommendations ON customers.customer_id = recommendations.customer_id;",
      "SELECT c.customer_name, r.recommendation_text FROM customers c INNER JOIN recommendations r ON c.customer_id = r.customer_id;",
      "SELECT customer_name AS Name, customer_email AS Email FROM customers;",
      "SELECT COUNT(*) AS Total_Customers FROM customers;",
      "SELECT AVG(amount) AS Average_Amount FROM transactions;",
      "SELECT MAX(customer_age) AS Max_Age FROM customers;",
      "SELECT MIN(amount) AS Min_Amount FROM transactions;",
      "SELECT SUM(amount) AS Total_Amount FROM transactions;",
      "SELECT * FROM customers WHERE customer_age > 30;",
      "SELECT customer_name, customer_email FROM customers WHERE customer_age BETWEEN 25 AND 35;",
      "SELECT customer_name, transaction_id, amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customer_name, recommendation_text FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id;",
      "SELECT customer_name, transaction_date FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE amount > 1000;",
      "SELECT customer_name, recommendation_text FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id WHERE recommendation_date > '2022-01-01';",
      "SELECT customer_name, SUM(amount) AS total_spent FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_name, AVG(amount) AS average_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_name, COUNT(transaction_id) AS total_transactions FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_name, MAX(amount) AS highest_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_name, MIN(amount) AS lowest_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_name, recommendation_text, COUNT(recommendation_id) AS total_recommendations FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_name, recommendation_text, MAX(recommendation_date) AS latest_recommendation_date FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_name, transaction_id, SUM(amount) AS total_spent FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE customer_age > 40 GROUP BY customers.customer_id;",
      "SELECT recommendation_text, AVG(customer_age) AS average_customer_age FROM recommendations JOIN customers ON recommendations.customer_id = customers.customer_id GROUP BY recommendations.customer_id;",
      "SELECT customer_name, recommendation_text, transaction_date FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id JOIN recommendations ON customers.customer_id = recommendations.customer_id WHERE amount > 500 AND recommendation_date > '2022-01-01';",
      "SELECT customer_name, MAX(amount) AS highest_transaction_amount, COUNT(transaction_id) AS total_transactions FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id HAVING total_transactions > 2;",
      "SELECT customer_name, recommendation_text, COUNT(recommendation_id) AS total_recommendations FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id GROUP BY customers.customer_id HAVING total_recommendations < 5;",
      "SELECT customer_name, AVG(amount) AS average_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE customer_age > 30 GROUP BY customers.customer_id HAVING average_transaction_amount > 1000;",
      "SELECT customer_name, recommendation_text, MAX(recommendation_date) AS latest_recommendation_date FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id WHERE customer_age < 30 GROUP BY customers.customer_id HAVING latest_recommendation_date > '2022-06-01';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, age FROM customers;",
      "SELECT customer_id, customer_name, age FROM customers WHERE age > 30;",
      "SELECT * FROM transactions;",
      "SELECT customer_id, amount FROM transactions WHERE amount > 1000.00;",
      "SELECT t.transaction_id, t.amount, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id;",
      "SELECT c.customer_name, SUM(t.amount) AS total_spend FROM transactions t JOIN customers c ON t.customer_id = c.customer_id GROUP BY c.customer_name;",
      "SELECT customer_id, category_id FROM customer_categories;",
      "SELECT c.customer_name, cat.category_name FROM customers c JOIN customer_categories cc ON c.customer_id = cc.customer_id JOIN categories cat ON cc.category_id = cat.category_id;",
      "SELECT cat.category_name, COUNT(cc.customer_id) AS num_customers FROM categories cat LEFT JOIN customer_categories cc ON cat.category_id = cc.category_id GROUP BY cat.category_name;",
      "SELECT customer_id, SUM(amount) AS total_spend FROM transactions GROUP BY customer_id;",
      "SELECT customer_name, MAX(age) AS max_age FROM customers;",
      "SELECT customer_id, AVG(amount) AS avg_spend FROM transactions GROUP BY customer_id;",
      "SELECT c.customer_name, COUNT(t.transaction_id) AS num_transactions FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, c.age, cat.category_name FROM customers c JOIN customer_categories cc ON c.customer_id = cc.customer_id JOIN categories cat ON cc.category_id = cat.category_id;",
      "SELECT category_id, category_name FROM categories ORDER BY category_name ASC;",
      "SELECT customer_id, customer_name FROM customers WHERE gender = 'Male';",
      "SELECT customer_name, SUM(amount) AS total_spend FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_name;",
      "SELECT customer_id, AVG(age) AS avg_age FROM customers GROUP BY customer_id;",
      "SELECT customer_name, MAX(age) AS max_age FROM customers WHERE age > 40;",
      "SELECT * FROM customers WHERE age > 30",
      "SELECT customer_name, email FROM customers WHERE gender = 'Male'",
      "SELECT customer_name, age FROM customers WHERE customer_id IN (SELECT customer_id FROM transactions WHERE amount > 1000)",
      "SELECT * FROM transactions WHERE date BETWEEN '2022-01-01' AND '2022-06-30'",
      "SELECT DISTINCT customer_id FROM transactions WHERE amount < 500",
      "SELECT customer_name, category_name FROM customers JOIN customer_categories ON customers.customer_id = customer_categories.customer_id JOIN categories ON customer_categories.category_id = categories.category_id",
      "SELECT customer_name, SUM(amount) AS total_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_name ORDER BY total_amount DESC",
      "SELECT category_name, COUNT(customer_id) AS num_customers FROM categories JOIN customer_categories ON categories.category_id = customer_categories.category_id GROUP BY category_name ORDER BY num_customers DESC",
      "SELECT customer_id, customer_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_categories)",
      "SELECT customer_name, age, gender FROM customers WHERE customer_id = (SELECT customer_id FROM transactions WHERE amount = (SELECT MAX(amount) FROM transactions))",
      "SELECT customer_name, age, gender FROM customers WHERE customer_id = (SELECT customer_id FROM transactions WHERE amount = (SELECT MIN(amount) FROM transactions))",
      "SELECT customer_name, age, gender FROM customers WHERE customer_name LIKE 'S%'",
      "SELECT customer_name, age, gender FROM customers WHERE age BETWEEN 25 AND 35",
      "SELECT customer_id, customer_name, email FROM customers WHERE email LIKE '%@gmail.com'",
      "SELECT customer_name, age, gender FROM customers WHERE gender = 'Female' AND age > 40",
      "SELECT customer_name, age, gender FROM customers WHERE gender = 'Female' OR age > 50",
      "SELECT customer_name, age, gender FROM customers ORDER BY age DESC, customer_name ASC",
      "SELECT category_name, AVG(amount) AS avg_amount FROM categories JOIN customer_categories ON categories.category_id = customer_categories.category_id JOIN transactions ON customer_categories.customer_id = transactions.customer_id GROUP BY category_name",
      "SELECT customer_name, COUNT(transaction_id) AS num_transactions FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_name ORDER BY num_transactions DESC",
      "SELECT customer_name, age, email FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_categories WHERE category_id = 1)"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, customer_age, customer_email FROM customers;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, transaction_date, amount FROM transactions;",
      "SELECT customer_name, category_name FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id INNER JOIN categories ON transactions.category = categories.category_id;",
      "SELECT recommendation_text FROM recommendations WHERE customer_id = 1;",
      "SELECT customer_name, total_savings FROM customers INNER JOIN finances ON customers.customer_id = finances.customer_id;",
      "SELECT customer_name, customer_email, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.amount > 1000;",
      "SELECT DISTINCT category_name FROM categories INNER JOIN transactions ON categories.category_id = transactions.category;",
      "SELECT AVG(total_savings) AS avg_savings FROM finances;",
      "SELECT customer_name, SUM(total_investments) AS total_investments FROM customers INNER JOIN finances ON customers.customer_id = finances.customer_id GROUP BY customer_name;",
      "SELECT customer_name, customer_age FROM customers WHERE customer_age > 30;",
      "SELECT AVG(amount) AS avg_transaction_amount FROM transactions;",
      "SELECT customer_name, customer_email, total_savings FROM customers INNER JOIN finances ON customers.customer_id = finances.customer_id WHERE total_savings > 5000;",
      "SELECT customer_name, category_name, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id INNER JOIN categories ON transactions.category = categories.category_id;",
      "SELECT customer_name, total_savings, total_investments FROM customers INNER JOIN finances ON customers.customer_id = finances.customer_id WHERE total_savings > total_investments;",
      "SELECT customer_name, transaction_date, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE customer_name LIKE 'A%';",
      "SELECT customer_name, customer_age, transaction_date, amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transaction_date >= '2021-01-01';",
      "SELECT customer_email FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, customer_age, total_savings, total_investments FROM customers INNER JOIN finances ON customers.customer_id = finances.customer_id WHERE total_savings > 2000 AND total_investments < 5000;",
      "SELECT customer_id, customer_name, customer_age FROM customers;",
      "SELECT customer_id, customer_name, customer_age, customer_gender FROM customers WHERE customer_age > 30;",
      "SELECT * FROM transactions JOIN customers ON transactions.customer_id = customers.customer_id;",
      "SELECT customer_name, transaction_date, amount, category FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customer_name, transaction_date, amount, category FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE amount > 1000;",
      "SELECT customer_name, transaction_date, amount, category FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT customer_name, total_savings, total_investments FROM customers INNER JOIN finances ON customers.customer_id = finances.customer_id;",
      "SELECT category_name, transaction_date, amount FROM categories INNER JOIN transactions ON categories.category_id = transactions.category_id;",
      "SELECT customer_name, recommendation_text FROM customers INNER JOIN recommendations ON customers.customer_id = recommendations.customer_id;",
      "SELECT customer_name, recommendation_text FROM customers LEFT JOIN recommendations ON customers.customer_id = recommendations.customer_id;",
      "SELECT customer_name, total_savings, total_investments, total_savings + total_investments AS total_assets FROM finances INNER JOIN customers ON finances.customer_id = customers.customer_id;",
      "SELECT customer_name, total_savings, total_investments, total_savings + total_investments AS total_assets FROM finances LEFT JOIN customers ON finances.customer_id = customers.customer_id;",
      "SELECT customer_name, total_savings, total_investments, total_savings + total_investments AS total_assets FROM finances INNER JOIN customers ON finances.customer_id = customers.customer_id WHERE total_assets > 5000;",
      "SELECT AVG(amount) AS avg_transaction_amount FROM transactions;",
      "SELECT customer_name, SUM(amount) AS total_spent FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_name;",
      "SELECT category_name, SUM(amount) AS total_spent FROM categories INNER JOIN transactions ON categories.category_id = transactions.category_id GROUP BY category_name;",
      "SELECT customer_name, COUNT(recommendation_id) AS num_recommendations FROM customers LEFT JOIN recommendations ON customers.customer_id = recommendations.customer_id GROUP BY customer_name;",
      "SELECT category_name, AVG(amount) AS avg_spent_per_category FROM categories LEFT JOIN transactions ON categories.category_id = transactions.category_id GROUP BY category_name;",
      "SELECT customer_name, total_savings, total_investments, CASE WHEN total_savings > total_investments THEN 'Good Savers' ELSE 'Good Investors' END AS savings_or_investments FROM finances INNER JOIN customers ON finances.customer_id = customers.customer_id;",
      "SELECT customer_name, AVG(total_savings) AS avg_savings, AVG(total_investments) AS avg_investments FROM customers LEFT JOIN finances ON customers.customer_id = finances.customer_id GROUP BY customer_name;"
    ]
  }
]