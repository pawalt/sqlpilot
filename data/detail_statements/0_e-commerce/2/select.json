[
  {
    "statements": [
      "SELECT * FROM inventory WHERE product_id = 1;",
      "SELECT product_name, stock_level FROM inventory WHERE stock_level > 10;",
      "SELECT COUNT(*) FROM inventory;",
      "SELECT MAX(stock_level) FROM inventory;",
      "SELECT product_id, product_name FROM inventory WHERE stock_level BETWEEN 5 AND 10;",
      "SELECT AVG(stock_level) FROM inventory;",
      "SELECT * FROM inventory WHERE last_updated > '2022-01-01';",
      "SELECT product_name FROM inventory WHERE product_name LIKE 'A%';",
      "SELECT MIN(stock_level) FROM inventory;",
      "SELECT product_name, stock_level FROM inventory ORDER BY stock_level DESC;",
      "SELECT DISTINCT product_name FROM inventory;",
      "SELECT SUM(stock_level) FROM inventory;",
      "SELECT * FROM inventory ORDER BY last_updated ASC;",
      "SELECT product_id, product_name FROM inventory WHERE last_updated BETWEEN '2022-01-01' AND '2022-03-31';",
      "SELECT AVG(stock_level) AS average_stock_level FROM inventory;",
      "SELECT COUNT(DISTINCT product_name) FROM inventory;",
      "SELECT MIN(last_updated) FROM inventory;",
      "SELECT product_id, product_name, stock_level FROM inventory WHERE stock_level IN (5, 10, 15);",
      "SELECT * FROM inventory WHERE product_name = 'Example Product';",
      "SELECT product_id, stock_level FROM inventory WHERE product_name = 'Sample Product';",
      "SELECT * FROM inventory WHERE stock_level > 100;",
      "SELECT product_name, stock_level FROM inventory ORDER BY stock_level DESC;",
      "SELECT AVG(stock_level) FROM inventory;",
      "SELECT product_name, last_updated FROM inventory WHERE last_updated >= '2022-01-01';",
      "SELECT COUNT(*) FROM inventory;",
      "SELECT DISTINCT product_name FROM inventory;",
      "SELECT MIN(stock_level) FROM inventory;",
      "SELECT MAX(stock_level) FROM inventory;",
      "SELECT product_name, stock_level FROM inventory WHERE stock_level BETWEEN 50 AND 100;",
      "SELECT product_name, stock_level FROM inventory WHERE product_name LIKE 'A%';",
      "SELECT product_name, stock_level FROM inventory WHERE last_updated BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT product_id, product_name FROM inventory ORDER BY product_name ASC;",
      "SELECT product_name, stock_level FROM inventory WHERE last_updated < '2022-03-01' AND stock_level < 50;",
      "SELECT product_name, stock_level FROM inventory WHERE stock_level IN (50, 100, 150);",
      "SELECT product_name, COUNT(*) AS total_count FROM inventory GROUP BY product_name;",
      "SELECT product_name, AVG(stock_level) AS avg_stock FROM inventory GROUP BY product_name;",
      "SELECT product_name, MAX(stock_level) - MIN(stock_level) AS stock_range FROM inventory GROUP BY product_name;",
      "SELECT product_name, DATEDIFF(CURRENT_TIMESTAMP(), last_updated) AS days_since_update FROM inventory;",
      "SELECT product_name, COUNT(*) AS total_products, SUM(stock_level) AS total_stock FROM inventory;",
      "SELECT * FROM inventory LIMIT 10;",
      "SELECT product_name, COUNT(*) AS total_count FROM inventory HAVING total_count > 1;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM products;",
      "SELECT product_name, price FROM products;",
      "SELECT product_name, price FROM products WHERE price > 50;",
      "SELECT * FROM warehouse;",
      "SELECT location, capacity FROM warehouse;",
      "SELECT location FROM warehouse WHERE capacity > 100;",
      "SELECT product_name, price, quantity FROM products WHERE quantity <= 10;",
      "SELECT product_name, price FROM products WHERE product_id = 1;",
      "SELECT warehouse_id, location FROM warehouse WHERE warehouse_id = 5;",
      "SELECT product_name, price, quantity FROM products WHERE price BETWEEN 20 AND 50;",
      "SELECT product_name, price FROM products ORDER BY price DESC;",
      "SELECT product_name, price FROM products ORDER BY price ASC;",
      "SELECT product_name, price FROM products LIMIT 5;",
      "SELECT COUNT(*) FROM products;",
      "SELECT AVG(price) FROM products;",
      "SELECT SUM(quantity) FROM products;",
      "SELECT AVG(price), SUM(quantity) FROM products;",
      "SELECT product_name, price FROM products WHERE product_name LIKE '%book%';",
      "SELECT * FROM products WHERE quantity = (SELECT MAX(quantity) FROM products);",
      "SELECT * FROM products p JOIN warehouse w ON p.product_id = w.warehouse_id;",
      "SELECT * FROM products WHERE price > 100",
      "SELECT product_name, price FROM products WHERE quantity > 0",
      "SELECT product_id, product_name FROM products WHERE quantity = 0",
      "SELECT * FROM products WHERE price BETWEEN 50 AND 100",
      "SELECT warehouse_id, location FROM warehouse",
      "SELECT * FROM products INNER JOIN warehouse ON products.product_id = warehouse.warehouse_id",
      "SELECT p.product_name, w.location FROM products p INNER JOIN warehouse w ON p.product_id = w.warehouse_id",
      "SELECT p.product_name, p.price, w.location FROM products p INNER JOIN warehouse w ON p.product_id = w.warehouse_id",
      "SELECT p.product_name, p.price, w.location FROM products p LEFT JOIN warehouse w ON p.product_id = w.warehouse_id",
      "SELECT p.product_name, p.price, w.location FROM products p RIGHT JOIN warehouse w ON p.product_id = w.warehouse_id",
      "SELECT SUM(price) as total_price FROM products",
      "SELECT AVG(price) as avg_price FROM products",
      "SELECT COUNT(*) as total_products FROM products",
      "SELECT COUNT(DISTINCT product_name) as unique_products FROM products",
      "SELECT * FROM products WHERE product_name LIKE '%apple%'",
      "SELECT * FROM products WHERE product_name LIKE 'A%'",
      "SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products)",
      "SELECT * FROM products WHERE product_id IN (SELECT warehouse_id FROM warehouse)",
      "SELECT * FROM products ORDER BY price DESC LIMIT 5"
    ]
  },
  {
    "statements": [
      "SELECT * FROM products;",
      "SELECT name, price FROM products;",
      "SELECT id, name, price FROM products WHERE price > 50;",
      "SELECT * FROM products WHERE name LIKE '%apple%';",
      "SELECT id, quantity FROM inventory;",
      "SELECT name, location FROM suppliers;",
      "SELECT * FROM products p JOIN inventory i ON p.id = i.product_id;",
      "SELECT name, price, quantity FROM products p JOIN inventory i ON p.id = i.product_id;",
      "SELECT name, quantity, location FROM products p JOIN inventory i ON p.id = i.product_id JOIN suppliers s ON p.id = s.id;",
      "SELECT p.name, i.quantity FROM products p JOIN inventory i ON p.id = i.product_id;",
      "SELECT s.name, p.price FROM suppliers s JOIN products p ON s.id = p.id;",
      "SELECT p.name AS product_name, i.quantity AS quantity FROM products p JOIN inventory i ON p.id = i.product_id;",
      "SELECT s.name AS supplier_name, p.price AS product_price FROM suppliers s JOIN products p ON s.id = p.id;",
      "SELECT p.name, SUM(i.quantity) AS total_quantity FROM products p JOIN inventory i ON p.id = i.product_id GROUP BY p.name;",
      "SELECT s.name, AVG(p.price) AS avg_price FROM suppliers s JOIN products p ON s.id = p.id GROUP BY s.name;",
      "SELECT MAX(price) AS max_price FROM products;",
      "SELECT SUM(quantity) AS total_quantity FROM inventory;",
      "SELECT DISTINCT location FROM suppliers;",
      "SELECT * FROM products ORDER BY price DESC;",
      "SELECT * FROM products LIMIT 5;",
      "SELECT * FROM products WHERE price > 100",
      "SELECT name, price FROM products WHERE price BETWEEN 50 AND 200",
      "SELECT p.name, i.quantity FROM products p JOIN inventory i ON p.id = i.product_id",
      "SELECT p.name, s.name FROM products p JOIN suppliers s ON p.id = s.id",
      "SELECT p.name, i.quantity, s.location FROM products p JOIN inventory i ON p.id = i.product_id JOIN suppliers s ON p.id = s.id",
      "SELECT p.name, SUM(i.quantity) AS total_quantity FROM products p JOIN inventory i ON p.id = i.product_id GROUP BY p.name",
      "SELECT p.name, AVG(i.quantity) AS avg_quantity FROM products p JOIN inventory i ON p.id = i.product_id GROUP BY p.name",
      "SELECT s.name, COUNT(p.id) AS product_count FROM suppliers s JOIN products p ON p.id = s.id GROUP BY s.name",
      "SELECT p.name, s.location, i.quantity FROM products p JOIN suppliers s ON p.id = s.id LEFT JOIN inventory i ON p.id = i.product_id",
      "SELECT p.name, MAX(i.quantity) AS max_quantity FROM products p JOIN inventory i ON p.id = i.product_id GROUP BY p.name",
      "SELECT p.name, MIN(i.quantity) AS min_quantity FROM products p JOIN inventory i ON p.id = i.product_id GROUP BY p.name",
      "SELECT p.name, s.name, i.quantity FROM products p JOIN suppliers s ON p.id = s.id JOIN inventory i ON p.id = i.product_id WHERE i.quantity > 10",
      "SELECT s.name AS supplier_name, p.name AS product_name, i.quantity AS inventory_quantity FROM suppliers s JOIN products p ON p.id = s.id JOIN inventory i ON p.product_id = i.product_id",
      "SELECT p.name, s.location, i.quantity FROM products p, suppliers s, inventory i WHERE p.id = s.id AND p.id = i.product_id",
      "SELECT DISTINCT p.name, s.location FROM products p JOIN suppliers s ON p.id = s.id",
      "SELECT p.name, (MAX(i.quantity) - MIN(i.quantity)) AS quantity_range FROM products p JOIN inventory i ON p.id = i.product_id GROUP BY p.name",
      "SELECT p.name, s.location FROM products p CROSS JOIN suppliers s",
      "SELECT p.name, s.location, i.quantity FROM products p JOIN suppliers s ON p.id = s.id JOIN inventory i ON p.id = i.product_id WHERE s.location = 'New York'",
      "SELECT p.name, AVG(i.quantity) AS avg_quantity FROM products p JOIN inventory i ON p.id = i.product_id GROUP BY p.name HAVING AVG(i.quantity) > 50",
      "SELECT p.name, s.name, i.quantity FROM products p JOIN suppliers s ON p.id = s.id JOIN inventory i ON p.id = i.product_id ORDER BY p.name ASC, i.quantity DESC",
      "SELECT p.name, s.name, i.quantity FROM products p JOIN suppliers s ON p.id = s.id JOIN inventory i ON p.id = i.product_id LIMIT 10"
    ]
  },
  {
    "statements": [
      "SELECT * FROM products;",
      "SELECT id, name, price FROM products;",
      "SELECT id, name, price FROM products WHERE quantity > 0;",
      "SELECT * FROM suppliers;",
      "SELECT id, name, contact_name FROM suppliers;",
      "SELECT id, name, contact_email FROM suppliers WHERE contact_name IS NOT NULL;",
      "SELECT * FROM orders;",
      "SELECT id, product_id, supplier_id, quantity, order_date FROM orders;",
      "SELECT * FROM warehouses;",
      "SELECT id, location, capacity FROM warehouses;",
      "SELECT id, location, supervisor FROM warehouses WHERE capacity > 0;",
      "SELECT p.id, p.name, p.quantity, s.name AS supplier_name FROM products p JOIN suppliers s ON p.id = s.id;",
      "SELECT p.id, p.name, p.price, s.name AS supplier_name FROM products p INNER JOIN suppliers s ON p.id = s.id;",
      "SELECT p.name AS product_name, s.name AS supplier_name, o.quantity FROM products p JOIN suppliers s ON p.id = s.id JOIN orders o ON p.id = o.product_id;",
      "SELECT p.name AS product_name, o.order_date, w.location FROM products p JOIN orders o ON p.id = o.product_id JOIN warehouses w ON s.id = o.supplier_id;",
      "SELECT p.name AS product_name, s.name AS supplier_name, o.quantity FROM products p JOIN suppliers s ON p.id = s.id LEFT JOIN orders o ON p.id = o.product_id;",
      "SELECT p.name AS product_name, o.order_date, w.location FROM products p JOIN orders o ON p.id = o.product_id LEFT JOIN warehouses w ON s.id = o.supplier_id;",
      "SELECT p.name AS product_name, s.name AS supplier_name, o.quantity FROM products p LEFT JOIN suppliers s ON p.id = s.id JOIN orders o ON p.id = o.product_id;",
      "SELECT p.name AS product_name, o.order_date, w.location FROM products p LEFT JOIN orders o ON p.id = o.product_id JOIN warehouses w ON s.id = o.supplier_id;",
      "SELECT * FROM products JOIN suppliers ON products.id = suppliers.id",
      "SELECT name, quantity, price FROM products WHERE quantity > 10",
      "SELECT products.name, orders.quantity, suppliers.name FROM products JOIN orders ON products.id = orders.product_id JOIN suppliers ON orders.supplier_id = suppliers.id",
      "SELECT * FROM suppliers WHERE contact_email IS NOT NULL",
      "SELECT products.name, suppliers.name, orders.quantity FROM products JOIN orders ON products.id = orders.product_id JOIN suppliers ON orders.supplier_id = suppliers.id WHERE suppliers.contact_email LIKE '%example.com'",
      "SELECT products.name, SUM(orders.quantity) AS total_quantity FROM products JOIN orders ON products.id = orders.product_id GROUP BY products.name",
      "SELECT supplier_id, AVG(quantity) AS avg_quantity FROM orders GROUP BY supplier_id HAVING AVG(quantity) > 15",
      "SELECT orders.order_date, products.name, suppliers.name, warehouses.location FROM orders JOIN products ON orders.product_id = products.id JOIN suppliers ON orders.supplier_id = suppliers.id JOIN warehouses ON suppliers.id = warehouses.id",
      "SELECT * FROM products WHERE price > 100 AND quantity < 50",
      "SELECT suppliers.name, COUNT(orders.id) AS total_orders FROM suppliers LEFT JOIN orders ON suppliers.id = orders.supplier_id GROUP BY suppliers.name ORDER BY total_orders DESC"
    ]
  },
  {
    "statements": [
      "SELECT * FROM products WHERE price > 100",
      "SELECT product_name, price FROM products",
      "SELECT product_name, stock_quantity FROM products WHERE stock_quantity < 10",
      "SELECT supplier_name, contact_email FROM suppliers",
      "SELECT * FROM categories",
      "SELECT customer_name, contact_number FROM customers",
      "SELECT * FROM orders WHERE quantity_ordered > 50",
      "SELECT product_id, category_id FROM products JOIN categories ON products.product_id = categories.category_id",
      "SELECT * FROM orders WHERE order_date > '2022-01-01'",
      "SELECT product_name, price FROM products WHERE price BETWEEN 50 AND 100",
      "SELECT supplier_name, contact_email FROM suppliers WHERE supplier_id = 3",
      "SELECT category_name FROM categories WHERE category_id = 2",
      "SELECT * FROM customers WHERE customer_id = 5",
      "SELECT product_id, product_name, stock_quantity FROM products ORDER BY stock_quantity DESC",
      "SELECT DISTINCT supplier_name FROM suppliers",
      "SELECT * FROM orders WHERE product_id = 10",
      "SELECT customer_name, address FROM customers WHERE customer_id = 1",
      "SELECT SUM(quantity_ordered) AS total_ordered FROM orders",
      "SELECT category_name, COUNT(product_id) AS total_products FROM categories JOIN products ON categories.category_id = products.product_id GROUP BY category_name",
      "SELECT AVG(price) AS avg_price FROM products",
      "SELECT product_name, price FROM products WHERE stock_quantity > 0",
      "SELECT supplier_name, contact_email FROM suppliers",
      "SELECT customer_name, address FROM customers WHERE customer_id = 1",
      "SELECT product_name, price FROM products ORDER BY price DESC",
      "SELECT products.product_name, suppliers.supplier_name FROM products JOIN suppliers ON products.product_id = suppliers.supplier_id",
      "SELECT orders.order_id, products.product_name, orders.quantity_ordered FROM orders INNER JOIN products ON orders.product_id = products.product_id",
      "SELECT orders.order_id, products.product_name, orders.quantity_ordered, customers.customer_name FROM orders INNER JOIN products ON orders.product_id = products.product_id INNER JOIN customers ON customers.customer_id = orders.customer_id",
      "SELECT products.product_name, orders.order_date FROM products LEFT JOIN orders ON products.product_id = orders.product_id",
      "SELECT products.product_name, categories.category_name FROM products INNER JOIN categories ON products.category_id = categories.category_id",
      "SELECT suppliers.supplier_name, SUM(products.price * orders.quantity_ordered) AS total_spent FROM suppliers INNER JOIN products ON suppliers.supplier_id = products.supplier_id INNER JOIN orders ON products.product_id = orders.product_id GROUP BY suppliers.supplier_id",
      "SELECT category_name, COUNT(products.product_id) AS total_products FROM categories LEFT JOIN products ON categories.category_id = products.category_id GROUP BY categories.category_id",
      "SELECT customer_name, address FROM customers UNION SELECT supplier_name, contact_email FROM suppliers",
      "SELECT customer_id, customer_name, address FROM customers WHERE customer_id IN (SELECT customer_id FROM orders)",
      "SELECT customer_id, customer_name, address FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders)",
      "SELECT * FROM customers CROSS JOIN suppliers",
      "SELECT customer_name, contact_number FROM customers WHERE address LIKE '%Street%'",
      "SELECT customer_id, customer_name, address FROM customers WHERE address LIKE '%City%'",
      "SELECT supplier_name, contact_email FROM suppliers WHERE contact_email LIKE '%@gmail.com%'",
      "SELECT customer_name, address FROM customers WHERE customer_name LIKE 'J%'",
      "SELECT product_name, price FROM products WHERE price BETWEEN 20 AND 50"
    ]
  }
]