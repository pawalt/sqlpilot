[
  {
    "statements": [
      "SELECT * FROM customer_reviews;",
      "SELECT customer_name, review_score FROM customer_reviews;",
      "SELECT customer_name, review_text FROM customer_reviews WHERE review_score > 3;",
      "SELECT * FROM customer_reviews WHERE customer_name = 'John Doe';",
      "SELECT * FROM customer_reviews WHERE product_id = 123;",
      "SELECT AVG(review_score) FROM customer_reviews;",
      "SELECT MAX(review_score) FROM customer_reviews;",
      "SELECT MIN(review_score) FROM customer_reviews;",
      "SELECT customer_name, COUNT(*) FROM customer_reviews GROUP BY customer_name;",
      "SELECT customer_name, AVG(review_score) FROM customer_reviews GROUP BY customer_name;",
      "SELECT * FROM customer_reviews ORDER BY review_date DESC;",
      "SELECT * FROM customer_reviews ORDER BY review_score ASC;",
      "SELECT * FROM customer_reviews WHERE review_date >= '2022-01-01' AND review_date <= '2022-12-31';",
      "SELECT customer_name, review_score FROM customer_reviews WHERE review_date > '2022-06-01';",
      "SELECT customer_name, review_score, review_text FROM customer_reviews WHERE review_score < 3 OR review_score > 4;",
      "SELECT customer_name, review_score, review_date FROM customer_reviews WHERE review_date >= '2022-01-01' AND review_date <= '2022-06-30';",
      "SELECT customer_name, AVG(review_score) AS avg_score FROM customer_reviews GROUP BY customer_name HAVING AVG(review_score) > 3;",
      "SELECT customer_name, COUNT(*) AS num_reviews FROM customer_reviews GROUP BY customer_name HAVING COUNT(*) > 2;",
      "SELECT customer_name, review_text FROM customer_reviews WHERE review_text LIKE '%good%';",
      "SELECT customer_name, review_score, review_date FROM customer_reviews WHERE review_text LIKE '%bad%' AND review_score < 3;",
      "SELECT * FROM customer_reviews WHERE review_score > 4;",
      "SELECT customer_name, product_id, review_score FROM customer_reviews WHERE review_date >= '2022-01-01';",
      "SELECT customer_name, review_text FROM customer_reviews WHERE product_id = 1001 AND review_score < 3;",
      "SELECT COUNT(review_id) FROM customer_reviews WHERE review_date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT AVG(review_score) FROM customer_reviews WHERE review_score IS NOT NULL;",
      "SELECT customer_name, review_date FROM customer_reviews WHERE review_text LIKE '%great%';",
      "SELECT DISTINCT customer_name FROM customer_reviews WHERE customer_name LIKE 'A%';",
      "SELECT customer_name, product_id, review_score FROM customer_reviews ORDER BY review_score DESC LIMIT 5;",
      "SELECT customer_name, COUNT(review_id) AS review_count FROM customer_reviews GROUP BY customer_name HAVING COUNT(review_id) > 3;",
      "SELECT customer_name, review_text FROM customer_reviews WHERE review_date > (SELECT MAX(review_date) FROM customer_reviews);",
      "SELECT product_id, AVG(review_score) AS avg_score, COUNT(review_id) AS review_count FROM customer_reviews GROUP BY product_id;",
      "SELECT customer_name, review_date, review_text FROM customer_reviews WHERE review_text ILIKE '%poor%' AND review_score < 3;",
      "SELECT customer_name, review_score FROM customer_reviews WHERE EXTRACT(MONTH FROM review_date) = 6 AND EXTRACT(YEAR FROM review_date) = 2022;",
      "SELECT customer_name, review_score FROM customer_reviews WHERE EXTRACT(DOW FROM review_date) IN (1, 2, 3);",
      "SELECT customer_name, review_date FROM customer_reviews WHERE review_score = (SELECT MAX(review_score) FROM customer_reviews);",
      "SELECT customer_name, review_date FROM customer_reviews WHERE review_score = (SELECT MIN(review_score) FROM customer_reviews);",
      "SELECT customer_name, COUNT(DISTINCT product_id) AS unique_products FROM customer_reviews GROUP BY customer_name;",
      "SELECT customer_name, AVG(review_score) AS avg_score FROM customer_reviews WHERE review_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_name HAVING AVG(review_score) > 4;",
      "SELECT customer_name, review_date, review_text FROM customer_reviews WHERE review_date >= '2022-06-15' ORDER BY review_score DESC;",
      "SELECT customer_name, review_score * 2 AS doubled_score FROM customer_reviews WHERE review_score IS NOT NULL;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM ProductReviews;",
      "SELECT review_text, review_rating FROM ProductReviews;",
      "SELECT reviewer_name, review_rating FROM ProductReviews;",
      "SELECT * FROM Feedback;",
      "SELECT feedback_text, feedback_rating FROM Feedback;",
      "SELECT product_id, feedback_rating FROM Feedback;",
      "SELECT * FROM ProductReviews WHERE review_rating > 3;",
      "SELECT * FROM Feedback WHERE feedback_rating < 2;",
      "SELECT reviewer_name, review_text, review_rating FROM ProductReviews WHERE review_rating = 5;",
      "SELECT feedback_text, feedback_rating, feedback_date FROM Feedback WHERE feedback_rating = 4;",
      "SELECT review_rating, reviewer_name FROM ProductReviews WHERE product_id = 123;",
      "SELECT feedback_rating, feedback_text FROM Feedback WHERE product_id = 456;",
      "SELECT AVG(review_rating) AS avg_rating FROM ProductReviews;",
      "SELECT MAX(feedback_rating) AS max_rating FROM Feedback;",
      "SELECT MIN(review_rating) AS min_rating FROM ProductReviews;",
      "SELECT COUNT(*) AS review_count FROM ProductReviews;",
      "SELECT DISTINCT product_id FROM Feedback;",
      "SELECT DISTINCT feedback_rating FROM Feedback;",
      "SELECT product_id, AVG(feedback_rating) AS avg_rating FROM Feedback GROUP BY product_id;",
      "SELECT product_id, COUNT(*) AS feedback_count FROM Feedback GROUP BY product_id;",
      "SELECT * FROM ProductReviews WHERE review_rating > 4;",
      "SELECT reviewer_name, review_rating FROM ProductReviews WHERE product_id = 123;",
      "SELECT AVG(review_rating) AS average_rating FROM ProductReviews;",
      "SELECT COUNT(*) AS total_reviews FROM ProductReviews WHERE product_id = 456;",
      "SELECT product_id, COUNT(*) AS total_feedback FROM Feedback GROUP BY product_id;",
      "SELECT product_id, MAX(feedback_rating) AS highest_rating FROM Feedback GROUP BY product_id;",
      "SELECT * FROM ProductReviews INNER JOIN Feedback ON ProductReviews.product_id = Feedback.product_id;",
      "SELECT PR.reviewer_name, F.feedback_text FROM ProductReviews AS PR LEFT JOIN Feedback AS F ON PR.product_id = F.product_id;",
      "SELECT PR.review_text, F.feedback_text FROM ProductReviews AS PR RIGHT JOIN Feedback AS F ON PR.product_id = F.product_id;",
      "SELECT * FROM ProductReviews WHERE review_text LIKE '%excellent%';",
      "SELECT * FROM ProductReviews WHERE review_text LIKE '%good%' AND review_rating > 3;",
      "SELECT * FROM ProductReviews WHERE review_text LIKE '%negative%' OR review_rating < 2;",
      "SELECT DISTINCT product_id FROM Feedback;",
      "SELECT reviewer_name, AVG(review_rating) AS average_rating FROM ProductReviews GROUP BY reviewer_name;",
      "SELECT product_id, SUM(feedback_rating) AS total_rating FROM Feedback WHERE feedback_date > '2022-01-01' GROUP BY product_id;",
      "SELECT product_id, feedback_date FROM Feedback WHERE feedback_date BETWEEN '2022-01-01' AND '2022-03-31';",
      "SELECT product_id, COUNT(*) AS total_reviews FROM ProductReviews UNION SELECT product_id, COUNT(*) AS total_feedback FROM Feedback;",
      "SELECT AVG(review_rating) AS average_review_rating, AVG(feedback_rating) AS average_feedback_rating FROM ProductReviews, Feedback WHERE ProductReviews.product_id = Feedback.product_id;",
      "SELECT * FROM ProductReviews ORDER BY review_rating DESC, review_id ASC;",
      "SELECT reviewer_name, review_text FROM ProductReviews WHERE product_id = (SELECT product_id FROM Feedback WHERE feedback_rating = (SELECT MAX(feedback_rating) FROM Feedback));"
    ]
  },
  {
    "statements": [
      "SELECT * FROM CustomerReviews;",
      "SELECT customer_name, review_text, rating FROM CustomerReviews;",
      "SELECT product_id, customer_name, rating FROM CustomerReviews;",
      "SELECT * FROM ProductImprovements;",
      "SELECT improvement_text, implemented FROM ProductImprovements;",
      "SELECT product_id, improvement_text, implemented FROM ProductImprovements;",
      "SELECT * FROM FeedbackHistory;",
      "SELECT feedback_date FROM FeedbackHistory;",
      "SELECT review_id, improvement_id, feedback_date FROM FeedbackHistory;",
      "SELECT cr.customer_name, pi.improvement_text, fh.feedback_date FROM CustomerReviews cr JOIN FeedbackHistory fh ON cr.review_id = fh.review_id JOIN ProductImprovements pi ON fh.improvement_id = pi.improvement_id;",
      "SELECT cr.customer_name, cr.review_text, cr.rating, fh.feedback_date FROM CustomerReviews cr JOIN FeedbackHistory fh ON cr.review_id = fh.review_id;",
      "SELECT AVG(rating) AS avg_rating FROM CustomerReviews;",
      "SELECT AVG(rating) AS avg_rating, COUNT(*) AS num_reviews FROM CustomerReviews;",
      "SELECT MAX(rating) AS max_rating, MIN(rating) AS min_rating FROM CustomerReviews;",
      "SELECT product_id, COUNT(*) AS num_reviews FROM CustomerReviews GROUP BY product_id;",
      "SELECT pi.product_id, COUNT(*) AS num_improvements FROM ProductImprovements pi JOIN FeedbackHistory fh ON pi.product_id = fh.product_id GROUP BY pi.product_id;",
      "SELECT cr.customer_name, COUNT(*) AS num_feedbacks FROM CustomerReviews cr JOIN FeedbackHistory fh ON cr.review_id = fh.review_id GROUP BY cr.customer_name;",
      "SELECT * FROM CustomerReviews WHERE rating > 3;",
      "SELECT * FROM CustomerReviews WHERE customer_name LIKE 'J%';",
      "SELECT * FROM CustomerReviews WHERE rating > 3 AND customer_name LIKE 'J%';",
      "SELECT * FROM CustomerReviews WHERE customer_name = 'Alice' AND rating < 3;",
      "SELECT * FROM CustomerReviews WHERE rating > 4",
      "SELECT review_id, customer_name, rating FROM CustomerReviews WHERE rating BETWEEN 3 AND 5",
      "SELECT DISTINCT customer_name FROM CustomerReviews",
      "SELECT product_id, COUNT(review_id) AS num_reviews FROM CustomerReviews GROUP BY product_id",
      "SELECT * FROM CustomerReviews INNER JOIN FeedbackHistory ON CustomerReviews.review_id = FeedbackHistory.review_id",
      "SELECT customer_name, review_text FROM CustomerReviews WHERE review_text LIKE '%great%'",
      "SELECT customer_name, COUNT(feedback_id) AS num_feedbacks FROM FeedbackHistory GROUP BY customer_name",
      "SELECT customer_name, AVG(rating) AS avg_rating FROM CustomerReviews GROUP BY customer_name",
      "SELECT customer_name, AVG(rating) AS avg_rating FROM CustomerReviews WHERE rating > 3 GROUP BY customer_name",
      "SELECT * FROM ProductImprovements WHERE implemented = TRUE",
      "SELECT improvement_text FROM ProductImprovements WHERE product_id = 123",
      "SELECT improvement_id, product_id FROM ProductImprovements WHERE improvement_text IS NOT NULL",
      "SELECT DISTINCT review_id FROM FeedbackHistory",
      "SELECT customer_name, COUNT(*) AS total_feedbacks FROM CustomerReviews GROUP BY customer_name HAVING COUNT(*) > 1",
      "SELECT MAX(rating) AS max_rating, MIN(rating) AS min_rating FROM CustomerReviews",
      "SELECT * FROM CustomerReviews WHERE rating = (SELECT MAX(rating) FROM CustomerReviews)",
      "SELECT * FROM CustomerReviews WHERE review_id IN (SELECT review_id FROM FeedbackHistory)",
      "SELECT * FROM CustomerReviews WHERE customer_name IN (SELECT customer_name FROM FeedbackHistory)",
      "SELECT customer_name, AVG(rating) AS avg_rating FROM CustomerReviews WHERE product_id IN (SELECT product_id FROM ProductImprovements WHERE implemented = TRUE) GROUP BY customer_name",
      "SELECT customer_name, AVG(rating) AS avg_rating FROM CustomerReviews WHERE EXISTS (SELECT * FROM FeedbackHistory WHERE FeedbackHistory.review_id = CustomerReviews.review_id)",
      "SELECT customer_name, AVG(rating) AS avg_rating FROM CustomerReviews WHERE NOT EXISTS (SELECT * FROM FeedbackHistory WHERE FeedbackHistory.review_id = CustomerReviews.review_id)"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT full_name, email FROM customers WHERE id = 1;",
      "SELECT name, price FROM products WHERE price > 100;",
      "SELECT id, rating, comment FROM reviews;",
      "SELECT product_id, improvement_description FROM improvements WHERE status = 'pending';",
      "SELECT full_name, email, phone_number FROM customers WHERE id = 2;",
      "SELECT name, description FROM products WHERE id = 3;",
      "SELECT * FROM reviews WHERE rating >= 4;",
      "SELECT * FROM improvements WHERE status = 'pending';",
      "SELECT id, full_name FROM customers WHERE email LIKE '%gmail.com%';",
      "SELECT name, price FROM products WHERE price < 50;",
      "SELECT * FROM reviews WHERE comment IS NOT NULL;",
      "SELECT * FROM improvements WHERE status = 'completed';",
      "SELECT id, customer_id, rating, comment FROM reviews WHERE product_id = 1;",
      "SELECT id, product_id, improvement_description FROM improvements WHERE status = 'in progress';",
      "SELECT id, full_name, email FROM customers WHERE phone_number LIKE '123%';",
      "SELECT name, description, price FROM products WHERE name LIKE '%shirt%';",
      "SELECT * FROM reviews WHERE rating <= 2;",
      "SELECT id, status FROM improvements WHERE product_id = 2;",
      "SELECT id, product_id, improvement_description, status FROM improvements WHERE status = 'in progress';",
      "SELECT * FROM customers WHERE id = 1;",
      "SELECT full_name, email FROM customers WHERE id = 2;",
      "SELECT name, description, price FROM products WHERE price > 50;",
      "SELECT customers.full_name, products.name, reviews.rating FROM customers INNER JOIN reviews ON customers.id = reviews.customer_id INNER JOIN products ON products.id = reviews.product_id;",
      "SELECT c.full_name, p.name, r.rating FROM customers c INNER JOIN reviews r ON c.id = r.customer_id INNER JOIN products p ON p.id = r.product_id WHERE r.rating >= 4;",
      "SELECT p.name, r.comment FROM products p INNER JOIN reviews r ON p.id = r.product_id WHERE r.rating < 3;",
      "SELECT c.full_name, r.rating, r.comment FROM customers c INNER JOIN reviews r ON c.id = r.customer_id WHERE r.rating = 5;",
      "SELECT p.name, i.improvement_description, i.status FROM products p INNER JOIN improvements i ON p.id = i.product_id WHERE i.status = 'pending';",
      "SELECT c.full_name, p.name, r.rating FROM customers c LEFT JOIN reviews r ON c.id = r.customer_id LEFT JOIN products p ON p.id = r.product_id;",
      "SELECT c.full_name, p.name, i.improvement_description, i.status FROM customers c INNER JOIN products p ON c.id = p.id INNER JOIN improvements i ON p.id = i.product_id WHERE i.status = 'pending';",
      "SELECT COUNT(*) FROM customers;",
      "SELECT AVG(price) FROM products;",
      "SELECT MAX(rating) FROM reviews;",
      "SELECT DISTINCT c.full_name FROM customers c INNER JOIN reviews r ON c.id = r.customer_id;",
      "SELECT p.name, AVG(r.rating) AS average_rating FROM products p INNER JOIN reviews r ON p.id = r.product_id GROUP BY p.name;",
      "SELECT c.full_name, COUNT(r.id) AS total_reviews FROM customers c INNER JOIN reviews r ON c.id = r.customer_id GROUP BY c.full_name;",
      "SELECT p.name, COUNT(i.id) AS total_improvements FROM products p INNER JOIN improvements i ON p.id = i.product_id GROUP BY p.name;",
      "SELECT c.full_name, COUNT(r.id) AS total_reviews FROM customers c LEFT JOIN reviews r ON c.id = r.customer_id GROUP BY c.full_name;",
      "SELECT p.name, COUNT(i.id) AS total_improvements FROM products p LEFT JOIN improvements i ON p.id = i.product_id GROUP BY p.name;",
      "SELECT c.full_name, r.rating, p.name, i.improvement_description FROM customers c LEFT JOIN reviews r ON c.id = r.customer_id LEFT JOIN products p ON p.id = r.product_id LEFT JOIN improvements i ON i.product_id = p.id WHERE i.status = 'pending';",
      "SELECT c.full_name, p.name, r.rating, CASE WHEN r.rating >= 3 THEN 'Positive' ELSE 'Negative' END AS review_type FROM customers c INNER JOIN reviews r ON c.id = r.customer_id INNER JOIN products p ON p.id = r.product_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM ProductReviews;",
      "SELECT review_id, customer_name, review_text FROM ProductReviews;",
      "SELECT product_id, customer_name FROM ProductReviews;",
      "SELECT * FROM ProductRatings;",
      "SELECT rating_id, product_id, rating FROM ProductRatings;",
      "SELECT product_id, rating FROM ProductRatings;",
      "SELECT * FROM Customers;",
      "SELECT customer_id, customer_name, email FROM Customers;",
      "SELECT customer_id, phone_number FROM Customers;",
      "SELECT * FROM Products;",
      "SELECT product_id, product_name, category, price FROM Products;",
      "SELECT product_name, category FROM Products;",
      "SELECT * FROM Feedback;",
      "SELECT feedback_id, customer_id, feedback_text FROM Feedback;",
      "SELECT customer_id, feedback_date FROM Feedback;",
      "SELECT COUNT(*) FROM ProductReviews;",
      "SELECT COUNT(*) FROM ProductRatings;",
      "SELECT MAX(rating) FROM ProductRatings;",
      "SELECT AVG(rating) FROM ProductRatings;",
      "SELECT DISTINCT category FROM Products;",
      "SELECT * FROM ProductReviews;",
      "SELECT review_id, customer_name, review_text FROM ProductReviews WHERE product_id = 1;",
      "SELECT * FROM ProductRatings WHERE rating >= 4.5;",
      "SELECT product_id, AVG(rating) AS avg_rating FROM ProductRatings GROUP BY product_id;",
      "SELECT customer_name, email FROM Customers WHERE phone_number LIKE '%555%';",
      "SELECT product_name, category, price FROM Products ORDER BY price DESC LIMIT 5;",
      "SELECT * FROM Feedback WHERE feedback_date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT pr.product_id, pr.review_text, pr.customer_name, pr.review_id, prr.rating FROM ProductReviews pr INNER JOIN ProductRatings prr ON pr.product_id = prr.product_id AND pr.review_id = prr.review_id;",
      "SELECT p.product_name, p.category, AVG(prr.rating) AS avg_rating FROM Products p INNER JOIN ProductRatings prr ON p.product_id = prr.product_id GROUP BY p.product_id;",
      "SELECT c.customer_name, f.feedback_text, f.feedback_date FROM Customers c LEFT JOIN Feedback f ON c.customer_id = f.customer_id;",
      "SELECT product_id, product_name, price FROM Products WHERE category = 'Electronics' AND price > 500;",
      "SELECT pr.review_id, pr.product_id, pr.customer_name, pr.review_text, prr.rating FROM ProductReviews pr LEFT JOIN ProductRatings prr ON pr.product_id = prr.product_id AND pr.review_id = prr.review_id;",
      "SELECT * FROM ProductRatings WHERE product_id IN (SELECT product_id FROM Products WHERE category = 'Clothing');",
      "SELECT p.product_name, COUNT(pr.review_id) AS num_reviews FROM Products p LEFT JOIN ProductReviews pr ON p.product_id = pr.product_id GROUP BY p.product_id;",
      "SELECT c.customer_name, COUNT(f.feedback_id) AS num_feedbacks FROM Customers c LEFT JOIN Feedback f ON c.customer_id = f.customer_id GROUP BY c.customer_id;",
      "SELECT pr.product_id, pr.review_id, pr.customer_name, pr.review_text, COALESCE(prr.rating, 0) AS rating FROM ProductReviews pr LEFT JOIN ProductRatings prr ON pr.product_id = prr.product_id AND pr.review_id = prr.review_id;",
      "SELECT DISTINCT category FROM Products;",
      "SELECT AVG(rating) AS avg_rating FROM ProductRatings;",
      "SELECT p.product_name, p.category, pr.review_text, pr.customer_name, prr.rating FROM Products p INNER JOIN ProductReviews pr ON p.product_id = pr.product_id LEFT JOIN ProductRatings prr ON p.product_id = prr.product_id AND pr.review_id = prr.review_id;",
      "SELECT c.customer_name, p.product_name, f.feedback_text, f.feedback_date FROM Customers c INNER JOIN Feedback f ON c.customer_id = f.customer_id INNER JOIN Products p ON f.customer_id = p.product_id;"
    ]
  }
]