[
  {
    "statements": [
      "SELECT * FROM ThirdPartyIntegration;",
      "SELECT id, application_name FROM ThirdPartyIntegration;",
      "SELECT * FROM ThirdPartyIntegration WHERE sync_method='API';",
      "SELECT application_name, sync_frequency FROM ThirdPartyIntegration;",
      "SELECT id, sync_method, last_sync FROM ThirdPartyIntegration;",
      "SELECT * FROM ThirdPartyIntegration ORDER BY last_sync DESC;",
      "SELECT COUNT(*) FROM ThirdPartyIntegration;",
      "SELECT * FROM ThirdPartyIntegration WHERE id=1;",
      "SELECT DISTINCT application_name FROM ThirdPartyIntegration;",
      "SELECT * FROM ThirdPartyIntegration WHERE sync_frequency > '1 day';",
      "SELECT id, application_name FROM ThirdPartyIntegration WHERE last_sync >= '2022-01-01';",
      "SELECT application_name, sync_frequency FROM ThirdPartyIntegration WHERE sync_method='Manual';",
      "SELECT * FROM ThirdPartyIntegration WHERE last_sync BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT * FROM ThirdPartyIntegration WHERE sync_frequency <= '3 hours';",
      "SELECT id, sync_method FROM ThirdPartyIntegration WHERE last_sync < '2022-06-01';",
      "SELECT * FROM ThirdPartyIntegration WHERE application_name LIKE '%CRM%';",
      "SELECT * FROM ThirdPartyIntegration LIMIT 5 OFFSET 10;",
      "SELECT application_name, sync_frequency, last_sync FROM ThirdPartyIntegration WHERE sync_method='API' ORDER BY last_sync;",
      "SELECT * FROM ThirdPartyIntegration WHERE sync_frequency = '1 week' AND sync_method='Manual';",
      "SELECT id, application_name, sync_method, sync_frequency, last_sync FROM ThirdPartyIntegration;",
      "SELECT * FROM ThirdPartyIntegration WHERE id = 1;",
      "SELECT id, application_name FROM ThirdPartyIntegration WHERE sync_method = 'Manual';",
      "SELECT COUNT(*) FROM ThirdPartyIntegration WHERE sync_frequency > INTERVAL '1 day';",
      "SELECT * FROM ThirdPartyIntegration WHERE last_sync < TIMESTAMP '2022-01-01 00:00:00';",
      "SELECT application_name, sync_method, sync_frequency FROM ThirdPartyIntegration WHERE id IN (1, 2, 3);",
      "SELECT id, application_name FROM ThirdPartyIntegration WHERE sync_frequency BETWEEN INTERVAL '1 day' AND INTERVAL '7 days';",
      "SELECT * FROM ThirdPartyIntegration WHERE application_name LIKE 'A%';",
      "SELECT id, application_name FROM ThirdPartyIntegration WHERE sync_method IN ('Automatic', 'Manual');",
      "SELECT COUNT(*), sync_method FROM ThirdPartyIntegration GROUP BY sync_method;",
      "SELECT application_name, sync_frequency FROM ThirdPartyIntegration ORDER BY last_sync DESC;",
      "SELECT DISTINCT sync_method FROM ThirdPartyIntegration;",
      "SELECT * FROM ThirdPartyIntegration WHERE last_sync > (SELECT MAX(last_sync) FROM ThirdPartyIntegration);",
      "SELECT id, application_name FROM ThirdPartyIntegration WHERE last_sync IS NULL;",
      "SELECT application_name, EXTRACT(YEAR FROM last_sync) AS sync_year FROM ThirdPartyIntegration;",
      "SELECT * FROM ThirdPartyIntegration WHERE DATE(last_sync) = DATE '2022-01-01';",
      "SELECT COUNT(DISTINCT application_name) FROM ThirdPartyIntegration;",
      "SELECT application_name, sync_method, AGE(last_sync) AS sync_age FROM ThirdPartyIntegration;",
      "SELECT application_name, sync_method, sync_frequency FROM ThirdPartyIntegration WHERE sync_frequency IS NOT NULL;",
      "SELECT id, application_name FROM ThirdPartyIntegration WHERE sync_method = 'Automatic' AND sync_frequency < INTERVAL '1 day';",
      "SELECT * FROM ThirdPartyIntegration WHERE sync_method != 'Manual' AND last_sync > TIMESTAMP '2021-01-01 00:00:00';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM third_party_applications;",
      "SELECT app_name, app_description FROM third_party_applications;",
      "SELECT app_id, app_name, sync_frequency FROM third_party_applications WHERE sync_frequency > 5;",
      "SELECT * FROM third_party_applications WHERE app_id = 1;",
      "SELECT app_name FROM third_party_applications WHERE sync_frequency = 1;",
      "SELECT customer_id, customer_name, email_address FROM customer_data;",
      "SELECT customer_name, email_address, phone_number FROM customer_data WHERE phone_number IS NOT NULL;",
      "SELECT customer_id, customer_name, last_sync_date FROM customer_data WHERE last_sync_date > '2022-01-01';",
      "SELECT * FROM customer_data WHERE customer_name LIKE '%John%';",
      "SELECT customer_id, phone_number FROM customer_data WHERE email_address = 'john.doe@example.com';",
      "SELECT * FROM third_party_applications WHERE app_name LIKE '%management%';",
      "SELECT app_id, app_name FROM third_party_applications WHERE app_description IS NULL;",
      "SELECT * FROM third_party_applications WHERE sync_frequency < 10;",
      "SELECT customer_id, customer_name FROM customer_data WHERE last_sync_date IS NULL;",
      "SELECT app_id, app_name, app_description FROM third_party_applications WHERE sync_frequency BETWEEN 5 AND 10;",
      "SELECT customer_id, customer_name, email_address FROM customer_data WHERE customer_name = 'Alice';",
      "SELECT app_id, app_name, sync_frequency FROM third_party_applications WHERE app_name = 'Analytics';",
      "SELECT * FROM third_party_applications ORDER BY sync_frequency ASC;",
      "SELECT customer_id, email_address FROM customer_data WHERE phone_number = '1234567890';",
      "SELECT * FROM third_party_applications WHERE app_name = 'CRM';",
      "SELECT app_id, app_name, app_description FROM third_party_applications WHERE sync_frequency > 0;",
      "SELECT customer_name, email_address, phone_number FROM customer_data WHERE last_sync_date > '2022-01-01';",
      "SELECT * FROM third_party_applications JOIN customer_data ON third_party_applications.app_id = customer_data.customer_id;",
      "SELECT MAX(sync_frequency) AS max_sync_frequency FROM third_party_applications;",
      "SELECT MIN(sync_frequency) AS min_sync_frequency FROM third_party_applications;",
      "SELECT COUNT(*) AS total_customers FROM customer_data;",
      "SELECT app_id, app_name FROM third_party_applications WHERE app_name LIKE 'A%';",
      "SELECT customer_name FROM customer_data WHERE phone_number IS NOT NULL;",
      "SELECT app_name, app_description FROM third_party_applications ORDER BY app_name ASC;",
      "SELECT customer_name, email_address FROM customer_data WHERE customer_id BETWEEN 100 AND 200;",
      "SELECT AVG(sync_frequency) AS avg_sync_frequency FROM third_party_applications;",
      "SELECT * FROM third_party_applications WHERE sync_frequency < 10 AND app_name LIKE '%app%';",
      "SELECT DISTINCT email_address FROM customer_data;",
      "SELECT customer_name FROM customer_data WHERE email_address LIKE '%gmail.com';",
      "SELECT app_id, app_name FROM third_party_applications WHERE sync_frequency BETWEEN 5 AND 10;",
      "SELECT app_id, app_name FROM third_party_applications WHERE app_description IS NOT NULL;",
      "SELECT * FROM third_party_applications WHERE app_id = 5 OR app_id = 10 OR app_id = 15;",
      "SELECT app_name, COUNT(*) AS num_records FROM third_party_applications GROUP BY app_name;",
      "SELECT AVG(sync_frequency) AS avg_sync_frequency, MAX(sync_frequency) AS max_sync_frequency FROM third_party_applications;",
      "SELECT customer_name, email_address FROM customer_data WHERE last_sync_date < NOW() - INTERVAL 1 MONTH;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users",
      "SELECT username, email FROM users",
      "SELECT id, email FROM users",
      "SELECT * FROM products",
      "SELECT name, price FROM products",
      "SELECT product_id, name FROM products",
      "SELECT * FROM orders",
      "SELECT user_id, product_id, order_date FROM orders",
      "SELECT order_id, product_id FROM orders",
      "SELECT users.username, products.name FROM users JOIN products ON users.id = products.product_id",
      "SELECT * FROM users WHERE id = 1",
      "SELECT * FROM products WHERE price > 50",
      "SELECT username, email FROM users WHERE id = 1",
      "SELECT name, price FROM products WHERE name LIKE 'A%'",
      "SELECT * FROM orders WHERE user_id = 3",
      "SELECT orders.order_id, products.name FROM orders JOIN products ON orders.product_id = products.product_id",
      "SELECT users.username, products.price FROM users JOIN products ON users.id = products.product_id",
      "SELECT * FROM users ORDER BY username ASC",
      "SELECT * FROM products ORDER BY price DESC",
      "SELECT * FROM orders ORDER BY order_date ASC LIMIT 10",
      "SELECT * FROM users WHERE id = 1;",
      "SELECT username, email FROM users WHERE id = 1;",
      "SELECT users.username, products.name FROM users JOIN orders ON users.id = orders.user_id JOIN products ON orders.product_id = products.product_id;",
      "SELECT COUNT(*) FROM users;",
      "SELECT username, COUNT(*) FROM users GROUP BY username;",
      "SELECT SUM(price) FROM products WHERE product_id IN (SELECT product_id FROM orders WHERE user_id = 1);",
      "SELECT users.username, products.name, orders.order_date FROM users JOIN orders ON users.id = orders.user_id JOIN products ON orders.product_id = products.product_id WHERE orders.user_id = 1;",
      "SELECT username, email FROM users WHERE id BETWEEN 1 AND 10;",
      "SELECT * FROM products ORDER BY price DESC;",
      "SELECT users.username, count(products.product_id) AS total_products FROM users JOIN orders ON users.id = orders.user_id JOIN products ON orders.product_id = products.product_id GROUP BY users.username;",
      "SELECT * FROM orders WHERE order_date > '2022-01-01';",
      "SELECT AVG(price) FROM products;",
      "SELECT users.username, COUNT(*) AS total_orders FROM users JOIN orders ON users.id = orders.user_id GROUP BY users.username ORDER BY total_orders DESC;",
      "SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products);",
      "SELECT users.username, products.name FROM users JOIN orders ON users.id = orders.user_id JOIN products ON orders.product_id = products.product_id WHERE orders.order_date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT username, email FROM users WHERE id NOT IN (SELECT user_id FROM orders);",
      "SELECT MIN(price) FROM products WHERE product_id IN (SELECT product_id FROM orders);",
      "SELECT users.username, products.name, orders.order_date FROM users JOIN orders ON users.id = orders.user_id JOIN products ON orders.product_id = products.product_id WHERE orders.order_date BETWEEN '2022-01-01' AND '2022-06-30' ORDER BY orders.order_date DESC;",
      "SELECT users.username, COUNT(*) AS total_orders FROM users JOIN orders ON users.id = orders.user_id GROUP BY users.username HAVING total_orders > 1;",
      "SELECT users.username, AVG(price) AS avg_price FROM users JOIN orders ON users.id = orders.user_id JOIN products ON orders.product_id = products.product_id GROUP BY users.username ORDER BY avg_price DESC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, email FROM customers;",
      "SELECT customer_id, phone_number FROM customers WHERE customer_name = 'John Doe';",
      "SELECT * FROM products;",
      "SELECT product_name, price FROM products WHERE category = 'Electronics';",
      "SELECT product_name, price FROM products WHERE price < 50;",
      "SELECT * FROM orders;",
      "SELECT order_date, quantity FROM orders WHERE customer_id = 101;",
      "SELECT * FROM sync_logs;",
      "SELECT log_message, timestamp FROM sync_logs WHERE success = TRUE;",
      "SELECT customer_name, product_name, order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id;",
      "SELECT customer_name, order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE order_date >= '2022-01-01';",
      "SELECT product_name, category FROM products WHERE product_id IN (SELECT product_id FROM orders WHERE quantity > 5);",
      "SELECT customer_name, order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.quantity > 3;",
      "SELECT customer_id, COUNT(order_id) AS num_orders FROM orders GROUP BY customer_id;",
      "SELECT category, AVG(price) AS avg_price FROM products GROUP BY category;",
      "SELECT * FROM orders ORDER BY order_date DESC;",
      "SELECT customer_name, order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id ORDER BY c.customer_name ASC, o.order_date DESC;",
      "SELECT MAX(price) AS highest_price FROM products;",
      "SELECT customer_name, COUNT(product_id) AS num_products FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(product_id) > 1;",
      "SELECT * FROM customers;",
      "SELECT customer_name, email FROM customers WHERE phone_number LIKE '%555%';",
      "SELECT product_name, price FROM products WHERE price > 100;",
      "SELECT customer_name, product_name, order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id;",
      "SELECT DISTINCT category FROM products;",
      "SELECT customer_name, order_date, quantity FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT count(*) AS total_orders FROM orders;",
      "SELECT customer_name, count(*) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name;",
      "SELECT product_name, sum(quantity) AS total_sold FROM products p JOIN orders o ON p.product_id = o.product_id GROUP BY product_name;",
      "SELECT customer_name, order_date, sum(quantity) AS total_ordered FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name, order_date;",
      "SELECT customer_id, AVG(price) AS avg_product_price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id GROUP BY customer_id;",
      "SELECT product_name, category, AVG(price) AS avg_price_by_category FROM products GROUP BY category, product_name;",
      "SELECT customer_name, MAX(price) AS max_product_price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id GROUP BY customer_name;",
      "SELECT customer_name, order_date, MIN(price) AS min_product_price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id GROUP BY customer_name, order_date;",
      "SELECT customer_id, COUNT(DISTINCT product_id) AS unique_products_ordered FROM orders GROUP BY customer_id;",
      "SELECT product_name, SUM(quantity) AS total_quantity_sold, price * SUM(quantity) AS total_revenue FROM products p JOIN orders o ON p.product_id = o.product_id GROUP BY product_name;",
      "SELECT customer_name, order_date, SUM(price * quantity) AS total_order_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id GROUP BY customer_name, order_date;",
      "SELECT EXTRACT(YEAR FROM order_date) AS year, COUNT(*) AS total_orders FROM orders GROUP BY year;",
      "SELECT log_message, timestamp FROM sync_logs WHERE success = false;",
      "SELECT * FROM orders o LEFT JOIN customers c ON o.customer_id = c.customer_id LEFT JOIN products p ON o.product_id = p.product_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM third_party_apps;",
      "SELECT app_id, app_name FROM third_party_apps;",
      "SELECT app_id, app_name, api_key FROM third_party_apps WHERE app_id = 1;",
      "SELECT * FROM data_sync WHERE sync_type = 'full';",
      "SELECT sync_id, sync_name FROM data_sync ORDER BY sync_id DESC;",
      "SELECT * FROM customers WHERE email LIKE '%@example.com';",
      "SELECT customer_id, customer_name, email FROM customers WHERE customer_id = 100;",
      "SELECT * FROM synchronization_log WHERE success = true;",
      "SELECT log_id, sync_timestamp FROM synchronization_log WHERE log_id > 10;",
      "SELECT * FROM customer_experience WHERE exp_rating > 3;",
      "SELECT exp_id, exp_description FROM customer_experience WHERE exp_id < 50;",
      "SELECT * FROM third_party_apps UNION SELECT * FROM data_sync;",
      "SELECT app_id, app_name FROM third_party_apps INTERSECT SELECT sync_id, sync_name FROM data_sync;",
      "SELECT * FROM customer_experience LIMIT 5;",
      "SELECT COUNT(*) FROM customers;",
      "SELECT AVG(exp_rating) FROM customer_experience;",
      "SELECT DISTINCT sync_type FROM data_sync;",
      "SELECT app_name, LENGTH(app_name) AS name_length FROM third_party_apps;",
      "SELECT customer_id, UPPER(customer_name) AS customer_name_upper FROM customers;",
      "SELECT sync_name, CONCAT('Sync - ', sync_name) AS custom_sync_name FROM data_sync;",
      "SELECT * FROM third_party_apps WHERE app_id = 1;",
      "SELECT app_id, app_name FROM third_party_apps WHERE app_name LIKE '%example%';",
      "SELECT * FROM data_sync WHERE sync_type = 'manual';",
      "SELECT sync_id, sync_name FROM data_sync WHERE sync_name IS NOT NULL;",
      "SELECT customer_name, email FROM customers WHERE customer_id = 100;",
      "SELECT * FROM customers WHERE email LIKE '%@example.com%';",
      "SELECT log_id, sync_timestamp FROM synchronization_log WHERE success = true;",
      "SELECT * FROM customer_experience WHERE exp_rating > 3;",
      "SELECT exp_id, exp_description FROM customer_experience WHERE exp_description IS NOT NULL;",
      "SELECT * FROM third_party_apps JOIN data_sync ON third_party_apps.app_id = data_sync.sync_id;",
      "SELECT * FROM customers JOIN synchronization_log ON customers.customer_id = synchronization_log.log_id;",
      "SELECT * FROM customer_experience JOIN third_party_apps ON customer_experience.exp_id = third_party_apps.app_id;",
      "SELECT * FROM third_party_apps WHERE app_name LIKE 'A%' AND api_key IS NOT NULL;",
      "SELECT * FROM customers WHERE email NOT LIKE '%test%';",
      "SELECT * FROM synchronization_log WHERE success = false;",
      "SELECT * FROM data_sync WHERE sync_type IN ('manual', 'automatic');",
      "SELECT * FROM customers WHERE customer_id BETWEEN 100 AND 200;",
      "SELECT * FROM customer_experience WHERE exp_rating BETWEEN 2 AND 4;",
      "SELECT DISTINCT sync_type FROM data_sync;",
      "SELECT app_id, app_name, COUNT(*) AS total_sync FROM third_party_apps JOIN data_sync ON third_party_apps.app_id = data_sync.sync_id GROUP BY app_id, app_name;"
    ]
  }
]