[
  {
    "statements": [
      "SELECT * FROM payment_reports;",
      "SELECT report_id, user_id, payment_amount FROM payment_reports;",
      "SELECT payment_date, payment_method FROM payment_reports;",
      "SELECT * FROM payment_reports WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT report_id, product_id FROM payment_reports WHERE payment_amount >= 50.00;",
      "SELECT * FROM payment_reports WHERE payment_date >= '2022-01-01';",
      "SELECT user_id, payment_amount FROM payment_reports WHERE product_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT * FROM payment_reports WHERE payment_method = 'Credit Card';",
      "SELECT report_id, payment_date FROM payment_reports WHERE user_id = '123e4567-e89b-12d3-a456-426614174000' AND payment_amount < 100.00;",
      "SELECT * FROM payment_reports WHERE payment_date BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT user_id, product_id FROM payment_reports WHERE payment_method = 'PayPal';",
      "SELECT COUNT(report_id) AS total_reports FROM payment_reports;",
      "SELECT user_id, SUM(payment_amount) AS total_payment FROM payment_reports GROUP BY user_id;",
      "SELECT AVG(payment_amount) AS avg_payment FROM payment_reports;",
      "SELECT MAX(payment_amount) AS max_payment FROM payment_reports;",
      "SELECT MIN(payment_amount) AS min_payment FROM payment_reports;",
      "SELECT DISTINCT payment_method FROM payment_reports;",
      "SELECT * FROM payment_reports ORDER BY payment_date DESC;",
      "SELECT * FROM payment_reports ORDER BY payment_amount ASC;",
      "SELECT * FROM payment_reports LIMIT 10 OFFSET 5;",
      "SELECT user_id, COUNT(*) AS total_payments FROM payment_reports GROUP BY user_id;",
      "SELECT * FROM payment_reports WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT report_id, payment_amount, payment_date FROM payment_reports WHERE payment_method = 'Credit Card' AND payment_amount > 100;",
      "SELECT user_id, payment_amount, product_id FROM payment_reports WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT * FROM payment_reports WHERE payment_amount > 500 AND payment_method IN ('PayPal', 'Credit Card');",
      "SELECT user_id, payment_date FROM payment_reports WHERE product_id = '123e4567-e89b-12d3-a456-426614174001' AND payment_date > '2022-06-01';",
      "SELECT report_id, payment_amount FROM payment_reports WHERE user_id = '123e4567-e89b-12d3-a456-426614174002' AND payment_method = 'Bank Transfer';",
      "SELECT * FROM payment_reports WHERE payment_amount < 50 OR product_id = '123e4567-e89b-12d3-a456-426614174003';",
      "SELECT user_id, payment_date FROM payment_reports WHERE payment_date < '2022-09-15' AND payment_method = 'Credit Card';",
      "SELECT report_id, payment_date FROM payment_reports WHERE payment_amount BETWEEN 100 AND 200 AND product_id = '123e4567-e89b-12d3-a456-426614174004';",
      "SELECT * FROM payment_reports WHERE user_id = '123e4567-e89b-12d3-a456-426614174005' AND payment_method = 'PayPal';",
      "SELECT user_id, payment_amount FROM payment_reports WHERE payment_method = 'Credit Card' AND payment_date > '2022-10-01';",
      "SELECT report_id, payment_date FROM payment_reports WHERE payment_amount < 50 AND product_id = '123e4567-e89b-12d3-a456-426614174006';",
      "SELECT * FROM payment_reports WHERE payment_method IN ('Credit Card', 'Bank Transfer') AND payment_date >= '2022-07-01';",
      "SELECT user_id, payment_method FROM payment_reports WHERE payment_amount > 300 AND product_id = '123e4567-e89b-12d3-a456-426614174007';",
      "SELECT report_id, payment_amount FROM payment_reports WHERE payment_method = 'Credit Card' AND payment_date < '2022-05-01';",
      "SELECT * FROM payment_reports WHERE payment_amount > 400 OR product_id = '123e4567-e89b-12d3-a456-426614174008';",
      "SELECT user_id, payment_date FROM payment_reports WHERE payment_date < '2022-08-01' AND payment_method = 'Credit Card';",
      "SELECT report_id, payment_amount FROM payment_reports WHERE payment_method = 'PayPal' AND product_id = '123e4567-e89b-12d3-a456-426614174009';",
      "SELECT * FROM payment_reports WHERE user_id = '123e4567-e89b-12d3-a456-426614174010' AND payment_method = 'Bank Transfer';",
      "SELECT user_id, payment_amount FROM payment_reports WHERE payment_amount > 200 AND payment_date > '2022-09-01';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM payment_trends;",
      "SELECT transaction_id, amount FROM payment_trends;",
      "SELECT payment_method FROM payment_trends;",
      "SELECT * FROM user_spending;",
      "SELECT user_id, total_spent FROM user_spending;",
      "SELECT last_transaction_date FROM user_spending;",
      "SELECT transaction_id, amount, transaction_date FROM payment_trends;",
      "SELECT user_id, total_spent, last_transaction_date FROM user_spending;",
      "SELECT * FROM payment_trends WHERE amount > 100;",
      "SELECT * FROM user_spending WHERE loyalty_points >= 50;",
      "SELECT * FROM payment_trends WHERE payment_method = 'Credit Card';",
      "SELECT * FROM user_spending WHERE total_spent < 500;",
      "SELECT MAX(amount) FROM payment_trends;",
      "SELECT MIN(amount) FROM payment_trends;",
      "SELECT AVG(total_spent) FROM user_spending;",
      "SELECT COUNT(*) FROM payment_trends;",
      "SELECT COUNT(*) FROM user_spending;",
      "SELECT DISTINCT payment_method FROM payment_trends;",
      "SELECT user_id, SUM(total_spent) FROM user_spending GROUP BY user_id;",
      "SELECT * FROM payment_trends ORDER BY transaction_date DESC;",
      "SELECT * FROM payment_trends WHERE amount > 1000",
      "SELECT transaction_id, amount, payment_method FROM payment_trends WHERE payment_method='Credit Card'",
      "SELECT user_id, total_spent FROM user_spending WHERE total_spent > 500",
      "SELECT * FROM payment_trends WHERE transaction_date > '2020-01-01'",
      "SELECT user_id, total_spent, loyalty_points FROM user_spending WHERE loyalty_points > 100",
      "SELECT * FROM payment_trends JOIN user_spending ON payment_trends.transaction_id = user_spending.user_id",
      "SELECT user_id, total_spent, last_transaction_date FROM user_spending WHERE total_spent BETWEEN 500 AND 1000",
      "SELECT * FROM payment_trends WHERE amount < 500 AND payment_method='Cash'",
      "SELECT user_id, last_transaction_date, loyalty_points FROM user_spending WHERE loyalty_points >= 200",
      "SELECT * FROM payment_trends WHERE transaction_date BETWEEN '2020-01-01' AND '2021-01-01'",
      "SELECT user_id, total_spent, last_transaction_date, loyalty_points FROM user_spending WHERE last_transaction_date < '2022-01-01'",
      "SELECT * FROM payment_trends WHERE amount > 500 AND payment_method='Debit Card'",
      "SELECT user_id, total_spent, last_transaction_date FROM user_spending WHERE last_transaction_date > '2022-05-01'",
      "SELECT * FROM payment_trends WHERE amount < 100",
      "SELECT user_id, total_spent, loyalty_points FROM user_spending WHERE total_spent < 300",
      "SELECT * FROM payment_trends JOIN user_spending ON payment_trends.transaction_id = user_spending.user_id WHERE amount > 100 AND total_spent > 500",
      "SELECT user_id, total_spent, last_transaction_date, loyalty_points FROM user_spending WHERE total_spent < 1000 AND loyalty_points < 50",
      "SELECT * FROM payment_trends WHERE amount > 2000",
      "SELECT user_id, total_spent, last_transaction_date, loyalty_points FROM user_spending WHERE last_transaction_date BETWEEN '2021-01-01' AND '2022-01-01'",
      "SELECT * FROM payment_trends WHERE payment_method='PayPal'"
    ]
  },
  {
    "statements": [
      "SELECT * FROM payment_trends;",
      "SELECT payment_id, user_id, amount, payment_date FROM payment_trends WHERE user_id = 123;",
      "SELECT user_id, total_spent, average_spent_per_transaction FROM user_spending_patterns;",
      "SELECT * FROM user_spending_patterns WHERE user_id = 456;",
      "SELECT product_id, product_name, total_sales FROM popular_products;",
      "SELECT * FROM popular_products WHERE product_id = 789;",
      "SELECT user_id, total_spent FROM user_spending_patterns WHERE total_spent > 1000;",
      "SELECT payment_id, amount FROM payment_trends WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT user_id, total_spent, average_spent_per_transaction FROM user_spending_patterns ORDER BY total_spent DESC;",
      "SELECT product_id, product_name, total_sales FROM popular_products ORDER BY total_sales DESC;",
      "SELECT user_id, total_spent FROM user_spending_patterns WHERE average_spent_per_transaction < 50;",
      "SELECT payment_id, amount FROM payment_trends WHERE user_id = 789 AND amount > 100;",
      "SELECT * FROM payment_trends WHERE payment_date >= '2022-06-01' AND payment_date <= '2022-06-30';",
      "SELECT * FROM payment_trends WHERE user_id = 123 OR user_id = 456;",
      "SELECT user_id, total_spent FROM user_spending_patterns WHERE user_id IN (123, 456, 789);",
      "SELECT product_id, product_name, total_sales FROM popular_products WHERE total_sales > 5000;",
      "SELECT user_id, total_spent, average_spent_per_transaction FROM user_spending_patterns LIMIT 10;",
      "SELECT payment_id, amount FROM payment_trends WHERE payment_date < '2022-01-01';",
      "SELECT product_id, product_name FROM popular_products WHERE product_name LIKE 'A%';",
      "SELECT * FROM payment_trends WHERE payment_id = (SELECT MAX(payment_id) FROM payment_trends);",
      "SELECT * FROM payment_trends WHERE user_id = 123;",
      "SELECT user_id, total_spent FROM user_spending_patterns WHERE average_spent_per_transaction > 50;",
      "SELECT product_name, total_sales FROM popular_products WHERE total_sales >= 1000;",
      "SELECT user_id, amount FROM payment_trends WHERE payment_date BETWEEN '2021-01-01' AND '2021-12-31';",
      "SELECT product_name, total_sales FROM popular_products ORDER BY total_sales DESC;",
      "SELECT user_id, total_spent FROM user_spending_patterns WHERE total_spent > (SELECT AVG(total_spent) FROM user_spending_patterns);",
      "SELECT DISTINCT user_id FROM payment_trends;",
      "SELECT product_name, total_sales FROM popular_products WHERE product_name LIKE '%phone%';",
      "SELECT user_id, AVG(amount) AS average_payment FROM payment_trends GROUP BY user_id;",
      "SELECT user_id, total_spent FROM user_spending_patterns JOIN payment_trends ON user_spending_patterns.user_id = payment_trends.user_id;",
      "SELECT MAX(total_sales) AS highest_sales FROM popular_products;",
      "SELECT user_id, SUM(amount) AS total_payments FROM payment_trends GROUP BY user_id HAVING total_payments > 500;",
      "SELECT COUNT(DISTINCT user_id) AS unique_users FROM payment_trends;",
      "SELECT user_id, total_spent FROM user_spending_patterns WHERE user_id NOT IN (SELECT user_id FROM payment_trends);",
      "SELECT * FROM payment_trends WHERE payment_id IN (SELECT payment_id FROM payment_trends WHERE amount > 100);",
      "SELECT user_id, total_spent FROM user_spending_patterns WHERE user_id BETWEEN 100 AND 200;",
      "SELECT product_name, SUM(total_sales) AS total_sold FROM popular_products GROUP BY product_name;",
      "SELECT user_id, total_spent FROM user_spending_patterns WHERE average_spent_per_transaction = (SELECT MAX(average_spent_per_transaction) FROM user_spending_patterns);",
      "SELECT user_id, SUM(amount) AS total_payments FROM payment_trends GROUP BY user_id ORDER BY total_payments DESC LIMIT 5;",
      "SELECT COUNT(*) AS total_transactions FROM payment_trends;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM payment_reports",
      "SELECT payment_id, user_id, payment_amount FROM payment_reports WHERE payment_date > '2022-01-01'",
      "SELECT user_id, total_spent FROM user_spending",
      "SELECT total_sales, price FROM product_sales WHERE product_name = 'example_product'",
      "SELECT product_id, product_name, price FROM product_sales ORDER BY price DESC",
      "SELECT product_id, product_name, total_sales FROM product_sales WHERE total_sales > 100",
      "SELECT user_id, rating FROM product_reviews WHERE product_id = 'example_product_id'",
      "SELECT * FROM product_sales WHERE total_sales > 50 AND price < 100",
      "SELECT product_id, AVG(rating) AS average_rating FROM product_reviews GROUP BY product_id",
      "SELECT user_id, SUM(total_spent) AS total_spent FROM user_spending GROUP BY user_id",
      "SELECT product_name, total_sales * price AS total_revenue FROM product_sales",
      "SELECT user_id, COUNT(review_id) AS review_count FROM product_reviews GROUP BY user_id",
      "SELECT user_id, SUM(payment_amount) AS total_payments FROM payment_reports GROUP BY user_id",
      "SELECT product_id, COUNT(review_id) AS review_count FROM product_reviews GROUP BY product_id",
      "SELECT user_id, MAX(total_spent) AS max_spent FROM user_spending",
      "SELECT review_id, user_id, rating FROM product_reviews WHERE review_text LIKE '%great%'",
      "SELECT product_name, total_sales, price FROM product_sales WHERE total_sales > 50 AND price < 100",
      "SELECT user_id, total_spent FROM user_spending ORDER BY total_spent DESC",
      "SELECT payment_id, payment_date FROM payment_reports ORDER BY payment_date DESC",
      "SELECT user_id, payment_amount FROM payment_reports WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT * FROM payment_reports WHERE payment_amount > 1000",
      "SELECT user_id, SUM(payment_amount) AS total_payments FROM payment_reports GROUP BY user_id HAVING total_payments > 5000",
      "SELECT pr.user_id, us.total_spent FROM payment_reports pr INNER JOIN user_spending us ON pr.user_id = us.user_id WHERE pr.payment_date > '2022-01-01'",
      "SELECT ps.product_name, pr.total_sales, pr.price FROM product_sales ps INNER JOIN product_reviews pr ON ps.product_id = pr.product_id WHERE pr.rating > 4",
      "SELECT ps.product_name, pr.rating, pr.review_text FROM product_sales ps INNER JOIN product_reviews pr ON ps.product_id = pr.product_id WHERE pr.review_text LIKE '%great%'",
      "SELECT pr.user_id, COUNT(*) AS num_reviews FROM product_reviews pr WHERE pr.rating < 3 GROUP BY pr.user_id ORDER BY num_reviews DESC LIMIT 3",
      "SELECT user_id, AVG(rating) AS avg_rating FROM product_reviews GROUP BY user_id HAVING avg_rating > 4.5",
      "SELECT pr.user_id, pr.rating, pr.review_text FROM product_reviews pr WHERE pr.user_id IN (SELECT user_id FROM user_spending WHERE total_spent > 500)",
      "SELECT ps.product_name, ps.total_sales, pr.review_text FROM product_sales ps LEFT JOIN product_reviews pr ON ps.product_id = pr.product_id",
      "SELECT pr.user_id, ps.product_name, pr.rating FROM product_reviews pr INNER JOIN product_sales ps ON pr.product_id = ps.product_id WHERE pr.user_id = '123e4567-e89b-12d3-a456-426614174000'",
      "SELECT pr.user_id, COUNT(*) AS num_reviews FROM product_reviews pr WHERE pr.rating = 5 GROUP BY pr.user_id HAVING num_reviews >= 2",
      "SELECT user_id, SUM(price) AS total_spent FROM product_sales WHERE price > 100 GROUP BY user_id",
      "SELECT pr.user_id, ps.product_name, pr.rating, pr.review_text FROM product_reviews pr INNER JOIN product_sales ps ON pr.product_id = ps.product_id WHERE pr.review_text IS NOT NULL",
      "SELECT ps.product_name, pr.rating, pr.review_text FROM product_sales ps INNER JOIN product_reviews pr ON ps.product_id = pr.product_id ORDER BY pr.rating DESC LIMIT 5",
      "SELECT user_id, last_purchase_date FROM user_spending ORDER BY last_purchase_date DESC LIMIT 10",
      "SELECT ps.product_id, ps.product_name, COUNT(*) AS num_reviews FROM product_sales ps INNER JOIN product_reviews pr ON ps.product_id = pr.product_id GROUP BY ps.product_id HAVING num_reviews >= 3",
      "SELECT pr.user_id, AVG(price) AS avg_price FROM product_sales ps INNER JOIN product_reviews pr ON ps.product_id = pr.product_id GROUP BY pr.user_id HAVING avg_price > 50",
      "SELECT pr.user_id, pr.rating, pr.review_text FROM product_reviews pr WHERE pr.product_id IN (SELECT product_id FROM product_sales WHERE total_sales > 100)",
      "SELECT user_id FROM user_spending WHERE last_purchase_date < '2022-02-01'",
      "SELECT ps.product_name, pr.rating FROM product_sales ps INNER JOIN (SELECT * FROM product_reviews WHERE review_text <> '' AND rating > 3) pr ON ps.product_id = pr.product_id ORDER BY pr.rating DESC",
      "SELECT pr.user_id, pr.rating, pr.review_text FROM product_reviews pr WHERE pr.user_id NOT IN (SELECT user_id FROM user_spending WHERE total_spent > 5000)"
    ]
  },
  {
    "statements": [
      "SELECT * FROM payment_reports;",
      "SELECT payment_id, amount FROM payment_reports WHERE user_id = 123;",
      "SELECT user_id, total_spent FROM user_spending WHERE total_spent > 1000;",
      "SELECT product_id, purchase_count, category FROM product_popularity WHERE category = 'Electronics';",
      "SELECT user_id, preference_score FROM user_preferences WHERE user_id = 456 AND category = 'Sports';",
      "SELECT * FROM payment_methods WHERE is_default = TRUE;",
      "SELECT user_id, total_spent, last_purchase_date FROM user_spending ORDER BY total_spent DESC LIMIT 5;",
      "SELECT user_id, total_spent, last_purchase_date FROM user_spending WHERE user_id = 789;",
      "SELECT user_id, category, preference_score FROM user_preferences WHERE preference_score >= 8;",
      "SELECT payment_id, user_id, amount, payment_date FROM payment_reports WHERE payment_date BETWEEN '2022-01-01' AND '2022-02-28';",
      "SELECT user_id, total_spent FROM user_spending WHERE last_purchase_date > '2022-03-15';",
      "SELECT user_id, category, preference_score FROM user_preferences WHERE category = 'Fashion' ORDER BY preference_score DESC;",
      "SELECT product_id, purchase_count, category FROM product_popularity WHERE purchase_count > 100;",
      "SELECT payment_id, user_id, amount, payment_date FROM payment_reports WHERE amount > 500;",
      "SELECT user_id, category, preference_score FROM user_preferences WHERE preference_score = 10;",
      "SELECT user_id, total_spent, last_purchase_date FROM user_spending WHERE total_spent BETWEEN 500 AND 1000;",
      "SELECT product_id, purchase_count FROM product_popularity WHERE category = 'Home Decor' ORDER BY purchase_count DESC;",
      "SELECT user_id, payment_type FROM payment_methods WHERE payment_type = 'Credit Card';",
      "SELECT user_id, category, preference_score FROM user_preferences WHERE user_id = 123 OR user_id = 456;",
      "SELECT user_id, total_spent, last_purchase_date FROM user_spending WHERE last_purchase_date < '2022-01-01';",
      "SELECT * FROM payment_reports WHERE user_id = 1;",
      "SELECT payment_id, amount FROM payment_reports WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT user_id, total_spent FROM user_spending WHERE total_spent > 1000;",
      "SELECT user_id, category FROM user_preferences WHERE preference_score > 5;",
      "SELECT * FROM product_popularity WHERE category = 'Electronics';",
      "SELECT user_id, payment_type FROM payment_methods WHERE is_default = TRUE;",
      "SELECT user_id, total_spent FROM user_spending JOIN payment_reports ON user_spending.user_id = payment_reports.user_id;",
      "SELECT user_id, category FROM user_preferences JOIN product_popularity ON user_preferences.category = product_popularity.category;",
      "SELECT user_id, payment_type FROM payment_methods LEFT JOIN user_spending ON payment_methods.user_id = user_spending.user_id;",
      "SELECT user_id, total_spent, amount FROM user_spending JOIN payment_reports USING(user_id);",
      "SELECT user_id, total_spent, preference_score FROM user_spending JOIN user_preferences USING(user_id);",
      "SELECT user_id, total_spent, category FROM user_spending JOIN user_preferences ON user_spending.user_id = user_preferences.user_id;",
      "SELECT * FROM product_popularity WHERE purchase_count > (SELECT AVG(purchase_count) FROM product_popularity);",
      "SELECT user_id, total_spent, last_purchase_date FROM user_spending WHERE last_purchase_date < '2022-06-01';",
      "SELECT user_id, category, preference_score FROM user_preferences WHERE preference_score BETWEEN 3 AND 7;",
      "SELECT * FROM payment_reports WHERE amount IN (SELECT MAX(amount) FROM payment_reports);",
      "SELECT user_id, category FROM user_preferences WHERE user_id NOT IN (SELECT user_id FROM user_spending);",
      "SELECT user_id, payment_type FROM payment_methods WHERE user_id NOT IN (SELECT user_id FROM user_spending);",
      "SELECT user_id, total_spent, category FROM user_spending JOIN user_preferences USING(user_id) WHERE preference_score > 5;",
      "SELECT user_id, total_spent, payment_date FROM user_spending JOIN payment_reports USING(user_id) WHERE payment_date > '2022-06-01';",
      "SELECT user_id, total_spent, category FROM user_spending JOIN user_preferences ON user_spending.user_id = user_preferences.user_id WHERE preference_score > 4;"
    ]
  }
]