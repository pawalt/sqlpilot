[
  {
    "statements": [
      "SELECT * FROM transactions",
      "SELECT transaction_id, transaction_amount FROM transactions",
      "SELECT transaction_id, transaction_date FROM transactions",
      "SELECT transaction_amount FROM transactions",
      "SELECT transaction_date FROM transactions",
      "SELECT * FROM transactions WHERE transaction_amount > 100",
      "SELECT * FROM transactions WHERE transaction_date = '2022-08-15'",
      "SELECT AVG(transaction_amount) FROM transactions",
      "SELECT MAX(transaction_amount) FROM transactions",
      "SELECT COUNT(*) FROM transactions",
      "SELECT transaction_id, transaction_date FROM transactions WHERE transaction_amount > 500",
      "SELECT MIN(transaction_amount) FROM transactions",
      "SELECT SUM(transaction_amount) FROM transactions",
      "SELECT * FROM transactions ORDER BY transaction_amount DESC",
      "SELECT transaction_id, transaction_amount FROM transactions ORDER BY transaction_date ASC",
      "SELECT * FROM transactions WHERE transaction_amount BETWEEN 100 AND 500",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2022-08-01' AND '2022-08-31'",
      "SELECT * FROM transactions WHERE transaction_amount > 200 AND transaction_date = '2022-08-15'",
      "SELECT transaction_id, transaction_amount FROM transactions WHERE transaction_date = '2022-08-15'",
      "SELECT DISTINCT transaction_date FROM transactions",
      "SELECT * FROM transactions WHERE transaction_amount > 1000 AND transaction_date >= '2021-01-01';",
      "SELECT transaction_id, transaction_amount FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-12-31';",
      "SELECT AVG(transaction_amount) FROM transactions GROUP BY transaction_date;",
      "SELECT * FROM transactions ORDER BY transaction_amount DESC;",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-12-31' ORDER BY transaction_amount DESC;",
      "SELECT COUNT(*) AS total_transactions FROM transactions;",
      "SELECT transaction_date, SUM(transaction_amount) AS total_amount FROM transactions GROUP BY transaction_date ORDER BY transaction_date;",
      "SELECT * FROM transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM transactions);",
      "SELECT DISTINCT transaction_date FROM transactions;",
      "SELECT * FROM transactions WHERE EXTRACT(YEAR FROM transaction_date) = 2021;",
      "SELECT * FROM transactions WHERE transaction_amount BETWEEN 500 AND 1000;",
      "SELECT * FROM transactions WHERE transaction_date > '2021-06-30' AND transaction_amount < 500;",
      "SELECT * FROM transactions WHERE transaction_date = (SELECT MIN(transaction_date) FROM transactions);",
      "SELECT * FROM transactions WHERE transaction_date = (SELECT MAX(transaction_date) FROM transactions);",
      "SELECT transaction_id, transaction_amount, EXTRACT(MONTH FROM transaction_date) AS month FROM transactions ORDER BY month;",
      "SELECT * FROM transactions JOIN other_table ON transactions.transaction_id = other_table.transaction_id;",
      "SELECT AVG(transaction_amount) AS avg_amount FROM transactions HAVING AVG(transaction_amount) > 500;",
      "SELECT * FROM transactions WHERE transaction_amount IN (100, 200, 300);",
      "SELECT * FROM transactions WHERE transaction_id = UUID('123e4567-e89b-12d3-a456-426614174000');",
      "SELECT * FROM transactions WHERE transaction_amount > (SELECT MAX(transaction_amount) FROM transactions WHERE transaction_date = '2021-12-31');"
    ]
  },
  {
    "statements": [
      "SELECT * FROM transaction_details;",
      "SELECT transaction_id, transaction_amount FROM transaction_details;",
      "SELECT transaction_id, transaction_amount, transaction_date FROM transaction_details;",
      "SELECT transaction_id, transaction_amount, transaction_date FROM transaction_details WHERE transaction_amount > 100;",
      "SELECT * FROM transaction_details WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT * FROM transaction_details ORDER BY transaction_date DESC;",
      "SELECT * FROM transaction_details WHERE transaction_id = 100;",
      "SELECT * FROM transaction_details WHERE transaction_amount < 50;",
      "SELECT MAX(transaction_amount) FROM transaction_details;",
      "SELECT MIN(transaction_amount) FROM transaction_details;",
      "SELECT AVG(transaction_amount) FROM transaction_details;",
      "SELECT COUNT(*) FROM transaction_details;",
      "SELECT * FROM transaction_details WHERE transaction_id IN (1, 2, 3);",
      "SELECT * FROM transaction_details WHERE transaction_date = '2022-02-14';",
      "SELECT transaction_id, COUNT(*) FROM transaction_details GROUP BY transaction_id;",
      "SELECT * FROM transaction_details JOIN transaction_history ON transaction_details.transaction_id = transaction_history.transaction_id;",
      "SELECT * FROM transaction_details LEFT JOIN transaction_history ON transaction_details.transaction_id = transaction_history.transaction_id;",
      "SELECT * FROM transaction_details RIGHT JOIN transaction_history ON transaction_details.transaction_id = transaction_history.transaction_id;",
      "SELECT * FROM transaction_details FULL JOIN transaction_history ON transaction_details.transaction_id = transaction_history.transaction_id;",
      "SELECT * FROM transaction_details UNION SELECT * FROM transaction_history;",
      "SELECT * FROM transaction_details WHERE transaction_amount > 1000 AND transaction_date = '2022-01-01';",
      "SELECT transaction_id, transaction_amount FROM transaction_details WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT td.transaction_id, th.history_details FROM transaction_details td JOIN transaction_history th ON td.transaction_id = th.transaction_id;",
      "SELECT * FROM transaction_details td LEFT JOIN transaction_history th ON td.transaction_id = th.transaction_id;",
      "SELECT AVG(transaction_amount) AS avg_amount FROM transaction_details;",
      "SELECT MAX(transaction_amount) AS max_amount FROM transaction_details;",
      "SELECT MIN(transaction_amount) AS min_amount FROM transaction_details;",
      "SELECT COUNT(*) AS total_transactions FROM transaction_details;",
      "SELECT SUM(transaction_amount) AS total_amount FROM transaction_details;",
      "SELECT transaction_id, COUNT(history_details) AS history_count FROM transaction_history GROUP BY transaction_id HAVING history_count > 2;",
      "SELECT td.transaction_id, td.transaction_amount, th.history_details FROM transaction_details td LEFT JOIN transaction_history th ON td.transaction_id = th.transaction_id WHERE td.transaction_id = 1;",
      "SELECT * FROM transaction_details WHERE transaction_id IN (SELECT transaction_id FROM transaction_history WHERE LENGTH(history_details) > 50);",
      "SELECT transaction_date, SUM(transaction_amount) AS total_amount FROM transaction_details WHERE transaction_date BETWEEN '2022-01-01' AND '2022-02-28' GROUP BY transaction_date ORDER BY total_amount DESC;",
      "SELECT AVG(transaction_amount) AS avg_amount FROM transaction_details WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM transaction_details);",
      "SELECT td.transaction_id, td.transaction_amount FROM transaction_details td WHERE NOT EXISTS (SELECT * FROM transaction_history th WHERE th.transaction_id = td.transaction_id);",
      "SELECT transaction_id, SUM(transaction_amount) AS total_amount FROM transaction_details GROUP BY transaction_id HAVING total_amount > 5000 ORDER BY total_amount DESC LIMIT 3;",
      "SELECT transaction_id, COUNT(*) AS total_records FROM (SELECT transaction_id FROM transaction_details UNION ALL SELECT transaction_id FROM transaction_history) AS combined_table GROUP BY transaction_id HAVING total_records > 1;",
      "SELECT transaction_id, transaction_amount FROM transaction_details WHERE YEAR(transaction_date) = 2022 AND MONTH(transaction_date) = 1;",
      "SELECT transaction_id, transaction_amount FROM transaction_details WHERE transaction_id = (SELECT MAX(transaction_id) FROM transaction_details);",
      "SELECT transaction_id, transaction_amount FROM transaction_details td1 WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM transaction_details td2 WHERE td1.transaction_date = td2.transaction_date);",
      "SELECT transaction_id, MAX(transaction_amount) AS max_amount FROM transaction_details GROUP BY transaction_id HAVING max_amount > 2000 ORDER BY max_amount DESC;",
      "SELECT transaction_id, COUNT(history_details) AS history_count FROM transaction_history GROUP BY transaction_id HAVING history_count = (SELECT MAX(history_count) FROM (SELECT transaction_id, COUNT(history_details) AS history_count FROM transaction_history GROUP BY transaction_id) AS temp_table);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM transactions",
      "SELECT transaction_id, amount FROM transactions",
      "SELECT * FROM customers",
      "SELECT customer_name, email FROM customers",
      "SELECT * FROM products",
      "SELECT product_id, product_name FROM products",
      "SELECT * FROM transactions WHERE amount > 100",
      "SELECT * FROM customers WHERE customer_id = 1",
      "SELECT * FROM products WHERE unit_price < 50",
      "SELECT * FROM transactions WHERE transaction_date >= '2022-01-01'",
      "SELECT * FROM customers WHERE customer_name LIKE '%John%'",
      "SELECT * FROM products WHERE product_name = 'Shoes'",
      "SELECT SUM(amount) FROM transactions",
      "SELECT AVG(amount) FROM transactions",
      "SELECT MIN(unit_price) FROM products",
      "SELECT MAX(unit_price) FROM products",
      "SELECT COUNT(*) FROM transactions",
      "SELECT * FROM transactions ORDER BY transaction_date DESC",
      "SELECT * FROM customers ORDER BY customer_name",
      "SELECT * FROM products ORDER BY unit_price ASC",
      "SELECT * FROM transactions WHERE amount > 1000",
      "SELECT customer_name, email FROM customers WHERE customer_id = 5",
      "SELECT product_name, unit_price FROM products ORDER BY unit_price DESC",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT customer_name, email FROM customers WHERE email LIKE '%@gmail.com'",
      "SELECT SUM(amount) AS total_amount FROM transactions",
      "SELECT * FROM transactions JOIN customers ON transactions.transaction_id = customers.customer_id",
      "SELECT AVG(unit_price) AS avg_price FROM products",
      "SELECT customer_name, email FROM customers JOIN transactions ON customers.customer_id = transactions.transaction_id",
      "SELECT * FROM transactions WHERE amount > (SELECT AVG(amount) FROM transactions)",
      "SELECT customer_name, email FROM customers WHERE customer_id IN (SELECT customer_id FROM transactions WHERE amount > 2000)",
      "SELECT product_name, unit_price FROM products WHERE unit_price BETWEEN 50 AND 100",
      "SELECT COUNT(*) AS transaction_count FROM transactions",
      "SELECT MAX(amount) AS max_amount FROM transactions",
      "SELECT customer_name, email, amount FROM customers JOIN transactions ON customers.customer_id = transactions.transaction_id WHERE amount > 5000",
      "SELECT * FROM transactions WHERE transaction_date = (SELECT MAX(transaction_date) FROM transactions)",
      "SELECT customer_name, email, SUM(amount) AS total_spent FROM customers JOIN transactions ON customers.customer_id = transactions.transaction_id GROUP BY customer_id",
      "SELECT product_name, unit_price, amount FROM transactions JOIN products ON transactions.transaction_id = products.product_id WHERE amount > 3000",
      "SELECT AVG(amount) AS avg_amount, MAX(amount) AS max_amount FROM transactions",
      "SELECT * FROM transactions JOIN customers ON transactions.transaction_id = customers.customer_id JOIN products ON transactions.transaction_id = products.product_id",
      "SELECT customer_name, email, product_name FROM customers JOIN transactions ON customers.customer_id = transactions.transaction_id JOIN products ON transactions.transaction_id = products.product_id"
    ]
  },
  {
    "statements": [
      "SELECT * FROM transactions;",
      "SELECT transaction_id, amount, date FROM transactions;",
      "SELECT customer_id, name, email FROM customers;",
      "SELECT * FROM products;",
      "SELECT product_id, name, price FROM products;",
      "SELECT * FROM orders;",
      "SELECT order_id, customer_id, product_id, quantity, order_date FROM orders;",
      "SELECT t.transaction_id, t.amount, t.date, c.name as customer_name, p.name as product_name, o.quantity, o.order_date FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id INNER JOIN products p ON t.product_id = p.product_id INNER JOIN orders o ON t.order_id = o.order_id;",
      "SELECT c.customer_id, c.name as customer_name, COUNT(o.order_id) as total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name;",
      "SELECT p.product_id, p.name as product_name, SUM(o.quantity) as total_quantity_sold FROM products p INNER JOIN orders o ON p.product_id = o.product_id GROUP BY p.product_id, p.name;",
      "SELECT c.name as customer_name, p.name as product_name, SUM(o.quantity) as total_quantity_sold FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN products p ON o.product_id = p.product_id GROUP BY c.name, p.name;",
      "SELECT c.name as customer_name, p.name as product_name, o.quantity, o.order_date FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN products p ON o.product_id = p.product_id WHERE c.name = 'Alice';",
      "SELECT c.name as customer_name, p.name as product_name, o.quantity, o.order_date FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN products p ON o.product_id = p.product_id WHERE o.order_date > '2022-01-01';",
      "SELECT c.name as customer_name, p.name as product_name, o.quantity, o.order_date FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN products p ON o.product_id = p.product_id WHERE o.quantity > 5;",
      "SELECT p.name as product_name, SUM(o.quantity) as total_quantity_sold FROM products p INNER JOIN orders o ON p.product_id = o.product_id GROUP BY p.name HAVING total_quantity_sold > 10;",
      "SELECT c.name as customer_name, COUNT(o.order_id) as total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name HAVING total_orders > 3;",
      "SELECT c.name as customer_name, COUNT(o.order_id) as total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name HAVING total_orders = 0;",
      "SELECT c.name as customer_name, p.name as product_name, AVG(o.quantity) as average_quantity FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN products p ON o.product_id = p.product_id GROUP BY c.name, p.name;",
      "SELECT c.name as customer_name, p.name as product_name, MAX(o.quantity) as max_quantity_sold FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN products p ON o.product_id = p.product_id GROUP BY c.name, p.name;",
      "SELECT c.name as customer_name, p.name as product_name, MIN(o.quantity) as min_quantity_sold FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN products p ON o.product_id = p.product_id GROUP BY c.name, p.name;",
      "SELECT c.name as customer_name, p.name as product_name, AVG(o.quantity) as average_quantity, SUM(o.quantity) as total_quantity_sold FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN products p ON o.product_id = p.product_id GROUP BY c.name, p.name;",
      "SELECT * FROM transactions WHERE amount > 1000",
      "SELECT customer_id, name, email FROM customers WHERE name LIKE 'A%'",
      "SELECT SUM(price * quantity) AS total_order_amount FROM orders JOIN products ON orders.product_id = products.product_id",
      "SELECT customer_id, name, email FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.quantity > 5",
      "SELECT product_id, name, price FROM products WHERE price BETWEEN 50 AND 100 ORDER BY price DESC",
      "SELECT customer_id, name, SUM(amount) AS total_spent FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id LEFT JOIN transactions ON orders.order_id = transactions.transaction_id GROUP BY customer_id",
      "SELECT AVG(amount) AS avg_transaction_amount FROM transactions",
      "SELECT customer_id, name, email FROM customers WHERE customer_id IN (SELECT customer_id FROM orders)",
      "SELECT product_id, name, price FROM products WHERE product_id NOT IN (SELECT product_id FROM orders)",
      "SELECT customer_id, name, email FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id AND orders.quantity < 3",
      "SELECT customer_id, name, email FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders)",
      "SELECT date_trunc('month', order_date) AS month, SUM(price * quantity) AS revenue FROM orders JOIN products ON orders.product_id = products.product_id GROUP BY month",
      "SELECT customer_id, name, email FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.customer_id = orders.customer_id)",
      "SELECT product_id, name, price FROM products WHERE price = (SELECT MAX(price) FROM products)",
      "SELECT customer_id, name, email FROM customers WHERE customer_id = (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(*) > 1)",
      "SELECT customer_id, SUM(amount) AS total_spent FROM transactions GROUP BY customer_id HAVING SUM(amount) > 1000",
      "SELECT DISTINCT product_id, name FROM products JOIN orders ON products.product_id = orders.product_id",
      "SELECT customer_id, name, email FROM customers WHERE customer_id = ANY (SELECT customer_id FROM orders)",
      "SELECT customer_id, name, email FROM customers WHERE customer_id = ALL (SELECT customer_id FROM orders)",
      "SELECT customer_id, name, email FROM customers WHERE customer_id = SOME (SELECT customer_id FROM orders)"
    ]
  },
  {
    "statements": [
      "SELECT * FROM transactions;",
      "SELECT transaction_id, transaction_amount FROM transactions;",
      "SELECT transaction_id, transaction_amount, transaction_date FROM transactions WHERE transaction_amount > 100;",
      "SELECT * FROM users;",
      "SELECT user_id, username FROM users WHERE user_id = 1;",
      "SELECT user_id, email FROM users WHERE username = 'JohnDoe';",
      "SELECT * FROM products;",
      "SELECT product_id, product_name FROM products WHERE unit_price < 50;",
      "SELECT * FROM orders;",
      "SELECT order_id, order_date FROM orders WHERE user_id = 2;",
      "SELECT * FROM order_items;",
      "SELECT order_id, product_id, quantity FROM order_items WHERE order_id = 10;",
      "SELECT order_id, product_id, quantity FROM order_items WHERE product_id = 5;",
      "SELECT user_id, username, email FROM users WHERE username LIKE 'A%';",
      "SELECT product_id, product_name, unit_price FROM products WHERE unit_price BETWEEN 10 AND 20;",
      "SELECT transaction_id, transaction_amount, transaction_date FROM transactions WHERE transaction_date = '2022-01-01';",
      "SELECT order_id, product_id, quantity FROM order_items WHERE quantity > 2;",
      "SELECT user_id, username, email FROM users WHERE email LIKE '%@gmail.com';",
      "SELECT product_name, unit_price FROM products ORDER BY unit_price DESC;",
      "SELECT user_id, username, email FROM users ORDER BY username ASC LIMIT 5;",
      "SELECT * FROM transactions WHERE transaction_amount > 1000",
      "SELECT user_id, email FROM users WHERE LENGTH(username) > 5",
      "SELECT product_name, unit_price FROM products WHERE unit_price < 50",
      "SELECT * FROM orders WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT order_id, product_name, quantity FROM orders JOIN order_items ON orders.order_id = order_items.order_id",
      "SELECT user_id, username, email FROM users WHERE user_id IN (SELECT user_id FROM orders)",
      "SELECT SUM(transaction_amount) AS total_amount FROM transactions",
      "SELECT * FROM order_items WHERE quantity > 5",
      "SELECT user_id, COUNT(order_id) AS orders_count FROM orders GROUP BY user_id",
      "SELECT * FROM orders WHERE order_id IN (SELECT order_id FROM order_items WHERE product_id = 1)",
      "SELECT user_id, SUM(unit_price * quantity) AS total_cost FROM orders JOIN order_items ON orders.order_id = order_items.order_id",
      "SELECT MAX(unit_price) AS highest_price FROM products",
      "SELECT MIN(unit_price) AS lowest_price FROM products",
      "SELECT user_id, email FROM users WHERE username LIKE 'A%'",
      "SELECT AVG(transaction_amount) AS avg_amount FROM transactions",
      "SELECT product_name, COUNT(product_id) AS total_count FROM products GROUP BY product_name",
      "SELECT user_id, AVG(unit_price) AS avg_price FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY user_id",
      "SELECT SUM(quantity) AS total_quantity FROM order_items",
      "SELECT order_id, COUNT(product_id) AS total_products FROM order_items GROUP BY order_id",
      "SELECT user_id, email FROM users WHERE user_id NOT IN (SELECT user_id FROM orders)"
    ]
  }
]