[
  {
    "statements": [
      "SELECT * FROM inventory_info WHERE product_id = 1;",
      "SELECT product_name, price FROM inventory_info WHERE quantity > 10;",
      "SELECT * FROM inventory_info WHERE price < 50;",
      "SELECT product_name, product_description FROM inventory_info WHERE quantity = 0;",
      "SELECT product_name, price FROM inventory_info WHERE price BETWEEN 20 AND 50;",
      "SELECT product_id, product_name, quantity FROM inventory_info WHERE product_name LIKE 'S%';",
      "SELECT * FROM inventory_info WHERE quantity <= 5 ORDER BY price DESC;",
      "SELECT product_name, price FROM inventory_info WHERE quantity >= 15 AND price > 100;",
      "SELECT product_id, product_name, price FROM inventory_info WHERE price = 25.99;",
      "SELECT COUNT(*) AS total_products FROM inventory_info;",
      "SELECT AVG(price) AS avg_price FROM inventory_info;",
      "SELECT MAX(price) AS max_price FROM inventory_info;",
      "SELECT MIN(price) AS min_price FROM inventory_info;",
      "SELECT SUM(quantity) AS total_quantity FROM inventory_info;",
      "SELECT product_id, product_name, price*quantity AS total_price FROM inventory_info;",
      "SELECT product_id, product_name, price*quantity AS total_price FROM inventory_info WHERE quantity > 0;",
      "SELECT product_id, product_name, quantity, price, price*quantity AS total_price FROM inventory_info WHERE product_id > 5;",
      "SELECT product_name, price FROM inventory_info ORDER BY price ASC LIMIT 10;",
      "SELECT product_id, product_name, quantity FROM inventory_info ORDER BY quantity DESC LIMIT 5;",
      "SELECT product_name, price, quantity FROM inventory_info ORDER BY product_name ASC, quantity DESC;",
      "SELECT * FROM inventory_info WHERE price > 100",
      "SELECT product_name, price FROM inventory_info WHERE quantity > 0",
      "SELECT COUNT(product_id) AS total_products FROM inventory_info",
      "SELECT * FROM inventory_info ORDER BY product_name ASC",
      "SELECT product_name, SUM(quantity) AS total_quantity FROM inventory_info GROUP BY product_name",
      "SELECT * FROM inventory_info WHERE product_description LIKE '%black%'",
      "SELECT product_name, product_description FROM inventory_info WHERE price BETWEEN 50 AND 100",
      "SELECT * FROM inventory_info WHERE quantity < 10 ORDER BY price DESC",
      "SELECT AVG(price) AS avg_price FROM inventory_info",
      "SELECT product_name, quantity, price FROM inventory_info WHERE price > AVG(price)",
      "SELECT * FROM inventory_info WHERE product_name LIKE 'A%' OR product_name LIKE 'B%'",
      "SELECT product_id, product_name, price * quantity AS total_price FROM inventory_info",
      "SELECT COUNT(DISTINCT product_id) AS total_distinct_products FROM inventory_info",
      "SELECT * FROM inventory_info WHERE price > (SELECT AVG(price) FROM inventory_info)",
      "SELECT product_id, product_name, price, quantity, (price * quantity) AS total_value FROM inventory_info ORDER BY total_value DESC",
      "SELECT product_name, price FROM inventory_info WHERE product_id IN (1, 2, 3, 4)",
      "SELECT * FROM inventory_info WHERE quantity > (SELECT MAX(quantity) / 2 FROM inventory_info)",
      "SELECT product_name, price FROM inventory_info WHERE price = (SELECT MAX(price) FROM inventory_info)",
      "SELECT product_name, product_description FROM inventory_info WHERE LENGTH(product_name) < 6",
      "SELECT * FROM inventory_info WHERE quantity = (SELECT MIN(quantity) FROM inventory_info)"
    ]
  },
  {
    "statements": [
      "SELECT * FROM products;",
      "SELECT product_name, price FROM products;",
      "SELECT product_id, product_name, price FROM products WHERE price > 100;",
      "SELECT product_name, description FROM products WHERE product_id = 1;",
      "SELECT * FROM purchases;",
      "SELECT product_id, user_id, quantity FROM purchases WHERE purchase_id = 1;",
      "SELECT COUNT(*) FROM products;",
      "SELECT AVG(price) FROM products;",
      "SELECT product_name, price FROM products ORDER BY price DESC;",
      "SELECT product_name, price FROM products ORDER BY price ASC;",
      "SELECT product_name, price FROM products WHERE description LIKE '%organic%';",
      "SELECT user_id, SUM(quantity) AS total_quantity FROM purchases GROUP BY user_id;",
      "SELECT product_id, COUNT(*) AS purchase_count FROM purchases GROUP BY product_id HAVING purchase_count > 10;",
      "SELECT product_name, price, purchase_date FROM products JOIN purchases ON products.product_id = purchases.product_id;",
      "SELECT * FROM products WHERE product_id IN (1, 2, 3);",
      "SELECT product_name, description FROM products WHERE price BETWEEN 50 AND 100;",
      "SELECT DISTINCT product_name FROM products;",
      "SELECT product_name, price * quantity AS total_price FROM products JOIN purchases ON products.product_id = purchases.product_id;",
      "SELECT user_id, MAX(quantity) AS max_quantity FROM purchases GROUP BY user_id ORDER BY max_quantity DESC;",
      "SELECT product_id, user_id, SUM(quantity) AS total_quantity FROM purchases GROUP BY product_id, user_id HAVING total_quantity > 5;",
      "SELECT * FROM products;",
      "SELECT product_name, price FROM products WHERE price > 100;",
      "SELECT product_name, description FROM products WHERE product_name LIKE '%chair%';",
      "SELECT purchase_id, product_name, purchase_date FROM purchases JOIN products ON purchases.product_id = products.product_id;",
      "SELECT user_id, COUNT(*) AS total_purchases FROM purchases GROUP BY user_id;",
      "SELECT product_name, SUM(quantity) AS total_quantity_sold FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY product_name;",
      "SELECT user_id, AVG(price) AS avg_price_purchased FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY user_id HAVING AVG(price) > 200;",
      "SELECT * FROM products INNER JOIN purchases ON products.product_id = purchases.product_id;",
      "SELECT p.product_name, SUM(quantity) AS total_quantity FROM products AS p LEFT JOIN purchases AS pur ON p.product_id = pur.product_id GROUP BY p.product_name;",
      "SELECT product_id, AVG(price) AS average_price FROM products GROUP BY product_id HAVING AVG(price) < 50;",
      "SELECT product_name, MAX(price) AS max_price FROM products GROUP BY product_name;",
      "SELECT user_id, COUNT(*) AS total_purchases, AVG(price) AS avg_price FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY user_id;",
      "SELECT product_name, SUM(quantity * price) AS revenue FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY product_name;",
      "SELECT user_id, MAX(price) AS max_price_purchased FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY user_id HAVING MAX(price) > 500;",
      "SELECT user_id, COUNT(*) AS total_purchases, MAX(price) AS most_expensive_purchase FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY user_id;",
      "SELECT product_name, AVG(price) AS avg_price FROM products WHERE product_id IN (SELECT product_id FROM purchases);",
      "SELECT user_id, product_name, purchase_date FROM purchases JOIN products ON purchases.product_id = products.product_id WHERE user_id = 123 ORDER BY purchase_date DESC;",
      "SELECT product_name, COUNT(*) AS total_sales FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY product_name HAVING total_sales > 5;",
      "SELECT user_id, SUM(price * quantity) AS total_spent FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY user_id;",
      "SELECT user_id, product_name, purchase_date FROM purchases JOIN products ON purchases.product_id = products.product_id WHERE purchase_date BETWEEN '2022-01-01' AND '2022-12-31';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM products;",
      "SELECT product_name, price FROM products;",
      "SELECT product_id, product_name, quantity FROM products;",
      "SELECT * FROM orders;",
      "SELECT order_id, total_price, payment_status FROM orders;",
      "SELECT * FROM customers;",
      "SELECT customer_name, email FROM customers;",
      "SELECT customer_id, phone_number FROM customers;",
      "SELECT product_id, quantity FROM orders;",
      "SELECT product_id, SUM(quantity) AS total_quantity FROM orders GROUP BY product_id;",
      "SELECT customer_name, COUNT(order_id) AS total_orders FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT product_id, AVG(price) AS avg_price FROM products GROUP BY product_id;",
      "SELECT customer_id, MAX(total_price) AS max_total_price FROM orders GROUP BY customer_id;",
      "SELECT * FROM products WHERE price > 100;",
      "SELECT * FROM products WHERE quantity < 10;",
      "SELECT * FROM orders WHERE payment_status = 'Pending';",
      "SELECT * FROM customers WHERE email LIKE '%gmail.com';",
      "SELECT * FROM orders WHERE total_price BETWEEN 100 AND 500;",
      "SELECT * FROM customers ORDER BY customer_name ASC;",
      "SELECT * FROM products ORDER BY price DESC;",
      "SELECT * FROM products WHERE price > 100",
      "SELECT product_name, price FROM products ORDER BY price DESC",
      "SELECT * FROM products WHERE quantity < 10",
      "SELECT product_name, price FROM products WHERE quantity > 0 AND quantity < 20",
      "SELECT * FROM orders WHERE total_price > 500",
      "SELECT * FROM orders WHERE quantity >= 5 AND quantity <= 10",
      "SELECT customer_name, email FROM customers WHERE phone_number LIKE '%123%'",
      "SELECT * FROM products INNER JOIN orders ON products.product_id = orders.product_id",
      "SELECT * FROM customers LEFT JOIN orders ON customers.customer_id = orders.order_id",
      "SELECT * FROM products WHERE price BETWEEN 50 AND 100",
      "SELECT product_name, SUM(quantity) AS total_quantity FROM orders GROUP BY product_name",
      "SELECT customer_name, COUNT(*) AS total_orders FROM orders INNER JOIN customers ON orders.order_id = customers.customer_id GROUP BY customer_name",
      "SELECT * FROM products WHERE product_name LIKE 'A%' OR product_name LIKE 'B%'",
      "SELECT product_name, AVG(price) AS average_price FROM products GROUP BY product_name",
      "SELECT customer_name, email FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE total_price > 200)",
      "SELECT customer_name, COUNT(*) AS total_orders FROM orders INNER JOIN customers ON orders.order_id = customers.customer_id GROUP BY customer_name HAVING total_orders > 5",
      "SELECT product_name, price FROM products WHERE price = (SELECT MAX(price) FROM products)",
      "SELECT DISTINCT product_name FROM products",
      "SELECT customer_name, email FROM customers WHERE customer_id = (SELECT MAX(customer_id) FROM customers)",
      "SELECT * FROM products WHERE product_id IN (SELECT product_id FROM orders WHERE quantity > 5)"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Products;",
      "SELECT product_name, price FROM Products WHERE price > 100;",
      "SELECT product_name, quantity FROM Products WHERE quantity < 10;",
      "SELECT * FROM Customers;",
      "SELECT customer_name, email FROM Customers WHERE customer_id = 1;",
      "SELECT * FROM Orders;",
      "SELECT order_id, order_date FROM Orders WHERE order_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT * FROM Payments;",
      "SELECT payment_id, amount FROM Payments WHERE amount > 500;",
      "SELECT product_name, price, quantity FROM Products WHERE price BETWEEN 50 AND 100;",
      "SELECT customer_name, phone_number FROM Customers WHERE email LIKE '%@example.com';",
      "SELECT * FROM Orders WHERE customer_id = 2;",
      "SELECT customer_name, order_date FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id;",
      "SELECT product_name, quantity FROM Products ORDER BY quantity DESC;",
      "SELECT customer_name, email, phone_number FROM Customers WHERE customer_name LIKE 'A%';",
      "SELECT product_name, price FROM Products WHERE product_name LIKE '%shirt%';",
      "SELECT * FROM Orders WHERE order_id = 5;",
      "SELECT payment_id, status FROM Payments WHERE status = 'paid';",
      "SELECT SUM(quantity) AS total_quantity FROM Orders;",
      "SELECT AVG(price) AS avg_price FROM Products;",
      "SELECT * FROM Products;",
      "SELECT product_name, price FROM Products WHERE price > 100;",
      "SELECT customer_name, email, COUNT(order_id) AS num_orders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_name, email;",
      "SELECT customer_name, SUM(amount) AS total_paid FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Payments ON Orders.order_id = Payments.order_id GROUP BY customer_name;",
      "SELECT * FROM Products WHERE quantity > 0 ORDER BY price DESC;",
      "SELECT customer_name, product_name, quantity FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id WHERE quantity > 0 ORDER BY customer_name, quantity DESC;",
      "SELECT customer_name, product_name, order_date, payment_date FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id JOIN Payments ON Orders.order_id = Payments.order_id WHERE payment_date >= '2022-01-01' AND payment_date <= '2022-06-30';",
      "SELECT COUNT(DISTINCT customer_name) AS unique_customers FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id;",
      "SELECT product_name, AVG(price) AS avg_price FROM Products GROUP BY product_name HAVING AVG(price) > 50;",
      "SELECT customer_name, MAX(quantity) AS max_quantity FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_name HAVING max_quantity > 5;",
      "SELECT customer_name, COUNT(DISTINCT product_name) AS num_products FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id GROUP BY customer_name HAVING num_products >= 2;",
      "SELECT customer_name, SUM(price * quantity) AS total_spent FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id GROUP BY customer_name;",
      "SELECT * FROM Payments WHERE status = 'pending' AND payment_date < '2022-07-31';",
      "SELECT customer_name, product_name, quantity FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id WHERE price BETWEEN 50 AND 200 ORDER BY quantity DESC;",
      "SELECT customer_name, COUNT(DISTINCT Orders.order_id) AS num_orders, MAX(price) AS highest_price FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id GROUP BY customer_name HAVING highest_price > 100;",
      "SELECT product_name, COUNT(*) AS num_orders FROM Products JOIN Orders ON Products.product_id = Orders.product_id GROUP BY product_name HAVING num_orders < 5;",
      "SELECT customer_name, AVG(amount) AS avg_payment FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Payments ON Orders.order_id = Payments.order_id GROUP BY customer_name HAVING AVG(amount) > 100;",
      "SELECT customer_name, COUNT(*) AS num_orders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_name HAVING num_orders >= 3;",
      "SELECT * FROM Orders WHERE order_date >= '2022-01-01' AND order_date <= '2022-06-30';",
      "SELECT customer_name, MIN(price) AS min_price FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id GROUP BY customer_name HAVING min_price < 50;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM products;",
      "SELECT product_name, price FROM products WHERE price > 100;",
      "SELECT category_name FROM categories WHERE category_id = 1;",
      "SELECT * FROM purchases WHERE quantity >= 10;",
      "SELECT customer_name, email FROM customers WHERE customer_id = 1;",
      "SELECT * FROM transactions ORDER BY transaction_date DESC;",
      "SELECT product_name, price FROM products WHERE quantity > 0 AND price < 50;",
      "SELECT category_name, COUNT(*) FROM categories GROUP BY category_name;",
      "SELECT * FROM purchases WHERE total_cost > 1000;",
      "SELECT customer_name, email FROM customers WHERE email LIKE '%example.com';",
      "SELECT SUM(quantity) FROM purchases WHERE product_id = 1;",
      "SELECT * FROM transactions WHERE customer_id = 2 AND purchase_id = 10;",
      "SELECT AVG(price) FROM products;",
      "SELECT customer_name, COUNT(transaction_id) FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_name;",
      "SELECT product_id, SUM(quantity) FROM purchases GROUP BY product_id;",
      "SELECT * FROM purchases WHERE purchase_date BETWEEN '2021-01-01' AND '2021-12-31';",
      "SELECT category_id, AVG(price) FROM products GROUP BY category_id;",
      "SELECT customer_name, transaction_date FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id ORDER BY transaction_date DESC;",
      "SELECT SUM(total_cost) FROM purchases;",
      "SELECT * FROM products WHERE product_name LIKE '%T-shirt%';",
      "SELECT * FROM products WHERE price > 100",
      "SELECT product_name, price FROM products WHERE quantity > 10",
      "SELECT product_name, category_name FROM products p JOIN categories c ON p.product_id = c.category_id",
      "SELECT product_name, category_name FROM products p, categories c WHERE p.product_id = c.category_id",
      "SELECT DISTINCT product_name FROM products",
      "SELECT product_name, SUM(quantity) AS total_quantity FROM purchases GROUP BY product_name",
      "SELECT customer_id, customer_name, email FROM customers WHERE customer_name LIKE 'A%'",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT customer_id, COUNT(transaction_id) AS total_transactions FROM transactions GROUP BY customer_id",
      "SELECT category_name, AVG(price) AS avg_price FROM products p JOIN categories c ON p.category_id = c.category_id GROUP BY category_name",
      "SELECT customer_name, SUM(total_cost) AS total_spent FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY customer_name",
      "SELECT * FROM purchases WHERE purchase_date > '2022-01-01'",
      "SELECT customer_name, count(*) AS total_purchases FROM customers c, transactions t WHERE c.customer_id = t.customer_id GROUP BY customer_name",
      "SELECT t.transaction_id, t.transaction_date, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id",
      "SELECT p.product_name, SUM(quantity) AS total_quantity FROM purchases p JOIN products pr ON p.product_id = pr.product_id GROUP BY p.product_id HAVING SUM(quantity) > 100",
      "SELECT p.product_name, c.category_name FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.price < 50",
      "SELECT p.product_name, c.category_name, SUM(quantity) AS total_quantity FROM products p JOIN categories c ON p.category_id = c.category_id JOIN purchases pur ON p.product_id = pur.product_id GROUP BY p.product_id ORDER BY total_quantity DESC",
      "SELECT customer_name, AVG(total_cost) AS avg_purchase_cost FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY customer_name HAVING AVG(total_cost) > 100",
      "SELECT p.product_name, SUM(quantity) AS total_quantity FROM products p JOIN purchases pur ON p.product_id = pur.product_id GROUP BY p.product_id HAVING SUM(quantity) > 50",
      "SELECT c.category_name, COUNT(p.product_id) AS total_products FROM categories c LEFT JOIN products p ON c.category_id = p.category_id GROUP BY c.category_name HAVING COUNT(p.product_id) > 2"
    ]
  }
]