[
  {
    "statements": [
      "SELECT * FROM users;",
      "SELECT user_id, username FROM users;",
      "SELECT COUNT(*) FROM users;",
      "SELECT username, email FROM users WHERE age > 30;",
      "SELECT * FROM users WHERE education_level='Bachelor';",
      "SELECT user_id, email FROM users WHERE gender='Male';",
      "SELECT COUNT(*) FROM users WHERE age BETWEEN 25 AND 35;",
      "SELECT * FROM users WHERE education_level IS NOT NULL;",
      "SELECT user_id, gender FROM users WHERE age >= 18;",
      "SELECT * FROM users ORDER BY age DESC;",
      "SELECT username, email FROM users ORDER BY username ASC;",
      "SELECT user_id, age FROM users WHERE gender='Female' ORDER BY age ASC;",
      "SELECT DISTINCT gender FROM users;",
      "SELECT user_id, username FROM users WHERE education_level='Master' AND age > 25;",
      "SELECT * FROM users WHERE gender='Non-Binary';",
      "SELECT DISTINCT education_level FROM users;",
      "SELECT email FROM users WHERE username='example_username';",
      "SELECT * FROM users WHERE age = 30 AND gender='Female';",
      "SELECT user_id, email FROM users WHERE age < 25 AND education_level='High School';",
      "SELECT * FROM users WHERE age > 40 OR education_level='Doctorate';",
      "SELECT * FROM users WHERE age > 30 LIMIT 5",
      "SELECT user_id, username, age FROM users WHERE education_level='Bachelor'",
      "SELECT user_id, username, email FROM users WHERE gender='Female' ORDER BY age ASC LIMIT 10",
      "SELECT COUNT(*) AS total_users FROM users",
      "SELECT DISTINCT education_level FROM users",
      "SELECT user_id, age FROM users WHERE age IS NOT NULL",
      "SELECT * FROM users WHERE education_level IN ('Bachelor', 'Masters')",
      "SELECT username, email FROM users WHERE age BETWEEN 25 AND 40",
      "SELECT * FROM users WHERE gender='Male' AND education_level='PhD'",
      "SELECT user_id, username FROM users WHERE email LIKE '%@gmail.com'",
      "SELECT user_id, gender FROM users WHERE age < 25",
      "SELECT * FROM users WHERE education_level IS NULL",
      "SELECT * FROM users ORDER BY age DESC LIMIT 5",
      "SELECT user_id, username, email, gender FROM users WHERE age >= 25",
      "SELECT * FROM users WHERE education_level='High School' AND gender='Female'",
      "SELECT user_id, username, age FROM users WHERE education_level='PhD'",
      "SELECT SUM(age) AS total_age FROM users WHERE gender='Male'",
      "SELECT * FROM users WHERE age > 40",
      "SELECT user_id, username, education_level FROM users WHERE age < 30",
      "SELECT AVG(age) AS avg_age FROM users WHERE gender='Female'"
    ]
  },
  {
    "statements": [
      "SELECT * FROM personalized_learning_paths;",
      "SELECT id, student_id, course_id FROM personalized_learning_paths WHERE completion_status = TRUE;",
      "SELECT student_id, completion_status FROM personalized_learning_paths WHERE course_id = 4;",
      "SELECT * FROM personalized_learning_paths WHERE student_id = 123;",
      "SELECT id, student_id FROM personalized_learning_paths WHERE course_id = 5 AND completion_status = FALSE;",
      "SELECT * FROM student_preferences;",
      "SELECT student_id, preferred_course_id FROM student_preferences;",
      "SELECT * FROM student_preferences WHERE preferred_learning_style = 'Visual';",
      "SELECT id, student_id, preferred_course_id FROM student_preferences WHERE student_id = 456;",
      "SELECT student_id, preferred_learning_style FROM student_preferences WHERE preferred_course_id = 7;",
      "SELECT * FROM personalized_learning_paths INNER JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id;",
      "SELECT personalized_learning_paths.id, student_id, preferred_course_id FROM personalized_learning_paths INNER JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id;",
      "SELECT * FROM personalized_learning_paths LEFT JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id;",
      "SELECT id, student_id, preferred_course_id FROM personalized_learning_paths LEFT JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id WHERE personalized_learning_paths.student_id IS NULL;",
      "SELECT * FROM personalized_learning_paths RIGHT JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id;",
      "SELECT id, student_id, preferred_course_id FROM personalized_learning_paths RIGHT JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id WHERE student_preferences.student_id IS NULL;",
      "SELECT id, preferred_course_id FROM personalized_learning_paths WHERE id IN (1, 3, 5);",
      "SELECT student_id, preferred_course_id FROM student_preferences WHERE student_id BETWEEN 100 AND 200;",
      "SELECT * FROM personalized_learning_paths WHERE course_id IN (2, 4, 6);",
      "SELECT student_id, preferred_course_id FROM student_preferences WHERE preferred_course_id NOT IN (7, 9);",
      "SELECT * FROM personalized_learning_paths WHERE student_id = 1;",
      "SELECT course_id, completion_status FROM personalized_learning_paths WHERE completion_status = true;",
      "SELECT student_id, course_id FROM personalized_learning_paths WHERE student_id = 1 AND completion_status = false;",
      "SELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id;",
      "SELECT plp.id, plp.student_id, plp.course_id, sp.prefeered_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp LEFT JOIN student_preferences sp ON plp.student_id = sp.student_id;",
      "SELECT plp.student_id, plp.course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id WHERE plp.completion_status = true;",
      "SELECT plp.student_id, plp.course_id, sp.preferred_course_id FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id WHERE sp.preferred_learning_style = 'Visual';",
      "SELECT plp.student_id, COUNT(*) AS num_courses_completed FROM personalized_learning_paths plp WHERE plp.completion_status = true GROUP BY plp.student_id;",
      "SELECT plp.student_id, AVG(plp.course_id) AS avg_course_completion FROM personalized_learning_paths plp WHERE plp.completion_status = true GROUP BY plp.student_id;",
      "SELECT plp.student_id, MAX(plp.course_id) AS max_completed_course FROM personalized_learning_paths plp WHERE plp.completion_status = true GROUP BY plp.student_id;",
      "SELECT plp.student_id, plp.course_id, CASE WHEN plp.completion_status = true THEN 'Completed' ELSE 'Not Completed' END AS completion_status_text FROM personalized_learning_paths plp;",
      "SELECT plp.student_id, plp.course_id, sp.preferred_course_id, CASE WHEN plp.course_id = sp.preferred_course_id THEN 'Preferred' ELSE 'Not Preferred' END AS preference_status FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id;",
      "SELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp FULL OUTER JOIN student_preferences sp ON plp.student_id = sp.student_id;",
      "SELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp CROSS JOIN student_preferences sp WHERE plp.completion_status = true;",
      "SELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id WHERE sp.preferred_learning_style LIKE '%Visual%';",
      "SELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id ORDER BY sp.preferred_course_id ASC;",
      "SELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id ORDER BY plp.course_id DESC;",
      "SELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id LIMIT 10;",
      "SELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id OFFSET 5;",
      "SELECT DISTINCT plp.student_id, plp.course_id FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT name, age FROM students;",
      "SELECT student_id, name, age FROM students WHERE grade_level = '10th';",
      "SELECT * FROM courses;",
      "SELECT course_id, course_name, instructor FROM courses;",
      "SELECT * FROM student_progress;",
      "SELECT student_id, course_id, completion_status FROM student_progress WHERE score >= 80;",
      "SELECT s.name, c.course_name, sp.completion_status FROM students s INNER JOIN student_progress sp ON s.student_id = sp.student_id INNER JOIN courses c ON sp.course_id = c.course_id;",
      "SELECT s.name, c.course_name, sp.completion_status FROM students s INNER JOIN student_progress sp ON s.student_id = sp.student_id INNER JOIN courses c ON sp.course_id = c.course_id WHERE sp.completion_status = true;",
      "SELECT s.name, c.course_name, sp.score FROM students s INNER JOIN student_progress sp ON s.student_id = sp.student_id INNER JOIN courses c ON sp.course_id = c.course_id WHERE sp.score > 90;",
      "SELECT s.name AS student_name, c.course_name AS course, sp.completion_status AS status FROM students s INNER JOIN student_progress sp ON s.student_id = sp.student_id INNER JOIN courses c ON sp.course_id = c.course_id WHERE sp.completion_status = false ORDER BY s.name ASC, c.course_name DESC;",
      "SELECT COUNT(*) AS total_students FROM students;",
      "SELECT AVG(age) AS average_age FROM students;",
      "SELECT MIN(age) AS min_age, MAX(age) AS max_age FROM students;",
      "SELECT department, COUNT(*) AS course_count FROM courses GROUP BY department;",
      "SELECT instructor, AVG(score) AS average_score FROM courses c INNER JOIN student_progress sp ON c.course_id = sp.course_id GROUP BY instructor;",
      "SELECT grade_level, COUNT(*) AS total_students FROM students GROUP BY grade_level;",
      "SELECT department, AVG(score) AS average_score FROM courses c INNER JOIN student_progress sp ON c.course_id = sp.course_id GROUP BY department HAVING AVG(score) > 85;",
      "SELECT * FROM students LIMIT 5;",
      "SELECT * FROM courses LIMIT 3;",
      "SELECT * FROM student_progress LIMIT 10;",
      "SELECT * FROM students WHERE age > 18 AND grade_level = 'Senior';",
      "SELECT name, age FROM students WHERE age BETWEEN 20 AND 25;",
      "SELECT student_id, name, instructor FROM students JOIN courses ON students.student_id = courses.course_id;",
      "SELECT course_name, instructor, department FROM courses WHERE department = 'Science';",
      "SELECT name, grade_level, completion_status FROM students s JOIN student_progress sp ON s.student_id = sp.student_id;",
      "SELECT course_name, completion_status, score FROM courses c JOIN student_progress sp ON c.course_id = sp.course_id WHERE completion_status = TRUE;",
      "SELECT AVG(score) FROM student_progress GROUP BY student_id HAVING COUNT(student_id) > 1;",
      "SELECT MAX(score) FROM student_progress WHERE course_id = 101;",
      "SELECT DISTINCT department FROM courses;",
      "SELECT name, MAX(score), AVG(score) FROM students s JOIN student_progress sp ON s.student_id = sp.student_id GROUP BY s.student_id;",
      "SELECT COUNT(*) FROM students WHERE age < 20;",
      "SELECT SUM(score) FROM student_progress WHERE completion_status = TRUE;",
      "SELECT course_name, AVG(score) AS average_score FROM courses c JOIN student_progress sp ON c.course_id = sp.course_id WHERE department = 'Math';",
      "SELECT instructor, COUNT(*) AS student_count FROM courses GROUP BY instructor HAVING COUNT(*) > 1;",
      "SELECT student_id, COUNT(course_id) AS course_count FROM student_progress GROUP BY student_id;",
      "SELECT name, department, score FROM students s JOIN student_progress sp ON s.student_id = sp.student_id JOIN courses c ON sp.course_id = c.course_id;",
      "SELECT course_name, department, AVG(score) AS average_score FROM courses c JOIN student_progress sp ON c.course_id = sp.course_id GROUP BY c.course_id;",
      "SELECT instructor, MAX(score) AS highest_score FROM courses c JOIN student_progress sp ON c.course_id = sp.course_id GROUP BY instructor;",
      "SELECT student_id, MIN(score) AS lowest_score FROM student_progress GROUP BY student_id;",
      "SELECT name, age, course_name, completion_status FROM students s JOIN student_progress sp ON s.student_id = sp.student_id JOIN courses c ON sp.course_id = c.course_id WHERE completion_status = FALSE;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT student_id, student_name FROM students;",
      "SELECT student_name, age FROM students;",
      "SELECT student_id, age, grade_level FROM students;",
      "SELECT * FROM courses;",
      "SELECT course_id, course_name FROM courses;",
      "SELECT course_name, course_level FROM courses;",
      "SELECT course_id, course_level, course_description FROM courses;",
      "SELECT * FROM student_performance;",
      "SELECT student_id, course_id, performance_score FROM student_performance;",
      "SELECT course_id, performance_score FROM student_performance;",
      "SELECT student_id, performance_score FROM student_performance;",
      "SELECT * FROM preferences;",
      "SELECT student_id, preference_1 FROM preferences;",
      "SELECT preference_1, preference_2 FROM preferences;",
      "SELECT student_id, preference_1, preference_3 FROM preferences;",
      "SELECT student_name, course_name, performance_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN courses ON student_performance.course_id = courses.course_id;",
      "SELECT student_name, age, course_name, performance_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN courses ON student_performance.course_id = courses.course_id;",
      "SELECT student_name, preference_1, preference_2, preference_3 FROM students JOIN preferences ON students.student_id = preferences.student_id;",
      "SELECT * FROM students;",
      "SELECT student_name, age FROM students WHERE grade_level='High School';",
      "SELECT student_name, course_name FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN courses ON courses.course_id = student_performance.course_id;",
      "SELECT student_name, AVG(performance_score) AS average_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id GROUP BY student_name;",
      "SELECT student_name, preference_1, preference_2, preference_3 FROM students JOIN preferences ON students.student_id = preferences.student_id;",
      "SELECT student_name, course_name, performance_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN courses ON courses.course_id = student_performance.course_id WHERE grade_level='Middle School';",
      "SELECT student_name, course_name, performance_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN courses ON courses.course_id = student_performance.course_id WHERE performance_score > 80;",
      "SELECT student_name, preference_1 FROM students JOIN preferences ON students.student_id..."
    ]
  },
  {
    "statements": [
      "SELECT * FROM Students;",
      "SELECT course_id, course_name FROM Courses;",
      "SELECT student_name FROM Students WHERE student_id = 1;",
      "SELECT enrollment_id, student_id, course_id FROM Enrollments ORDER BY enrollment_date DESC;",
      "SELECT assessment_name, assessment_score FROM Assessments WHERE course_id = 1 AND assessment_score > 80;",
      "SELECT * FROM Preferences WHERE student_id = 2;",
      "SELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id WHERE course_id = 3;",
      "SELECT COUNT(*) FROM Students;",
      "SELECT course_id, COUNT(*) AS total_enrollments FROM Enrollments GROUP BY course_id;",
      "SELECT student_id, AVG(assessment_score) AS average_score FROM Assessments GROUP BY student_id HAVING average_score > 70;",
      "SELECT student_id, course_id FROM Enrollments UNION SELECT student_id, preferred_course_id FROM Preferences;",
      "SELECT * FROM Students LIMIT 5 OFFSET 10;",
      "SELECT course_name, course_description FROM Courses WHERE course_description IS NOT NULL;",
      "SELECT MAX(assessment_score) AS highest_score FROM Assessments;",
      "SELECT student_id, COUNT(course_id) AS total_courses_enrolled FROM Enrollments WHERE student_id = 4;",
      "SELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id;",
      "SELECT course_id, COUNT(student_id) AS total_students_enrolled FROM Enrollments GROUP BY course_id HAVING total_students_enrolled > 5;",
      "SELECT DISTINCT preferred_course_id FROM Preferences;",
      "SELECT student_id, MAX(assessment_score) AS highest_score FROM Assessments GROUP BY student_id;",
      "SELECT student_id, course_id, enrollment_date FROM Enrollments WHERE enrollment_id BETWEEN 5 AND 10;",
      "SELECT * FROM Students;",
      "SELECT * FROM Courses;",
      "SELECT * FROM Enrollments;",
      "SELECT * FROM Assessments;",
      "SELECT * FROM Preferences;",
      "SELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id;",
      "SELECT course_name, assessment_name, assessment_score FROM Courses JOIN Assessments ON Courses.course_id = Assessments.course_id;",
      "SELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id WHERE enrollment_date >= '2022-01-01';",
      "SELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id;",
      "SELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id WHERE assessment_score >= 80.0;",
      "SELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id WHERE assessment_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id WHERE course_name LIKE 'M%';",
      "SELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id WHERE course_id IN (SELECT course_id FROM Courses WHERE course_name = 'Math');",
      "SELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id WHERE student_id IN (SELECT student_id FROM Preferences WHERE preferred_course_id = 1);",
      "SELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id WHERE student_id IN (SELECT student_id FROM Preferences WHERE preferred_course_id IN (SELECT course_id FROM Courses WHERE course_name = 'Science'));",
      "SELECT COUNT(student_id) AS total_students FROM Students;",
      "SELECT AVG(assessment_score) AS average_score FROM Assessments;",
      "SELECT course_name, COUNT(student_id) AS total_students FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id GROUP BY course_name;",
      "SELECT student_name, MAX(assessment_score) AS highest_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id GROUP BY student_name;",
      "SELECT course_name, AVG(assessment_score) AS average_score FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id GROUP BY course_name HAVING AVG(assessment_score) >= 70.0;"
    ]
  }
]