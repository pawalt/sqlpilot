[
  {
    "statements": [
      "SELECT * FROM student_performance",
      "SELECT student_name, grade FROM student_performance WHERE course_id = 101",
      "SELECT AVG(grade) AS average_grade FROM student_performance",
      "SELECT student_name, grade FROM student_performance WHERE grade >= 90",
      "SELECT COUNT(*) AS total_students FROM student_performance WHERE grade < 60",
      "SELECT DISTINCT course_id FROM student_performance",
      "SELECT student_name, grade FROM student_performance ORDER BY grade DESC",
      "SELECT student_name, grade FROM student_performance WHERE course_id = 102 ORDER BY grade ASC",
      "SELECT student_name, grade FROM student_performance WHERE grade BETWEEN 70 AND 80",
      "SELECT student_name, course_id, grade FROM student_performance WHERE student_id = 101",
      "SELECT MAX(grade) AS highest_grade FROM student_performance",
      "SELECT MIN(grade) AS lowest_grade FROM student_performance",
      "SELECT student_id, student_name FROM student_performance WHERE grade IS NULL",
      "SELECT student_name, grade FROM student_performance WHERE student_name LIKE 'A%'",
      "SELECT AVG(grade) AS average_grade, course_id FROM student_performance GROUP BY course_id",
      "SELECT student_name, grade FROM student_performance WHERE course_id IN (101, 102)",
      "SELECT student_name, grade FROM student_performance WHERE student_name = 'John Doe'",
      "SELECT COUNT(DISTINCT student_id) AS total_students FROM student_performance",
      "SELECT student_name, grade FROM student_performance LIMIT 5",
      "SELECT student_name, grade FROM student_performance OFFSET 5 LIMIT 5",
      "SELECT student_name, grade FROM student_performance WHERE course_id = 103 LIMIT 10",
      "SELECT student_id, student_name, grade FROM student_performance WHERE grade > 80 ORDER BY grade DESC",
      "SELECT student_id, student_name, course_id FROM student_performance WHERE course_id IN (1, 2, 3)",
      "SELECT student_id, student_name FROM student_performance WHERE student_name LIKE 'J%'",
      "SELECT student_id, student_name, grade FROM student_performance ORDER BY grade LIMIT 5",
      "SELECT student_name, AVG(grade) AS average_grade FROM student_performance GROUP BY student_name HAVING AVG(grade) > 70",
      "SELECT COUNT(*) AS total_students FROM student_performance",
      "SELECT student_id, student_name, grade FROM student_performance WHERE course_id = 1 AND grade > 70",
      "SELECT MAX(grade) AS highest_grade FROM student_performance",
      "SELECT student_id, COUNT(course_id) AS course_count FROM student_performance GROUP BY student_id HAVING COUNT(course_id) > 2",
      "SELECT student_id, student_name, MAX(grade) AS highest_grade FROM student_performance WHERE course_id = 1 GROUP BY student_id ORDER BY highest_grade DESC",
      "SELECT DISTINCT course_id FROM student_performance",
      "SELECT student_name, SUM(grade) AS total_grade FROM student_performance GROUP BY student_name ORDER BY total_grade DESC",
      "SELECT student_id, student_name, grade FROM student_performance WHERE course_id = 1 OR course_id = 2",
      "SELECT student_id, student_name, grade FROM student_performance WHERE grade BETWEEN 70 AND 80",
      "SELECT student_name, MIN(grade) AS lowest_grade FROM student_performance GROUP BY student_name ORDER BY lowest_grade",
      "SELECT student_name, AVG(grade) AS average_grade FROM student_performance GROUP BY student_name ORDER BY average_grade DESC",
      "SELECT COUNT(DISTINCT student_id) AS unique_students FROM student_performance",
      "SELECT student_id, student_name, grade*0.1 AS grade_percentage FROM student_performance",
      "SELECT student_id, student_name, grade FROM student_performance WHERE student_id = 1",
      "SELECT student_id, student_name, course_id, grade FROM student_performance ORDER BY course_id, grade DESC LIMIT 10"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT first_name, last_name FROM students;",
      "SELECT student_id, first_name, last_name, age FROM students;",
      "SELECT * FROM courses;",
      "SELECT course_name, instructor FROM courses;",
      "SELECT course_id, course_name, instructor, course_level FROM courses;",
      "SELECT * FROM students WHERE age > 20;",
      "SELECT * FROM students WHERE enrolled_courses > 5;",
      "SELECT * FROM students WHERE age BETWEEN 20 AND 25;",
      "SELECT * FROM courses WHERE course_level = 'Intermediate';",
      "SELECT * FROM courses WHERE students_enrolled > 100;",
      "SELECT first_name, last_name FROM students WHERE age > 20;",
      "SELECT course_name, instructor FROM courses WHERE students_enrolled > 50;",
      "SELECT student_id, first_name, last_name FROM students WHERE age BETWEEN 20 AND 25;",
      "SELECT course_id, course_name, instructor FROM courses WHERE students_enrolled > 100;",
      "SELECT * FROM students ORDER BY age DESC;",
      "SELECT * FROM students ORDER BY enrolled_courses ASC;",
      "SELECT * FROM courses ORDER BY students_enrolled DESC;",
      "SELECT * FROM students LIMIT 10;",
      "SELECT * FROM courses LIMIT 5;",
      "SELECT * FROM students WHERE age > 20 AND enrolled_courses >= 3;",
      "SELECT first_name, last_name, age FROM students WHERE age < 25;",
      "SELECT student_id, first_name, last_name FROM students WHERE enrolled_courses > 0;",
      "SELECT course_name, instructor, course_level FROM courses WHERE course_level = 'Intermediate';",
      "SELECT course_name, students_enrolled FROM courses WHERE course_name LIKE '%Database%';",
      "SELECT student_id, first_name, last_name, enrolled_courses FROM students WHERE age BETWEEN 18 AND 30;",
      "SELECT * FROM students WHERE enrolled_courses = (SELECT MAX(enrolled_courses) FROM students);",
      "SELECT course_name, instructor FROM courses WHERE students_enrolled > 50 AND course_level = 'Advanced';",
      "SELECT student_id, first_name, last_name FROM students ORDER BY first_name DESC;",
      "SELECT course_name, students_enrolled FROM courses WHERE students_enrolled BETWEEN 20 AND 50;",
      "SELECT student_id, first_name, last_name FROM students WHERE enrolled_courses > (SELECT AVG(enrolled_courses) FROM students);",
      "SELECT * FROM students JOIN courses ON students.enrolled_courses = courses.students_enrolled;",
      "SELECT first_name, last_name, age FROM students WHERE first_name LIKE 'A%' AND last_name LIKE 'B%';",
      "SELECT course_name, instructor FROM courses WHERE instructor IN ('John Doe', 'Jane Smith');",
      "SELECT COUNT(student_id) AS total_students FROM students;",
      "SELECT AVG(age) AS avg_age FROM students;",
      "SELECT course_name, COUNT(course_id) AS total_courses FROM courses GROUP BY course_name;",
      "SELECT first_name, last_name, AVG(age) AS avg_age FROM students GROUP BY first_name, last_name;",
      "SELECT first_name, last_name, course_name FROM students JOIN courses ON students.enrolled_courses = courses.students_enrolled;",
      "SELECT student_id, first_name, last_name FROM students LIMIT 10;",
      "SELECT course_name, students_enrolled FROM courses WHERE students_enrolled = (SELECT MIN(students_enrolled) FROM courses);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT student_name, grade FROM students;",
      "SELECT * FROM courses;",
      "SELECT course_name, instructor FROM courses;",
      "SELECT * FROM reports;",
      "SELECT report_id, report_date, report_text FROM reports;",
      "SELECT student_name, course_name, grade FROM students JOIN courses ON students.course_id = courses.course_id;",
      "SELECT student_name, course_name, report_date, report_text FROM students JOIN reports ON students.student_id = reports.student_id JOIN courses ON students.course_id = courses.course_id;",
      "SELECT student_name, grade, report_date, report_text FROM students JOIN reports ON students.student_id = reports.student_id WHERE students.grade >= 80;",
      "SELECT student_name, course_name, report_date, report_text FROM students JOIN reports ON students.student_id = reports.student_id JOIN courses ON students.course_id = courses.course_id WHERE reports.report_date >= '2022-01-01';",
      "SELECT DISTINCT student_name FROM students;",
      "SELECT course_name, COUNT(*) AS student_count FROM students JOIN courses ON students.course_id = courses.course_id GROUP BY course_name;",
      "SELECT instructor, AVG(grade) AS avg_grade FROM students JOIN courses ON students.course_id = courses.course_id GROUP BY instructor;",
      "SELECT student_name, course_name, grade, report_date, report_text FROM students LEFT JOIN reports ON students.student_id = reports.student_id LEFT JOIN courses ON students.course_id = courses.course_id;",
      "SELECT student_name, grade FROM students WHERE student_id = 1;",
      "SELECT course_name FROM courses WHERE start_date >= '2022-01-01';",
      "SELECT student_name, course_name, grade FROM students JOIN courses ON students.course_id = courses.course_id ORDER BY student_name ASC, grade DESC;",
      "SELECT student_name, course_name, grade FROM students JOIN courses ON students.course_id = courses.course_id LIMIT 10;",
      "SELECT student_name, course_name, grade FROM students JOIN courses ON students.course_id = courses.course_id OFFSET 5;",
      "SELECT student_name, course_name, grade FROM students JOIN courses ON students.course_id = courses.course_id LIMIT 5 OFFSET 10;",
      "SELECT * FROM students JOIN courses ON students.course_id = courses.course_id WHERE grade > 80;",
      "SELECT student_name, course_name, grade FROM students JOIN courses ON students.course_id = courses.course_id;",
      "SELECT COUNT(student_id) FROM students WHERE grade > 70;",
      "SELECT AVG(grade) FROM students GROUP BY course_id;",
      "SELECT student_name, instructor FROM students JOIN courses ON students.course_id = courses.course_id WHERE course_name='Math';",
      "SELECT student_name, course_name, report_text FROM students JOIN reports ON students.student_id = reports.student_id JOIN courses ON reports.course_id = courses.course_id;",
      "SELECT student_name, report_text FROM students JOIN reports ON students.student_id = reports.student_id WHERE report_date BETWEEN '2021-01-01' AND '2021-12-31';",
      "SELECT course_name, AVG(grade) FROM students JOIN courses ON students.course_id = courses.course_id GROUP BY course_name;",
      "SELECT course_name, SUM(grade) FROM students JOIN courses ON students.course_id = courses.course_id GROUP BY course_name;",
      "SELECT student_name, course_name, report_text FROM students JOIN reports ON students.student_id = reports.student_id JOIN courses ON reports.course_id = courses.course_id WHERE grade < 60;",
      "SELECT student_name, instructor, course_name, report_date, report_text FROM students JOIN reports ON students.student_id = reports.student_id JOIN courses ON reports.course_id = courses.course_id WHERE student_name='Alice';",
      "SELECT student_name, instructor, course_name, report_date, report_text FROM students JOIN reports ON students.student_id = reports.student_id JOIN courses ON reports.course_id = courses.course_id WHERE course_name='Science' AND grade > 70;",
      "SELECT student_name, course_name, AVG(grade) as avg_grade FROM students JOIN courses ON students.course_id = courses.course_id GROUP BY student_name, course_name HAVING avg_grade > 80;",
      "SELECT course_name, MAX(grade) FROM students JOIN courses ON students.course_id = courses.course_id GROUP BY course_id;",
      "SELECT student_name, course_name, instructor, report_date, report_text FROM students JOIN reports ON students.student_id = reports.student_id JOIN courses ON reports.course_id = courses.course_id WHERE student_name='Bob' AND report_date >= '2021-06-01';",
      "SELECT student_name, AVG(grade) as avg_grade FROM students JOIN courses ON students.course_id = courses.course_id GROUP BY student_name HAVING avg_grade < 70;",
      "SELECT student_id, student_name, course_name, report_date, report_text FROM students JOIN reports ON students.student_id = reports.student_id JOIN courses ON reports.course_id = courses.course_id WHERE course_name='English' AND report_text LIKE '%good%';",
      "SELECT student_name, course_name, grade, report_text FROM students JOIN reports ON students.student_id = reports.student_id JOIN courses ON reports.course_id = courses.course_id WHERE grade >= 80 AND report_text LIKE '%excellent%';",
      "SELECT student_name, instructor, course_name, report_date, report_text FROM students JOIN reports ON students.student_id = reports.student_id JOIN courses ON reports.course_id = courses.course_id WHERE report_text LIKE '%problem%' AND report_date BETWEEN '2021-01-01' AND '2021-12-31';",
      "SELECT course_name, AVG(grade) FROM students JOIN courses ON students.course_id = courses.course_id WHERE start_date >= '2022-01-01' GROUP BY course_name;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Students;",
      "SELECT student_id, student_name FROM Students WHERE student_age > 18;",
      "SELECT course_name, course_instructor FROM Courses;",
      "SELECT student_name, course_name, enrollment_date FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id;",
      "SELECT student_name, report_name, report_date FROM Reports INNER JOIN Students ON Reports.student_id = Students.student_id;",
      "SELECT student_name, course_name, course_schedule FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id INNER JOIN Courses ON Enrollments.course_id = Courses.course_id;",
      "SELECT * FROM Courses WHERE course_instructor = 'John Doe';",
      "SELECT student_name, student_grade FROM Students WHERE student_age < 18;",
      "SELECT course_name, course_schedule FROM Courses WHERE course_id = 1;",
      "SELECT report_content FROM Reports WHERE report_id = 3;",
      "SELECT student_name, course_name, enrollment_date FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id WHERE Students.student_name LIKE 'A%';",
      "SELECT student_name, report_name FROM Reports INNER JOIN Students ON Reports.student_id = Students.student_id WHERE Students.student_age > 20;",
      "SELECT course_name, course_schedule FROM Courses WHERE course_instructor != 'Jane Smith';",
      "SELECT student_name, student_grade, student_age FROM Students WHERE student_grade = 'A';",
      "SELECT course_name, course_instructor FROM Courses WHERE course_schedule LIKE 'M%';",
      "SELECT student_name, course_name, enrollment_date FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id WHERE Students.student_id = 1;",
      "SELECT student_name, course_name FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id INNER JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE course_name = 'Math';",
      "SELECT report_name, report_date FROM Reports WHERE report_content LIKE '%important%';",
      "SELECT student_name, course_name, course_schedule FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id INNER JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE course_schedule = 'Monday';",
      "SELECT student_name, student_age FROM Students WHERE student_id = 2;",
      "SELECT course_name, course_instructor FROM Courses WHERE course_id = (SELECT course_id FROM Enrollments WHERE student_id = 1);",
      "SELECT * FROM Students WHERE student_age > 20;",
      "SELECT student_name, student_grade FROM Students WHERE student_age BETWEEN 18 AND 25;",
      "SELECT student_name, course_name, course_schedule FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE Students.student_age > 20;",
      "SELECT AVG(student_age) AS average_age FROM Students;",
      "SELECT student_name, COUNT(*) AS num_courses FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id GROUP BY Students.student_id HAVING COUNT(*) > 1;",
      "SELECT student_name, MAX(student_age) AS oldest_student_age FROM Students;",
      "SELECT course_name, course_instructor, COUNT(*) AS num_students FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id GROUP BY Courses.course_id;",
      "SELECT student_name, course_name, report_content FROM Students JOIN Reports ON Students.student_id = Reports.student_id JOIN Courses ON Reports.course_id = Courses.course_id WHERE Students.student_age < 25;",
      "SELECT course_name, COUNT(*) AS num_reports FROM Courses JOIN Reports ON Courses.course_id = Reports.course_id GROUP BY Courses.course_id HAVING COUNT(*) >= 2;",
      "SELECT student_name, course_name, report_date, report_content FROM Students JOIN Reports ON Students.student_id = Reports.student_id JOIN Courses ON Reports.course_id = Courses.course_id WHERE report_date >= '2022-01-01' AND report_date <= '2022-12-31';",
      "SELECT course_name, course_instructor, AVG(student_age) AS average_age FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id JOIN Students ON Enrollments.student_id = Students.student_id GROUP BY Courses.course_id;",
      "SELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT student_name, course_name, report_date, report_content FROM Students JOIN Reports ON Students.student_id = Reports.student_id JOIN Courses ON Reports.course_id = Courses.course_id WHERE student_age >= 18 AND student_grade = 'A';",
      "SELECT student_name, course_name, report_date, report_content FROM Students JOIN Reports ON Students.student_id = Reports.student_id JOIN Courses ON Reports.course_id = Courses.course_id WHERE course_instructor = 'John Doe';",
      "SELECT student_name, course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE student_name LIKE '%Smith%';",
      "SELECT student_name, course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id ORDER BY student_name ASC, course_name DESC;",
      "SELECT student_name, COUNT(*) AS num_reports FROM Students JOIN Reports ON Students.student_id = Reports.student_id GROUP BY Students.student_id HAVING COUNT(*) >= 3;",
      "SELECT student_name, course_name, course_schedule FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id ORDER BY course_schedule ASC;",
      "SELECT student_name, course_name, report_content FROM Students JOIN Reports ON Students.student_id = Reports.student_id JOIN Courses ON Reports.course_id = Courses.course_id WHERE course_name IN ('Math', 'Science');",
      "SELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE course_schedule LIKE '%Monday%';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT student_name, student_grade FROM students;",
      "SELECT course_name, course_description FROM courses;",
      "SELECT * FROM enrollments;",
      "SELECT student_id, course_id, enrollment_date FROM enrollments;",
      "SELECT * FROM assignments;",
      "SELECT assignment_name, max_points FROM assignments;",
      "SELECT * FROM grades;",
      "SELECT student_id, points_earned FROM grades;",
      "SELECT student_id, assignment_id, points_earned FROM grades;",
      "SELECT s.student_name, c.course_name FROM students s JOIN enrollments e ON s.student_id = e.student_id JOIN courses c ON e.course_id = c.course_id;",
      "SELECT s.student_name, a.assignment_name, g.points_earned FROM students s JOIN grades g ON s.student_id = g.student_id JOIN assignments a ON g.assignment_id = a.assignment_id;",
      "SELECT c.course_name, a.assignment_name, g.points_earned FROM courses c JOIN assignments a ON c.course_id = a.course_id JOIN grades g ON a.assignment_id = g.assignment_id;",
      "SELECT s.student_name, c.course_name, g.points_earned FROM students s JOIN enrollments e ON s.student_id = e.student_id JOIN courses c ON e.course_id = c.course_id JOIN grades g ON s.student_id = g.student_id AND c.course_id = g.course_id;",
      "SELECT s.student_name, a.assignment_name, g.points_earned FROM students s JOIN grades g ON s.student_id = g.student_id JOIN assignments a ON g.assignment_id = a.assignment_id WHERE g.points_earned >= 80;",
      "SELECT s.student_name, a.assignment_name, g.points_earned FROM students s JOIN grades g ON s.student_id = g.student_id JOIN assignments a ON g.assignment_id = a.assignment_id WHERE a.max_points = g.points_earned;",
      "SELECT s.student_name, SUM(g.points_earned) AS total_points FROM students s JOIN grades g ON s.student_id = g.student_id GROUP BY s.student_name;",
      "SELECT c.course_name, AVG(g.points_earned) AS average_points FROM courses c JOIN assignments a ON c.course_id = a.course_id JOIN grades g ON a.assignment_id = g.assignment_id GROUP BY c.course_name;",
      "SELECT s.student_name, c.course_name, AVG(g.points_earned) AS average_points FROM students s JOIN enrollments e ON s.student_id = e.student_id JOIN courses c ON e.course_id = c.course_id JOIN grades g ON s.student_id = g.student_id AND c.course_id = g.course_id GROUP BY s.student_name, c.course_name;",
      "SELECT * FROM students;",
      "SELECT student_name, student_grade FROM students WHERE student_id = 1;",
      "SELECT student_name, course_name, points_earned FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id;",
      "SELECT course_name, COUNT(*) AS num_enrollments FROM courses JOIN enrollments ON courses.course_id = enrollments.course_id GROUP BY course_name;",
      "SELECT student_name, AVG(points_earned) AS avg_grade FROM students JOIN grades ON students.student_id = grades.student_id GROUP BY student_name;",
      "SELECT student_name, assignment_name, points_earned FROM students JOIN grades ON students.student_id = grades.student_id JOIN assignments ON grades.assignment_id = assignments.assignment_id;",
      "SELECT course_name, SUM(max_points) AS total_points FROM courses JOIN assignments ON courses.course_id = assignments.course_id GROUP BY course_name;",
      "SELECT student_name, course_name, points_earned FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT student_name, course_name, points_earned FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id WHERE points_earned >= 80;",
      "SELECT student_name, course_name, points_earned FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id ORDER BY points_earned DESC;",
      "SELECT student_name, course_name, points_earned, assignment_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id JOIN assignments ON grades.assignment_id = assignments.assignment_id;",
      "SELECT course_name, AVG(points_earned) AS avg_grade FROM courses JOIN assignments ON courses.course_id = assignments.course_id JOIN grades ON assignments.assignment_id = grades.assignment_id GROUP BY course_name;",
      "SELECT student_name, course_name, points_earned FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id GROUP BY student_name, course_name;",
      "SELECT student_name, course_name, points_earned FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id HAVING SUM(points_earned) >= 200;",
      "SELECT student_name, course_name, MAX(points_earned) AS highest_grade FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id GROUP BY student_name, course_name;",
      "SELECT course_name, assignment_name, MAX(points_earned) AS highest_points FROM courses JOIN assignments ON courses.course_id = assignments.course_id JOIN grades ON assignments.assignment_id = grades.assignment_id GROUP BY course_name, assignment_name;",
      "SELECT student_name, course_name, points_earned FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id UNION SELECT student_name, course_name, points_earned FROM students JOIN grades ON students.student_id = grades.student_id ORDER BY points_earned DESC;",
      "SELECT student_name, course_name, points_earned FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id LIMIT 10;",
      "SELECT student_name, course_name, points_earned FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id OFFSET 5;",
      "SELECT student_name, course_name, points_earned FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON students.student_id = grades.student_id LIMIT 5 OFFSET 5;"
    ]
  }
]