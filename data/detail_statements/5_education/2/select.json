[
  {
    "statements": [
      "SELECT * FROM student_reports;",
      "SELECT student_id, attendance FROM student_reports;",
      "SELECT student_id, performance FROM student_reports;",
      "SELECT student_id, overall_progress FROM student_reports;",
      "SELECT student_id, attendance, performance FROM student_reports;",
      "SELECT student_id, attendance, overall_progress FROM student_reports;",
      "SELECT student_id, performance, overall_progress FROM student_reports;",
      "SELECT student_id, attendance, performance, overall_progress FROM student_reports;",
      "SELECT * FROM student_reports WHERE student_id = 1;",
      "SELECT * FROM student_reports WHERE attendance > 80;",
      "SELECT * FROM student_reports WHERE performance < 70;",
      "SELECT * FROM student_reports WHERE overall_progress BETWEEN 50 AND 80;",
      "SELECT COUNT(*) FROM student_reports;",
      "SELECT AVG(attendance) FROM student_reports;",
      "SELECT MAX(performance) FROM student_reports;",
      "SELECT MIN(overall_progress) FROM student_reports;",
      "SELECT SUM(attendance) FROM student_reports;",
      "SELECT DISTINCT student_id FROM student_reports;",
      "SELECT * FROM student_reports ORDER BY performance DESC;",
      "SELECT * FROM student_reports LIMIT 10 OFFSET 5;",
      "SELECT * FROM student_reports;",
      "SELECT student_id, attendance FROM student_reports WHERE attendance > 80;",
      "SELECT student_id, performance FROM student_reports WHERE performance < 70;",
      "SELECT * FROM student_reports WHERE attendance > 90 AND overall_progress < 80;",
      "SELECT student_id, performance FROM student_reports WHERE attendance > 70 AND performance > 60;",
      "SELECT * FROM student_reports WHERE attendance = 100 AND overall_progress < 90;",
      "SELECT student_id FROM student_reports WHERE attendance = 100 AND overall_progress > 80;",
      "SELECT student_id, attendance FROM student_reports WHERE performance < 50;",
      "SELECT student_id, overall_progress FROM student_reports WHERE attendance > 80 AND overall_progress < 70;",
      "SELECT * FROM student_reports WHERE attendance < 50 OR overall_progress < 60;",
      "SELECT student_id, performance FROM student_reports WHERE attendance < 40 AND performance < 50;",
      "SELECT * FROM student_reports WHERE performance > 80 AND overall_progress > 70;",
      "SELECT student_id, attendance FROM student_reports WHERE performance > 90;",
      "SELECT * FROM student_reports WHERE attendance > 80 OR overall_progress > 90;",
      "SELECT student_id, overall_progress FROM student_reports WHERE attendance < 60 AND performance > 70;",
      "SELECT * FROM student_reports WHERE attendance < 70 AND overall_progress < 50;",
      "SELECT student_id, performance FROM student_reports WHERE attendance < 60 OR overall_progress < 70;",
      "SELECT * FROM student_reports WHERE attendance > performance;",
      "SELECT student_id, overall_progress FROM student_reports WHERE attendance > performance;",
      "SELECT * FROM student_reports WHERE attendance <= overall_progress;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM student_attendance;",
      "SELECT student_id, date FROM student_attendance;",
      "SELECT date, status FROM student_attendance;",
      "SELECT * FROM student_performance;",
      "SELECT student_id, exam_date FROM student_performance;",
      "SELECT exam_date, subject FROM student_performance;",
      "SELECT subject, score FROM student_performance;",
      "SELECT student_id, date, status FROM student_attendance;",
      "SELECT student_id, exam_date, subject, score FROM student_performance;",
      "SELECT student_id, date, status FROM student_attendance WHERE student_id = 1;",
      "SELECT student_id, exam_date, subject, score FROM student_performance WHERE student_id = 1;",
      "SELECT student_id, date, status FROM student_attendance WHERE date = '2022-01-01';",
      "SELECT student_id, exam_date, subject, score FROM student_performance WHERE exam_date = '2022-01-01';",
      "SELECT student_id, date, status FROM student_attendance WHERE status = 'Present';",
      "SELECT student_id, exam_date, subject, score FROM student_performance WHERE score >= 80;",
      "SELECT COUNT(*) FROM student_attendance;",
      "SELECT AVG(score) FROM student_performance;",
      "SELECT MAX(score) FROM student_performance;",
      "SELECT student_id, MAX(score) FROM student_performance GROUP BY student_id;",
      "SELECT AVG(score), subject FROM student_performance GROUP BY subject;",
      "SELECT student_id, date, status FROM student_attendance",
      "SELECT student_id, exam_date, subject, score FROM student_performance",
      "SELECT student_id, date, subject, score FROM student_attendance LEFT JOIN student_performance ON student_attendance.student_id = student_performance.student_id",
      "SELECT student_id, exam_date, status, score FROM student_attendance RIGHT JOIN student_performance ON student_attendance.student_id = student_performance.student_id",
      "SELECT * FROM student_attendance WHERE date BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT * FROM student_performance WHERE exam_date > '2022-03-15'",
      "SELECT student_id, exam_date, subject, score FROM student_performance WHERE score > 80",
      "SELECT student_id, date FROM student_attendance WHERE date = '2022-04-20'",
      "SELECT student_id, exam_date, subject, score FROM student_performance WHERE subject LIKE '%Math%'",
      "SELECT DISTINCT student_id FROM student_performance",
      "SELECT AVG(score) AS average_score FROM student_performance",
      "SELECT student_id, COUNT(*) AS total_attendance_days FROM student_attendance GROUP BY student_id",
      "SELECT student_id, SUM(score) AS total_score FROM student_performance GROUP BY student_id",
      "SELECT student_id, date, status, COUNT(*) AS attendance_days FROM student_attendance GROUP BY student_id HAVING attendance_days > 15",
      "SELECT student_id, exam_date, AVG(score) AS avg_score FROM student_performance GROUP BY student_id HAVING avg_score > 70",
      "SELECT student_id, MIN(score) AS min_score, MAX(score) AS max_score FROM student_performance GROUP BY student_id",
      "SELECT student_id, COUNT(*) AS total_attendance_days, MAX(score) AS highest_score FROM student_attendance JOIN student_performance ON student_attendance.student_id = student_performance.student_id GROUP BY student_id",
      "SELECT student_id, COUNT(*) AS total_attendance_days, MAX(score) AS highest_score FROM student_attendance LEFT JOIN student_performance ON student_attendance.student_id = student_performance.student_id GROUP BY student_id",
      "SELECT student_id, COUNT(*) AS total_attendance_days, MAX(score) AS highest_score FROM student_attendance RIGHT JOIN student_performance ON student_attendance.student_id = student_performance.student_id GROUP BY student_id"
    ]
  },
  {
    "statements": [
      "SELECT * FROM student_attendance;",
      "SELECT id, student_id FROM student_performance;",
      "SELECT date, status FROM student_attendance WHERE status = 'Present';",
      "SELECT exam_date, subject FROM student_performance WHERE grade >= 80;",
      "SELECT progress_percentage, feedback FROM student_progress WHERE progress_percentage < 50;",
      "SELECT id, grade FROM student_performance WHERE subject = 'Math';",
      "SELECT DISTINCT student_id FROM student_attendance;",
      "SELECT id, grade, subject FROM student_performance WHERE grade < 60;",
      "SELECT * FROM student_attendance WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT student_id, progress_percentage FROM student_progress WHERE progress_percentage > 80;",
      "SELECT id, subject FROM student_performance WHERE subject LIKE 'Eng%';",
      "SELECT student_id, feedback FROM student_progress WHERE LENGTH(feedback) > 100;",
      "SELECT id, exam_date, grade FROM student_performance WHERE exam_date > '2022-06-01';",
      "SELECT * FROM student_attendance ORDER BY date DESC;",
      "SELECT student_id, MAX(grade) AS highest_grade FROM student_performance GROUP BY student_id;",
      "SELECT id, subject FROM student_performance WHERE grade = (SELECT MAX(grade) FROM student_performance);",
      "SELECT student_id, COUNT(*) AS num_attendance FROM student_attendance GROUP BY student_id;",
      "SELECT id, MAX(progress_percentage) AS highest_percentage FROM student_progress;",
      "SELECT student_id, AVG(grade) AS average_grade FROM student_performance GROUP BY student_id;",
      "SELECT id, subject FROM student_performance WHERE subject IN ('Math', 'Science');",
      "SELECT * FROM student_attendance WHERE status='Present';",
      "SELECT student_id, date FROM student_attendance WHERE date > '2022-01-01';",
      "SELECT student_id, COUNT(*) AS total_attendance FROM student_attendance GROUP BY student_id;",
      "SELECT student_attendance.student_id, student_performance.exam_date, student_performance.grade FROM student_attendance INNER JOIN student_performance ON student_attendance.student_id = student_performance.student_id;",
      "SELECT student_id, MAX(grade) AS highest_grade FROM student_performance GROUP BY student_id;",
      "SELECT sp.student_id, sp.subject, sp.exam_date, sa.status FROM student_performance sp LEFT JOIN student_attendance sa ON sp.student_id = sa.student_id;",
      "SELECT student_id, AVG(grade) AS average_grade FROM student_performance GROUP BY student_id;",
      "SELECT student_id, SUM(progress_percentage) AS total_progress FROM student_progress GROUP BY student_id HAVING total_progress > 50;",
      "SELECT student_id, subject, AVG(grade) AS average_grade FROM student_performance GROUP BY student_id, subject ORDER BY average_grade DESC;",
      "SELECT student_id, COUNT(*) AS total_feedbacks FROM student_progress GROUP BY student_id HAVING total_feedbacks > 5;",
      "SELECT student_id, MAX(progress_percentage) AS highest_progress FROM student_progress GROUP BY student_id;",
      "SELECT student_id, AVG(progress_percentage) AS average_progress FROM student_progress GROUP BY student_id;",
      "SELECT student_id, subject, AVG(grade) AS average_grade, MAX(progress_percentage) AS highest_progress FROM student_performance sp JOIN student_progress prog ON sp.student_id = prog.student_id AND sp.subject = prog.subject GROUP BY student_id, subject;",
      "SELECT student_id, subject, MAX(grade) AS highest_grade, MAX(progress_percentage) AS highest_progress FROM student_performance sp JOIN student_progress prog ON sp.student_id = prog.student_id AND sp.subject = prog.subject GROUP BY student_id, subject;",
      "SELECT sp.student_id, sp.exam_date, sp.grade, prog.progress_percentage FROM student_performance sp JOIN student_progress prog ON sp.student_id = prog.student_id AND sp.exam_date = prog.exam_date;",
      "SELECT student_id, AVG(progress_percentage) AS average_progress, COUNT(*) AS total_feedbacks FROM student_progress GROUP BY student_id HAVING total_feedbacks > 3;",
      "SELECT sp.student_id, sp.exam_date, sp.grade, prog.progress_percentage, prog.feedback FROM student_performance sp JOIN student_progress prog ON sp.student_id = prog.student_id AND sp.grade > 80;",
      "SELECT student_id, AVG(grade) AS average_grade, AVG(progress_percentage) AS average_progress FROM student_performance JOIN student_progress ON student_performance.student_id = student_progress.student_id GROUP BY student_id;",
      "SELECT student_id, AVG(grade) AS average_grade, MAX(progress_percentage) AS highest_progress FROM student_performance JOIN student_progress ON student_performance.student_id = student_progress.student_id GROUP BY student_id;",
      "SELECT student_id, AVG(progress_percentage) AS average_progress, MAX(grade) AS highest_grade FROM student_progress JOIN student_performance ON student_progress.student_id = student_performance.student_id GROUP BY student_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM student_information;",
      "SELECT first_name, last_name FROM student_information;",
      "SELECT student_id, dob FROM student_information;",
      "SELECT * FROM attendance_records;",
      "SELECT date, status FROM attendance_records;",
      "SELECT student_id, date, status FROM attendance_records;",
      "SELECT * FROM exam_scores;",
      "SELECT student_id, exam_name, score FROM exam_scores;",
      "SELECT score_id, exam_name FROM exam_scores;",
      "SELECT * FROM progress_reports;",
      "SELECT student_id, term FROM progress_reports;",
      "SELECT report_id, overall_progress FROM progress_reports;",
      "SELECT student_information.first_name, exam_scores.score FROM student_information JOIN exam_scores ON student_information.student_id = exam_scores.student_id;",
      "SELECT student_information.first_name, exam_scores.score FROM student_information LEFT JOIN exam_scores ON student_information.student_id = exam_scores.student_id;",
      "SELECT student_information.first_name, progress_reports.overall_progress FROM student_information JOIN progress_reports ON student_information.student_id = progress_reports.student_id;",
      "SELECT student_information.first_name, progress_reports.overall_progress FROM student_information LEFT JOIN progress_reports ON student_information.student_id = progress_reports.student_id;",
      "SELECT student_information.first_name, exam_scores.exam_name, progress_reports.term FROM student_information JOIN exam_scores ON student_information.student_id = exam_scores.student_id JOIN progress_reports ON exam_scores.student_id = progress_reports.student_id;",
      "SELECT student_information.first_name, exam_scores.score, progress_reports.overall_progress FROM student_information JOIN exam_scores ON student_information.student_id = exam_scores.student_id JOIN progress_reports ON exam_scores.student_id = progress_reports.student_id;",
      "SELECT student_information.first_name, exam_scores.score, progress_reports.overall_progress FROM student_information JOIN exam_scores ON student_information.student_id = exam_scores.student_id LEFT JOIN progress_reports ON exam_scores.student_id = progress_reports.student_id;",
      "SELECT student_information.first_name, exam_scores.score, progress_reports.term FROM student_information JOIN exam_scores ON student_information.student_id = exam_scores.student_id LEFT JOIN progress_reports ON exam_scores.student_id = progress_reports.student_id;",
      "SELECT * FROM student_information;",
      "SELECT student_id, first_name, last_name FROM student_information;",
      "SELECT * FROM student_information WHERE gender='Male';",
      "SELECT * FROM student_information WHERE dob BETWEEN '2000-01-01' AND '2005-12-31';",
      "SELECT student_id, first_name, last_name FROM student_information ORDER BY last_name ASC;",
      "SELECT * FROM attendance_records;",
      "SELECT student_id, date, status FROM attendance_records WHERE status='Present';",
      "SELECT * FROM exam_scores;",
      "SELECT student_id, exam_name, score FROM exam_scores WHERE score > 80;",
      "SELECT * FROM progress_reports;",
      "SELECT student_id, term, overall_progress FROM progress_reports WHERE term=1;",
      "SELECT si.student_id, si.first_name, si.last_name, ar.date, ar.status FROM student_information si INNER JOIN attendance_records ar ON si.student_id = ar.student_id;",
      "SELECT si.student_id, si.first_name, si.last_name, er.exam_name, er.score FROM student_information si INNER JOIN exam_scores er ON si.student_id = er.student_id;",
      "SELECT si.first_name, si.last_name, pr.term, pr.overall_progress FROM student_information si INNER JOIN progress_reports pr ON si.student_id = pr.student_id;",
      "SELECT si.first_name, si.last_name, ar.date, er.exam_name, pr.overall_progress FROM student_information si INNER JOIN attendance_records ar ON si.student_id = ar.student_id INNER JOIN exam_scores er ON si.student_id = er.student_id INNER JOIN progress_reports pr ON si.student_id = pr.student_id;",
      "SELECT COUNT(*) AS total_students FROM student_information;",
      "SELECT COUNT(*) AS total_records FROM attendance_records;",
      "SELECT AVG(score) AS average_score FROM exam_scores;",
      "SELECT MAX(score) AS highest_score FROM exam_scores;",
      "SELECT MIN(score) AS lowest_score FROM exam_scores;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT full_name FROM students;",
      "SELECT student_id, full_name FROM students;",
      "SELECT * FROM attendance;",
      "SELECT student_id, class_date FROM attendance;",
      "SELECT * FROM courses;",
      "SELECT course_name FROM courses;",
      "SELECT * FROM student_performance;",
      "SELECT student_id, course_id, grade FROM student_performance;",
      "SELECT * FROM progress;",
      "SELECT student_id, overall_progress FROM progress;",
      "SELECT full_name, date_of_birth FROM students;",
      "SELECT student_id, class_date, is_present FROM attendance;",
      "SELECT course_name FROM student_performance, courses WHERE student_performance.course_id = courses.course_id;",
      "SELECT full_name, grade FROM students, student_performance WHERE students.student_id = student_performance.student_id;",
      "SELECT student_id, full_name, course_name FROM students, student_performance, courses WHERE students.student_id = student_performance.student_id AND student_performance.course_id = courses.course_id;",
      "SELECT student_id, full_name, course_name, grade FROM students, student_performance, courses WHERE students.student_id = student_performance.student_id AND student_performance.course_id = courses.course_id;",
      "SELECT student_id, full_name, class_date, is_present FROM students, attendance WHERE students.student_id = attendance.student_id;",
      "SELECT student_id, full_name, overall_progress FROM students, progress WHERE students.student_id = progress.student_id;",
      "SELECT student_id, full_name, class_date, is_present, course_name, grade, overall_progress FROM students, attendance, student_performance, courses, progress WHERE students.student_id = attendance.student_id AND students.student_id = student_performance.student_id AND student_performance.course_id = courses.course_id AND students.student_id = progress.student_id;",
      "SELECT full_name, date_of_birth FROM students;",
      "SELECT student_id, class_date, is_present FROM attendance;",
      "SELECT course_id, course_name FROM courses;",
      "SELECT full_name, course_name, grade FROM students INNER JOIN student_performance ON students.student_id = student_performance.student_id INNER JOIN courses ON student_performance.course_id = courses.course_id;",
      "SELECT full_name, overall_progress FROM students INNER JOIN progress ON students.student_id = progress.student_id;",
      "SELECT * FROM students WHERE date_of_birth < '2000-01-01';",
      "SELECT * FROM attendance WHERE is_present = TRUE;",
      "SELECT full_name, course_name FROM students INNER JOIN student_performance ON students.student_id = student_performance.student_id INNER JOIN courses ON student_performance.course_id = courses.course_id WHERE grade = 'A';",
      "SELECT full_name, overall_progress FROM students INNER JOIN progress ON students.student_id = progress.student_id WHERE overall_progress > 80;",
      "SELECT student_id, AVG(overall_progress) AS avg_progress FROM progress GROUP BY student_id;",
      "SELECT course_id, COUNT(*) AS total_students FROM student_performance GROUP BY course_id;",
      "SELECT full_name, MAX(overall_progress) AS best_progress FROM students INNER JOIN progress ON students.student_id = progress.student_id GROUP BY full_name;",
      "SELECT * FROM students WHERE full_name LIKE '%John%';",
      "SELECT student_id, AVG(overall_progress) AS avg_progress FROM progress HAVING avg_progress > 75;",
      "SELECT course_name, SUM(overall_progress) AS total_progress FROM student_performance INNER JOIN courses ON student_performance.course_id = courses.course_id GROUP BY course_name;",
      "SELECT student_id, MAX(overall_progress) AS highest_progress FROM progress;",
      "SELECT full_name, COUNT(*) AS attendance_count FROM students INNER JOIN attendance ON students.student_id = attendance.student_id GROUP BY full_name;",
      "SELECT student_id, COUNT(*) AS total_courses FROM student_performance GROUP BY student_id HAVING total_courses > 3;",
      "SELECT course_name, AVG(overall_progress) AS avg_progress FROM student_performance INNER JOIN courses ON student_performance.course_id = courses.course_id GROUP BY course_name HAVING avg_progress < 70;",
      "SELECT full_name, MAX(overall_progress) - MIN(overall_progress) AS progress_difference FROM students INNER JOIN progress ON students.student_id = progress.student_id GROUP BY full_name HAVING progress_difference > 20;",
      "SELECT course_name, COUNT(*) AS total_students FROM student_performance INNER JOIN courses ON student_performance.course_id = courses.course_id GROUP BY course_name HAVING COUNT(*) > 5;"
    ]
  }
]