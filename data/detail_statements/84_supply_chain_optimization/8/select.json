[
  {
    "statements": [
      "SELECT * FROM department_integration;",
      "SELECT department_id, department_name FROM department_integration;",
      "SELECT * FROM department_integration WHERE department_id = 1;",
      "SELECT * FROM department_integration WHERE department_name = 'Sales';",
      "SELECT * FROM department_integration WHERE erp_integration_status = true;",
      "SELECT department_name FROM department_integration WHERE erp_integration_status = false;",
      "SELECT COUNT(*) FROM department_integration;",
      "SELECT MAX(department_id) FROM department_integration;",
      "SELECT MIN(department_id) FROM department_integration;",
      "SELECT AVG(department_id) FROM department_integration;",
      "SELECT SUM(department_id) FROM department_integration;",
      "SELECT DISTINCT department_name FROM department_integration;",
      "SELECT * FROM department_integration ORDER BY department_id;",
      "SELECT * FROM department_integration ORDER BY department_name DESC;",
      "SELECT * FROM department_integration LIMIT 5;",
      "SELECT * FROM department_integration OFFSET 10;",
      "SELECT * FROM department_integration WHERE department_id IN (1, 2, 3);",
      "SELECT * FROM department_integration WHERE department_name LIKE 'Ma%';",
      "SELECT * FROM department_integration WHERE department_name ILIKE 'sal%';",
      "SELECT * FROM department_integration WHERE department_name IS NULL;",
      "SELECT department_id, department_name FROM department_integration WHERE erp_integration_status = TRUE",
      "SELECT * FROM department_integration WHERE department_name LIKE '%sales%'",
      "SELECT COUNT(*) as department_count FROM department_integration",
      "SELECT MAX(department_id) as max_department_id FROM department_integration",
      "SELECT department_id, department_name FROM department_integration ORDER BY department_name ASC",
      "SELECT department_id, COUNT(*) as department_count FROM department_integration GROUP BY department_id",
      "SELECT AVG(department_id) as avg_department_id FROM department_integration",
      "SELECT department_id, department_name FROM department_integration WHERE department_id BETWEEN 100 AND 200",
      "SELECT department_id, department_name FROM department_integration WHERE department_id IN (1, 2, 3)",
      "SELECT department_id, department_name FROM department_integration WHERE department_name LIKE '%engineering%' AND erp_integration_status = TRUE",
      "SELECT department_id, department_name FROM department_integration WHERE department_id NOT IN (4, 5, 6)",
      "SELECT department_id, department_name FROM department_integration WHERE department_name IN ('HR', 'Finance')",
      "SELECT department_id, department_name FROM department_integration WHERE department_id > 10 AND department_name <> 'IT'",
      "SELECT department_id, department_name FROM department_integration WHERE erp_integration_status IS NOT NULL",
      "SELECT department_id, department_name FROM department_integration WHERE erp_integration_status = FALSE",
      "SELECT department_id, department_name FROM department_integration WHERE erp_integration_status IS TRUE AND department_name NOT LIKE '%non%'",
      "SELECT department_id, department_name FROM department_integration WHERE department_id >= 5 LIMIT 10",
      "SELECT department_id, department_name FROM department_integration WHERE department_name LIKE 'A%' OR department_name LIKE 'B%'",
      "SELECT department_id, department_name FROM department_integration WHERE department_id > 100 AND department_name <> 'Operations'",
      "SELECT department_id, department_name FROM department_integration WHERE erp_integration_status = TRUE AND department_name NOT IN ('HR', 'Marketing')"
    ]
  },
  {
    "statements": [
      "SELECT * FROM employees;",
      "SELECT name, department FROM employees;",
      "SELECT * FROM departments;",
      "SELECT name, location FROM departments;",
      "SELECT employee_id, name, department FROM employees;",
      "SELECT department_id, name, location FROM departments;",
      "SELECT employee_id, name, department, email FROM employees;",
      "SELECT department_id, name, location FROM departments WHERE location='New York';",
      "SELECT * FROM employees WHERE department='HR';",
      "SELECT * FROM departments WHERE department_id=100;",
      "SELECT employee_id, name, phone_number FROM employees WHERE department='IT';",
      "SELECT name, department FROM employees WHERE email='john.doe@example.com';",
      "SELECT employee_id, name, email FROM employees WHERE phone_number='1234567890';",
      "SELECT name, department FROM employees WHERE name='Alice';",
      "SELECT * FROM departments WHERE department_id=200;",
      "SELECT employee_id, department FROM employees WHERE name='Bob';",
      "SELECT * FROM employees WHERE department='Finance' AND name='Catherine';",
      "SELECT * FROM departments WHERE location='London' AND name='Sales';",
      "SELECT name, email, phone_number FROM employees WHERE department='Marketing';",
      "SELECT name, location FROM departments WHERE name='Engineering';",
      "SELECT name, department FROM employees;",
      "SELECT * FROM employees WHERE department = 'Engineering';",
      "SELECT name, email FROM employees WHERE department = 'Sales' ORDER BY name ASC;",
      "SELECT * FROM employees WHERE department = 'Marketing' AND name LIKE 'J%';",
      "SELECT name, phone_number FROM employees WHERE department IN ('Sales', 'Engineering');",
      "SELECT employee_id, name, email FROM employees JOIN departments ON employees.department = departments.name;",
      "SELECT name, email, location FROM employees JOIN departments ON employees.department = departments.name WHERE departments.location = 'New York';",
      "SELECT COUNT(employee_id) AS total_employees FROM employees;",
      "SELECT name, department, COUNT(*) AS total_employees FROM employees GROUP BY department;",
      "SELECT department, AVG(employee_id) AS avg_employee_id FROM employees GROUP BY department;",
      "SELECT DISTINCT department FROM employees;",
      "SELECT name, department FROM employees UNION SELECT name, department FROM employees ORDER BY department, name;",
      "SELECT name, COUNT(*) AS total FROM employees GROUP BY name HAVING COUNT(*) > 1;",
      "SELECT MAX(employee_id) FROM employees;",
      "SELECT department, COUNT(*) AS total_employees FROM employees GROUP BY department HAVING COUNT(*) > 1;",
      "SELECT department, location, COUNT(*) AS total_employees FROM employees JOIN departments ON employees.department = departments.name GROUP BY department, location;",
      "SELECT name, department, email FROM employees WHERE name LIKE 'A%' OR name LIKE 'S%';",
      "SELECT name, department, email FROM employees WHERE name NOT LIKE 'J%' AND department = 'Sales';",
      "SELECT name, department FROM employees WHERE name IN ('Alice', 'Bob', 'Charlie');",
      "SELECT name, email FROM employees WHERE employee_id BETWEEN 100 AND 200;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Department;",
      "SELECT department_name FROM Department;",
      "SELECT department_id, department_name FROM Department;",
      "SELECT employee_name, department_name FROM Employee JOIN Department ON Employee.department_id = Department.department_id;",
      "SELECT * FROM Employee WHERE department_id = 1;",
      "SELECT employee_name, employee_role FROM Employee WHERE department_id = 2;",
      "SELECT * FROM CommunicationLog;",
      "SELECT log_id, log_date FROM CommunicationLog;",
      "SELECT employee_name, log_date FROM Employee JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id;",
      "SELECT * FROM Department WHERE department_id = 1;",
      "SELECT department_name FROM Department WHERE department_id = 2;",
      "SELECT * FROM Employee WHERE employee_id = 1;",
      "SELECT employee_name, department_name FROM Employee JOIN Department ON Employee.department_id = Department.department_id WHERE Employee.employee_id = 2;",
      "SELECT log_id, communication_content FROM CommunicationLog WHERE employee_id = 1;",
      "SELECT employee_name, log_date FROM Employee JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id WHERE Employee.department_id = 1;",
      "SELECT * FROM Department WHERE department_name = 'HR';",
      "SELECT employee_name FROM Employee WHERE department_id = (SELECT department_id FROM Department WHERE department_name = 'IT');",
      "SELECT * FROM CommunicationLog WHERE log_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT employee_name, communication_content FROM Employee JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id WHERE log_date = '2022-02-14';",
      "SELECT * FROM Department ORDER BY department_name DESC;",
      "SELECT * FROM Department",
      "SELECT department_id, department_name FROM Department",
      "SELECT DISTINCT department_name FROM Department",
      "SELECT department_name, department_head FROM Department WHERE department_id = 1",
      "SELECT * FROM Employee",
      "SELECT employee_id, employee_name, department_id FROM Employee WHERE department_id = 3",
      "SELECT * FROM CommunicationLog",
      "SELECT log_id, employee_id, log_date FROM CommunicationLog WHERE employee_id = 5",
      "SELECT Employee.employee_name, Department.department_name FROM Employee INNER JOIN Department ON Employee.department_id = Department.department_id",
      "SELECT Employee.employee_name, CommunicationLog.log_date FROM Employee INNER JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id",
      "SELECT Department.department_name, Employee.employee_name, CommunicationLog.log_date FROM Department INNER JOIN Employee ON Department.department_id = Employee.department_id INNER JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id",
      "SELECT Employee.employee_name, COUNT(log_id) AS num_logs FROM Employee INNER JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY Employee.employee_name",
      "SELECT Department.department_name, AVG(communication_content) AS avg_content_length FROM Department INNER JOIN Employee ON Department.department_id = Employee.department_id INNER JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id",
      "SELECT employee_name, department_name FROM Employee LEFT JOIN Department ON Employee.department_id = Department.department_id",
      "SELECT department_name, COUNT(employee_id) AS num_employees FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id GROUP BY department_name",
      "SELECT department_name, MAX(log_date) AS latest_log_date FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id LEFT JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY department_name",
      "SELECT department_name, MIN(log_date) AS earliest_log_date FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id LEFT JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY department_name",
      "SELECT department_name, SUM(log_date) AS total_logs_dates FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id LEFT JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY department_name",
      "SELECT department_name, AVG(log_date) AS avg_log_date FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id LEFT JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY department_name",
      "SELECT department_name, STDDEV(log_date) AS log_date_stddev FROM Department LEFT JOIN Employee ON Department.department_id = Employee.department_id LEFT JOIN CommunicationLog ON Employee.employee_id = CommunicationLog.employee_id GROUP BY department_name"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, customer_email FROM customers;",
      "SELECT customer_name, customer_email FROM customers WHERE customer_id = 1;",
      "SELECT * FROM orders;",
      "SELECT order_id, order_date FROM orders WHERE customer_id = 1;",
      "SELECT * FROM products;",
      "SELECT product_name, product_price FROM products;",
      "SELECT product_name, product_price FROM products WHERE product_id = 1;",
      "SELECT * FROM departments;",
      "SELECT department_name, department_head FROM departments;",
      "SELECT department_name, department_head FROM departments WHERE department_id = 1;",
      "SELECT customers.customer_name, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customers.customer_name, orders.total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customers.customer_name, orders.total_amount FROM customers RIGHT JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customers.customer_name, orders.total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customers.customer_name, orders.total_amount FROM customers CROSS JOIN orders;",
      "SELECT customers.customer_name, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.customer_id = 1;",
      "SELECT customers.customer_name, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id ORDER BY orders.total_amount DESC;",
      "SELECT customers.customer_name, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.customer_id = 1 AND orders.total_amount > 100;",
      "SELECT customers.customer_name, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_name;",
      "SELECT customers.customer_name, SUM(orders.total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_name ORDER BY total_spent DESC;",
      "SELECT * FROM customers;",
      "SELECT customer_name, customer_email FROM customers WHERE customer_id = 1;",
      "SELECT order_id, order_date, total_amount FROM orders WHERE total_amount > 1000;",
      "SELECT * FROM products WHERE product_price BETWEEN 50.00 AND 100.00;",
      "SELECT customer_id, customer_name, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 500;",
      "SELECT product_name, customer_name FROM products JOIN orders ON products.product_id = orders.order_id JOIN customers ON orders.customer_id = customers.customer_id;",
      "SELECT customer_name, department_name FROM customers JOIN departments ON customers.customer_id = departments.department_id;",
      "SELECT department_name, COUNT(*) AS num_customers FROM departments JOIN customers ON departments.department_id = customers.customer_id GROUP BY department_name;",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT department_name, AVG(total_amount) AS avg_order_amount FROM departments JOIN customers ON departments.department_id = customers.customer_id JOIN orders ON customers.customer_id = orders.customer_id GROUP BY department_name;",
      "SELECT customer_name, MAX(total_amount) AS max_order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT department_name, MIN(product_price) AS min_product_price FROM departments JOIN products ON departments.department_id = products.product_id GROUP BY department_name;",
      "SELECT customer_name, CONCAT(customer_name, ' has ordered products with total amount of ', total_amount) AS order_summary FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customer_name, CASE WHEN total_amount > 1000 THEN 'High Value Order' ELSE 'Low Value Order' END AS order_type FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customer_name, AVG(total_amount) AS avg_order_amount FROM customers JOIN orders ON customers.customet_id = orders.customer_id GROUP BY customer_name;",
      "SELECT product_name, product_price, department_name FROM products JOIN departments ON products.product_id = departments.department_id;",
      "SELECT customer_name, MAX(total_amount) AS max_order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING max_order_total > 1000;",
      "SELECT department_name, AVG(total_amount) AS avg_order_amount FROM departments JOIN customers ON departments.department_id = customers.customer_id JOIN orders ON customers.customer_id = orders.customer_id GROUP BY department_name HAVING avg_order_amount > 500;",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING total_spent < 1000;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM departments;",
      "SELECT department_name FROM departments;",
      "SELECT employee_name, department_id FROM employees;",
      "SELECT product_name, product_price FROM products;",
      "SELECT order_id, product_id, order_date FROM orders;",
      "SELECT transaction_id, order_id, employee_id, transaction_amount FROM transactions;",
      "SELECT department_id, department_name FROM departments WHERE department_id = 1;",
      "SELECT product_name FROM products WHERE product_price < 50;",
      "SELECT employee_name, department_id FROM employees WHERE department_id = 2;",
      "SELECT order_id FROM orders WHERE order_date >= '2022-01-01';",
      "SELECT transaction_id, transaction_amount FROM transactions WHERE transaction_amount > 100;",
      "SELECT * FROM departments ORDER BY department_name ASC;",
      "SELECT employee_name, department_id FROM employees ORDER BY employee_name DESC;",
      "SELECT product_name, product_price FROM products WHERE product_price BETWEEN 20 AND 50;",
      "SELECT order_id, product_id, order_date FROM orders ORDER BY order_date DESC;",
      "SELECT transaction_id, order_id, employee_id FROM transactions ORDER BY transaction_id ASC;",
      "SELECT COUNT(*) FROM departments;",
      "SELECT AVG(product_price) FROM products;",
      "SELECT MAX(transaction_amount) FROM transactions;",
      "SELECT SUM(transaction_amount) FROM transactions;",
      "SELECT * FROM departments WHERE department_id = 1;",
      "SELECT employee_name, department_name FROM employees INNER JOIN departments ON employees.department_id = departments.department_id;",
      "SELECT product_name, product_price FROM products WHERE product_price > 50;",
      "SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT transaction_amount FROM transactions WHERE employee_id = 101 AND order_id = 201;",
      "SELECT employee_name, transaction_amount FROM employees INNER JOIN transactions ON employees.employee_id = transactions.employee_id;",
      "SELECT department_name, COUNT(employee_id) FROM employees INNER JOIN departments ON employees.department_id = departments.department_id GROUP BY department_name;",
      "SELECT product_name, SUM(transaction_amount) FROM products INNER JOIN orders ON products.product_id = orders.product_id INNER JOIN transactions ON orders.order_id = transactions.order_id GROUP BY product_name;",
      "SELECT employee_name, SUM(transaction_amount) FROM employees LEFT JOIN transactions ON employees.employee_id = transactions.employee_id GROUP BY employee_name;",
      "SELECT DISTINCT department_name FROM employees INNER JOIN departments ON employees.department_id = departments.department_id;",
      "SELECT AVG(product_price) FROM products;",
      "SELECT MAX(transaction_amount) FROM transactions;",
      "SELECT MIN(product_price) FROM products WHERE product_id != 1;",
      "SELECT * FROM products ORDER BY product_price DESC;",
      "SELECT employee_name, transaction_amount FROM employees INNER JOIN transactions ON employees.employee_id = transactions.employee_id WHERE transaction_amount > 1000;",
      "SELECT department_name, AVG(transaction_amount) FROM departments INNER JOIN employees ON departments.department_id = employees.department_id INNER JOIN transactions ON employees.employee_id = transactions.employee_id GROUP BY department_name;",
      "SELECT employee_name, SUM(transaction_amount) FROM employees INNER JOIN transactions ON employees.employee_id = transactions.employee_id GROUP BY employee_name HAVING SUM(transaction_amount) > 5000;",
      "SELECT employee_name, product_name, order_date FROM employees INNER JOIN transactions ON employees.employee_id = transactions.employee_id INNER JOIN orders ON transactions.order_id = orders.order_id INNER JOIN products ON orders.product_id = products.product_id WHERE order_date >= '2022-06-01';",
      "SELECT department_name, COUNT(employee_id) AS num_employees FROM employees INNER JOIN departments ON employees.department_id = departments.department_id GROUP BY department_name HAVING num_employees > 3;",
      "SELECT * FROM departments UNION SELECT * FROM employees;"
    ]
  }
]