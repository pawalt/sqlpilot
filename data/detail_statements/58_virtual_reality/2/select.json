[
  {
    "statements": [
      "SELECT * FROM EmployeePerformance;",
      "SELECT employee_name, training_duration FROM EmployeePerformance;",
      "SELECT employee_name, progress_percent FROM EmployeePerformance;",
      "SELECT employee_id, employee_name, training_duration, progress_percent FROM EmployeePerformance;",
      "SELECT employee_id, employee_name FROM EmployeePerformance WHERE training_duration > 10;",
      "SELECT * FROM EmployeePerformance ORDER BY employee_id DESC;",
      "SELECT * FROM EmployeePerformance WHERE progress_percent < 50;",
      "SELECT * FROM EmployeePerformance WHERE training_duration BETWEEN 50 AND 100;",
      "SELECT COUNT(employee_id) FROM EmployeePerformance;",
      "SELECT AVG(progress_percent) FROM EmployeePerformance;",
      "SELECT MAX(training_duration) FROM EmployeePerformance;",
      "SELECT MIN(progress_percent) FROM EmployeePerformance;",
      "SELECT SUM(training_duration) FROM EmployeePerformance;",
      "SELECT employee_name, training_duration FROM EmployeePerformance WHERE progress_percent > 75;",
      "SELECT employee_name, training_duration, progress_percent FROM EmployeePerformance WHERE employee_name LIKE 'A%';",
      "SELECT DISTINCT employee_name FROM EmployeePerformance;",
      "SELECT employee_name, progress_percent FROM EmployeePerformance WHERE employee_name IN ('Alice', 'Bob');",
      "SELECT employee_id, employee_name, progress_percent FROM EmployeePerformance WHERE training_duration IS NULL;",
      "SELECT AVG(progress_percent), MAX(training_duration) FROM EmployeePerformance;",
      "SELECT COUNT(*) AS total_records FROM EmployeePerformance;",
      "SELECT employee_id, employee_name FROM EmployeePerformance WHERE training_duration > 50 AND progress_percent >= 80",
      "SELECT * FROM EmployeePerformance",
      "SELECT DISTINCT employee_name FROM EmployeePerformance",
      "SELECT AVG(progress_percent) AS avg_progress FROM EmployeePerformance WHERE training_duration > 100",
      "SELECT employee_name, training_duration FROM EmployeePerformance WHERE progress_percent < 50 ORDER BY training_duration DESC",
      "SELECT COUNT(*) AS total_employees FROM EmployeePerformance WHERE progress_percent = 100",
      "SELECT MAX(progress_percent) AS max_progress FROM EmployeePerformance",
      "SELECT employee_name, progress_percent FROM EmployeePerformance WHERE training_duration BETWEEN 50 AND 100 ORDER BY progress_percent DESC",
      "SELECT employee_name, training_duration, progress_percent FROM EmployeePerformance WHERE progress_percent > 70 ORDER BY training_duration, progress_percent",
      "SELECT employee_name, training_duration, progress_percent FROM EmployeePerformance WHERE progress_percent < 30 ORDER BY progress_percent"
    ]
  },
  {
    "statements": [
      "SELECT * FROM EmployeePerformance;",
      "SELECT employee_name, training_module FROM EmployeePerformance;",
      "SELECT * FROM ProgressHistory;",
      "SELECT employee_id, training_module FROM ProgressHistory;",
      "SELECT employee_name, completion_status FROM EmployeePerformance WHERE progress_percent > 50;",
      "SELECT * FROM ProgressHistory WHERE date_completed > '2022-01-01';",
      "SELECT employee_name, training_module, completion_status FROM EmployeePerformance WHERE employee_id = '12345678-1234-1234-1234-123456789012';",
      "SELECT employee_name, progress_percent FROM EmployeePerformance ORDER BY progress_percent DESC;",
      "SELECT COUNT(*) FROM EmployeePerformance;",
      "SELECT AVG(progress_percent) FROM EmployeePerformance;",
      "SELECT DISTINCT training_module FROM EmployeePerformance;",
      "SELECT employee_name, completion_status FROM EmployeePerformance WHERE progress_percent BETWEEN 50 AND 75;",
      "SELECT employee_name, completion_status FROM EmployeePerformance WHERE training_module LIKE 'SQL%';",
      "SELECT e.employee_name, p.training_module, p.date_completed FROM EmployeePerformance e INNER JOIN ProgressHistory p ON e.employee_id = p.employee_id;",
      "SELECT e.employee_name, p.training_module, p.date_completed FROM EmployeePerformance e LEFT JOIN ProgressHistory p ON e.employee_id = p.employee_id;",
      "SELECT employee_name, COUNT(*) AS total_progress FROM EmployeePerformance GROUP BY employee_name;",
      "SELECT training_module, AVG(progress_percent) AS average_progress FROM EmployeePerformance GROUP BY training_module;",
      "SELECT employee_name, SUM(progress_percent) AS total_progress FROM EmployeePerformance GROUP BY employee_name HAVING SUM(progress_percent) > 200;",
      "SELECT employee_name, completion_status, date_completed FROM EmployeePerformance JOIN ProgressHistory ON EmployeePerformance.employee_id = ProgressHistory.employee_id;",
      "SELECT DISTINCT e.employee_name, e.employee_id, p.date_completed FROM EmployeePerformance e, ProgressHistory p WHERE e.employee_id = p.employee_id AND p.completion_status = 'Completed' LIMIT 5;",
      "SELECT * FROM EmployeePerformance;",
      "SELECT employee_name, training_module, progress_percent FROM EmployeePerformance WHERE progress_percent > 50;",
      "SELECT employee_name, training_module, completion_status FROM EmployeePerformance WHERE completion_status = 'Completed';",
      "SELECT employee_name, training_module, date_completed FROM EmployeePerformance INNER JOIN ProgressHistory ON EmployeePerformance.employee_id = ProgressHistory.employee_id;",
      "SELECT COUNT(DISTINCT employee_id) FROM EmployeePerformance;",
      "SELECT employee_name, completion_status, COUNT(*) AS total_count FROM EmployeePerformance GROUP BY employee_name, completion_status;",
      "SELECT employee_name, training_module, date_completed FROM EmployeePerformance INNER JOIN ProgressHistory ON EmployeePerformance.employee_id = ProgressHistory.employee_id WHERE ProgressHistory.completion_status = 'Pending';",
      "SELECT employee_name, training_module, MAX(progress_percent) AS highest_progress FROM EmployeePerformance;",
      "SELECT employee_name, training_module, AVG(progress_percent) AS average_progress FROM EmployeePerformance;",
      "SELECT employee_name, training_module, completion_status, date_completed FROM EmployeePerformance INNER JOIN ProgressHistory ON EmployeePerformance.employee_id = ProgressHistory.employee_id WHERE progress_percent > 75;",
      "SELECT employee_name, training_module, date_completed FROM EmployeePerformance INNER JOIN ProgressHistory ON EmployeePerformance.employee_id = ProgressHistory.employee_id WHERE date_completed > '2022-01-01';",
      "SELECT employee_name, training_module, date_completed FROM EmployeePerformance INNER JOIN ProgressHistory ON EmployeePerformance.employee_id = ProgressHistory.employee_id ORDER BY date_completed DESC;",
      "SELECT employee_name, training_module, MIN(progress_percent) AS lowest_progress FROM EmployeePerformance;",
      "SELECT employee_name, training_module, completion_status FROM EmployeePerformance WHERE training_module LIKE '%SQL%' AND completion_status = 'Completed';",
      "SELECT employee_name, training_module, completion_status, COUNT(*) AS total_count FROM EmployeePerformance GROUP BY employee_name, training_module, completion_status HAVING COUNT(*) > 1;",
      "SELECT employee_name, training_module, progress_percent FROM EmployeePerformance WHERE progress_percent BETWEEN 50 AND 75;",
      "SELECT employee_name, training_module, date_completed FROM EmployeePerformance INNER JOIN ProgressHistory ON EmployeePerformance.employee_id = ProgressHistory.employee_id WHERE date_completed BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT employee_name, training_module, completion_status FROM EmployeePerformance ORDER BY completion_status ASC;",
      "SELECT employee_name, training_module, SUM(progress_percent) AS total_progress FROM EmployeePerformance GROUP BY employee_name, training_module;",
      "SELECT employee_name, training_module, COUNT(*) AS total_count FROM EmployeePerformance WHERE progress_percent < 50 GROUP BY employee_name, training_module HAVING COUNT(*) > 1;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM employee_performance;",
      "SELECT employee_name, training_progress FROM employee_performance;",
      "SELECT * FROM training_modules;",
      "SELECT module_name, module_description FROM training_modules;",
      "SELECT * FROM employee_training;",
      "SELECT employee_id, module_id, training_date, completion_status FROM employee_training;",
      "SELECT employee_name, module_name, training_date FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id JOIN training_modules ON employee_training.module_id = training_modules.module_id;",
      "SELECT employee_name, module_name, training_date FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id JOIN training_modules ON employee_training.module_id = training_modules.module_id WHERE completion_status = TRUE;",
      "SELECT employee_name, module_name, training_date FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id JOIN training_modules ON employee_training.module_id = training_modules.module_id WHERE completion_status = FALSE;",
      "SELECT employee_name, module_name, training_date FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id JOIN training_modules ON employee_training.module_id = training_modules.module_id WHERE training_date > '2022-01-01';",
      "SELECT employee_name, module_name, training_date FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id JOIN training_modules ON employee_training.module_id = training_modules.module_id WHERE training_date < '2022-01-01';",
      "SELECT employee_name, AVG(training_progress) AS avg_progress FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id GROUP BY employee_name;",
      "SELECT module_name, COUNT(*) AS total_trainees FROM training_modules JOIN employee_training ON training_modules.module_id = employee_training.module_id GROUP BY module_name;",
      "SELECT employee_name, COUNT(*) AS total_modules FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id GROUP BY employee_name;",
      "SELECT employee_name, COUNT(DISTINCT module_id) AS total_modules_completed FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id WHERE completion_status = TRUE GROUP BY employee_name;",
      "SELECT module_name, MAX(training_date) AS latest_training_date FROM training_modules JOIN employee_training ON training_modules.module_id = employee_training.module_id GROUP BY module_name;",
      "SELECT employee_name, MIN(training_date) AS earliest_training_date FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id GROUP BY employee_name;",
      "SELECT employee_name, SUM(training_progress) AS total_progress FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id GROUP BY employee_name;",
      "SELECT COUNT(*) AS total_employees FROM employee_performance;",
      "SELECT COUNT(*) AS total_modules FROM training_modules;",
      "SELECT COUNT(*) AS total_trainings FROM employee_training;",
      "SELECT * FROM employee_performance;",
      "SELECT employee_id, employee_name FROM employee_performance WHERE training_progress > 50;",
      "SELECT module_name, module_description FROM training_modules WHERE module_id IN (1, 3, 5);",
      "SELECT employee_id, module_id, training_date FROM employee_training WHERE completion_status = true;",
      "SELECT employee_name, training_progress, module_name FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id JOIN training_modules ON employee_training.module_id = training_modules.module_id WHERE training_progress < 50 AND completion_status = false;",
      "SELECT employee_name, module_name, training_date FROM employee_performance INNER JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id INNER JOIN training_modules ON employee_training.module_id = training_modules.module_id WHERE training_date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT employee_id, employee_name, module_name, completion_status FROM employee_performance LEFT JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id LEFT JOIN training_modules ON employee_training.module_id = training_modules.module_id;",
      "SELECT employee_name, training_progress, training_date, completion_status FROM employee_performance RIGHT JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id RIGHT JOIN training_modules ON employee_training.module_id = training_modules.module_id;",
      "SELECT employee_id, employee_name, module_id, module_name, training_date, completion_status FROM employee_performance FULL OUTER JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id FULL OUTER JOIN training_modules ON employee_training.module_id = training_modules.module_id;",
      "SELECT COUNT(DISTINCT employee_id) FROM employee_performance;",
      "SELECT AVG(training_progress) FROM employee_performance;",
      "SELECT MAX(training_progress) FROM employee_performance;",
      "SELECT MIN(training_progress) FROM employee_performance;",
      "SELECT SUM(training_progress) FROM employee_performance;",
      "SELECT employee_name, COUNT(module_id) AS total_modules FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id GROUP BY employee_name;",
      "SELECT module_name, AVG(training_progress) AS avg_progress FROM employee_training JOIN training_modules ON employee_training.module_id = training_modules.module_id GROUP BY module_name;",
      "SELECT employee_id, SUM(training_progress) AS total_progress FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id GROUP BY employee_id;",
      "SELECT employee_name, MAX(training_progress) AS max_progress FROM employee_performance JOIN employee_training ON employee_performance.employee_id = employee_training.employee_id GROUP BY employee_name;",
      "SELECT DISTINCT employee_name FROM employee_performance;",
      "SELECT employee_id, module_id, training_date, completion_status FROM employee_training ORDER BY training_date ASC LIMIT 10;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM employees;",
      "SELECT employee_name, department FROM employees;",
      "SELECT employee_name, hire_date FROM employees WHERE department = 'Sales';",
      "SELECT * FROM training_modules;",
      "SELECT module_name, description FROM training_modules;",
      "SELECT module_name, duration_hours FROM training_modules WHERE duration_hours > 10;",
      "SELECT * FROM employee_progress;",
      "SELECT employee_id, module_id, progress_percentage FROM employee_progress WHERE employee_id = 100;",
      "SELECT employee_id, module_id, completed_date FROM employee_progress WHERE completed_date > '2022-01-01';",
      "SELECT * FROM performance_ratings;",
      "SELECT employee_id, rating FROM performance_ratings;",
      "SELECT employee_id, rating, feedback FROM performance_ratings WHERE rating >= 4.0;",
      "SELECT e.employee_name, tm.module_name, ep.progress_percentage FROM employees e, training_modules tm, employee_progress ep WHERE e.employee_id = ep.employee_id AND tm.module_id = ep.module_id;",
      "SELECT e.employee_name, pr.rating, pr.feedback FROM employees e INNER JOIN performance_ratings pr ON e.employee_id = pr.employee_id;",
      "SELECT e.employee_name, tm.module_name, pr.rating, ep.completed_date FROM employees e, training_modules tm, performance_ratings pr, employee_progress ep WHERE e.employee_id = ep.employee_id AND tm.module_id = ep.module_id AND pr.employee_id = e.employee_id;",
      "SELECT e.employee_name AS EmployeeName, pr.feedback AS RatingFeedback FROM employees e JOIN performance_ratings pr ON e.employee_id = pr.employee_id;",
      "SELECT e.employee_name, tm.module_name, pr.rating, ep.completed_date FROM employees e LEFT JOIN performance_ratings pr ON e.employee_id = pr.employee_id LEFT JOIN training_modules tm ON ep.module_id = tm.module_id LEFT JOIN employee_progress ep ON e.employee_id = ep.employee_id;",
      "SELECT e.employee_name, COUNT(ep.module_id) AS ModulesCompleted FROM employees e LEFT JOIN employee_progress ep ON e.employee_id = ep.employee_id GROUP BY e.employee_name HAVING ModulesCompleted > 2;",
      "SELECT AVG(pr.rating) AS AvgRating FROM performance_ratings pr;",
      "SELECT * FROM employees;",
      "SELECT employee_id, employee_name, department FROM employees WHERE department = 'IT';",
      "SELECT employee_name, hire_date FROM employees WHERE hire_date BETWEEN '2021-01-01' AND '2021-12-31';",
      "SELECT e.employee_name, e.department, t.module_name FROM employees e JOIN employee_progress ep ON e.employee_id = ep.employee_id JOIN training_modules t ON ep.module_id = t.module_id;",
      "SELECT e.employee_name, p.rating FROM employees e JOIN performance_ratings p ON e.employee_id = p.employee_id WHERE p.rating > 4.5;",
      "SELECT e.employee_name, t.module_name, ep.progress_percentage FROM employees e JOIN employee_progress ep ON e.employee_id = ep.employee_id JOIN training_modules t ON ep.module_id = t.module_id WHERE ep.progress_percentage < 100;",
      "SELECT e.employee_name, ep.completed_date FROM employees e LEFT JOIN employee_progress ep ON e.employee_id = ep.employee_id WHERE ep.completed_date IS NULL;",
      "SELECT COUNT(*) AS num_employees FROM employees;",
      "SELECT department, COUNT(*) AS num_employees FROM employees GROUP BY department;",
      "SELECT AVG(duration_hours) AS avg_duration FROM training_modules;",
      "SELECT module_id, module_name, description FROM training_modules WHERE description LIKE '%beginner%';",
      "SELECT employee_id, MAX(progress_percentage) AS max_progress FROM employee_progress GROUP BY employee_id;",
      "SELECT employee_name, hire_date, DATEDIFF(NOW(), hire_date) AS days_worked FROM employees;",
      "SELECT e.employee_name, p.rating, pr.feedback FROM employees e JOIN performance_ratings p ON e.employee_id = p.employee_id LEFT JOIN performance_ratings pr ON e.employee_id = pr.employee_id AND p.rating < pr.rating;",
      "SELECT employee_id, SUM(duration_hours) AS total_hours FROM employee_progress ep JOIN training_modules t ON ep.module_id = t.module_id GROUP BY employee_id;",
      "SELECT DISTINCT department FROM employees;",
      "SELECT employee_name, department FROM employees UNION SELECT employee_name, 'Training' AS department FROM training_modules;",
      "SELECT e.employee_name, COUNT(ep.module_id) AS num_modules FROM employees e JOIN employee_progress ep ON e.employee_id = ep.employee_id GROUP BY e.employee_name;",
      "SELECT DISTINCT e.employee_name, p.rating FROM employees e LEFT JOIN performance_ratings p ON e.employee_id = p.employee_id WHERE p.rating IS NULL;",
      "SELECT e.employee_name, AVG(p.rating) AS avg_rating FROM employees e LEFT JOIN performance_ratings p ON e.employee_id = p.employee_id GROUP BY e.employee_name HAVING AVG(p.rating) > 4.0;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM employee_performance;",
      "SELECT employee_name, training_completed FROM employee_performance;",
      "SELECT module_name, module_duration FROM training_modules;",
      "SELECT employee_id, module_id, progress_percentage FROM progress_tracking;",
      "SELECT employee_id, feedback_text FROM employee_feedback;",
      "SELECT feedback_id, rating_value FROM employee_ratings;",
      "SELECT employee_name, training_score FROM employee_performance;",
      "SELECT * FROM training_modules;",
      "SELECT * FROM progress_tracking;",
      "SELECT * FROM employee_feedback;",
      "SELECT * FROM employee_ratings;",
      "SELECT employee_name, training_completed, training_score FROM employee_performance;",
      "SELECT module_id, module_name, module_duration FROM training_modules;",
      "SELECT employee_id, module_id, last_updated FROM progress_tracking;",
      "SELECT feedback_id, employee_id, feedback_text FROM employee_feedback;",
      "SELECT rating_id, employee_id, rating_value FROM employee_ratings;",
      "SELECT DISTINCT employee_name FROM employee_performance;",
      "SELECT module_name, MAX(module_duration) AS longest_duration FROM training_modules GROUP BY module_name;",
      "SELECT AVG(progress_percentage) AS avg_progress FROM progress_tracking;",
      "SELECT COUNT(feedback_id) AS feedback_count FROM employee_feedback;",
      "SELECT SUM(rating_value) AS total_rating FROM employee_ratings;",
      "SELECT * FROM employee_performance;",
      "SELECT employee_name, training_score FROM employee_performance;",
      "SELECT employee_name, training_completed FROM employee_performance WHERE training_score > 80;",
      "SELECT * FROM training_modules WHERE module_duration > 10;",
      "SELECT employee_name, module_name, progress_percentage FROM employee_performance JOIN progress_tracking ON employee_performance.employee_id = progress_tracking.employee_id;",
      "SELECT * FROM progress_tracking WHERE progress_percentage = 100;",
      "SELECT employee_name, feedback_text FROM employee_performance JOIN employee_feedback ON employee_performance.employee_id = employee_feedback.employee_id;",
      "SELECT employee_name, module_name, last_updated FROM employee_performance JOIN progress_tracking ON employee_performance.employee_id = progress_tracking.employee_id;",
      "SELECT employee_name, module_name, feedback_text FROM employee_performance JOIN progress_tracking ON employee_performance.employee_id = progress_tracking.employee_id JOIN employee_feedback ON employee_performance.employee_id = employee_feedback.employee_id;",
      "SELECT employee_name, training_score, rating_value FROM employee_performance JOIN employee_ratings ON employee_performance.employee_id = employee_ratings.employee_id;",
      "SELECT module_name, module_duration, progress_percentage FROM training_modules JOIN progress_tracking ON training_modules.module_id = progress_tracking.module_id;",
      "SELECT employee_name, module_name, feedback_text FROM employee_performance JOIN progress_tracking ON employee_performance.employee_id = progress_tracking.employee_id JOIN employee_feedback ON employee_performance.employee_id = employee_feedback.employee_id WHERE progress_percentage = 100;",
      "SELECT employee_name, module_name, last_updated FROM employee_performance JOIN progress_tracking ON employee_performance.employee_id = progress_tracking.employee_id WHERE progress_percentage < 50;",
      "SELECT employee_name, module_name, feedback_text FROM employee_performance JOIN progress_tracking ON employee_performance.employee_id = progress_tracking.employee_id JOIN employee_feedback ON employee_performance.employee_id = employee_feedback.employee_id WHERE progress_percentage < 50;",
      "SELECT employee_name, training_score FROM employee_performance WHERE training_score IS NOT NULL;",
      "SELECT employee_name, training_score FROM employee_performance WHERE training_score IS NULL;",
      "SELECT module_name, module_duration, progress_percentage, last_updated FROM training_modules JOIN progress_tracking ON training_modules.module_id = progress_tracking.module_id;",
      "SELECT employee_name, feedback_text FROM employee_performance JOIN employee_feedback ON employee_performance.employee_id = employee_feedback.employee_id WHERE CHAR_LENGTH(feedback_text) > 50;",
      "SELECT employee_name, training_completed, training_score, module_name, progress_percentage, last_updated, feedback_text, rating_value FROM employee_performance JOIN progress_tracking ON employee_performance.employee_id = progress_tracking.employee_id JOIN employee_feedback ON employee_performance.employee_id = employee_feedback.employee_id JOIN employee_ratings ON employee_performance.employee_id = employee_ratings.employee_id;",
      "SELECT employee_name, rating_value FROM employee_performance JOIN employee_ratings ON employee_performance.employee_id = employee_ratings.employee_id WHERE rating_value > 4;"
    ]
  }
]