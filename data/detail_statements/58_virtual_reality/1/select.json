[
  {
    "statements": [
      "SELECT * FROM StudentRecords WHERE student_id = 1",
      "SELECT student_name, enrollment_date FROM StudentRecords WHERE course_id = 2",
      "SELECT DISTINCT course_name FROM StudentRecords",
      "SELECT COUNT(*) FROM StudentRecords",
      "SELECT student_name, course_name FROM StudentRecords WHERE enrollment_date > '2022-01-01'",
      "SELECT course_id, enrollment_date FROM StudentRecords WHERE student_id = 3",
      "SELECT MAX(enrollment_date) FROM StudentRecords",
      "SELECT MIN(enrollment_date) FROM StudentRecords WHERE course_id = 4",
      "SELECT student_name, course_name FROM StudentRecords WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT AVG(course_id) FROM StudentRecords",
      "SELECT * FROM StudentRecords WHERE course_name LIKE '%Math%'",
      "SELECT student_id, student_name FROM StudentRecords WHERE enrollment_date < '2022-06-01'",
      "SELECT course_id, enrollment_date FROM StudentRecords WHERE student_name = 'John Doe'",
      "SELECT COUNT(DISTINCT student_id) FROM StudentRecords",
      "SELECT * FROM StudentRecords ORDER BY enrollment_date DESC",
      "SELECT student_name, enrollment_date FROM StudentRecords ORDER BY student_name ASC",
      "SELECT course_id, course_name FROM StudentRecords WHERE student_id = 5 ORDER BY course_name ASC",
      "SELECT student_id, course_id FROM StudentRecords WHERE student_name = 'Alice'",
      "SELECT * FROM StudentRecords LIMIT 5",
      "SELECT AVG(student_id) FROM StudentRecords",
      "SELECT student_name, course_name FROM StudentRecords WHERE enrollment_date > '2022-01-01'",
      "SELECT student_id, student_name, course_name FROM StudentRecords WHERE student_id = 123",
      "SELECT student_id, student_name, enrollment_date FROM StudentRecords WHERE course_id = 456",
      "SELECT * FROM StudentRecords WHERE course_name LIKE '%Math%'",
      "SELECT COUNT(student_id) as total_students FROM StudentRecords",
      "SELECT DISTINCT course_name FROM StudentRecords",
      "SELECT student_name, course_name FROM StudentRecords WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT student_name FROM StudentRecords WHERE course_name = 'Science' AND enrollment_date < '2022-10-15'",
      "SELECT AVG(enrollment_date) as avg_enrollment_date FROM StudentRecords",
      "SELECT student_id, student_name FROM StudentRecords WHERE course_id IN (101, 102, 103)",
      "SELECT MAX(student_id) as max_student_id FROM StudentRecords",
      "SELECT MIN(course_id) as min_course_id FROM StudentRecords",
      "SELECT student_name, enrollment_date FROM StudentRecords WHERE course_name = 'History' ORDER BY enrollment_date DESC",
      "SELECT student_id, student_name, course_name FROM StudentRecords LIMIT 10",
      "SELECT student_id, course_id, enrollment_date FROM StudentRecords WHERE student_name = 'Alice'",
      "SELECT student_id, course_id, enrollment_date FROM StudentRecords WHERE student_name = 'Bob'",
      "SELECT student_name, course_name FROM StudentRecords WHERE student_name LIKE '%A%'",
      "SELECT student_id, student_name, enrollment_date FROM StudentRecords WHERE enrollment_date < '2022-01-01'",
      "SELECT course_id, course_name FROM StudentRecords GROUP BY course_id, course_name HAVING COUNT(student_id) > 5",
      "SELECT student_name, course_name FROM StudentRecords WHERE enrollment_date = '2022-05-20'"
    ]
  },
  {
    "statements": [
      "SELECT * FROM student_records;",
      "SELECT student_id, first_name, last_name FROM student_records;",
      "SELECT student_id, first_name, last_name, enrollment_date FROM student_records WHERE student_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT * FROM learning_analytics;",
      "SELECT analytics_id, student_id, topic, quiz_score, timestamp FROM learning_analytics WHERE student_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT COUNT(*) FROM student_records;",
      "SELECT COUNT(*) FROM learning_analytics;",
      "SELECT AVG(quiz_score) FROM learning_analytics;",
      "SELECT MAX(quiz_score) FROM learning_analytics;",
      "SELECT MIN(quiz_score) FROM learning_analytics;",
      "SELECT student_id, topic, AVG(quiz_score) FROM learning_analytics GROUP BY student_id, topic;",
      "SELECT student_id, COUNT(*) FROM learning_analytics GROUP BY student_id;",
      "SELECT student_id, MAX(quiz_score) FROM learning_analytics GROUP BY student_id;",
      "SELECT student_id, MIN(quiz_score) FROM learning_analytics GROUP BY student_id;",
      "SELECT * FROM student_records INNER JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id;",
      "SELECT * FROM student_records LEFT JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id;",
      "SELECT * FROM student_records RIGHT JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id;",
      "SELECT * FROM student_records JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id WHERE topic = 'Mathematics';",
      "SELECT COUNT(*) FROM student_records WHERE enrollment_date >= '2022-01-01';",
      "SELECT student_id, AVG(quiz_score) FROM learning_analytics GROUP BY student_id HAVING AVG(quiz_score) >= 80;",
      "SELECT * FROM student_records WHERE student_id = '12345678-1234-1234-1234-123456789012';",
      "SELECT first_name, last_name FROM student_records WHERE enrollment_date > '2022-01-01';",
      "SELECT student_id, topic, quiz_score FROM learning_analytics WHERE quiz_score >= 80;",
      "SELECT * FROM student_records WHERE student_id IN (SELECT student_id FROM learning_analytics WHERE quiz_score < 60);",
      "SELECT topic, COUNT(*) AS num_attempts FROM learning_analytics GROUP BY topic;",
      "SELECT * FROM student_records INNER JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id AND learning_analytics.score >= 90;",
      "SELECT DISTINCT student_id FROM learning_analytics ORDER BY timestamp DESC;",
      "SELECT student_id, AVG(quiz_score) AS avg_score FROM learning_analytics GROUP BY student_id HAVING AVG(quiz_score) > 70;",
      "SELECT first_name, last_name FROM student_records WHERE student_id IN (SELECT student_id FROM learning_analytics GROUP BY student_id HAVING COUNT(*) > 3);",
      "SELECT topic, MAX(quiz_score) AS max_score FROM learning_analytics GROUP BY topic;",
      "SELECT student_id, COUNT(*) AS num_records FROM student_records GROUP BY student_id HAVING COUNT(*) > 1;",
      "SELECT * FROM student_records WHERE first_name LIKE 'J%';",
      "SELECT student_id, topic, quiz_score FROM learning_analytics WHERE timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT student_id, COUNT(*) AS num_attempts FROM learning_analytics GROUP BY student_id HAVING COUNT(*) >= 5;",
      "SELECT * FROM student_records WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT student_id, AVG(quiz_score) AS avg_score FROM learning_analytics GROUP BY student_id;",
      "SELECT first_name, last_name, COUNT(*) AS num_attempts FROM student_records INNER JOIN learning_analytics ON student_records.student_id = learning_analytics.student_id GROUP BY first_name, last_name;",
      "SELECT student_id, SUM(quiz_score) AS total_score FROM learning_analytics GROUP BY student_id;",
      "SELECT first_name, last_name FROM student_records WHERE student_id NOT IN (SELECT student_id FROM learning_analytics);",
      "SELECT student_id, COUNT(DISTINCT topic) AS num_topics FROM learning_analytics GROUP BY student_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT first_name, last_name FROM students;",
      "SELECT student_id, first_name, last_name FROM students WHERE enrollment_date >= '2022-01-01';",
      "SELECT * FROM courses;",
      "SELECT course_name, instructor FROM courses;",
      "SELECT course_id, course_name, start_date, end_date FROM courses WHERE start_date >= '2022-01-01';",
      "SELECT * FROM student_analytics;",
      "SELECT student_id, course_id, completion_status FROM student_analytics WHERE score >= 70;",
      "SELECT students.student_id, students.first_name, students.last_name, student_analytics.course_id, student_analytics.completion_status FROM students JOIN student_analytics ON students.student_id = student_analytics.student_id;",
      "SELECT courses.course_id, courses.course_name, student_analytics.student_id, student_analytics.completion_status FROM courses JOIN student_analytics ON courses.course_id = student_analytics.course_id;",
      "SELECT students.student_id, students.first_name, students.last_name, courses.course_id, courses.course_name, student_analytics.completion_status FROM students JOIN student_analytics ON students.student_id = student_analytics.student_id JOIN courses ON student_analytics.course_id = courses.course_id;",
      "SELECT students.student_id, students.first_name, students.last_name, courses.course_id, courses.course_name, student_analytics.completion_status FROM students JOIN student_analytics ON students.student_id = student_analytics.student_id JOIN courses ON student_analytics.course_id = courses.course_id WHERE completion_status = TRUE;",
      "SELECT student_id, (SELECT first_name || ' ' || last_name FROM students WHERE students.student_id = student_analytics.student_id) AS student_name FROM student_analytics;",
      "SELECT student_id, COUNT(course_id) AS course_count FROM student_analytics GROUP BY student_id;",
      "SELECT student_id, AVG(score) AS avg_score FROM student_analytics GROUP BY student_id;",
      "SELECT course_id, COUNT(student_id) AS student_count FROM student_analytics GROUP BY course_id;",
      "SELECT course_id, AVG(score) AS avg_score FROM student_analytics GROUP BY course_id;",
      "SELECT student_id, course_id, MAX(score) AS max_score FROM student_analytics GROUP BY student_id, course_id;",
      "SELECT student_id, course_id, MIN(score) AS min_score FROM student_analytics GROUP BY student_id, course_id;",
      "SELECT student_id, course_id, SUM(score) AS total_score FROM student_analytics GROUP BY student_id, course_id;",
      "SELECT * FROM students;",
      "SELECT student_id, first_name, last_name FROM students WHERE enrollment_date >= '2021-01-01';",
      "SELECT course_name, instructor, start_date FROM courses WHERE end_date >= '2021-12-31';",
      "SELECT student_id, course_id, completion_status, score FROM student_analytics WHERE completion_status = TRUE;",
      "SELECT s.first_name, s.last_name, c.course_name FROM students s JOIN student_analytics sa ON s.student_id = sa.student_id JOIN courses c ON sa.course_id = c.course_id WHERE s.enrollment_date >= '2020-01-01';",
      "SELECT AVG(score) AS average_score FROM student_analytics WHERE completion_status = TRUE;",
      "SELECT * FROM courses WHERE instructor LIKE '%Smith%';",
      "SELECT student_id, COUNT(*) AS total_courses_completed FROM student_analytics WHERE completion_status = TRUE GROUP BY student_id;",
      "SELECT course_id, AVG(score) AS average_score FROM student_analytics WHERE completion_status = TRUE GROUP BY course_id;",
      "SELECT s.first_name, s.last_name, COUNT(sa.course_id) AS total_courses FROM students s LEFT JOIN student_analytics sa ON s.student_id = sa.student_id GROUP BY s.student_id;",
      "SELECT TOP 10 student_id, first_name, last_name FROM students ORDER BY enrollment_date DESC;",
      "SELECT course_id, course_name, instructor, AVG(score) AS average_score FROM courses c JOIN student_analytics sa ON c.course_id = sa.course_id GROUP BY course_id;",
      "SELECT COUNT(analytics_id) AS total_records FROM student_analytics;",
      "SELECT student_id, first_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_analytics WHERE completion_status = TRUE);",
      "SELECT student_id, first_name, last_name, COALESCE(score, 0) AS score FROM students LEFT JOIN student_analytics ON students.student_id = student_analytics.student_id;",
      "SELECT student_id, first_name, last_name, MAX(enrollment_date) AS latest_enrollment FROM students GROUP BY student_id;",
      "SELECT course_id, course_name, AVG(score) AS average_score FROM courses c JOIN student_analytics sa ON c.course_id = sa.course_id GROUP BY course_id HAVING AVG(score) > 80;",
      "SELECT s.first_name, s.last_name, c.course_name, sa.score FROM students s JOIN student_analytics sa ON s.student_id = sa.student_id JOIN courses c ON sa.course_id = c.course_id WHERE sa.score > 90;",
      "SELECT student_id, first_name, last_name, completion_status, CASE WHEN score >= 70 THEN 'Pass' ELSE 'Fail' END AS result FROM student_analytics;",
      "SELECT course_id, course_name, COUNT(*) AS total_students FROM courses c JOIN student_analytics sa ON c.course_id = sa.course_id GROUP BY c.course_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Student;",
      "SELECT student_id, first_name, last_name FROM Student WHERE enrollment_date > '2021-01-01';",
      "SELECT course_name, start_date, end_date FROM Course;",
      "SELECT * FROM Enrollment WHERE student_id = 1;",
      "SELECT student_id, course_id, enroll_date FROM Enrollment WHERE course_id = 2;",
      "SELECT student_id, course_id, progress FROM LearningAnalytics;",
      "SELECT student_id, course_id, TIMESTAMPdiff(hour, timestamp, NOW()) AS hours_ago FROM LearningAnalytics;",
      "SELECT student_id, progress FROM LearningAnalytics WHERE progress > 0.5;",
      "SELECT student_id, course_name, progress FROM Student s JOIN Enrollment e ON s.student_id = e.student_id JOIN Course c ON e.course_id = c.course_id JOIN LearningAnalytics la ON e.course_id = la.course_id WHERE la.progress > 0.7;",
      "SELECT student_id, course_id, MAX(progress) AS max_progress FROM LearningAnalytics GROUP BY student_id, course_id;",
      "SELECT AVG(progress) AS avg_progress FROM LearningAnalytics;",
      "SELECT student_id, course_id, COUNT(analytics_id) AS num_records FROM LearningAnalytics GROUP BY student_id, course_id;",
      "SELECT student_id, COUNT(DISTINCT course_id) AS num_courses_enrolled FROM Enrollment GROUP BY student_id;",
      "SELECT student_id, course_id, progress FROM LearningAnalytics ORDER BY progress DESC;",
      "SELECT * FROM Student WHERE first_name LIKE 'J%';",
      "SELECT student_id, course_id, progress FROM LearningAnalytics WHERE timestamp BETWEEN '2021-01-01 00:00:00' AND '2021-12-31 23:59:59';",
      "SELECT student_id, course_id, progress FROM LearningAnalytics WHERE progress IS NOT NULL;",
      "SELECT student_id, SUM(progress) AS total_progress FROM LearningAnalytics GROUP BY student_id;",
      "SELECT student_id, course_id, progress FROM LearningAnalytics WHERE timestamp > DATE_SUB(NOW(), INTERVAL 1 WEEK);",
      "SELECT first_name, last_name, email FROM Student;",
      "SELECT * FROM Student;",
      "SELECT first_name, last_name FROM Student WHERE enrollment_date > '2022-01-01';",
      "SELECT student_id, course_id FROM Enrollment WHERE enroll_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT student_id, course_name FROM Student INNER JOIN Course ON Student.student_id = Course.instructor_id;",
      "SELECT student_id, progress FROM LearningAnalytics WHERE progress > 50;",
      "SELECT student_id, COUNT(course_id) AS num_courses_enrolled FROM Enrollment GROUP BY student_id HAVING num_courses_enrolled > 3;",
      "SELECT first_name, last_name FROM Student WHERE student_id IN (SELECT student_id FROM LearningAnalytics WHERE progress > 80);",
      "SELECT student_id, course_id, MAX(progress) AS max_progress FROM LearningAnalytics GROUP BY student_id, course_id;",
      "SELECT student_id, course_id, AVG(progress) AS avg_progress FROM LearningAnalytics GROUP BY student_id, course_id HAVING avg_progress < 70;",
      "SELECT course_id, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS time_spent FROM LearningAnalytics GROUP BY course_id;",
      "SELECT student_id, MAX(progress)-MIN(progress) AS progress_change FROM LearningAnalytics GROUP BY student_id;",
      "SELECT first_name, last_name, DATEDIFF(NOW(), enrollment_date) AS days_since_enrollment FROM Student;",
      "SELECT student_id, course_id, COUNT(analytics_id) AS num_analytics_records FROM LearningAnalytics GROUP BY student_id, course_id HAVING num_analytics_records > 10;",
      "SELECT student_id, course_id, ROUND(AVG(progress), 2) AS avg_progress FROM LearningAnalytics GROUP BY student_id, course_id;",
      "SELECT student_id, course_id, MAX(progress) AS max_progress FROM LearningAnalytics GROUP BY student_id HAVING max_progress > 90;",
      "SELECT course_id, COUNT(student_id) AS num_students_enrolled FROM Enrollment GROUP BY course_id;",
      "SELECT student_id, course_id, COUNT(*) AS num_analytics_records FROM LearningAnalytics GROUP BY student_id, course_id HAVING num_analytics_records < 5;",
      "SELECT student_id, course_id, TIMESTAMPDIFF(DAY, MIN(timestamp), MAX(timestamp)) AS days_active FROM LearningAnalytics GROUP BY student_id, course_id;",
      "SELECT student_id, course_id, MAX(progress) FROM LearningAnalytics WHERE timestamp >= '2022-01-01' AND timestamp < '2023-01-01' GROUP BY student_id, course_id;",
      "SELECT student_id, course_id, HOUR(timestamp) AS hour_of_day FROM LearningAnalytics GROUP BY student_id, course_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Students;",
      "SELECT student_id, student_name, student_age FROM Students WHERE student_age > 20;",
      "SELECT student_name, student_major FROM Students WHERE student_major = 'Computer Science';",
      "SELECT * FROM Courses;",
      "SELECT course_name, course_credits FROM Courses WHERE course_credits > 3;",
      "SELECT course_name, course_department FROM Courses WHERE course_department = 'Mathematics';",
      "SELECT * FROM Enrollments;",
      "SELECT student_id, course_id FROM Enrollments WHERE student_id = 101;",
      "SELECT * FROM Assignments;",
      "SELECT course_id, assignment_name FROM Assignments WHERE assignment_due_date > '2022-12-31';",
      "SELECT * FROM Grades;",
      "SELECT enrollment_id, assignment_id, grade_score FROM Grades WHERE grade_score >= 90;",
      "SELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id;",
      "SELECT student_name, course_name, grade_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id;",
      "SELECT course_name, assignment_name, assignment_due_date FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id;",
      "SELECT course_name, assignment_name, grade_score FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id JOIN Grades ON Assignments.assignment_id = Grades.assignment_id;",
      "SELECT student_id, assignment_name, grade_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id;",
      "SELECT student_name, assignment_name, grade_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id;",
      "SELECT student_name, course_name, enrollment_date, grade_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id JOIN Courses ON Enrollments.course_id = Courses.course_id;",
      "SELECT student_name, course_name, grade_score, grade_comment FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id JOIN Courses ON Enrollments.course_id = Courses.course_id;",
      "SELECT * FROM Students WHERE student_age > 20",
      "SELECT student_name, student_major FROM Students WHERE student_age BETWEEN 18 AND 25",
      "SELECT student_name, course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id",
      "SELECT student_name, course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE student_age > 20",
      "SELECT student_name, course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE course_credits > 3",
      "SELECT student_name, course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE course_department = 'Computer Science'",
      "SELECT student_name, course_name, grade_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
      "SELECT AVG(grade_score) AS average_grade FROM Grades GROUP BY enrollment_id",
      "SELECT student_name, COALESCE(grade_score, 0) AS grade FROM Students LEFT JOIN Enrollments ON Students.student_id = Enrollments.student_id LEFT JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
      "SELECT student_name, course_name, assignment_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id",
      "SELECT student_name, course_name, assignment_name, assignment_points FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id",
      "SELECT student_name, course_name, assignment_name, assignment_points, assignment_due_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id",
      "SELECT student_name, course_name, assignment_name, assignment_points, assignment_due_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id WHERE assignment_due_date > CURRENT_DATE",
      "SELECT student_name, course_name, AVG(grade_score) AS average_grade FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Students.student_id, Courses.course_id",
      "SELECT student_name, course_name, SUM(assignment_points) AS total_points FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id GROUP BY Students.student_id, Courses.course_id",
      "SELECT course_name, COUNT(DISTINCT student_id) AS enrolled_students FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id GROUP BY Courses.course_id",
      "SELECT course_name, MIN(assignment_points) AS min_points, MAX(assignment_points) AS max_points, AVG(assignment_points) AS average_points FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id GROUP BY Courses.course_id",
      "SELECT student_name, course_name, grade_score, grade_comment FROM Students LEFT JOIN Enrollments ON Students.student_id = Enrollments.student_id LEFT JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
      "SELECT student_name, course_name, assignment_name, assignment_due_date, grade_score, grade_comment FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
      "SELECT student_name, course_name, SUM(assignment_points) AS total_points, AVG(grade_score) AS average_grade FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assignments ON Courses.course_id = Assignments.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Students.student_id, Courses.course_id"
    ]
  }
]