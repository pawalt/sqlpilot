[
  {
    "statements": [
      "SELECT * FROM account_balances LIMIT 10;",
      "SELECT account_id, balance FROM account_balances WHERE balance > 1000;",
      "SELECT AVG(balance) FROM account_balances;",
      "SELECT MAX(balance) FROM account_balances;",
      "SELECT MIN(balance) FROM account_balances;",
      "SELECT SUM(balance) FROM account_balances;",
      "SELECT COUNT(*) FROM account_balances;",
      "SELECT * FROM account_balances WHERE account_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT * FROM account_balances ORDER BY balance DESC LIMIT 5;",
      "SELECT * FROM account_balances ORDER BY balance ASC LIMIT 5;",
      "SELECT * FROM account_balances WHERE balance BETWEEN 1000 AND 5000;",
      "SELECT * FROM account_balances WHERE balance < 500;",
      "SELECT * FROM account_balances WHERE balance = 5000;",
      "SELECT * FROM account_balances WHERE balance != 0;",
      "SELECT * FROM account_balances WHERE balance IS NULL;",
      "SELECT * FROM account_balances WHERE balance IS NOT NULL;",
      "SELECT * FROM account_balances WHERE balance IN (100, 200, 300);",
      "SELECT * FROM account_balances WHERE balance NOT IN (100, 200, 300);",
      "SELECT * FROM account_balances WHERE balance LIKE '10%';",
      "SELECT * FROM account_balances WHERE balance NOT LIKE '50%';",
      "SELECT account_id, balance FROM account_balances WHERE balance > 1000",
      "SELECT account_id, balance FROM account_balances WHERE balance < 500",
      "SELECT account_id, balance FROM account_balances WHERE balance BETWEEN 500 AND 1000",
      "SELECT account_id, SUM(balance) AS total_balance FROM account_balances GROUP BY account_id",
      "SELECT account_id, AVG(balance) AS average_balance FROM account_balances GROUP BY account_id",
      "SELECT account_id, MAX(balance) AS max_balance FROM account_balances GROUP BY account_id",
      "SELECT account_id, MIN(balance) AS min_balance FROM account_balances GROUP BY account_id",
      "SELECT account_id, balance FROM account_balances ORDER BY balance DESC",
      "SELECT account_id, balance FROM account_balances ORDER BY balance ASC",
      "SELECT account_id, balance FROM account_balances WHERE account_id = '123e4567-e89b-12d3-a456-426655440000'",
      "SELECT account_id, balance FROM account_balances WHERE account_id = '123e4567-e89b-12d3-a456-426655440001'",
      "SELECT account_id, balance FROM account_balances WHERE balance >= 500 AND balance <= 1000",
      "SELECT account_id, balance FROM account_balances WHERE balance < 100 OR balance > 1000",
      "SELECT account_id, balance FROM account_balances WHERE balance = (SELECT MAX(balance) FROM account_balances)",
      "SELECT account_id, balance FROM account_balances WHERE balance = (SELECT MIN(balance) FROM account_balances)",
      "SELECT account_id, balance FROM account_balances WHERE balance = (SELECT AVG(balance) FROM account_balances)",
      "SELECT account_id, balance FROM account_balances WHERE balance IN (100, 200, 300)",
      "SELECT account_id, balance * 1.1 AS new_balance FROM account_balances",
      "SELECT account_id, balance FROM account_balances WHERE account_id LIKE '123e4567%'",
      "SELECT account_id, balance FROM account_balances WHERE account_id LIKE '%4567%'"
    ]
  },
  {
    "statements": [
      "SELECT * FROM account_balances;",
      "SELECT account_id, balance FROM account_balances;",
      "SELECT * FROM account_transactions;",
      "SELECT transaction_id, account_id, amount, timestamp FROM account_transactions;",
      "SELECT * FROM accounts;",
      "SELECT account_id, account_name, account_type FROM accounts;",
      "SELECT account_id, balance FROM account_balances WHERE account_id = 100;",
      "SELECT account_id, amount FROM account_transactions WHERE account_id = 200;",
      "SELECT account_id, account_name FROM accounts WHERE account_type = 'Savings';",
      "SELECT * FROM account_balances ORDER BY balance DESC;",
      "SELECT * FROM account_transactions ORDER BY timestamp ASC;",
      "SELECT * FROM accounts WHERE account_name LIKE 'John%';",
      "SELECT SUM(balance) FROM account_balances;",
      "SELECT account_id, AVG(amount) FROM account_transactions GROUP BY account_id;",
      "SELECT account_name, MAX(balance) AS max_balance FROM accounts GROUP BY account_name;",
      "SELECT * FROM account_transactions WHERE amount > 1000;",
      "SELECT COUNT(*) AS transaction_count FROM account_transactions;",
      "SELECT account_name, SUM(balance) AS total_balance FROM accounts JOIN account_balances USING(account_id) GROUP BY account_name;",
      "SELECT * FROM account_balances INNER JOIN account_transactions ON account_balances.account_id = account_transactions.account_id;",
      "SELECT account_id, AVG(amount) AS avg_amount FROM account_transactions WHERE amount < 0 GROUP BY account_id HAVING COUNT(*) > 5;",
      "SELECT * FROM account_balances WHERE balance > 1000",
      "SELECT account_id, balance FROM account_balances WHERE balance < 500 AND account_id IN (SELECT account_id FROM account_transactions)",
      "SELECT account_id, MAX(balance) AS max_balance FROM account_balances GROUP BY account_id HAVING max_balance > 5000",
      "SELECT * FROM accounts WHERE account_type = 'Savings' ORDER BY account_name ASC",
      "SELECT account_id, SUM(amount) AS total_amount FROM account_transactions GROUP BY account_id HAVING total_amount > 10000",
      "SELECT account_id, account_name FROM accounts JOIN account_balances ON accounts.account_id = account_balances.account_id",
      "SELECT account_id, AVG(balance) AS avg_balance FROM account_balances GROUP BY account_id HAVING avg_balance < 5000",
      "SELECT * FROM account_transactions WHERE timestamp BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT account_id, account_name, balance FROM accounts JOIN account_balances ON accounts.account_id = account_balances.account_id WHERE account_name LIKE 'John%'",
      "SELECT account_id, SUM(amount) AS total_amount FROM account_transactions WHERE account_id = 1001",
      "SELECT account_id, balance FROM account_balances WHERE balance = (SELECT MAX(balance) FROM account_balances)",
      "SELECT account_id, COUNT(transaction_id) AS transaction_count FROM account_transactions GROUP BY account_id HAVING transaction_count > 5",
      "SELECT account_id, AVG(amount) AS avg_transaction_amount FROM account_transactions GROUP BY account_id HAVING avg_transaction_amount > 500",
      "SELECT account_id, account_name FROM accounts WHERE account_id NOT IN (SELECT account_id FROM account_balances)",
      "SELECT * FROM account_balances ORDER BY balance DESC",
      "SELECT account_id, MAX(balance) - MIN(balance) AS balance_range FROM account_balances GROUP BY account_id",
      "SELECT account_id, account_name, MAX(timestamp) AS last_transaction FROM account_transactions GROUP BY account_id",
      "SELECT account_id, ABS(balance) AS absolute_balance FROM account_balances",
      "SELECT account_id, account_name, amount FROM accounts JOIN account_transactions ON accounts.account_id = account_transactions.account_id WHERE amount < 0",
      "SELECT account_id, account_name FROM accounts WHERE account_id = (SELECT account_id FROM account_balances WHERE balance = 0)"
    ]
  },
  {
    "statements": [
      "SELECT * FROM account_balances;",
      "SELECT account_id, balance FROM account_balances WHERE account_id = 1;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, account_id, amount FROM transactions WHERE account_id = 3;",
      "SELECT * FROM account_updates;",
      "SELECT update_id, account_id, new_balance FROM account_updates WHERE account_id = 2;",
      "SELECT account_id, balance FROM account_balances WHERE balance > 1000;",
      "SELECT account_id, balance FROM account_balances WHERE balance < 0;",
      "SELECT COUNT(*) FROM account_balances;",
      "SELECT AVG(balance) FROM account_balances;",
      "SELECT MAX(balance) FROM account_balances;",
      "SELECT account_id, SUM(amount) AS total_amount FROM transactions GROUP BY account_id;",
      "SELECT account_id, MAX(amount) AS largest_transaction FROM transactions GROUP BY account_id;",
      "SELECT account_id, COUNT(*) AS num_transactions FROM transactions GROUP BY account_id;",
      "SELECT transaction_id, account_id, amount, DATE_FORMAT(transaction_date, '%Y-%m-%d') AS formatted_date FROM transactions;",
      "SELECT account_id, balance, update_date FROM account_balances JOIN account_updates ON account_balances.account_id = account_updates.account_id;",
      "SELECT account_id, balance, update_date FROM account_balances LEFT JOIN account_updates ON account_balances.account_id = account_updates.account_id;",
      "SELECT account_id, balance, update_date FROM account_balances RIGHT JOIN account_updates ON account_balances.account_id = account_updates.account_id;",
      "SELECT account_id, balance, update_date FROM account_balances INNER JOIN account_updates ON account_balances.account_id = account_updates.account_id;",
      "SELECT account_id, balance, update_date FROM account_balances LEFT JOIN account_updates ON account_balances.account_id = account_updates.account_id WHERE update_date >= '2022-01-01';",
      "SELECT * FROM account_balances WHERE balance > 1000;",
      "SELECT account_id, balance FROM account_balances WHERE balance <= 5000;",
      "SELECT account_id, balance FROM account_balances WHERE balance BETWEEN 2000 AND 5000;",
      "SELECT account_id, balance FROM account_balances ORDER BY balance DESC;",
      "SELECT account_id, SUM(balance) AS total_balance FROM account_balances GROUP BY account_id;",
      "SELECT a.account_id, a.balance, t.amount FROM account_balances a JOIN transactions t ON a.account_id = t.account_id;",
      "SELECT a.account_id, a.balance, t.amount, t.transaction_date FROM account_balances a JOIN transactions t ON a.account_id = t.account_id WHERE t.amount > 1000;",
      "SELECT a.account_id, a.balance, u.new_balance FROM account_balances a JOIN account_updates u ON a.account_id = u.account_id;",
      "SELECT account_id, MAX(balance) AS max_balance FROM account_balances GROUP BY account_id;",
      "SELECT account_id, AVG(balance) AS avg_balance FROM account_balances GROUP BY account_id;",
      "SELECT account_id, COUNT(*) AS num_transactions FROM transactions GROUP BY account_id;",
      "SELECT account_id, COUNT(*) AS num_updates FROM account_updates GROUP BY account_id;",
      "SELECT a.account_id, MAX(t.amount) AS max_transaction FROM account_balances a JOIN transactions t ON a.account_id = t.account_id GROUP BY a.account_id;",
      "SELECT a.account_id, MIN(t.amount) AS min_transaction FROM account_balances a JOIN transactions t ON a.account_id = t.account_id GROUP BY a.account_id;",
      "SELECT a.account_id, t.transaction_date, AVG(t.amount) AS avg_transaction_amount FROM account_balances a JOIN transactions t ON a.account_id = t.account_id GROUP BY a.account_id, t.transaction_date;",
      "SELECT a.account_id, a.balance, t.amount, t.transaction_date, u.new_balance, u.update_date FROM account_balances a JOIN transactions t ON a.account_id = t.account_id JOIN account_updates u ON a.account_id = u.account_id WHERE t.amount > 1000 AND u.new_balance < a.balance;",
      "SELECT account_id, balance FROM account_balances WHERE account_id IN (SELECT account_id FROM transactions WHERE amount > 5000);",
      "SELECT account_id, balance FROM account_balances WHERE NOT EXISTS (SELECT * FROM transactions WHERE transactions.account_id = account_balances.account_id);",
      "SELECT account_id, balance FROM account_balances WHERE account_id = ANY (SELECT account_id FROM transactions WHERE amount > 5000);",
      "SELECT account_id, balance FROM account_balances WHERE account_id = ALL (SELECT account_id FROM account_updates WHERE new_balance < balance);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM account_balance",
      "SELECT account_id, balance FROM account_balance WHERE account_id = 1",
      "SELECT transaction_amount FROM transaction_history WHERE account_id = 2",
      "SELECT transaction_id, transaction_date FROM transaction_history WHERE transaction_date > '2022-01-01'",
      "SELECT * FROM credit_transactions",
      "SELECT credit_amount FROM credit_transactions WHERE account_id = 3",
      "SELECT * FROM debit_transactions",
      "SELECT debit_amount, debit_date FROM debit_transactions WHERE account_id = 4",
      "SELECT * FROM account_balance WHERE balance > 1000",
      "SELECT account_id FROM transaction_history WHERE transaction_amount < 0",
      "SELECT SUM(balance) AS total_balance FROM account_balance",
      "SELECT AVG(transaction_amount) AS average_transaction FROM transaction_history",
      "SELECT MAX(credit_amount) AS max_credit FROM credit_transactions",
      "SELECT MIN(debit_amount) AS min_debit FROM debit_transactions",
      "SELECT COUNT(*) AS total_transactions FROM transaction_history",
      "SELECT account_id, SUM(transaction_amount) AS total_transaction_amount FROM transaction_history GROUP BY account_id",
      "SELECT DISTINCT account_id FROM transaction_history",
      "SELECT * FROM account_balance ORDER BY balance DESC",
      "SELECT * FROM transaction_history ORDER BY transaction_date ASC",
      "SELECT * FROM credit_transactions ORDER BY credit_date DESC",
      "SELECT * FROM account_balance WHERE balance > 1000;",
      "SELECT * FROM transaction_history WHERE transaction_amount < 0;",
      "SELECT account_id, balance FROM account_balance WHERE balance < 0;",
      "SELECT account_id, transaction_amount FROM transaction_history WHERE account_id = 100;",
      "SELECT account_id, credit_amount FROM credit_transactions WHERE credit_amount BETWEEN 500 AND 1000;",
      "SELECT account_id, debit_amount FROM debit_transactions WHERE debit_amount > 2000;",
      "SELECT account_id, SUM(debit_amount) FROM debit_transactions GROUP BY account_id;",
      "SELECT account_id, AVG(credit_amount) FROM credit_transactions GROUP BY account_id;",
      "SELECT account_id, MAX(credit_amount) FROM credit_transactions GROUP BY account_id;",
      "SELECT account_id, MIN(debit_amount) FROM debit_transactions GROUP BY account_id;",
      "SELECT account_id, COUNT(transaction_id) FROM transaction_history GROUP BY account_id;",
      "SELECT account_id, SUM(credit_amount) - SUM(debit_amount) AS net_balance FROM credit_transactions JOIN debit_transactions USING(account_id) GROUP BY account_id;",
      "SELECT account_id, transaction_date FROM transaction_history WHERE account_id = (SELECT account_id FROM account_balance WHERE balance < 0);",
      "SELECT account_id, credit_amount FROM credit_transactions WHERE account_id IN (SELECT account_id FROM account_balance WHERE balance > 10000);",
      "SELECT account_id, debit_date FROM debit_transactions WHERE account_id NOT IN (SELECT account_id FROM account_balance);",
      "SELECT account_id, AVG(credit_amount) AS avg_credit, AVG(debit_amount) AS avg_debit FROM credit_transactions JOIN debit_transactions USING(account_id) GROUP BY account_id;",
      "SELECT account_id, COUNT(*) AS total_transactions FROM (SELECT transaction_id FROM transaction_history UNION ALL SELECT transaction_id FROM credit_transactions UNION ALL SELECT transaction_id FROM debit_transactions) AS all_transactions GROUP BY account_id;",
      "SELECT account_id, MAX(transaction_date) FROM transaction_history WHERE transaction_amount = (SELECT MAX(transaction_amount) FROM transaction_history);",
      "SELECT account_id, credit_amount, credit_date FROM credit_transactions WHERE credit_date > '2022-01-01' AND credit_date < '2022-03-01';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM account_balances;",
      "SELECT id, account_name, balance FROM account_balances;",
      "SELECT account_number, balance FROM account_balances WHERE balance > 1000;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, transaction_type, amount, transaction_date FROM transactions WHERE amount < 0;",
      "SELECT * FROM users;",
      "SELECT username, email FROM users;",
      "SELECT * FROM audit_logs;",
      "SELECT event, event_date FROM audit_logs WHERE event_date >= '2022-01-01';",
      "SELECT * FROM user_sessions;",
      "SELECT user_id, session_start, session_end FROM user_sessions;",
      "SELECT id, account_number, balance FROM account_balances WHERE balance < 0;",
      "SELECT * FROM transactions WHERE transaction_date >= '2022-01-01';",
      "SELECT * FROM audit_logs WHERE user_id = 1;",
      "SELECT * FROM user_sessions WHERE session_start >= '2022-01-01';",
      "SELECT account_number, SUM(balance) AS total_balance FROM account_balances GROUP BY account_number;",
      "SELECT account_number, COUNT(*) AS transaction_count FROM transactions GROUP BY account_number;",
      "SELECT user_id, COUNT(*) AS log_count FROM audit_logs GROUP BY user_id;",
      "SELECT user_id, AVG(DATEDIFF(session_end, session_start)) AS avg_session_duration FROM user_sessions GROUP BY user_id;",
      "SELECT username, email FROM users WHERE username LIKE 'j%';",
      "SELECT * FROM account_balances WHERE balance > 1000;",
      "SELECT account_name, balance FROM account_balances WHERE account_number = 12345;",
      "SELECT account_name, balance FROM account_balances WHERE balance BETWEEN 500 AND 1000;",
      "SELECT SUM(balance) AS total_balance FROM account_balances;",
      "SELECT account_name, SUM(balance) AS total_balance FROM account_balances GROUP BY account_name;",
      "SELECT COUNT(*) AS total_accounts FROM account_balances;",
      "SELECT * FROM transactions WHERE transaction_date > '2022-01-01';",
      "SELECT transaction_type, SUM(amount) AS total_amount FROM transactions GROUP BY transaction_type;",
      "SELECT *, COUNT(*) AS total_transactions FROM transactions WHERE account_number = 54321 GROUP BY transaction_type;",
      "SELECT account_name, balance FROM account_balances INNER JOIN transactions ON account_balances.account_number = transactions.account_number;",
      "SELECT u.username, a.account_name, t.amount FROM users u JOIN account_balances a ON u.user_id = a.account_number JOIN transactions t ON a.account_number = t.account_number;",
      "SELECT u.username, a.account_name, SUM(t.amount) AS total_amount FROM users u JOIN account_balances a ON u.user_id = a.account_number JOIN transactions t ON a.account_number = t.account_number GROUP BY u.username, a.account_name;",
      "SELECT a.account_name, AVG(t.amount) AS avg_amount FROM account_balances a JOIN transactions t ON a.account_number = t.account_number GROUP BY a.account_name HAVING AVG(t.amount) > 500;",
      "SELECT u.username, t.transaction_type, t.amount FROM users u LEFT JOIN transactions t ON u.user_id = t.account_number;",
      "SELECT u.username, t.transaction_type, t.amount FROM users u RIGHT JOIN transactions t ON u.user_id = t.account_number;",
      "SELECT u.username, t.transaction_type, t.amount FROM users u FULL JOIN transactions t ON u.user_id = t.account_number;",
      "SELECT u.username, COUNT(t.transaction_id) AS total_transactions FROM users u LEFT JOIN transactions t ON u.user_id = t.account_number GROUP BY u.username HAVING total_transactions > 5;",
      "SELECT u.username, COUNT(t.transaction_id) AS total_transactions FROM users u RIGHT JOIN transactions t ON u.user_id = t.account_number GROUP BY u.username HAVING total_transactions > 5;",
      "SELECT u.username, COUNT(t.transaction_id) AS total_transactions FROM users u FULL JOIN transactions t ON u.user_id = t.account_number GROUP BY u.username HAVING total_transactions > 5;",
      "SELECT u.username, MAX(t.amount) AS max_amount FROM users u LEFT JOIN transactions t ON u.user_id = t.account_number GROUP BY u.username;"
    ]
  }
]