[
  {
    "statements": [
      "SELECT * FROM currencies WHERE currency_id = 1;",
      "SELECT currency_name, exchange_rate FROM currencies WHERE country_code = 'USD';",
      "SELECT currency_id, currency_name FROM currencies WHERE exchange_rate > 1.5;",
      "SELECT * FROM currencies WHERE exchange_rate < 1.0;",
      "SELECT AVG(exchange_rate) FROM currencies;",
      "SELECT COUNT(*) FROM currencies WHERE country_code = 'EUR';",
      "SELECT MAX(exchange_rate) FROM currencies;",
      "SELECT MIN(exchange_rate) FROM currencies;",
      "SELECT currency_name FROM currencies WHERE currency_id = 3;",
      "SELECT country_code FROM currencies WHERE currency_name = 'Euro';",
      "SELECT * FROM currencies WHERE exchange_rate BETWEEN 1.0 AND 2.0;",
      "SELECT currency_id, country_code FROM currencies WHERE currency_name LIKE 'Dollar%';",
      "SELECT currency_name, exchange_rate FROM currencies ORDER BY exchange_rate DESC;",
      "SELECT DISTINCT country_code FROM currencies;",
      "SELECT * FROM currencies WHERE country_code IN ('USD', 'EUR', 'GBP');",
      "SELECT currency_name, exchange_rate FROM currencies WHERE country_code = 'JPY' OR country_code = 'CNY';",
      "SELECT * FROM currencies WHERE currency_id = 5 OR currency_id = 10;",
      "SELECT currency_name FROM currencies WHERE exchange_rate BETWEEN 1.0 AND 2.0 ORDER BY exchange_rate DESC;",
      "SELECT AVG(exchange_rate) AS average_rate FROM currencies GROUP BY country_code HAVING COUNT(*) > 1;",
      "SELECT currency_name, exchange_rate FROM currencies WHERE currency_name <> 'Pound';",
      "SELECT currency_name, country_code FROM currencies WHERE exchange_rate > 1.5",
      "SELECT * FROM currencies WHERE currency_id = 5",
      "SELECT currency_name, exchange_rate FROM currencies WHERE currency_id BETWEEN 10 AND 20",
      "SELECT COUNT(currency_id) AS total_currencies FROM currencies",
      "SELECT currency_name, exchange_rate FROM currencies WHERE country_code = 'USD' AND exchange_rate < 1.0",
      "SELECT MAX(exchange_rate) AS highest_exchange_rate FROM currencies",
      "SELECT AVG(exchange_rate) AS average_exchange_rate FROM currencies",
      "SELECT currency_name, country_code, exchange_rate FROM currencies WHERE currency_name LIKE '%Dollar%'",
      "SELECT DISTINCT country_code FROM currencies",
      "SELECT currency_name, currency_id FROM currencies WHERE currency_name IS NOT NULL",
      "SELECT currency_id, currency_name FROM currencies WHERE exchange_rate IN (1.2, 1.5, 1.8)",
      "SELECT currency_id, country_code FROM currencies WHERE exchange_rate < 1.0 ORDER BY exchange_rate DESC",
      "SELECT * FROM currencies WHERE country_code IN ('EUR', 'GBP', 'JPY')",
      "SELECT currency_name, exchange_rate FROM currencies ORDER BY exchange_rate ASC LIMIT 5",
      "SELECT COUNT(DISTINCT country_code) AS unique_countries FROM currencies",
      "SELECT currency_name, exchange_rate FROM currencies WHERE currency_name = 'Euro' AND country_code = 'EUR'",
      "SELECT AVG(exchange_rate) AS avg_rate_per_country, country_code FROM currencies GROUP BY country_code",
      "SELECT currency_name, exchange_rate FROM currencies WHERE exchange_rate BETWEEN 1.0 AND 2.0",
      "SELECT currency_id, country_code FROM currencies WHERE currency_name LIKE 'US%'",
      "SELECT currency_name, exchange_rate FROM currencies WHERE country_code = 'EUR' AND currency_id < 10"
    ]
  },
  {
    "statements": [
      "SELECT * FROM currencies;",
      "SELECT currency_code, country_name FROM currencies;",
      "SELECT currency_code, exchange_rate FROM currencies;",
      "SELECT country_name FROM currencies;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, transaction_date FROM transactions;",
      "SELECT transaction_date, amount FROM transactions;",
      "SELECT amount FROM transactions;",
      "SELECT currency_code FROM transactions;",
      "SELECT transaction_id, amount, currency_code FROM transactions;",
      "SELECT c.currency_code, c.country_name, t.amount FROM currencies c INNER JOIN transactions t ON c.currency_code = t.currency_code;",
      "SELECT c.country_name, t.transaction_date, t.amount FROM currencies c INNER JOIN transactions t ON c.currency_code = t.currency_code;",
      "SELECT c.currency_code, AVG(t.amount) as avg_amount FROM currencies c INNER JOIN transactions t ON c.currency_code = t.currency_code GROUP BY c.currency_code;",
      "SELECT c.currency_code, SUM(t.amount) as total_amount FROM currencies c INNER JOIN transactions t ON c.currency_code = t.currency_code GROUP BY c.currency_code;",
      "SELECT c.country_name, COUNT(t.transaction_id) as total_transactions FROM currencies c INNER JOIN transactions t ON c.currency_code = t.currency_code GROUP BY c.country_name;",
      "SELECT c.currency_code, t.amount FROM currencies c LEFT JOIN transactions t ON c.currency_code = t.currency_code;",
      "SELECT c.country_name, t.transaction_date, t.amount FROM currencies c LEFT JOIN transactions t ON c.currency_code = t.currency_code;",
      "SELECT * FROM currencies WHERE currency_code = 'USD';",
      "SELECT * FROM transactions WHERE amount > 100;",
      "SELECT * FROM transactions WHERE transaction_date >= '2022-01-01';",
      "SELECT currency_code, country_name FROM currencies WHERE exchange_rate > 1",
      "SELECT country_name, AVG(exchange_rate) FROM currencies GROUP BY country_name HAVING AVG(exchange_rate) < 2",
      "SELECT currency_code, SUM(amount) FROM transactions GROUP BY currency_code HAVING SUM(amount) > 1000",
      "SELECT currency_code, COUNT(transaction_id) FROM transactions GROUP BY currency_code HAVING COUNT(transaction_id) > 5",
      "SELECT * FROM currencies JOIN transactions ON currencies.currency_code = transactions.currency_code",
      "SELECT currency_code, country_name, exchange_rate FROM currencies WHERE currency_code IN ('USD', 'EUR', 'GBP')",
      "SELECT transaction_id, transaction_date, amount FROM transactions WHERE amount > 500",
      "SELECT DISTINCT currency_code FROM transactions",
      "SELECT country_name, MAX(exchange_rate) FROM currencies GROUP BY country_name",
      "SELECT currency_code, AVG(amount) FROM transactions GROUP BY currency_code HAVING AVG(amount) < 500",
      "SELECT transaction_date, SUM(amount) FROM transactions WHERE currency_code = 'JPY' GROUP BY transaction_date ORDER BY transaction_date DESC",
      "SELECT currency_code, COUNT(DISTINCT country_name) FROM currencies GROUP BY currency_code",
      "SELECT AVG(amount), MIN(amount), MAX(amount) FROM transactions",
      "SELECT country_name, SUM(amount*exchange_rate) AS total_amount FROM currencies JOIN transactions ON currencies.currency_code = transactions.currency_code GROUP BY country_name",
      "SELECT currency_code, COUNT(*) FROM transactions GROUP BY currency_code HAVING COUNT(*) > 2",
      "SELECT * FROM transactions WHERE EXTRACT(MONTH FROM transaction_date) = 10",
      "SELECT transaction_id, transaction_date, amount, country_name FROM transactions JOIN currencies ON transactions.currency_code = currencies.currency_code",
      "SELECT currency_code, country_name, AVG(exchange_rate) FROM currencies GROUP BY currency_code ORDER BY AVG(exchange_rate) DESC",
      "SELECT COUNT(transaction_id), AVG(amount), SUM(amount) FROM transactions GROUP BY currency_code HAVING AVG(amount) > 500"
    ]
  },
  {
    "statements": [
      "SELECT * FROM international_transactions;",
      "SELECT sender_name, receiver_name, amount FROM international_transactions WHERE amount > 1000;",
      "SELECT user_name, country FROM users ORDER BY country ASC;",
      "SELECT transaction_id, amount, currency_code FROM international_transactions WHERE currency_code = 'USD';",
      "SELECT sender_name, receiver_name FROM international_transactions WHERE sender_name LIKE 'A%';",
      "SELECT * FROM currency_rates WHERE exchange_rate > 1.5;",
      "SELECT user_name FROM users WHERE country = 'USA';",
      "SELECT sender_name, receiver_name, amount, currency_code FROM international_transactions ORDER BY amount DESC;",
      "SELECT user_name, preferred_currency FROM users WHERE preferred_currency = 'EUR';",
      "SELECT transaction_id, sender_name, amount, currency_code FROM international_transactions WHERE amount < 500;",
      "SELECT * FROM users WHERE user_name = 'John Doe';",
      "SELECT sender_name, receiver_name, amount, currency_code FROM international_transactions WHERE currency_code = 'EUR';",
      "SELECT * FROM currency_rates WHERE exchange_rate < 0.9;",
      "SELECT user_name, country, preferred_currency FROM users WHERE country = 'UK';",
      "SELECT sender_name, amount, currency_code FROM international_transactions WHERE sender_name = 'Alice';",
      "SELECT * FROM international_transactions WHERE amount BETWEEN 500 AND 1000;",
      "SELECT user_name FROM users WHERE country IN ('USA', 'Canada');",
      "SELECT sender_name, receiver_name, amount FROM international_transactions WHERE currency_code = 'GBP';",
      "SELECT sender_name, receiver_name FROM international_transactions WHERE sender_name = 'Bob';",
      "SELECT * FROM users WHERE preferred_currency IS NULL;",
      "SELECT * FROM international_transactions WHERE amount > 1000",
      "SELECT sender_name, receiver_name, amount FROM international_transactions WHERE currency_code = 'USD'",
      "SELECT user_name, country, preferred_currency FROM users WHERE country = 'USA'",
      "SELECT * FROM international_transactions WHERE amount > 5000 ORDER BY amount DESC",
      "SELECT sender_name, receiver_name, amount FROM international_transactions WHERE currency_code = 'EUR' AND amount BETWEEN 1000 AND 5000",
      "SELECT user_name, preferred_currency, exchange_rate FROM users JOIN currency_rates ON users.preferred_currency = currency_rates.currency_code",
      "SELECT * FROM international_transactions WHERE currency_code = 'GBP' AND amount < 500 ORDER BY amount ASC",
      "SELECT sender_name, receiver_name, amount FROM international_transactions WHERE amount > 1000 AND (sender_name = 'Alice' OR receiver_name = 'Bob')",
      "SELECT user_name, country, exchange_rate FROM users JOIN currency_rates ON users.preferred_currency = currency_rates.currency_code WHERE country = 'Germany'",
      "SELECT * FROM international_transactions WHERE amount < 100 ORDER BY transaction_id ASC"
    ]
  },
  {
    "statements": [
      "SELECT * FROM currencies;",
      "SELECT currency_code, currency_name FROM currencies;",
      "SELECT currency_code, currency_name FROM currencies WHERE currency_id = 1;",
      "SELECT currency_code, currency_name FROM currencies WHERE currency_name = 'USD';",
      "SELECT * FROM exchange_rates;",
      "SELECT from_currency_id, to_currency_id, exchange_rate FROM exchange_rates;",
      "SELECT from_currency_id, to_currency_id, exchange_rate FROM exchange_rates WHERE exchange_rate > 1;",
      "SELECT * FROM transactions;",
      "SELECT amount, from_currency_id, to_currency_id FROM transactions;",
      "SELECT amount, from_currency_id, to_currency_id FROM transactions WHERE transaction_id = 1;",
      "SELECT * FROM users;",
      "SELECT username, email FROM users;",
      "SELECT username FROM users WHERE user_id = 1;",
      "SELECT * FROM currencies JOIN exchange_rates ON currencies.currency_id = exchange_rates.from_currency_id;",
      "SELECT currencies.currency_code, exchange_rates.exchange_rate FROM currencies JOIN exchange_rates ON currencies.currency_id = exchange_rates.from_currency_id;",
      "SELECT * FROM transactions JOIN currencies ON transactions.from_currency_id = currencies.currency_id;",
      "SELECT transactions.amount, currencies.currency_name FROM transactions JOIN currencies ON transactions.from_currency_id = currencies.currency_id;",
      "SELECT * FROM transactions JOIN users ON transactions.from_currency_id = users.user_id;",
      "SELECT transactions.amount, users.username FROM transactions JOIN users ON transactions.from_currency_id = users.user_id;",
      "SELECT * FROM transactions JOIN users ON transactions.from_currency_id = users.user_id WHERE users.username = 'john_doe';",
      "SELECT * FROM currencies WHERE currency_code = 'USD';",
      "SELECT currency_name FROM currencies WHERE currency_id = 1;",
      "SELECT * FROM currencies WHERE currency_name LIKE '%Dollar%';",
      "SELECT * FROM exchange_rates WHERE exchange_rate > 1.5;",
      "SELECT * FROM exchange_rates WHERE from_currency_id = 1 AND to_currency_id = 2;",
      "SELECT * FROM exchange_rates WHERE exchange_rate < 1.0 ORDER BY exchange_rate DESC;",
      "SELECT transactions.transaction_id, transactions.amount, currencies.currency_name FROM transactions INNER JOIN currencies ON transactions.from_currency_id = currencies.currency_id;",
      "SELECT transactions.amount, currencies.currency_name, users.username FROM transactions INNER JOIN currencies ON transactions.from_currency_id = currencies.currency_id INNER JOIN users ON transactions.from_currency_id = users.user_id;",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT users.username, COUNT(transactions.transaction_id) AS transaction_count FROM users LEFT JOIN transactions ON users.user_id = transactions.from_currency_id GROUP BY users.username;",
      "SELECT currencies.currency_code, AVG(exchange_rate) AS avg_exchange_rate FROM exchange_rates INNER JOIN currencies ON exchange_rates.from_currency_id = currencies.currency_id GROUP BY currencies.currency_code;",
      "SELECT users.username, SUM(transactions.amount) AS total_amount FROM users LEFT JOIN transactions ON users.user_id = transactions.from_currency_id GROUP BY users.username HAVING SUM(transactions.amount) > 1000;",
      "SELECT * FROM exchange_rates WHERE rate_id IN (SELECT MAX(rate_id) FROM exchange_rates);",
      "SELECT currencies.currency_name, COUNT(transactions.transaction_id) AS transaction_count FROM currencies LEFT JOIN transactions ON currencies.currency_id = transactions.from_currency_id GROUP BY currencies.currency_name ORDER BY transaction_count DESC;",
      "SELECT users.username, SUM(transactions.amount) AS total_amount FROM users LEFT JOIN transactions ON users.user_id = transactions.from_currency_id WHERE transactions.transaction_date >= '2022-03-01' GROUP BY users.username HAVING SUM(transactions.amount) > 5000;",
      "SELECT * FROM currencies WHERE currency_id IN (SELECT from_currency_id FROM exchange_rates WHERE exchange_rate < 1.0);",
      "SELECT users.username, MAX(transactions.amount) AS max_amount FROM users LEFT JOIN transactions ON users.user_id = transactions.from_currency_id GROUP BY users.username ORDER BY max_amount DESC;",
      "SELECT * FROM transactions WHERE amount = (SELECT MAX(amount) FROM transactions);",
      "SELECT from_currency_id, SUM(amount) AS total_amount FROM transactions GROUP BY from_currency_id HAVING SUM(amount) > 1000;",
      "SELECT users.username, AVG(transactions.amount) AS avg_amount FROM users LEFT JOIN transactions ON users.user_id = transactions.from_currency_id GROUP BY users.username ORDER BY avg_amount DESC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM currencies;",
      "SELECT country FROM currencies;",
      "SELECT currency_code, country FROM currencies;",
      "SELECT * FROM transactions;",
      "SELECT amount FROM transactions;",
      "SELECT amount, transaction_date FROM transactions;",
      "SELECT * FROM exchange_rates;",
      "SELECT rate FROM exchange_rates;",
      "SELECT from_currency_id, to_currency_id, rate FROM exchange_rates;",
      "SELECT * FROM customers;",
      "SELECT customer_name FROM customers;",
      "SELECT customer_id, customer_name FROM customers;",
      "SELECT * FROM accounts;",
      "SELECT balance FROM accounts;",
      "SELECT customer_id, balance FROM accounts;",
      "SELECT customer_name, email FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id;",
      "SELECT customer_name, amount, balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id INNER JOIN transactions ON accounts.account_id = transactions.currency_id;",
      "SELECT c.country, t.amount, e.rate FROM currencies c INNER JOIN transactions t ON c.id = t.currency_id INNER JOIN exchange_rates e ON t.currency_id = e.from_currency_id;",
      "SELECT c.country, t.amount, e.rate FROM currencies c INNER JOIN transactions t ON c.id = t.currency_id INNER JOIN exchange_rates e ON t.from_currency_id = e.from_currency_id;",
      "SELECT * FROM currencies;",
      "SELECT currency_code, country FROM currencies WHERE id = 1;",
      "SELECT currency_code, country FROM currencies WHERE country LIKE 'U%';",
      "SELECT * FROM transactions WHERE amount > 1000;",
      "SELECT transaction_id, amount, currency_id, transaction_date FROM transactions WHERE currency_id IN (SELECT id FROM currencies WHERE country = 'USA');",
      "SELECT * FROM exchange_rates WHERE rate > 1.5;",
      "SELECT from_currency_id, to_currency_id, rate FROM exchange_rates WHERE from_currency_id = 1 AND rate < 1.0;",
      "SELECT customer_id, customer_name FROM customers WHERE email IS NULL;",
      "SELECT customer_id, customer_name, email FROM customers WHERE customer_name LIKE '%Smith%';",
      "SELECT * FROM accounts WHERE balance < 0;",
      "SELECT account_id, customer_id, balance FROM accounts WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_name = 'Alice');",
      "SELECT * FROM currencies INNER JOIN transactions ON currencies.id = transactions.currency_id;",
      "SELECT * FROM transactions INNER JOIN currencies ON transactions.currency_id = currencies.id WHERE transactions.amount > 5000;",
      "SELECT * FROM exchange_rates INNER JOIN currencies AS from_currency ON exchange_rates.from_currency_id = from_currency.id INNER JOIN currencies AS to_currency ON exchange_rates.to_currency_id = to_currency.id WHERE from_currency.country = 'USA' AND to_currency.country = 'UK';",
      "SELECT customer_id, customer_name, balance FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE balance IS NULL;",
      "SELECT customer_id, customer_name, balance FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE balance > 10000;",
      "SELECT customer_id, customer_name, balance FROM customers RIGHT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE email IS NOT NULL;",
      "SELECT customer_id, customer_name, balance FROM customers RIGHT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE email = 'john@example.com';",
      "SELECT customer_name, SUM(balance) AS total_balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_name HAVING SUM(balance) > 50000;",
      "SELECT customer_id, customer_name, AVG(balance) AS avg_balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_id HAVING AVG(balance) < 0;"
    ]
  }
]