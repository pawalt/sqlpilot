[
  {
    "statements": [
      "SELECT * FROM payments;",
      "SELECT payment_id, payment_amount FROM payments WHERE payment_status = 'SUCCESS';",
      "SELECT card_holder_name FROM payments WHERE payment_amount > 1000;",
      "SELECT * FROM payments WHERE payment_date > '2022-01-01';",
      "SELECT payment_id, payment_amount, payment_date FROM payments ORDER BY payment_date DESC;",
      "SELECT DISTINCT payment_status FROM payments;",
      "SELECT AVG(payment_amount) AS average_payment_amount FROM payments;",
      "SELECT * FROM payments WHERE card_number LIKE '****1234%';",
      "SELECT payment_id, payment_amount FROM payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT COUNT(*) AS total_payments FROM payments;",
      "SELECT payment_id, payment_amount FROM payments WHERE payment_status = 'PENDING';",
      "SELECT * FROM payments WHERE payment_amount >= 500 AND payment_amount <= 1000;",
      "SELECT payment_id, payment_amount FROM payments WHERE payment_status = 'FAILED' ORDER BY payment_amount DESC;",
      "SELECT card_holder_name, payment_amount FROM payments WHERE payment_amount > 500 ORDER BY payment_amount ASC;",
      "SELECT * FROM payments WHERE payment_status IN ('PENDING', 'PROCESSING');",
      "SELECT COUNT(DISTINCT card_number) AS unique_card_count FROM payments;",
      "SELECT payment_id, card_number, payment_amount FROM payments WHERE card_holder_name = 'John Doe';",
      "SELECT AVG(payment_amount) AS average_payment_amount FROM payments WHERE payment_status = 'SUCCESS';",
      "SELECT * FROM payments WHERE payment_date BETWEEN '2022-07-01' AND '2022-12-31';",
      "SELECT MAX(payment_amount) AS highest_payment_amount FROM payments;",
      "SELECT * FROM payments WHERE payment_amount > 1000;",
      "SELECT payment_id, card_holder_name FROM payments WHERE payment_status = 'approved';",
      "SELECT MAX(payment_amount) FROM payments;",
      "SELECT payment_date, payment_amount FROM payments WHERE card_number LIKE '1234%';",
      "SELECT AVG(payment_amount) AS average_payment FROM payments WHERE payment_status = 'completed';",
      "SELECT COUNT(*) AS total_payments FROM payments WHERE payment_status = 'pending';",
      "SELECT card_holder_name, payment_date FROM payments WHERE payment_status = 'approved' AND payment_amount > 5000;",
      "SELECT payment_id, payment_date, payment_amount FROM payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT DISTINCT card_number FROM payments;",
      "SELECT card_holder_name, SUM(payment_amount) AS total_payments FROM payments GROUP BY card_holder_name;",
      "SELECT payment_id, payment_status FROM payments WHERE payment_amount < 500 OR payment_amount > 10000;",
      "SELECT AVG(payment_amount) AS average_payment FROM payments WHERE card_holder_name LIKE '%John%';",
      "SELECT payment_id, card_holder_name, payment_status FROM payments ORDER BY payment_date DESC;",
      "SELECT payment_amount, payment_status FROM payments WHERE card_holder_name = 'Alice' AND payment_status IN ('approved', 'pending');",
      "SELECT payment_id, card_holder_name, payment_date, payment_status FROM payments WHERE card_number IN ('1234567890123456', '9876543210987654');",
      "SELECT card_holder_name, COUNT(*) AS num_payments FROM payments GROUP BY card_holder_name HAVING num_payments > 3;",
      "SELECT payment_amount, payment_status FROM payments WHERE payment_date <= CURRENT_TIMESTAMP;",
      "SELECT payment_id, payment_amount FROM payments WHERE payment_date >= '2022-03-01' AND payment_date < '2022-04-01';",
      "SELECT card_holder_name, MIN(payment_amount) AS min_payment FROM payments GROUP BY card_holder_name;",
      "SELECT payment_id, payment_amount, payment_status FROM payments WHERE payment_status <> 'rejected';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM processing_payments;",
      "SELECT payment_id, cardholder_name, payment_amount FROM processing_payments;",
      "SELECT card_number, cardholder_name FROM processing_payments WHERE payment_status = 'pending';",
      "SELECT * FROM payment_logs;",
      "SELECT log_id, log_timestamp, log_message FROM payment_logs ORDER BY log_timestamp DESC;",
      "SELECT * FROM processing_payments WHERE payment_amount > 1000;",
      "SELECT cardholder_name, card_expiry_date FROM processing_payments WHERE payment_status = 'failed';",
      "SELECT payment_id, payment_amount FROM processing_payments WHERE payment_amount < 500;",
      "SELECT * FROM processing_payments WHERE card_expiry_date > '2023-12-31';",
      "SELECT * FROM payment_logs WHERE log_timestamp BETWEEN '2022-01-01' AND '2022-03-31';",
      "SELECT card_number, cardholder_name, card_expiry_date FROM processing_payments WHERE cardholder_name LIKE '%Smith%';",
      "SELECT COUNT(*) AS total_payments FROM processing_payments;",
      "SELECT AVG(payment_amount) AS average_payment_amount FROM processing_payments;",
      "SELECT MAX(payment_amount) AS max_payment_amount FROM processing_payments;",
      "SELECT MIN(payment_amount) AS min_payment_amount FROM processing_payments;",
      "SELECT payment_id, card_number, payment_status FROM processing_payments WHERE payment_status IN ('success', 'processed');",
      "SELECT payment_id, cardholder_name FROM processing_payments WHERE card_expiry_date < '2023-01-01';",
      "SELECT card_number, card_expiry_date, payment_status FROM processing_payments WHERE card_number LIKE '1234%';",
      "SELECT log_id, log_message FROM payment_logs WHERE log_timestamp >= '2022-06-01' AND log_timestamp < '2022-07-01';",
      "SELECT COUNT(*) AS total_logs FROM payment_logs;",
      "SELECT * FROM processing_payments WHERE payment_amount > 1000;",
      "SELECT cardholder_name, payment_amount FROM processing_payments WHERE card_expiry_date < '2022-12-31';",
      "SELECT payment_id, cardholder_name FROM processing_payments WHERE payment_status = 'success';",
      "SELECT * FROM payment_logs WHERE log_timestamp > '2022-01-01 00:00:00';",
      "SELECT payment_id, log_message FROM payment_logs WHERE log_timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-06-30 23:59:59';",
      "SELECT pp.cardholder_name, pl.log_message FROM processing_payments pp JOIN payment_logs pl ON pp.payment_id = pl.payment_id;",
      "SELECT COUNT(*) AS total_payments FROM processing_payments;",
      "SELECT MIN(payment_amount) AS min_payment, MAX(payment_amount) AS max_payment FROM processing_payments;",
      "SELECT cardholder_name, SUM(payment_amount) AS total_amount FROM processing_payments GROUP BY cardholder_name;",
      "SELECT payment_status, COUNT(*) AS total_payments FROM processing_payments GROUP BY payment_status;",
      "SELECT pp.payment_id, pl.log_message FROM processing_payments pp LEFT JOIN payment_logs pl ON pp.payment_id = pl.payment_id;",
      "SELECT cardholder_name, AVG(payment_amount) AS avg_payment FROM processing_payments GROUP BY cardholder_name;",
      "SELECT * FROM processing_payments WHERE payment_status = 'pending' ORDER BY card_expiry_date ASC;",
      "SELECT DISTINCT card_number FROM processing_payments;",
      "SELECT cardholder_name, SUM(payment_amount) AS total_amount FROM processing_payments WHERE card_expiry_date < '2022-12-31' GROUP BY cardholder_name HAVING total_amount > 5000;",
      "SELECT cardholder_name, payment_amount FROM processing_payments UNION ALL SELECT cardholder_name, payment_amount FROM processing_payments;",
      "SELECT cardholder_name, payment_amount FROM processing_payments WHERE payment_status = 'failed' UNION SELECT cardholder_name, payment_amount FROM processing_payments WHERE payment_status = 'pending';",
      "SELECT * FROM processing_payments WHERE DATE(card_expiry_date) = CURRENT_DATE;",
      "SELECT cardholder_name, MAX(payment_amount) AS max_payment FROM processing_payments GROUP BY cardholder_name ORDER BY max_payment DESC;",
      "SELECT cardholder_name, COUNT(*) AS total_payments FROM processing_payments GROUP BY cardholder_name HAVING total_payments > 1;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users;",
      "SELECT user_id, username FROM users;",
      "SELECT email FROM users WHERE user_id = 1;",
      "SELECT card_id, card_number FROM cards;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, transaction_date, amount FROM transactions WHERE card_id = 1;",
      "SELECT username, email FROM users WHERE user_id = 2;",
      "SELECT card_number, expiry_date, cvv FROM cards WHERE user_id = 2;",
      "SELECT user_id, email FROM users WHERE username = 'JohnDoe';",
      "SELECT transaction_id, amount FROM transactions WHERE transaction_date >= '2022-01-01';",
      "SELECT * FROM cards WHERE card_number LIKE '1234%';",
      "SELECT card_id, expiry_date FROM cards WHERE user_id = 3;",
      "SELECT user_id, username, email FROM users WHERE user_id IN (1, 2, 3);",
      "SELECT card_id, card_number, expiry_date, cvv FROM cards WHERE expiry_date <= '2022-12-31';",
      "SELECT transaction_id, amount FROM transactions WHERE amount > 100;",
      "SELECT user_id, username FROM users WHERE email LIKE '%@gmail.com';",
      "SELECT card_id, card_number, expiry_date, cvv FROM cards WHERE card_number IN ('1234567890123456', '9876543210987654');",
      "SELECT MAX(amount) FROM transactions;",
      "SELECT user_id, username, email FROM users WHERE user_id = (SELECT user_id FROM cards WHERE card_id = 1);",
      "SELECT COUNT(*) FROM users;",
      "SELECT * FROM users WHERE user_id = 1;",
      "SELECT username, email FROM users WHERE email LIKE '%gmail.com';",
      "SELECT u.username, c.card_number FROM users u INNER JOIN cards c ON u.user_id = c.user_id;",
      "SELECT u.username, t.transaction_date, t.amount FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id;",
      "SELECT u.username, SUM(t.amount) AS total_amount FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id GROUP BY u.username;",
      "SELECT * FROM users WHERE user_id IN (SELECT user_id FROM cards);",
      "SELECT * FROM users WHERE user_id NOT IN (SELECT user_id FROM cards);",
      "SELECT u.username, COUNT(c.card_id) AS total_cards FROM users u LEFT JOIN cards c ON u.user_id = c.user_id GROUP BY u.username;",
      "SELECT u.username, COUNT(t.transaction_id) AS total_transactions FROM users u LEFT JOIN cards c ON u.user_id = c.user_id LEFT JOIN transactions t ON c.card_id = t.card_id GROUP BY u.username;",
      "SELECT u.username, AVG(t.amount) AS avg_transaction_amount FROM users u LEFT JOIN cards c ON u.user_id = c.user_id LEFT JOIN transactions t ON c.card_id = t.card_id GROUP BY u.username;",
      "SELECT u.username, MAX(t.amount) AS max_transaction_amount FROM users u LEFT JOIN cards c ON u.user_id = c.user_id LEFT JOIN transactions t ON c.card_id = t.card_id GROUP BY u.username;",
      "SELECT u.username, MIN(t.amount) AS min_transaction_amount FROM users u LEFT JOIN cards c ON u.user_id = c.user_id LEFT JOIN transactions t ON c.card_id = t.card_id GROUP BY u.username;",
      "SELECT u.username, AVG(t.amount) AS avg_transaction_amount FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id WHERE t.amount > 100 GROUP BY u.username;",
      "SELECT u.username, t.transaction_date, t.amount FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id WHERE t.amount > 100 AND u.username = 'John Doe';",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT * FROM cards WHERE card_number LIKE '1234%';",
      "SELECT * FROM transactions WHERE amount > 1000;",
      "SELECT u.username, t.transaction_date, t.amount FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id WHERE MONTH(t.transaction_date) = 10;",
      "SELECT u.username, c.card_number, DATE_PART('year', t.transaction_date) AS transaction_year FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id;",
      "SELECT username, COUNT(DISTINCT card_number) FROM users u INNER JOIN cards c ON u.user_id = c.user_id GROUP BY username;",
      "SELECT u.username, AVG(amount) AS avg_transaction_amount FROM transactions t INNER JOIN cards c ON t.card_id = c.card_id INNER JOIN users u ON c.user_id = u.user_id GROUP BY u.username;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users;",
      "SELECT username, email FROM users WHERE user_id = '1234';",
      "SELECT * FROM cards;",
      "SELECT card_number, expiration_date FROM cards WHERE user_id = '5678';",
      "SELECT * FROM transactions;",
      "SELECT amount, timestamp FROM transactions WHERE card_id = 'abcd';",
      "SELECT * FROM payments;",
      "SELECT status, payment_date FROM payments WHERE transaction_id = 'efgh';",
      "SELECT user_id, username FROM users WHERE email = 'example@example.com';",
      "SELECT transaction_id, amount FROM transactions WHERE timestamp > '2022-01-01';",
      "SELECT * FROM cards WHERE expiration_date > '2022-06-01';",
      "SELECT card_number, security_code FROM cards WHERE user_id = 'ijkl';",
      "SELECT * FROM users WHERE username LIKE 'A%';",
      "SELECT card_id, card_number FROM cards WHERE user_id = 'mnop';",
      "SELECT * FROM transactions WHERE amount > 100;",
      "SELECT payment_id, status FROM payments WHERE payment_date < '2022-07-01';",
      "SELECT * FROM users WHERE username = 'john_doe';",
      "SELECT transaction_id, amount FROM transactions WHERE timestamp < '2022-08-01';",
      "SELECT * FROM cards WHERE card_number LIKE '%1234%';",
      "SELECT payment_id, status FROM payments WHERE status = 'completed';",
      "SELECT * FROM users WHERE username = 'john_doe';",
      "SELECT u.username, c.card_number, t.amount FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id WHERE u.username = 'alice_smith' AND t.amount > 1000;",
      "SELECT p.payment_id, t.amount, p.status FROM payments p INNER JOIN transactions t ON p.transaction_id = t.transaction_id WHERE t.amount >= 5000 AND p.status = 'completed';",
      "SELECT u.username, c.card_number, t.amount, p.payment_date FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id INNER JOIN payments p ON t.transaction_id = p.transaction_id WHERE p.status = 'failed';",
      "SELECT u.username, t.amount, t.timestamp, p.status FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id LEFT JOIN payments p ON t.transaction_id = p.transaction_id WHERE t.amount < 1000;",
      "SELECT DISTINCT u.username FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id;",
      "SELECT COUNT(*) FROM users;",
      "SELECT MIN(amount) AS min_amount, MAX(amount) AS max_amount FROM transactions;",
      "SELECT AVG(amount) AS average_amount FROM transactions;",
      "SELECT u.username, COUNT(t.transaction_id) AS total_transactions FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id GROUP BY u.username HAVING COUNT(t.transaction_id) > 5;",
      "SELECT u.username, SUM(t.amount) AS total_amount FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id GROUP BY u.username HAVING SUM(t.amount) > 10000;",
      "SELECT u.username, COUNT(DISTINCT c.card_id) AS total_cards FROM users u INNER JOIN cards c ON u.user_id = c.user_id GROUP BY u.username HAVING COUNT(DISTINCT c.card_id) > 1;",
      "SELECT u.username, AVG(t.amount) AS average_amount FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id GROUP BY u.username;",
      "SELECT u.username, SUM(t.amount) AS total_amount FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id WHERE t.timestamp >= '2021-01-01' AND t.timestamp < '2022-01-01' GROUP BY u.username;",
      "SELECT u.username, COUNT(DISTINCT c.card_id) AS total_cards FROM users u INNER JOIN cards c ON u.user_id = c.user_id WHERE c.expiration_date < CURRENT_DATE();",
      "SELECT DISTINCT u.username, c.card_number FROM users u INNER JOIN cards c ON u.user_id = c.user_id WHERE u.email LIKE '%@gmail.com';",
      "SELECT u.username, c.card_number, t.amount, p.payment_date FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id LEFT JOIN payments p ON t.transaction_id = p.transaction_id WHERE p.status = 'completed';",
      "SELECT u.username, COUNT(DISTINCT c.card_id) AS total_cards FROM users u INNER JOIN cards c ON u.user_id = c.user_id WHERE c.security_code = '12345';",
      "SELECT u.username, COUNT(t.transaction_id) AS total_transactions FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id WHERE t.amount > 5000 GROUP BY u.username HAVING COUNT(t.transaction_id) > 2;",
      "SELECT u.username, SUM(t.amount) AS total_amount FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id WHERE EXTRACT(MONTH FROM t.timestamp) = 10 GROUP BY u.username;",
      "SELECT u.username, t.amount, t.timestamp FROM users u INNER JOIN cards c ON u.user_id = c.user_id INNER JOIN transactions t ON c.card_id = t.card_id WHERE EXTRACT(YEAR FROM t.timestamp) = 2021;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM payments;",
      "SELECT payment_id, cardholder_name, amount FROM payments;",
      "SELECT payment_id, payment_date FROM payments WHERE amount > 1000;",
      "SELECT * FROM customers;",
      "SELECT customer_id, customer_name, email FROM customers;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, payment_id, customer_id FROM transactions WHERE transaction_date >= '2023-01-01';",
      "SELECT * FROM fraud_detection;",
      "SELECT detection_id, transaction_id, status FROM fraud_detection WHERE status = 'pending';",
      "SELECT * FROM settlement;",
      "SELECT transaction_id, settlement_amount FROM settlement WHERE settlement_date >= '2023-01-01';",
      "SELECT payment_id, cardholder_name, amount FROM payments WHERE payment_date >= '2023-01-01';",
      "SELECT customer_id, customer_name, email FROM customers WHERE phone_number IS NULL;",
      "SELECT payment_id, card_number, cardholder_name, amount, payment_date FROM payments WHERE amount < 0;",
      "SELECT customer_id, customer_name, email, address FROM customers WHERE address LIKE '%Street%';",
      "SELECT transaction_id FROM transactions WHERE payment_id IS NULL;",
      "SELECT customer_id, customer_name, email, phone_number FROM customers WHERE customer_name LIKE 'A%';",
      "SELECT * FROM payments WHERE card_number = 123456;",
      "SELECT transaction_id, payment_id FROM transactions WHERE customer_id = 100;",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2023-01-01' AND '2023-12-31';",
      "SELECT * FROM payments WHERE amount > 1000;",
      "SELECT payment_id, cardholder_name, payment_date FROM payments WHERE payment_date >= '2022-01-01';",
      "SELECT payment_id, card_number, amount, payment_date FROM payments WHERE cardholder_name LIKE 'John%';",
      "SELECT * FROM customers WHERE customer_name = 'Alice' AND email = 'alice@example.com';",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-03-31';",
      "SELECT transaction_id, payment_id, customer_id FROM transactions WHERE customer_id IN (SELECT customer_id FROM customers WHERE address LIKE '%California%');",
      "SELECT * FROM payments INNER JOIN transactions ON payments.payment_id = transactions.payment_id WHERE payments.amount >= 5000;",
      "SELECT payment_id, cardholder_name, amount FROM payments LEFT JOIN transactions ON payments.payment_id = transactions.payment_id WHERE transactions.transaction_id IS NULL;",
      "SELECT customers.customer_id, customers.customer_name, COUNT(transactions.transaction_id) AS num_transactions FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_id, SUM(settlement_amount) AS total_settlement FROM settlement WHERE settlement_date >= '2022-01-01' GROUP BY customer_id HAVING total_settlement > 10000;",
      "SELECT payment_id, AVG(amount) AS avg_amount FROM payments GROUP BY payment_id HAVING avg_amount > 2000;",
      "SELECT customers.customer_id, customers.customer_name, COUNT(fraud_detection.detection_id) AS num_fraud_cases FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id LEFT JOIN fraud_detection ON transactions.transaction_id = fraud_detection.transaction_id GROUP BY customers.customer_id;",
      "SELECT DISTINCT payment_id, cardholder_name FROM payments WHERE payment_id IN (SELECT DISTINCT payment_id FROM transactions WHERE transaction_date >= '2022-04-01');",
      "SELECT * FROM customers WHERE phone_number IS NULL;",
      "SELECT customer_id, customer_name, settlement_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id JOIN settlement ON transactions.transaction_id = settlement.transaction_id WHERE settlement_amount > 500;",
      "SELECT customer_id, customer_name, MAX(amount) AS max_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id JOIN payments ON transactions.payment_id = payments.payment_id GROUP BY customer_id;",
      "SELECT DISTINCT customers.customer_id, customers.customer_name FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id HAVING COUNT(DISTINCT transaction_id) > 2;",
      "SELECT * FROM payments ORDER BY payment_date DESC;",
      "SELECT customer_id, customer_name, AVG(amount) AS avg_payment_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id JOIN payments ON transactions.payment_id = payments.payment_id GROUP BY customer_id ORDER BY avg_payment_amount DESC;",
      "SELECT customer_name, SUM(amount) AS total_amount_spent FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id JOIN payments ON transactions.payment_id = payments.payment_id GROUP BY customer_name ORDER BY total_amount_spent DESC;"
    ]
  }
]