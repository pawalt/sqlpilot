[
  {
    "statements": [
      "SELECT * FROM StudentBehaviorMonitoring;",
      "SELECT student_id, behavior_type FROM StudentBehaviorMonitoring;",
      "SELECT engagement_score FROM StudentBehaviorMonitoring;",
      "SELECT behavior_type, engagement_score FROM StudentBehaviorMonitoring;",
      "SELECT * FROM StudentBehaviorMonitoring WHERE student_id = 1;",
      "SELECT * FROM StudentBehaviorMonitoring WHERE behavior_type = 'Positive';",
      "SELECT * FROM StudentBehaviorMonitoring WHERE engagement_score > 80;",
      "SELECT * FROM StudentBehaviorMonitoring WHERE intervention_needed = TRUE;",
      "SELECT student_id, behavior_type, engagement_score FROM StudentBehaviorMonitoring WHERE student_id = 2;",
      "SELECT MAX(engagement_score) FROM StudentBehaviorMonitoring;",
      "SELECT MIN(engagement_score) FROM StudentBehaviorMonitoring;",
      "SELECT AVG(engagement_score) FROM StudentBehaviorMonitoring;",
      "SELECT COUNT(*) FROM StudentBehaviorMonitoring;",
      "SELECT behavior_type, COUNT(*) FROM StudentBehaviorMonitoring GROUP BY behavior_type;",
      "SELECT behavior_type, AVG(engagement_score) FROM StudentBehaviorMonitoring GROUP BY behavior_type;",
      "SELECT * FROM StudentBehaviorMonitoring ORDER BY engagement_score DESC;",
      "SELECT * FROM StudentBehaviorMonitoring ORDER BY engagement_score ASC;",
      "SELECT * FROM StudentBehaviorMonitoring LIMIT 10;",
      "SELECT * FROM StudentBehaviorMonitoring OFFSET 5;",
      "SELECT * FROM StudentBehaviorMonitoring LIMIT 5 OFFSET 10;",
      "SELECT * FROM StudentBehaviorMonitoring WHERE student_id = 123;",
      "SELECT student_id, behavior_type FROM StudentBehaviorMonitoring WHERE engagement_score > 80;",
      "SELECT student_id, engagement_score FROM StudentBehaviorMonitoring WHERE intervention_needed = TRUE;",
      "SELECT behavior_type, engagement_score FROM StudentBehaviorMonitoring WHERE student_id = 456 AND intervention_needed = FALSE;",
      "SELECT * FROM StudentBehaviorMonitoring WHERE student_id = 789 AND behavior_type = 'Disruptive';",
      "SELECT student_id, behavior_type, intervention_needed FROM StudentBehaviorMonitoring WHERE engagement_score < 60;",
      "SELECT student_id, engagement_score FROM StudentBehaviorMonitoring WHERE behavior_type LIKE '%Positive%';",
      "SELECT * FROM StudentBehaviorMonitoring WHERE behavior_type IN ('Positive Attitude', 'Negative Attitude');",
      "SELECT student_id, behavior_type, engagement_score FROM StudentBehaviorMonitoring WHERE intervention_needed = TRUE AND behavior_type = 'Disruptive';",
      "SELECT * FROM StudentBehaviorMonitoring WHERE student_id = 234 OR behavior_type = 'Absenteeism';",
      "SELECT student_id, intervention_needed FROM StudentBehaviorMonitoring WHERE engagement_score < 70 AND behavior_type = 'Disruptive';",
      "SELECT * FROM StudentBehaviorMonitoring WHERE engagement_score BETWEEN 70 AND 90;",
      "SELECT student_id, behavior_type FROM StudentBehaviorMonitoring WHERE engagement_score >= 80 AND intervention_needed = TRUE;",
      "SELECT student_id, engagement_score FROM StudentBehaviorMonitoring WHERE behavior_type = 'Positive Attitude' OR intervention_needed = FALSE;",
      "SELECT * FROM StudentBehaviorMonitoring WHERE student_id IN (567, 890);",
      "SELECT student_id, behavior_type, engagement_score FROM StudentBehaviorMonitoring WHERE behavior_type NOT LIKE '%Negative%';",
      "SELECT student_id, intervention_needed FROM StudentBehaviorMonitoring WHERE engagement_score > 50 AND behavior_type = 'Positive Attitude';",
      "SELECT * FROM StudentBehaviorMonitoring WHERE student_id = 123 AND intervention_needed = TRUE;",
      "SELECT student_id, behavior_type FROM StudentBehaviorMonitoring WHERE engagement_score < 70 OR behavior_type = 'Absenteeism';",
      "SELECT student_id, behavior_type, intervention_needed FROM StudentBehaviorMonitoring WHERE engagement_score BETWEEN 60 AND 80;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT student_name, enrollment_date FROM students;",
      "SELECT student_id, enrollment_date, engagement_score FROM students WHERE engagement_score > 50;",
      "SELECT behavior_id, student_id, behavior_type FROM student_behavior;",
      "SELECT behavior_id, behavior_date, description FROM student_behavior WHERE behavior_type='positive';",
      "SELECT student_id, behavior_type, behavior_date FROM student_behavior WHERE student_id=5;",
      "SELECT * FROM students ORDER BY student_name;",
      "SELECT student_name, enrollment_date FROM students ORDER BY enrollment_date DESC;",
      "SELECT * FROM students LIMIT 10;",
      "SELECT student_id, student_name, enrollment_date FROM students OFFSET 5;",
      "SELECT behavior_type, COUNT(*) FROM student_behavior GROUP BY behavior_type;",
      "SELECT student_name, AVG(engagement_score) FROM students GROUP BY student_name;",
      "SELECT student_id, SUM(engagement_score) FROM students GROUP BY student_id HAVING SUM(engagement_score) > 100;",
      "SELECT student_name, behavior_type, COUNT(*) FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id GROUP BY student_name, behavior_type;",
      "SELECT * FROM students WHERE enrollment_date > '2022-01-01' AND enrollment_date < '2022-06-30';",
      "SELECT * FROM student_behavior WHERE description ILIKE '%important%';",
      "SELECT * FROM students WHERE student_name LIKE 'A%';",
      "SELECT student_name, behavior_date FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id;",
      "SELECT student_id, AVG(engagement_score) AS avg_score FROM students GROUP BY student_id HAVING AVG(engagement_score) > 70;",
      "SELECT student_name, MAX(engagement_score) AS max_score FROM students GROUP BY student_name;",
      "SELECT student_name, MIN(engagement_score) AS min_score FROM students GROUP BY student_name;",
      "SELECT * FROM students WHERE student_name LIKE 'A%' ORDER BY enrollment_date DESC LIMIT 5",
      "SELECT student_id, student_name, enrollment_date FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE behavior_type = 'positive'",
      "SELECT student_id, AVG(engagement_score) AS avg_score FROM students GROUP BY student_id HAVING COUNT(*) > 3",
      "SELECT student_name, COUNT(behavior_id) AS behavior_count FROM students LEFT JOIN student_behavior ON students.student_id = student_behavior.student_id GROUP BY student_name HAVING COUNT(behavior_id) > 2",
      "SELECT DISTINCT student_name FROM students WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-06-30'",
      "SELECT student_name, AVG(engagement_score) AS avg_score FROM students WHERE engagement_score > 50 GROUP BY student_name ORDER BY avg_score DESC",
      "SELECT student_name, behavior_type, behavior_date FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE behavior_date > '2022-07-01'",
      "SELECT student_name, behavior_type, description FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE description ILIKE '%excited%'",
      "SELECT student_name, MAX(engagement_score) AS max_score FROM students GROUP BY student_name ORDER BY max_score DESC",
      "SELECT student_name, behavior_type FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE behavior_type IN ('positive', 'neutral')",
      "SELECT student_name, behavior_type, behavior_date FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE behavior_type = 'negative' AND behavior_date >= '2022-09-01'",
      "SELECT student_name, COUNT(behavior_id) AS behavior_count FROM students LEFT JOIN student_behavior ON students.student_id = student_behavior.student_id GROUP BY student_name ORDER BY behavior_count DESC",
      "SELECT student_name, AVG(engagement_score) AS avg_score FROM students WHERE enrollment_date < '2022-04-01' GROUP BY student_name HAVING AVG(engagement_score) < 60",
      "SELECT student_name, MIN(engagement_score) AS min_score FROM students WHERE engagement_score IS NOT NULL GROUP BY student_name ORDER BY min_score ASC",
      "SELECT student_name, behavior_type, behavior_date FROM students LEFT JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE student_behavior.student_id IS NULL",
      "SELECT student_name, MAX(engagement_score) AS max_score FROM students WHERE enrollment_date < '2022-08-01' GROUP BY student_name ORDER BY max_score DESC",
      "SELECT student_name, AVG(engagement_score) AS average_score FROM students WHERE student_id NOT IN (SELECT student_id FROM student_behavior)",
      "SELECT student_name, MAX(engagement_score) AS max_score FROM students WHERE student_id IN (SELECT student_id FROM student_behavior WHERE behavior_type = 'negative')",
      "SELECT DISTINCT student_name FROM students WHERE student_id IN (SELECT student_id FROM student_behavior WHERE behavior_date > '2022-10-01')",
      "SELECT student_name, COUNT(DISTINCT behavior_type) AS unique_behaviors FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id GROUP BY student_name ORDER BY unique_behaviors DESC"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT student_id, student_name, student_email FROM students;",
      "SELECT * FROM interactions;",
      "SELECT interaction_id, student_id, interaction_type FROM interactions;",
      "SELECT * FROM interventions;",
      "SELECT intervention_id, student_id, intervention_type FROM interventions;",
      "SELECT student_id, student_name, class_id FROM students WHERE class_id = 1;",
      "SELECT student_id, student_name, enrollment_date FROM students WHERE enrollment_date >= '2022-01-01';",
      "SELECT student_id, student_name, class_id, enrollment_date FROM students ORDER BY enrollment_date DESC;",
      "SELECT student_name, interaction_date, interaction_type, interaction_notes FROM students JOIN interactions ON students.student_id = interactions.student_id;",
      "SELECT student_name, intervention_date, intervention_type, intervention_description FROM students JOIN interventions ON students.student_id = interventions.student_id;",
      "SELECT student_name, interaction_type, intervention_type FROM students JOIN interactions ON students.student_id = interactions.student_id JOIN interventions ON students.student_id = interventions.student_id;",
      "SELECT student_name, interaction_date, intervention_date FROM students JOIN interactions ON students.student_id = interactions.student_id JOIN interventions ON students.student_id = interventions.student_id;",
      "SELECT student_name, intervention_type, intervention_description FROM students JOIN interventions ON students.student_id = interventions.student_id WHERE intervention_date >= '2022-01-01';",
      "SELECT student_id, COUNT(interaction_id) AS num_interactions FROM interactions GROUP BY student_id;",
      "SELECT student_id, AVG(interaction_id) AS avg_interaction_id FROM interactions GROUP BY student_id;",
      "SELECT student_id, MAX(interaction_date) AS latest_interaction_date FROM interactions GROUP BY student_id;",
      "SELECT student_id, interaction_type, COUNT(*) AS num_interactions FROM interactions GROUP BY student_id, interaction_type;",
      "SELECT intervention_type, COUNT(*) AS num_interventions FROM interventions GROUP BY intervention_type;",
      "SELECT student_name, intervention_type, intervention_date FROM students JOIN interventions ON students.student_id = interventions.student_id WHERE intervention_type = 'Counseling';",
      "SELECT * FROM students;",
      "SELECT student_id, student_name FROM students WHERE class_id = 1;",
      "SELECT student_name, enrollment_date FROM students WHERE student_id IN (1, 2, 3);",
      "SELECT student_name, interaction_date, interaction_type, interaction_notes FROM students s JOIN interactions i ON s.student_id = i.student_id;",
      "SELECT COUNT(*) AS total_students FROM students;",
      "SELECT AVG(class_id) AS average_class_id FROM students;",
      "SELECT student_id, MAX(enrollment_date) AS latest_enrollment_date FROM students;",
      "SELECT student_name, interaction_type, intervention_type FROM students s JOIN interactions i ON s.student_id = i.student_id JOIN interventions v ON s.student_id = v.student_id WHERE s.class_id = 1;",
      "SELECT student_id, COUNT(*) AS total_interactions FROM interactions GROUP BY student_id;",
      "SELECT student_name, intervention_type FROM students s JOIN interventions v ON s.student_id = v.student_id WHERE intervention_date > '2022-01-01';",
      "SELECT student_name, interaction_type, interaction_notes FROM students s JOIN interactions i ON s.student_id = i.student_id WHERE interaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT student_name, interaction_type, intervention_type FROM students s JOIN interactions i ON s.student_id = i.student_id JOIN interventions v ON s.student_id = v.student_id WHERE interaction_date < intervention_date;",
      "SELECT DISTINCT student_name FROM students;",
      "SELECT student_name AS name, class_id AS class_number FROM students;",
      "SELECT student_id, intervention_date, intervention_description FROM students s JOIN interventions v ON s.student_id = v.student_id;",
      "SELECT student_name, COUNT(*) AS total_interventions FROM students s JOIN interventions v ON s.student_id = v.student_id GROUP BY student_name;",
      "SELECT student_id, interaction_date, interaction_notes FROM interactions WHERE interaction_type = 'Meeting';",
      "SELECT student_name, intervention_type, intervention_description FROM students s JOIN interventions v ON s.student_id = v.student_id WHERE student_name LIKE '%John%';",
      "SELECT intervention_type, COUNT(*) AS total FROM interventions GROUP BY intervention_type HAVING COUNT(*) > 2;",
      "SELECT student_name, intervention_date, intervention_description FROM students s JOIN interventions v ON s.student_id = v.student_id WHERE s.class_id = 2 ORDER BY intervention_date DESC;",
      "SELECT student_name, interaction_notes FROM students s JOIN interactions i ON s.student_id = i.student_id WHERE student_id NOT IN (SELECT student_id FROM interventions);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Students;",
      "SELECT student_name, student_age FROM Students;",
      "SELECT student_name, student_grade FROM Students WHERE student_age > 20;",
      "SELECT * FROM Courses;",
      "SELECT course_name, course_teacher FROM Courses;",
      "SELECT * FROM Assignments;",
      "SELECT assignment_title, assignment_due_date FROM Assignments WHERE course_id = 1;",
      "SELECT * FROM BehaviorLogs;",
      "SELECT behavior_type, behavior_description FROM BehaviorLogs WHERE student_id = 5;",
      "SELECT student_name, behavior_type FROM Students JOIN BehaviorLogs ON Students.student_id = BehaviorLogs.student_id;",
      "SELECT course_name, assignment_title FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id;",
      "SELECT Students.student_name, Assignments.assignment_title FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id;",
      "SELECT Students.student_name, Courses.course_name FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id;",
      "SELECT student_name, MAX(assignment_score) AS max_score FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id GROUP BY student_name;",
      "SELECT course_name, AVG(assignment_score) AS avg_score FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id GROUP BY course_name;",
      "SELECT COUNT(DISTINCT course_id) AS num_courses FROM Assignments;",
      "SELECT student_name, COUNT(assignment_id) AS num_assignments FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id GROUP BY student_name;",
      "SELECT behavior_type, COUNT(*) AS num_logs FROM BehaviorLogs GROUP BY behavior_type;",
      "SELECT Students.student_name, SUM(assignment_score) AS total_score FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id GROUP BY Students.student_name;",
      "SELECT course_name, MIN(assignment_score) AS min_score FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id GROUP BY course_name;",
      "SELECT * FROM Students;",
      "SELECT student_name, student_grade FROM Students WHERE student_age > 18;",
      "SELECT course_name, course_teacher FROM Courses;",
      "SELECT assignment_title, assignment_due_date, assignment_score FROM Assignments WHERE assignment_score >= 90;",
      "SELECT student_name, Courses.course_name, assignment_title FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id;",
      "SELECT student_name, course_name, assignment_title, assignment_score FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id WHERE assignment_score < 70;",
      "SELECT student_name, behavior_type, behavior_description FROM Students JOIN BehaviorLogs ON Students.student_id = BehaviorLogs.student_id WHERE behavior_type = 'positive';",
      "SELECT Students.student_name, Courses.course_name, Assignments.assignment_title, Assignments.assignment_due_date FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id WHERE Students.student_age > 20;",
      "SELECT Students.student_name, BehaviorLogs.behavior_type, BehaviorLogs.behavior_description, BehaviorLogs.log_timestamp FROM Students JOIN BehaviorLogs ON Students.student_id = BehaviorLogs.student_id WHERE Students.student_name = 'Alice';",
      "SELECT course_name, course_description, course_teacher FROM Courses;",
      "SELECT student_name, student_grade FROM Students WHERE student_age < 18;",
      "SELECT assignment_title, assignment_due_date, assignment_score FROM Assignments WHERE assignment_due_date < CURRENT_DATE;",
      "SELECT student_name, course_name, assignment_title, assignment_score FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id WHERE Courses.course_teacher = 'Mr. Smith';",
      "SELECT student_name, behavior_type, behavior_description FROM Students JOIN BehaviorLogs ON Students.student_id = BehaviorLogs.student_id WHERE behavior_type = 'negative';",
      "SELECT Students.student_name, Courses.course_name, Assignments.assignment_title, Assignments.assignment_due_date FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id WHERE Students.student_age < 25;",
      "SELECT Students.student_name, BehaviorLogs.behavior_type, BehaviorLogs.behavior_description, BehaviorLogs.log_timestamp FROM Students JOIN BehaviorLogs ON Students.student_id = BehaviorLogs.student_id WHERE Students.student_name = 'Bob';",
      "SELECT course_name, course_description, course_teacher FROM Courses WHERE course_teacher = 'Ms. Johnson';",
      "SELECT student_name, student_grade FROM Students WHERE student_grade = 'A';",
      "SELECT assignment_title, assignment_due_date, assignment_score FROM Assignments WHERE assignment_score BETWEEN 80 AND 90;",
      "SELECT student_name, course_name, assignment_title, assignment_score FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id WHERE assignment_score > 95;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Students;",
      "SELECT student_id, student_name FROM Students;",
      "SELECT student_id, student_grade FROM Students;",
      "SELECT * FROM Courses;",
      "SELECT course_id, course_name FROM Courses;",
      "SELECT * FROM Assignments;",
      "SELECT assignment_id, course_id, assignment_name FROM Assignments;",
      "SELECT * FROM Grades;",
      "SELECT student_id, course_id, assignment_id, grade FROM Grades;",
      "SELECT * FROM Interactions;",
      "SELECT student_id, course_id, interaction_type FROM Interactions;",
      "SELECT student_name, last_login FROM Students;",
      "SELECT course_name, course_start_date FROM Courses;",
      "SELECT assignment_name, assignment_due_date FROM Assignments;",
      "SELECT grade, submission_date FROM Grades;",
      "SELECT interaction_id, interaction_date FROM Interactions;",
      "SELECT student_name, student_grade, last_login FROM Students;",
      "SELECT course_name, course_description, course_start_date, course_end_date FROM Courses;",
      "SELECT assignment_name, assignment_due_date, total_points FROM Assignments;",
      "SELECT student_id, course_id, assignment_id, grade, submission_date FROM Grades;",
      "SELECT interaction_id, student_id, course_id, interaction_type, interaction_date FROM Interactions;",
      "SELECT student_name, student_grade FROM Students WHERE student_grade > 90;",
      "SELECT student_name, course_name FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id;",
      "SELECT course_name, course_start_date, course_end_date FROM Courses WHERE course_start_date < '2022-01-01' AND course_end_date > '2022-01-01';",
      "SELECT assignment_name, total_points FROM Assignments WHERE course_id = 1;",
      "SELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id WHERE grade > 80;",
      "SELECT student_name, assignment_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Assignments ON Grades.assignment_id = Assignments.assignment_id WHERE grade < 60;",
      "SELECT COUNT(*) AS total_students FROM Students;",
      "SELECT AVG(grade) AS average_grade FROM Grades;",
      "SELECT MAX(total_points) AS max_points FROM Assignments;",
      "SELECT student_name, course_name, MAX(grade) AS highest_grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id GROUP BY student_name, course_name;",
      "SELECT course_name, COUNT(*) AS total_assignments FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id GROUP BY course_name;",
      "SELECT course_name, AVG(grade) AS average_grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id GROUP BY course_name;",
      "SELECT student_name, SUM(total_points) AS total_points FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Assignments ON Grades.assignment_id = Assignments.assignment_id GROUP BY student_name;",
      "SELECT AVG(grade) AS average_grade, course_name FROM Grades JOIN Courses ON Grades.course_id = Courses.course_id GROUP BY course_name HAVING average_grade > 70;",
      "SELECT student_name, course_name, COUNT(assignment_id) AS total_assignments FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id GROUP BY student_name, course_name;",
      "SELECT student_name, course_name, MAX(total_points) AS highest_points FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Assignments ON Grades.assignment_id = Assignments.assignment_id GROUP BY student_name, course_name;",
      "SELECT AVG(grade) AS average_grade, COUNT(*) AS total_grades FROM Grades GROUP BY average_grade;",
      "SELECT student_name, course_name, AVG(grade) AS average_grade, COUNT(*) AS total_assignments FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id GROUP BY student_name, course_name;",
      "SELECT course_name, MAX(total_points) AS max_points, AVG(grade) AS average_grade FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id JOIN Grades ON Assignments.assignment_id = Grades.assignment_id GROUP BY course_name;",
      "SELECT student_name, course_name, MAX(grade) AS highest_grade, COUNT(assignment_id) AS total_assignments FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id GROUP BY student_name, course_name;"
    ]
  }
]