[
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT student_name, grade FROM students;",
      "SELECT student_id, student_name, class_id FROM students;",
      "SELECT student_id, class_id, feedback FROM students;",
      "SELECT * FROM students WHERE grade >= 90;",
      "SELECT student_name, grade FROM students WHERE class_id = 10;",
      "SELECT student_name, grade FROM students WHERE class_id = 10 AND grade >= 80;",
      "SELECT * FROM students ORDER BY grade DESC;",
      "SELECT student_name, grade FROM students ORDER BY grade ASC;",
      "SELECT AVG(grade) AS average_grade FROM students;",
      "SELECT * FROM students WHERE feedback IS NOT NULL;",
      "SELECT student_id, student_name, grade FROM students WHERE grade BETWEEN 70 AND 80;",
      "SELECT DISTINCT class_id FROM students;",
      "SELECT COUNT(DISTINCT class_id) AS num_classes FROM students;",
      "SELECT * FROM students WHERE student_name LIKE 'J%';",
      "SELECT * FROM students WHERE student_name LIKE '%son';",
      "SELECT student_name, LENGTH(student_name) AS name_length FROM students;",
      "SELECT student_name, UPPER(student_name) AS capitalized_name FROM students;",
      "SELECT * FROM students WHERE class_id IN (1, 2, 3);",
      "SELECT * FROM students WHERE grade > (SELECT AVG(grade) FROM students);",
      "SELECT student_name, grade FROM students WHERE class_id = 1;",
      "SELECT * FROM students WHERE grade >= 80;",
      "SELECT student_id, student_name, feedback FROM students WHERE grade < 50;",
      "SELECT student_name, grade FROM students WHERE class_id = 2 AND grade BETWEEN 60 AND 70;",
      "SELECT DISTINCT class_id FROM students;",
      "SELECT student_name, class_id FROM students WHERE student_id = 100;",
      "SELECT student_id, student_name, grade FROM students WHERE feedback IS NOT NULL;",
      "SELECT student_id, student_name, class_id FROM students WHERE grade < 60;",
      "SELECT student_id, student_name FROM students WHERE feedback LIKE 'Great%';",
      "SELECT student_name, class_id FROM students WHERE feedback LIKE '%improve%';",
      "SELECT student_name, grade FROM students WHERE grade IN (70, 80, 90);",
      "SELECT student_name, grade FROM students WHERE grade NOT IN (60, 70);",
      "SELECT student_id, student_name, grade FROM students WHERE student_name LIKE '%Smith%' AND feedback LIKE '%good%';",
      "SELECT student_name FROM students WHERE grade > (SELECT AVG(grade) FROM students);",
      "SELECT student_id, student_name, class_id FROM students WHERE class_id IS NULL;",
      "SELECT COUNT(*) AS total_students FROM students;",
      "SELECT AVG(grade) AS average_grade FROM students;",
      "SELECT MAX(grade) AS highest_grade FROM students;",
      "SELECT student_name, grade, feedback FROM students ORDER BY grade DESC;",
      "SELECT student_id, student_name, grade, class_id FROM students WHERE grade > (SELECT AVG(grade) FROM students) ORDER BY student_name DESC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT name, grade FROM students;",
      "SELECT AVG(grade) AS avg_grade FROM students;",
      "SELECT * FROM students WHERE id = 5;",
      "SELECT name, grade FROM students WHERE grade > 80;",
      "SELECT name, email FROM students WHERE name LIKE 'A%';",
      "SELECT id, name, score FROM students JOIN grades ON students.id = grades.student_id;",
      "SELECT name, subject, score FROM students JOIN grades ON students.id = grades.student_id WHERE subject = 'Math';",
      "SELECT name, subject, score FROM students JOIN grades ON students.id = grades.student_id WHERE score >= 90;",
      "SELECT s.name, g.subject, g.score FROM students s JOIN grades g ON s.id = g.student_id WHERE s.grade > 85;",
      "SELECT * FROM grades;",
      "SELECT student_id, AVG(score) AS avg_score FROM grades GROUP BY student_id;",
      "SELECT subject, MAX(score) AS max_score FROM grades GROUP BY subject;",
      "SELECT student_id, COUNT(*) AS num_subjects FROM grades GROUP BY student_id;",
      "SELECT subject, COUNT(*) AS num_students FROM grades GROUP BY subject;",
      "SELECT subject, AVG(score) AS avg_score FROM grades GROUP BY subject HAVING avg_score > 85;",
      "SELECT * FROM students ORDER BY grade DESC;",
      "SELECT name, grade FROM students ORDER BY grade DESC LIMIT 5;",
      "SELECT * FROM grades ORDER BY score ASC;",
      "SELECT subject, COUNT(*) AS num_scores_above_90 FROM grades WHERE score > 90 GROUP BY subject ORDER BY num_scores_above_90 DESC LIMIT 3;",
      "SELECT * FROM students WHERE grade >= 90;",
      "SELECT students.name, grades.subject, grades.score FROM students JOIN grades ON students.id = grades.student_id WHERE grades.score >= 80;",
      "SELECT students.name, grades.subject, grades.score FROM students LEFT JOIN grades ON students.id = grades.student_id;",
      "SELECT students.name, grades.subject, AVG(grades.score) AS average_score FROM students JOIN grades ON students.id = grades.student_id GROUP BY students.name, grades.subject;",
      "SELECT students.name, MAX(grades.score) AS highest_score FROM students JOIN grades ON students.id = grades.student_id GROUP BY students.name;",
      "SELECT students.name, grades.subject, grades.feedback FROM students JOIN grades ON students.id = grades.student_id WHERE grades.feedback IS NOT NULL;",
      "SELECT students.name, grades.subject, grades.score FROM students JOIN grades ON students.id = grades.student_id WHERE grades.subject LIKE 'Math%';",
      "SELECT students.name, grades.subject, grades.score FROM students JOIN grades ON students.id = grades.student_id WHERE grades.score BETWEEN 70 AND 90;",
      "SELECT students.name, grades.subject, grades.score FROM students JOIN grades ON students.id = grades.student_id ORDER BY students.name ASC, grades.score DESC;",
      "SELECT students.name, grades.subject, grades.score FROM students JOIN grades ON students.id = grades.student_id WHERE students.name LIKE 'J%';",
      "SELECT students.name, grades.subject, grades.score FROM students JOIN grades ON students.id = grades.student_id WHERE grades.score < 60 OR grades.score > 90;",
      "SELECT students.name, grades.subject, grades.score FROM students JOIN grades ON students.id = grades.student_id WHERE grades.subject = 'Science' AND grades.score >= 80;",
      "SELECT students.name, SUM(grades.score) AS total_score FROM students JOIN grades ON students.id = grades.student_id GROUP BY students.name;",
      "SELECT students.id, students.name, COUNT(grades.subject) AS num_subjects FROM students LEFT JOIN grades ON students.id = grades.student_id GROUP BY students.id, students.name;",
      "SELECT students.name, AVG(grades.score) AS avg_score FROM students JOIN grades ON students.id = grades.student_id GROUP BY students.name HAVING AVG(grades.score) > 85;",
      "SELECT students.name, grades.subject, grades.score, grades.feedback FROM students JOIN grades ON students.id = grades.student_id LIMIT 10;",
      "SELECT students.name, grades.subject, grades.score FROM students JOIN grades ON students.id = grades.student_id WHERE grades.feedback LIKE '%improvement%';",
      "SELECT students.name, grades.subject, SUM(grades.score) AS total_score FROM students JOIN grades ON students.id = grades.student_id GROUP BY students.name HAVING SUM(grades.score) > 300;",
      "SELECT students.name, COUNT(grades.subject) AS num_subjects FROM students LEFT JOIN grades ON students.id = grades.student_id GROUP BY students.name HAVING COUNT(grades.subject) >= 3;",
      "SELECT students.name, AVG(grades.score) AS avg_score FROM students JOIN grades ON students.id = grades.student_id GROUP BY students.name ORDER BY avg_score DESC;",
      "SELECT students.name, grades.subject, grades.score, grades.feedback FROM students JOIN grades ON students.id = grades.student_id WHERE students.grade > 90;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Students;",
      "SELECT student_name, enrollment_date FROM Students;",
      "SELECT course_name, instructor FROM Courses;",
      "SELECT * FROM Grades;",
      "SELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id;",
      "SELECT student_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id WHERE grade >= 90;",
      "SELECT * FROM Students WHERE enrollment_date >= '2022-01-01';",
      "SELECT course_name, grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id WHERE grade < 70;",
      "SELECT student_name, course_name, grade, feedback FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id WHERE grade >= 80;",
      "SELECT student_name, course_name, grade, feedback FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id WHERE course_name = 'Math';",
      "SELECT COUNT(*) AS num_students FROM Students;",
      "SELECT AVG(grade) AS average_grade FROM Grades;",
      "SELECT MAX(grade) AS highest_grade FROM Grades;",
      "SELECT MIN(grade) AS lowest_grade FROM Grades;",
      "SELECT student_name, AVG(grade) AS average_grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id GROUP BY Students.student_name;",
      "SELECT course_name, COUNT(*) AS num_students FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id GROUP BY Courses.course_name;",
      "SELECT student_name, MAX(grade) AS highest_grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id GROUP BY Students.student_name;",
      "SELECT student_name, COUNT(*) AS num_courses FROM Students JOIN Grades ON Students.student_id = Grades.student_id GROUP BY Students.student_name HAVING COUNT(*) > 3;",
      "SELECT student_name, course_name, MAX(grade) AS highest_grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id GROUP BY Students.student_name, Courses.course_name;",
      "SELECT student_name, course_name, AVG(grade) AS average_grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id GROUP BY Students.student_name, Courses.course_name;",
      "SELECT * FROM Students;",
      "SELECT student_name, enrollment_date FROM Students WHERE enrollment_date > '2021-01-01';",
      "SELECT student_id, student_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id;",
      "SELECT course_name, instructor, grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id;",
      "SELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id;",
      "SELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id WHERE grade >= 80;",
      "SELECT student_name, course_name, feedback FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id WHERE feedback IS NOT NULL;",
      "SELECT student_name, AVG(grade) AS average_grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id GROUP BY student_name;",
      "SELECT course_name, AVG(grade) AS average_grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id GROUP BY course_name;",
      "SELECT student_name, COUNT(course_id) AS enrolled_courses FROM Students JOIN Grades ON Students.student_id = Grades.student_id GROUP BY student_name;",
      "SELECT instructor, COUNT(course_id) AS taught_courses FROM Courses GROUP BY instructor;",
      "SELECT student_name, course_name, grade, feedback FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id WHERE grade <= 60 AND feedback IS NULL;",
      "SELECT student_name, course_name, grade, feedback FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id WHERE grade > 90 OR feedback IS NOT NULL;",
      "SELECT student_name, course_name, grade, feedback FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id WHERE grade > 80 AND (feedback LIKE '%Excellent%' OR feedback LIKE '%Great%');",
      "SELECT course_name, COUNT(student_id) AS enrolled_students FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id GROUP BY course_name;",
      "SELECT instructor, AVG(grade) AS average_grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id GROUP BY instructor;",
      "SELECT course_name, MAX(grade) AS highest_grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id GROUP BY course_name;",
      "SELECT student_name, MIN(grade) AS lowest_grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id GROUP BY student_name;",
      "SELECT student_name, AVG(grade) AS average_grade, COUNT(course_id) AS enrolled_courses FROM Students JOIN Grades ON Students.student_id = Grades.student_id GROUP BY student_name;",
      "SELECT instructor, AVG(grade) AS average_grade, MAX(grade) AS highest_grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id GROUP BY instructor;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Students;",
      "SELECT student_name, enrollment_date FROM Students;",
      "SELECT * FROM Courses;",
      "SELECT course_name, course_description FROM Courses;",
      "SELECT * FROM Grades;",
      "SELECT student_id, course_id, grade FROM Grades;",
      "SELECT * FROM Feedback;",
      "SELECT student_id, course_id, feedback_text FROM Feedback;",
      "SELECT student_name, course_name, grade_date FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id;",
      "SELECT student_name, course_name, feedback_text FROM Students JOIN Feedback ON Students.student_id = Feedback.student_id JOIN Courses ON Courses.course_id = Feedback.course_id;",
      "SELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id WHERE grade >= 80;",
      "SELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Courses.course_id = Grades.course_id WHERE grade < 60;",
      "SELECT student_name, enrollment_date, grade_date FROM Students JOIN Grades ON Students.student_id = Grades.student_id WHERE grade >= 90;",
      "SELECT student_name, course_name, feedback_text FROM Students JOIN Feedback ON Students.student_id = Feedback.student_id JOIN Courses ON Courses.course_id = Feedback.course_id WHERE feedback_date >= '2022-01-01';",
      "SELECT COUNT(*) AS total_students FROM Students;",
      "SELECT COUNT(*) AS total_courses FROM Courses;",
      "SELECT COUNT(*) AS total_grades FROM Grades;",
      "SELECT AVG(grade) AS average_grade FROM Grades;",
      "SELECT MAX(grade) AS highest_grade FROM Grades;",
      "SELECT MIN(grade) AS lowest_grade FROM Grades;",
      "SELECT * FROM Students;",
      "SELECT student_id, student_name, enrollment_date FROM Students;",
      "SELECT student_name, enrollment_date FROM Students WHERE student_id = 1;",
      "SELECT s.student_name, c.course_name, g.grade FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id;",
      "SELECT s.student_name, c.course_name, g.grade FROM Students s, Grades g, Courses c WHERE s.student_id = g.student_id AND g.course_id = c.course_id;",
      "SELECT s.student_name, AVG(g.grade) AS average_grade FROM Students s JOIN Grades g ON s.student_id = g.student_id GROUP BY s.student_id;",
      "SELECT s.student_name, c.course_name, g.grade FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id WHERE g.grade >= 80;",
      "SELECT s.student_name, c.course_name, g.grade FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id WHERE s.student_name LIKE '%John%';",
      "SELECT s.student_name, c.course_name, g.grade FROM Students s LEFT JOIN Grades g ON s.student_id = g.student_id JOIN Courses c ON g.course_id = c.course_id;",
      "SELECT s.student_name, c.course_name, COUNT(f.feedback_id) AS feedback_count FROM Students s JOIN Feedback f ON s.student_id = f.student_id JOIN Courses c ON f.course_id = c.course_id GROUP BY s.student_id ORDER BY feedback_count DESC;",
      "SELECT s.student_name, c.course_name, g.grade FROM Students s JOIN Grades g ON s.student_id = g.student_id JOIN Courses c..."
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT student_id, student_name, course_id FROM students;",
      "SELECT student_id, student_name, course_id, grade FROM grades;",
      "SELECT course_name, instructor FROM courses;",
      "SELECT instructor_name, department FROM instructors;",
      "SELECT template_name, question_1, question_2, question_3 FROM feedback_template;",
      "SELECT student_id, student_name, course_name, grade_value FROM students INNER JOIN grades ON students.student_id = grades.student_id INNER JOIN courses ON students.course_id = courses.course_id;",
      "SELECT student_name, course_name, grade_value, feedback FROM students INNER JOIN grades ON students.student_id = grades.student_id INNER JOIN courses ON students.course_id = courses.course_id;",
      "SELECT student_name, course_name, instructor_name FROM students INNER JOIN courses ON students.course_id = courses.course_id INNER JOIN instructors ON courses.instructor = instructors.instructor_name;",
      "SELECT student_name, course_name, grade_value, feedback FROM students INNER JOIN grades ON students.student_id = grades.student_id WHERE grade_value >= 90;",
      "SELECT student_name, course_name, grade_value, feedback FROM students INNER JOIN grades ON students.student_id = grades.student_id WHERE course_id = 101;",
      "SELECT template_name, question_1 FROM feedback_template WHERE template_id = 1;",
      "SELECT student_name, course_name, grade_value, feedback FROM students INNER JOIN grades ON students.student_id = grades.student_id WHERE feedback IS NOT NULL;",
      "SELECT student_name, course_name, grade_value, feedback FROM students INNER JOIN grades ON students.student_id = grades.student_id WHERE grade_value >= 80 AND grade_value <= 90;",
      "SELECT student_id, student_name, course_name, grade_value, feedback FROM students INNER JOIN grades ON students.student_id = grades.student_id INNER JOIN courses ON students.course_id = courses.course_id WHERE grade_value >= 80;",
      "SELECT student_name, course_name, instructor_name FROM students INNER JOIN courses ON students.course_id = courses.course_id INNER JOIN instructors ON courses.instructor = instructors.instructor_name WHERE department = 'Computer Science';",
      "SELECT student_name, course_name, instructor_name FROM students INNER JOIN courses ON students.course_id = courses.course_id INNER JOIN instructors ON courses.instructor = instructors.instructor_name WHERE course_name LIKE '%Math%';",
      "SELECT student_name, course_name, instructor_name FROM students INNER JOIN courses ON students.course_id = courses.course_id INNER JOIN instructors ON courses.instructor = instructors.instructor_name WHERE instructor_name IN ('John Doe', 'Jane Smith');",
      "SELECT student_name, course_name, instructor_name FROM students INNER JOIN courses ON students.course_id = courses.course_id INNER JOIN instructors ON courses.instructor = instructors.instructor_name WHERE date_enrolled >= '2022-01-01';",
      "SELECT AVG(grade_value) AS average_grade FROM grades;",
      "SELECT COUNT(*) AS total_students FROM students;",
      "SELECT * FROM students;",
      "SELECT student_name, grade, date_enrolled FROM students WHERE grade > 90;",
      "SELECT course_name, instructor FROM courses WHERE course_id = 101;",
      "SELECT student_name, course_name, grade_value, feedback FROM students JOIN grades ON students.student_id = grades.student_id WHERE grades.grade_value < 70;",
      "SELECT student_name, course_name, grade_value, feedback FROM students JOIN grades ON students.student_id = grades.student_id WHERE grades.grade_value >= 80 AND grades.grade_value <= 90;",
      "SELECT instructor_name, department FROM instructors WHERE instructor_name LIKE 'Dr%';",
      "SELECT student_name, course_name, grade_value, feedback FROM students JOIN grades ON students.student_id = grades.student_id WHERE feedback LIKE '%improve%';",
      "SELECT AVG(grade) AS avg_grade FROM students WHERE grade IS NOT NULL;",
      "SELECT student_name, course_name, MAX(grade_value) AS highest_grade FROM students JOIN grades ON students.student_id = grades.student_id GROUP BY student_name;",
      "SELECT student_name, course_name, AVG(grade_value) AS avg_grade, MAX(grade_value) AS highest_grade FROM students JOIN grades ON students.student_id = grades.student_id GROUP BY student_name;",
      "SELECT template_name, question_1, question_2, question_3 FROM feedback_template WHERE template_id = 1;",
      "SELECT student_name, course_name, grade_value, feedback FROM students JOIN grades ON students.student_id = grades.student_id WHERE course_id = 101;",
      "SELECT student_name, course_name, grade_value, feedback FROM students JOIN grades ON students.student_id = grades.student_id WHERE date_enrolled BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT instructor_name, course_name FROM instructors JOIN courses ON instructors.instructor_name = courses.instructor;",
      "SELECT student_name, course_name, grade_value, feedback FROM students JOIN grades ON students.student_id = grades.student_id WHERE feedback IS NULL;",
      "SELECT student_name, course_name, grade_value, feedback FROM students JOIN grades ON students.student_id = grades.student_id WHERE grade_value >= 70 AND grade_value < 80;",
      "SELECT student_name, course_name, grade_value, feedback FROM students JOIN grades ON students.student_id = grades.student_id WHERE grade_value = (SELECT MAX(grade_value) FROM grades);",
      "SELECT student_name, course_name, grade_value, feedback FROM students JOIN grades ON students.student_id = grades.student_id WHERE courses.course_name = 'Mathematics';",
      "SELECT student_name, course_name, grade_value, feedback FROM students JOIN grades ON students.student_id = grades.student_id WHERE date_enrolled < (SELECT MAX(date_enrolled) FROM students);",
      "SELECT student_name, course_name, grade_value, feedback FROM students JOIN grades ON students.student_id = grades.student_id WHERE grade_value NOT IN (SELECT grade_value FROM grades WHERE grade_value < 70);"
    ]
  }
]