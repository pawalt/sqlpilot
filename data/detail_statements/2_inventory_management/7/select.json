[
  {
    "statements": [
      "SELECT * FROM Inventory WHERE category = 'Electronics';",
      "SELECT product_name, quantity FROM Inventory WHERE category = 'Clothing';",
      "SELECT id, product_name, quantity FROM Inventory WHERE category = 'Grocery';",
      "SELECT * FROM Inventory WHERE quantity > 100;",
      "SELECT id, product_name, category FROM Inventory WHERE product_name LIKE 'Apple%';",
      "SELECT * FROM Inventory WHERE quantity BETWEEN 50 AND 100;",
      "SELECT id, category FROM Inventory WHERE barcode = '12345';",
      "SELECT id, product_name, quantity FROM Inventory WHERE category = 'Toys' AND quantity < 20;",
      "SELECT * FROM Inventory WHERE category = 'Electronics' OR category = 'Appliances';",
      "SELECT COUNT(*) AS total_records FROM Inventory;",
      "SELECT MAX(quantity) AS max_quantity FROM Inventory;",
      "SELECT MIN(quantity) AS min_quantity FROM Inventory;",
      "SELECT AVG(quantity) AS average_quantity FROM Inventory;",
      "SELECT SUM(quantity) AS total_quantity FROM Inventory;",
      "SELECT id, product_name FROM Inventory WHERE quantity = (SELECT MAX(quantity) FROM Inventory);",
      "SELECT id, product_name FROM Inventory WHERE quantity = (SELECT MIN(quantity) FROM Inventory);",
      "SELECT id, product_name, quantity FROM Inventory ORDER BY quantity DESC;",
      "SELECT product_name, category FROM Inventory ORDER BY category ASC;",
      "SELECT DISTINCT category FROM Inventory;",
      "SELECT id, product_name, category FROM Inventory LIMIT 10 OFFSET 5;",
      "SELECT * FROM Inventory WHERE category = 'Electronics' AND quantity > 10",
      "SELECT * FROM Inventory WHERE quantity BETWEEN 5 AND 15",
      "SELECT product_name, quantity FROM Inventory WHERE barcode LIKE '123%'",
      "SELECT id, category FROM Inventory WHERE product_name = 'Laptop'",
      "SELECT COUNT(*) FROM Inventory WHERE category = 'Clothing'",
      "SELECT MAX(quantity) FROM Inventory WHERE category = 'Electronics'",
      "SELECT DISTINCT category FROM Inventory",
      "SELECT * FROM Inventory WHERE category = 'Grocery' ORDER BY quantity DESC",
      "SELECT product_name, category FROM Inventory WHERE quantity < 10",
      "SELECT * FROM Inventory WHERE category = 'Electronics' AND barcode IS NOT NULL",
      "SELECT id, product_name FROM Inventory WHERE quantity > 20",
      "SELECT * FROM Inventory WHERE quantity > (SELECT AVG(quantity) FROM Inventory)",
      "SELECT product_name FROM Inventory WHERE category LIKE '%tech%'",
      "SELECT id, category FROM Inventory WHERE product_name LIKE '%Shoes%'",
      "SELECT id, product_name, quantity FROM Inventory WHERE category = 'Electronics' ORDER BY quantity ASC",
      "SELECT product_name, barcode FROM Inventory WHERE category = 'Grocery' AND quantity < 5",
      "SELECT id, quantity FROM Inventory WHERE category = 'Electronics' AND quantity < 10",
      "SELECT * FROM Inventory WHERE quantity IN (10, 20, 30)",
      "SELECT product_name, SUM(quantity) AS total_quantity FROM Inventory GROUP BY product_name HAVING total_quantity > 50",
      "SELECT AVG(quantity) AS avg_quantity FROM Inventory WHERE category = 'Electronics'"
    ]
  },
  {
    "statements": [
      "SELECT * FROM inventory;",
      "SELECT product_name, quantity FROM inventory;",
      "SELECT barcode FROM inventory WHERE quantity > 0;",
      "SELECT * FROM transactions;",
      "SELECT product_id, transaction_type FROM transactions;",
      "SELECT * FROM inventory WHERE product_name = 'Apple';",
      "SELECT * FROM transactions WHERE transaction_type = 'IN';",
      "SELECT * FROM inventory WHERE quantity < 10;",
      "SELECT * FROM transactions WHERE transaction_date > '2022-01-01';",
      "SELECT MAX(quantity) FROM inventory;",
      "SELECT AVG(quantity) FROM inventory;",
      "SELECT MIN(transaction_date) FROM transactions;",
      "SELECT COUNT(*) FROM inventory;",
      "SELECT SUM(quantity) FROM inventory;",
      "SELECT product_name, barcode FROM inventory WHERE quantity >= 10;",
      "SELECT * FROM transactions ORDER BY transaction_date DESC;",
      "SELECT product_name, quantity FROM inventory ORDER BY quantity ASC;",
      "SELECT AVG(quantity) AS avg_quantity FROM inventory;",
      "SELECT product_name, quantity AS stock_level FROM inventory;",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT * FROM inventory WHERE quantity > 10;",
      "SELECT product_name, barcode FROM inventory WHERE quantity > 0;",
      "SELECT transaction_date FROM transactions WHERE transaction_type = 'IN';",
      "SELECT * FROM inventory INNER JOIN transactions ON inventory.id = transactions.product_id;",
      "SELECT COUNT(*) AS total_transactions FROM transactions WHERE transaction_type = 'OUT';",
      "SELECT product_name, SUM(quantity) AS total_quantity FROM inventory GROUP BY product_name;",
      "SELECT * FROM inventory WHERE barcode LIKE 'ABC%';",
      "SELECT transaction_date FROM transactions ORDER BY transaction_date DESC;",
      "SELECT product_name, quantity FROM inventory WHERE quantity < 5 AND barcode IS NOT NULL;",
      "SELECT DISTINCT product_name FROM inventory;",
      "SELECT AVG(quantity) AS avg_quantity FROM inventory;",
      "SELECT * FROM inventory WHERE product_name IN ('Product A', 'Product B');",
      "SELECT id, product_name, quantity FROM inventory WHERE quantity BETWEEN 10 AND 20;",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT MAX(quantity) AS max_quantity FROM inventory;",
      "SELECT product_name, SUM(quantity) AS total_quantity FROM inventory GROUP BY product_name HAVING total_quantity > 100;",
      "SELECT * FROM inventory LEFT JOIN transactions ON inventory.id = transactions.product_id;",
      "SELECT transaction_id, transaction_date FROM transactions WHERE transaction_type = 'OUT' AND transaction_date > '2022-06-01';",
      "SELECT COUNT(DISTINCT product_name) AS total_products FROM inventory;",
      "SELECT product_name, MAX(quantity) AS max_quantity FROM inventory GROUP BY product_name;",
      "SELECT * FROM transactions WHERE product_id IN (SELECT id FROM inventory WHERE quantity < 5);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM inventory_items;",
      "SELECT item_name, barcode_number FROM inventory_items;",
      "SELECT location_name FROM inventory_locations;",
      "SELECT scan_id, scan_timestamp FROM barcode_scans;",
      "SELECT item_name, location_name FROM inventory_items, inventory_locations;",
      "SELECT item_id, location_id, scan_timestamp FROM barcode_scans;",
      "SELECT * FROM inventory_items WHERE item_id = 100;",
      "SELECT item_name FROM inventory_items WHERE barcode_number = '1234567890';",
      "SELECT location_name FROM inventory_locations WHERE location_id = 10;",
      "SELECT item_name, location_name FROM inventory_items, inventory_locations WHERE inventory_items.item_id = 1 AND inventory_locations.location_id = 5;",
      "SELECT * FROM barcode_scans WHERE scan_timestamp >= '2022-01-01';",
      "SELECT item_name, location_name FROM inventory_items, inventory_locations WHERE inventory_items.item_id = barcode_scans.item_id AND inventory_locations.location_id = barcode_scans.location_id;",
      "SELECT item_name, location_name FROM inventory_items INNER JOIN barcode_scans ON inventory_items.item_id = barcode_scans.item_id INNER JOIN inventory_locations ON barcode_scans.location_id = inventory_locations.location_id;",
      "SELECT COUNT(*) FROM inventory_items;",
      "SELECT AVG(scan_id) FROM barcode_scans;",
      "SELECT MAX(location_id) FROM inventory_locations;",
      "SELECT MIN(scan_timestamp) FROM barcode_scans;",
      "SELECT DISTINCT location_name FROM inventory_locations;",
      "SELECT item_id, COUNT(scan_id) FROM barcode_scans GROUP BY item_id;",
      "SELECT item_name, COUNT(scan_id) FROM inventory_items INNER JOIN barcode_scans ON inventory_items.item_id = barcode_scans.item_id GROUP BY item_name;",
      "SELECT * FROM inventory_items WHERE item_id = 1;",
      "SELECT item_name, barcode_number FROM inventory_items WHERE item_name LIKE 'apple%';",
      "SELECT * FROM inventory_locations WHERE location_id = 10;",
      "SELECT location_name, location_address FROM inventory_locations WHERE location_name = 'Warehouse A';",
      "SELECT i.item_id, i.item_name, b.scan_timestamp FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id;",
      "SELECT l.location_name, i.item_name, b.scan_timestamp FROM inventory_locations l JOIN barcode_scans b ON l.location_id = b.location_id JOIN inventory_items i ON i.item_id = b.item_id;",
      "SELECT i.item_name, l.location_address, b.scan_timestamp FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id WHERE b.scan_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT i.item_name, COUNT(b.scan_id) AS total_scans FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id GROUP BY i.item_name ORDER BY total_scans DESC;",
      "SELECT i.item_name, l.location_name, COUNT(b.scan_id) AS total_scans FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id GROUP BY i.item_name, l.location_name;",
      "SELECT i.item_name, l.location_name, AVG(DATEDIFF(NOW(), b.scan_timestamp)) AS average_scan_age FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id GROUP BY i.item_name, l.location_name;",
      "SELECT i.item_name, l.location_name, MAX(b.scan_timestamp) AS last_scan_date FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id GROUP BY i.item_name, l.location_name ORDER BY last_scan_date DESC;",
      "SELECT i.item_name, l.location_name, MIN(b.scan_timestamp) AS first_scan_date FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id GROUP BY i.item_name, l.location_name ORDER BY first_scan_date ASC;",
      "SELECT i.item_name, l.location_name, COUNT(b.scan_id) AS total_scans, AVG(DATEDIFF(NOW(), b.scan_timestamp)) AS average_scan_age FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id GROUP BY i.item_name, l.location_name ORDER BY average_scan_age DESC;",
      "SELECT i.item_name, l.location_name, COUNT(b.scan_id) AS total_scans, AVG(DATEDIFF(NOW(), b.scan_timestamp)) AS average_scan_age FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id WHERE l.location_name = 'Warehouse B' GROUP BY i.item_name, l.location_name;",
      "SELECT i.item_name, l.location_name, COUNT(b.scan_id) AS total_scans, AVG(DATEDIFF(NOW(), b.scan_timestamp)) AS average_scan_age FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id WHERE i.item_name LIKE '%shirt%' GROUP BY i.item_name, l.location_name;",
      "SELECT i.item_name, l.location_address, b.scan_timestamp FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id WHERE l.location_address LIKE '%Street%' ORDER BY b.scan_timestamp ASC;",
      "SELECT COUNT(DISTINCT i.item_id) AS total_items_scanned FROM barcode_scans b JOIN inventory_items i ON b.item_id = i.item_id;",
      "SELECT COUNT(DISTINCT l.location_id) AS total_locations_scanned FROM barcode_scans b JOIN inventory_locations l ON b.location_id = l.location_id;",
      "SELECT i.item_name, l.location_name, DATEDIFF(NOW(), b.scan_timestamp) AS days_since_last_scan FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id ORDER BY days_since_last_scan DESC LIMIT 10;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM products;",
      "SELECT product_name, quantity FROM products;",
      "SELECT barcode, product_name FROM products WHERE quantity > 0;",
      "SELECT * FROM inventory;",
      "SELECT location, stock_level FROM inventory;",
      "SELECT barcode, location, stock_level FROM inventory WHERE stock_level < 10;",
      "SELECT * FROM transactions;",
      "SELECT transaction_type, transaction_date FROM transactions;",
      "SELECT barcode, transaction_type FROM transactions WHERE quantity_change > 0;",
      "SELECT * FROM users;",
      "SELECT username FROM users;",
      "SELECT user_id, email FROM users;",
      "SELECT user_id, email FROM users WHERE username = 'admin';",
      "SELECT product_name, quantity, location FROM products JOIN inventory ON products.barcode = inventory.barcode;",
      "SELECT username, email, transaction_type, transaction_date FROM users JOIN transactions ON users.user_id = transactions.user_id;",
      "SELECT product_name, quantity, transaction_type, transaction_date FROM products JOIN transactions ON products.barcode = transactions.barcode;",
      "SELECT product_name, quantity, transaction_type, transaction_date FROM products JOIN transactions ON products.barcode = transactions.barcode WHERE quantity < 5;",
      "SELECT product_name, quantity, location, stock_level, transaction_type FROM products JOIN inventory ON products.barcode = inventory.barcode JOIN transactions ON products.barcode = transactions.barcode;",
      "SELECT p.product_name, i.location, t.transaction_type, t.transaction_date FROM products p JOIN inventory i ON p.barcode = i.barcode JOIN transactions t ON p.barcode = t.barcode;",
      "SELECT p.product_name, i.location, t.transaction_type, t.transaction_date FROM products p JOIN inventory i ON p.barcode = i.barcode JOIN transactions t ON p.barcode = t.barcode WHERE t.transaction_type = 'sale';",
      "SELECT * FROM products;",
      "SELECT product_name, quantity FROM products WHERE quantity > 10;",
      "SELECT product_name, location, stock_level FROM products JOIN inventory ON products.barcode = inventory.barcode;",
      "SELECT user_id, username, email FROM users WHERE username = 'john_doe';",
      "SELECT product_name, transaction_type, transaction_date FROM products JOIN transactions ON products.barcode = transactions.barcode WHERE transaction_date > '2022-01-01' ORDER BY transaction_date DESC;",
      "SELECT barcode, quantity_change FROM transactions WHERE quantity_change < 0;",
      "SELECT product_name, location, stock_level FROM products JOIN inventory ON products.barcode = inventory.barcode WHERE stock_level < 10;",
      "SELECT SUM(quantity_change) AS total_changes FROM transactions WHERE transaction_type = 'sale';",
      "SELECT COUNT(*) AS total_transactions FROM transactions;",
      "SELECT product_name, COUNT(*) AS total_transactions FROM products JOIN transactions ON products.barcode = transactions.barcode GROUP BY product_name;",
      "SELECT MAX(stock_level) AS max_stock FROM inventory;",
      "SELECT username, email FROM users WHERE user_id IN (SELECT user_id FROM transactions WHERE transaction_type = 'purchase');",
      "SELECT product_name, SUM(quantity_change) AS total_quantity_changes FROM products JOIN transactions ON products.barcode = transactions.barcode GROUP BY product_name;",
      "SELECT product_name, location, SUM(stock_level) AS total_stock FROM products JOIN inventory ON products.barcode = inventory.barcode GROUP BY product_name, location;",
      "SELECT product_name, AVG(quantity) AS avg_quantity FROM products GROUP BY product_name HAVING AVG(quantity) > 50;",
      "SELECT user_id, COUNT(*) AS total_transactions FROM users LEFT JOIN transactions ON users.user_id = transactions.user_id GROUP BY user_id HAVING COUNT(*) > 5;",
      "SELECT product_name, location, SUM(stock_level) AS total_stock FROM products JOIN inventory ON products.barcode = inventory.barcode WHERE location = 'Warehouse A' GROUP BY product_name, location;",
      "SELECT username, COUNT(*) AS total_transactions FROM users LEFT JOIN transactions ON users.user_id = transactions.user_id GROUP BY username HAVING COUNT(*) > 10;",
      "SELECT product_name, MAX(stock_level) AS max_stock_level FROM products JOIN inventory ON products.barcode = inventory.barcode GROUP BY product_name;",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM products",
      "SELECT product_id, product_name, price FROM products",
      "SELECT * FROM warehouses",
      "SELECT warehouse_id, warehouse_name, location FROM warehouses",
      "SELECT * FROM inventory",
      "SELECT inventory_id, product_id, warehouse_id, quantity FROM inventory",
      "SELECT * FROM transactions",
      "SELECT transaction_id, product_id, transaction_type, quantity FROM transactions",
      "SELECT * FROM users",
      "SELECT user_id, username, role FROM users",
      "SELECT product_name, price FROM products WHERE price > 100",
      "SELECT * FROM warehouses WHERE location LIKE '%City%'",
      "SELECT * FROM inventory WHERE quantity < 10",
      "SELECT * FROM transactions WHERE transaction_type = 'Sale'",
      "SELECT * FROM users WHERE role = 'Admin'",
      "SELECT product_name, quantity FROM products JOIN inventory ON products.product_id = inventory.product_id",
      "SELECT warehouse_name, location FROM warehouses JOIN inventory ON warehouses.warehouse_id = inventory.warehouse_id",
      "SELECT product_name, transaction_type, transaction_date FROM products JOIN transactions ON products.product_id = transactions.product_id",
      "SELECT username, role, warehouse_name FROM users JOIN warehouses ON users.user_id = warehouses.warehouse_id",
      "SELECT * FROM products LIMIT 5",
      "SELECT * FROM warehouses LIMIT 3",
      "SELECT * FROM products;",
      "SELECT product_name, price FROM products WHERE price > 100;",
      "SELECT * FROM warehouses WHERE capacity >= 100;",
      "SELECT product_name, quantity FROM products WHERE quantity < 10;",
      "SELECT product_name, barcode, price FROM products WHERE price between 50 and 100;",
      "SELECT * FROM inventory;",
      "SELECT product_name, inventory.quantity FROM products INNER JOIN inventory ON products.product_id = inventory.product_id;",
      "SELECT warehouse_name, location FROM warehouses INNER JOIN inventory ON warehouses.warehouse_id = inventory.warehouse_id;",
      "SELECT product_name, quantity, last_update FROM products JOIN inventory ON products.product_id = inventory.product_id JOIN transactions ON products.product_id = transactions.product_id;",
      "SELECT product_name, warehouse_name, quantity, transaction_type, transaction_date FROM products JOIN inventory ON products.product_id = inventory.product_id JOIN transactions ON products.product_id = transactions.product_id JOIN warehouses ON inventory.warehouse_id = warehouses.warehouse_id;",
      "SELECT product_name, transaction_type, transaction_date FROM products JOIN transactions ON products.product_id = transactions.product_id WHERE transaction_type = 'sale';",
      "SELECT warehouse_name, SUM(quantity) AS total_quantity FROM warehouses JOIN inventory ON warehouses.warehouse_id = inventory.warehouse_id GROUP BY warehouse_name;",
      "SELECT transaction_type, SUM(quantity) AS total_quantity FROM transactions GROUP BY transaction_type;",
      "SELECT warehouse_name, COUNT(transaction_id) AS transaction_count FROM warehouses JOIN transactions ON warehouses.warehouse_id = transactions.warehouse_id GROUP BY warehouse_name;",
      "SELECT username, role FROM users;",
      "SELECT * FROM products WHERE product_name LIKE '%apple%';",
      "SELECT * FROM warehouses WHERE location ILIKE '%north%';",
      "SELECT product_name, quantity FROM products WHERE quantity > (SELECT AVG(quantity) FROM products);",
      "SELECT warehouse_name, location FROM warehouses WHERE EXISTS (SELECT * FROM inventory WHERE warehouses.warehouse_id = inventory.warehouse_id);",
      "SELECT * FROM products ORDER BY price DESC;"
    ]
  }
]