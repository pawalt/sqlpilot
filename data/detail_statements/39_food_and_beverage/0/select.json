[
  {
    "statements": [
      "SELECT * FROM ingredients;",
      "SELECT ingredient_name, quantity FROM ingredients;",
      "SELECT ingredient_name, unit_of_measure FROM ingredients WHERE quantity > 10;",
      "SELECT * FROM ingredients WHERE unit_of_measure = 'g';",
      "SELECT ingredient_id, ingredient_name FROM ingredients WHERE quantity < 5;",
      "SELECT AVG(quantity) FROM ingredients;",
      "SELECT MAX(quantity), MIN(quantity) FROM ingredients;",
      "SELECT ingredient_name, SUM(quantity) FROM ingredients GROUP BY ingredient_name;",
      "SELECT * FROM ingredients ORDER BY ingredient_name ASC;",
      "SELECT * FROM ingredients ORDER BY quantity DESC;",
      "SELECT ingredient_name, MAX(quantity) FROM ingredients GROUP BY ingredient_name;",
      "SELECT COUNT(ingredient_id) FROM ingredients;",
      "SELECT * FROM ingredients WHERE ingredient_name LIKE '%sugar%';",
      "SELECT * FROM ingredients WHERE quantity BETWEEN 5 AND 10;",
      "SELECT ingredient_name, quantity, unit_of_measure FROM ingredients WHERE ingredient_id = '12345';",
      "SELECT ingredient_name, AVG(quantity) FROM ingredients GROUP BY ingredient_name HAVING AVG(quantity) > 5;",
      "SELECT * FROM ingredients LIMIT 10 OFFSET 5;",
      "SELECT DISTINCT unit_of_measure FROM ingredients;",
      "SELECT DISTINCT ingredient_name FROM ingredients;",
      "SELECT ingredient_name, quantity, unit_of_measure FROM ingredients WHERE quantity > 0 AND unit_of_measure = 'oz';",
      "SELECT * FROM ingredients WHERE quantity > 10;",
      "SELECT ingredient_name, quantity FROM ingredients WHERE unit_of_measure='oz';",
      "SELECT COUNT(*) FROM ingredients WHERE unit_of_measure='g';",
      "SELECT DISTINCT ingredient_name FROM ingredients WHERE quantity >= 5;",
      "SELECT * FROM ingredients WHERE unit_of_measure='g' ORDER BY quantity DESC;",
      "SELECT ingredient_name, SUM(quantity) AS total_quantity FROM ingredients GROUP BY ingredient_name;",
      "SELECT * FROM ingredients WHERE ingredient_name LIKE 'apple%';",
      "SELECT ingredient_name, AVG(quantity) AS avg_quantity FROM ingredients GROUP BY ingredient_name HAVING AVG(quantity) > 20;",
      "SELECT ingredient_name, MAX(quantity) AS max_quantity FROM ingredients GROUP BY ingredient_name;",
      "SELECT SUM(quantity) AS total_quantity FROM ingredients;",
      "SELECT DISTINCT unit_of_measure, COUNT(*) AS unit_count FROM ingredients GROUP BY unit_of_measure;",
      "SELECT ingredient_name, quantity * 2 AS doubled_quantity FROM ingredients WHERE ingredient_name='banana';",
      "SELECT COUNT(*) AS total_ingredients, AVG(quantity) AS avg_quantity FROM ingredients;",
      "SELECT * FROM ingredients WHERE ingredient_id IN (SELECT ingredient_id FROM recipes WHERE recipe_name='Apple Pie');",
      "SELECT ingredient_name, quantity, unit_of_measure, CASE WHEN quantity > 5 THEN 'High Quantity' ELSE 'Low Quantity' END AS quantity_type FROM ingredients;",
      "SELECT AVG(quantity) AS avg_quantity, MIN(quantity) AS min_quantity, MAX(quantity) AS max_quantity FROM ingredients;",
      "SELECT ingredient_name, SUM(quantity) AS total_quantity FROM ingredients WHERE quantity > 10 GROUP BY ingredient_name HAVING SUM(quantity) > 50;",
      "SELECT ingredient_id, ingredient_name, quantity, unit_of_measure FROM ingredients WHERE ingredient_name='tomato' OR ingredient_name='onion';",
      "SELECT ingredient_name, COUNT(*) AS ingredient_count FROM ingredients GROUP BY ingredient_name ORDER BY COUNT(*) DESC;",
      "SELECT unit_of_measure, AVG(quantity) AS avg_quantity_per_unit FROM ingredients GROUP BY unit_of_measure HAVING AVG(quantity) > 15;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM ingredients;",
      "SELECT ingredient_name, available_quantity FROM ingredients;",
      "SELECT ingredient_name, available_quantity FROM ingredients WHERE available_quantity > 0;",
      "SELECT * FROM recipes;",
      "SELECT recipe_name, serving_size FROM recipes;",
      "SELECT recipe_name, required_ingredients FROM recipes WHERE serving_size > 2;",
      "SELECT i.ingredient_name, r.recipe_name FROM ingredients i INNER JOIN recipes r ON i.ingredient_id = ANY(r.required_ingredients);",
      "SELECT i.ingredient_name, r.recipe_name FROM ingredients i LEFT JOIN recipes r ON i.ingredient_id = ANY(r.required_ingredients);",
      "SELECT i.ingredient_name, COUNT(*) AS num_recipes FROM ingredients i INNER JOIN recipes r ON i.ingredient_id = ANY(r.required_ingredients) GROUP BY i.ingredient_name;",
      "SELECT DISTINCT ingredient_name FROM ingredients;",
      "SELECT recipe_name, COUNT(*) AS num_ingredients FROM recipes GROUP BY recipe_name;",
      "SELECT ingredient_name, SUM(available_quantity) AS total_stock FROM ingredients GROUP BY ingredient_name;",
      "SELECT recipe_name, ARRAY_LENGTH(required_ingredients) AS num_required_ingredients FROM recipes;",
      "SELECT recipe_name, serving_size, ARRAY_TO_STRING(required_ingredients, ', ') AS required_ingredient_list FROM recipes;",
      "SELECT recipe_name, COUNT(*) AS num_ingredients, SUM(serving_size) AS total_serving_size FROM recipes LEFT JOIN ingredients ON ingredients.ingredient_id = ANY(recipes.required_ingredients) GROUP BY recipe_name;",
      "SELECT recipe_name, COUNT(*) AS num_ingredients, SUM(COALESCE(available_quantity, 0)) AS total_available_quantity FROM recipes LEFT JOIN ingredients ON ingredients.ingredient_id = ANY(recipes.required_ingredients) GROUP BY recipe_name;",
      "SELECT ingredient_name, available_quantity FROM ingredients WHERE ingredient_name LIKE 'A%';",
      "SELECT recipe_name, serving_size FROM recipes WHERE recipe_name ILIKE '%pasta%';",
      "SELECT recipe_name, serving_size FROM recipes ORDER BY serving_size DESC;",
      "SELECT recipe_name, serving_size FROM recipes ORDER BY serving_size ASC;",
      "SELECT ingredient_name, available_quantity FROM ingredients ORDER BY available_quantity DESC LIMIT 5;",
      "SELECT * FROM ingredients;",
      "SELECT ingredient_id, ingredient_name FROM ingredients WHERE available_quantity > 0;",
      "SELECT * FROM recipes;",
      "SELECT recipe_name, serving_size FROM recipes;",
      "SELECT COUNT(*) FROM ingredients;",
      "SELECT MAX(available_quantity) FROM ingredients;",
      "SELECT MIN(available_quantity) FROM ingredients;",
      "SELECT SUM(available_quantity) FROM ingredients;",
      "SELECT AVG(available_quantity) FROM ingredients;",
      "SELECT ingredient_name, SUM(available_quantity) AS total_quantity FROM ingredients GROUP BY ingredient_name;",
      "SELECT recipe_name, COUNT(required_ingredients) AS num_ingredients FROM recipes GROUP BY recipe_name;",
      "SELECT recipe_name, serving_size, SUM(available_quantity) AS total_available_qty FROM ingredients i INNER JOIN recipes r ON i.ingredient_name = ANY(r.required_ingredients) GROUP BY recipe_name, serving_size;",
      "SELECT * FROM ingredients WHERE ingredient_id IN (SELECT ingredient_id FROM recipes WHERE recipe_name = 'Spaghetti Bolognese');",
      "SELECT * FROM recipes WHERE required_ingredients @> ARRAY['Tomato', 'Onion'];",
      "SELECT r.recipe_name, i.ingredient_name FROM recipes r, unnest(r.required_ingredients) AS ing(ingredient_name) JOIN ingredients i ON i.ingredient_name = ing.ingredient_name;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM ingredients;",
      "SELECT name, quantity FROM ingredients WHERE expiration_date > '2022-01-01';",
      "SELECT id, name FROM recipes;",
      "SELECT * FROM recipe_ingredients;",
      "SELECT recipe_id, ingredient_id, quantity_used FROM recipe_ingredients WHERE quantity_used > 5;",
      "SELECT r.name AS recipe_name, i.name AS ingredient_name FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id;",
      "SELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id WHERE ri.quantity_used > 10;",
      "SELECT * FROM ingredients WHERE name LIKE '%sugar%';",
      "SELECT id, name, expiration_date FROM ingredients WHERE expiration_date = '2022-12-31';",
      "SELECT id, name FROM ingredients WHERE quantity < 100;",
      "SELECT r.name AS recipe_name, COUNT(ri.ingredient_id) AS num_ingredients FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id GROUP BY r.name;",
      "SELECT AVG(quantity) AS avg_quantity FROM ingredients;",
      "SELECT MAX(quantity) AS max_quantity FROM ingredients;",
      "SELECT MIN(quantity) AS min_quantity FROM ingredients;",
      "SELECT AVG(quantity_used) AS avg_quantity_used FROM recipe_ingredients;",
      "SELECT MAX(quantity_used) AS max_quantity_used FROM recipe_ingredients;",
      "SELECT MIN(quantity_used) AS min_quantity_used FROM recipe_ingredients;",
      "SELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id WHERE r.name = 'Pasta Carbonara';",
      "SELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id WHERE i.name = 'Flour';",
      "SELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id WHERE r.name LIKE '%cake%' AND i.name LIKE '%sugar%';",
      "SELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes r INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id INNER JOIN ingredients i ON ri.ingredient_id = i.id WHERE ri.quantity_used BETWEEN 5 AND 10;",
      "SELECT * FROM ingredients WHERE expiration_date < CURDATE()",
      "SELECT name, quantity FROM ingredients WHERE quantity > 10 ORDER BY quantity DESC",
      "SELECT i.name AS ingredient_name, r.name AS recipe_name FROM ingredients AS i INNER JOIN recipe_ingredients AS ri ON i.id = ri.ingredient_id INNER JOIN recipes AS r ON r.id = ri.recipe_id",
      "SELECT r.name AS recipe_name, SUM(ri.quantity_used) AS total_quantity_used FROM recipes AS r INNER JOIN recipe_ingredients AS ri ON r.id = ri.recipe_id GROUP BY r.name",
      "SELECT r.name AS recipe_name, COUNT(ri.ingredient_id) AS total_ingredients FROM recipes AS r INNER JOIN recipe_ingredients AS ri ON r.id = ri.recipe_id GROUP BY r.name HAVING total_ingredients >= 3",
      "SELECT * FROM recipes WHERE id IN (SELECT recipe_id FROM recipe_ingredients WHERE ingredient_id = 1)",
      "SELECT r.name AS recipe_name, i.name AS ingredient_name, ri.quantity_used FROM recipes AS r INNER JOIN recipe_ingredients AS ri ON r.id = ri.recipe_id INNER JOIN ingredients AS i ON i.id = ri.ingredient_id ORDER BY r.name ASC, i.name ASC"
    ]
  },
  {
    "statements": [
      "SELECT * FROM ingredients",
      "SELECT ingredient_name, quantity_in_stock FROM ingredients",
      "SELECT * FROM recipes",
      "SELECT recipe_name, serving_size FROM recipes",
      "SELECT * FROM ingredient_usage",
      "SELECT recipe_id, ingredient_id, quantity_used FROM ingredient_usage",
      "SELECT * FROM alerts",
      "SELECT ingredient_id, message FROM alerts",
      "SELECT ingredient_name, quantity_in_stock FROM ingredients WHERE quantity_in_stock < 10",
      "SELECT recipe_name, serving_size FROM recipes WHERE serving_size > 4",
      "SELECT * FROM alerts WHERE message LIKE '%expiry%'",
      "SELECT * FROM ingredients JOIN ingredient_usage ON ingredients.ingredient_id = ingredient_usage.ingredient_id",
      "SELECT recipe_name, serving_size, ingredient_name FROM recipes JOIN ingredient_usage ON recipes.recipe_id = ingredient_usage.recipe_id JOIN ingredients ON ingredients.ingredient_id = ingredient_usage.ingredient_id",
      "SELECT * FROM ingredients INNER JOIN alerts ON ingredients.ingredient_id = alerts.ingredient_id",
      "SELECT ingredient_name, quantity_in_stock FROM ingredients LEFT JOIN ingredient_usage ON ingredients.ingredient_id = ingredient_usage.ingredient_id",
      "SELECT recipe_name, serving_size FROM recipes RIGHT JOIN ingredient_usage ON recipes.recipe_id = ingredient_usage.recipe_id",
      "SELECT * FROM ingredient_usage INNER JOIN recipes ON ingredient_usage.recipe_id = recipes.recipe_id",
      "SELECT * FROM ingredients WHERE quantity_in_stock < 50",
      "SELECT recipe_name, serving_size FROM recipes WHERE serving_size > 4",
      "SELECT i.ingredient_name, u.quantity_used FROM ingredients i INNER JOIN ingredient_usage u ON i.ingredient_id = u.ingredient_id",
      "SELECT r.recipe_name, i.ingredient_name FROM recipes r INNER JOIN ingredient_usage u ON r.recipe_id = u.recipe_id INNER JOIN ingredients i ON u.ingredient_id = i.ingredient_id",
      "SELECT i.ingredient_name, SUM(u.quantity_used) AS total_quantity_used FROM ingredients i INNER JOIN ingredient_usage u ON i.ingredient_id = u.ingredient_id GROUP BY i.ingredient_id",
      "SELECT a.message, i.ingredient_name FROM alerts a INNER JOIN ingredients i ON a.ingredient_id = i.ingredient_id",
      "SELECT r.recipe_name, COUNT(u.usage_id) AS num_ingredients_used FROM recipes r INNER JOIN ingredient_usage u ON r.recipe_id = u.recipe_id GROUP BY r.recipe_id"
    ]
  },
  {
    "statements": [
      "SELECT * FROM ingredients;",
      "SELECT ingredient_name, quantity FROM ingredients;",
      "SELECT * FROM recipes;",
      "SELECT recipe_name, description FROM recipes;",
      "SELECT * FROM recipe_ingredients;",
      "SELECT recipe_id, ingredient_id, quantity_required FROM recipe_ingredients;",
      "SELECT * FROM suppliers;",
      "SELECT supplier_name, contact_information FROM suppliers;",
      "SELECT * FROM ingredient_suppliers;",
      "SELECT ingredient_id, supplier_id, price FROM ingredient_suppliers;",
      "SELECT ingredient_name, quantity FROM ingredients WHERE ingredient_id = 1;",
      "SELECT recipe_name, description FROM recipes WHERE recipe_id = 1;",
      "SELECT ingredient_name, quantity_required FROM ingredients INNER JOIN recipe_ingredients ON ingredients.ingredient_id = recipe_ingredients.ingredient_id;",
      "SELECT supplier_name FROM suppliers WHERE supplier_id = 1;",
      "SELECT ingredient_name, price FROM ingredients INNER JOIN ingredient_suppliers ON ingredients.ingredient_id = ingredient_suppliers.ingredient_id;",
      "SELECT recipe_name, quantity_required FROM recipes INNER JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id;",
      "SELECT supplier_name, price FROM suppliers INNER JOIN ingredient_suppliers ON suppliers.supplier_id = ingredient_suppliers.supplier_id;",
      "SELECT * FROM ingredients WHERE quantity > 50 ORDER BY ingredient_name ASC;",
      "SELECT * FROM recipes WHERE description IS NOT NULL;",
      "SELECT supplier_name, contact_information FROM suppliers WHERE supplier_id BETWEEN 1 AND 5;",
      "SELECT * FROM ingredients",
      "SELECT ingredient_name, quantity FROM ingredients WHERE quantity > 100",
      "SELECT recipe_name, description FROM recipes WHERE recipe_id = 5",
      "SELECT ingredients.ingredient_name, recipe_ingredients.quantity_required FROM ingredients INNER JOIN recipe_ingredients ON ingredients.ingredient_id = recipe_ingredients.ingredient_id WHERE recipe_id = 3",
      "SELECT supplier_name, contact_information FROM suppliers WHERE supplier_id = 1",
      "SELECT ingredients.ingredient_name, ingredient_suppliers.price FROM ingredients INNER JOIN ingredient_suppliers ON ingredients.ingredient_id = ingredient_suppliers.ingredient_id WHERE supplier_id = 2",
      "SELECT recipe_name, ingredients.ingredient_name, recipe_ingredients.quantity_required, ingredient_suppliers.price FROM recipes INNER JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id INNER JOIN ingredients ON recipe_ingredients.ingredient_id = ingredients.ingredient_id INNER JOIN ingredient_suppliers ON ingredients.ingredient_id = ingredient_suppliers.ingredient_id WHERE supplier_id = 3",
      "SELECT * FROM recipes WHERE description LIKE '%healthy%'",
      "SELECT supplier_name, SUM(price) AS total_price FROM suppliers INNER JOIN ingredient_suppliers ON suppliers.supplier_id = ingredient_suppliers.supplier_id GROUP BY supplier_name HAVING total_price > 1000",
      "SELECT recipe_name, COUNT(ingredient_id) AS num_ingredients FROM recipes LEFT JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id GROUP BY recipe_id HAVING num_ingredients >= 3",
      "SELECT supplier_name, ingredients.ingredient_name, ingredient_suppliers.price FROM suppliers INNER JOIN ingredient_suppliers ON suppliers.supplier_id = ingredient_suppliers.supplier_id INNER JOIN ingredients ON ingredient_suppliers.ingredient_id = ingredients.ingredient_id WHERE supplier_id = 1 ORDER BY price DESC",
      "SELECT MAX(quantity) AS max_quantity FROM ingredients",
      "SELECT DISTINCT supplier_name FROM suppliers",
      "SELECT recipe_name, COUNT(ingredient_id) AS num_ingredients FROM recipes LEFT JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id GROUP BY recipe_id ORDER BY num_ingredients DESC LIMIT 5",
      "SELECT AVG(price) AS avg_price FROM ingredient_suppliers",
      "SELECT recipe_name, ingredients.ingredient_name, supplier_name FROM recipes INNER JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id INNER JOIN ingredients ON recipe_ingredients.ingredient_id = ingredients.ingredient_id INNER JOIN ingredient_suppliers ON ingredients.ingredient_id = ingredient_suppliers.ingredient_id ORDER BY supplier_name ASC, price DESC",
      "SELECT recipe_name, ingredients.ingredient_name, supplier_name, price FROM recipes INNER JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id INNER JOIN ingredients ON recipe_ingredients.ingredient_id = ingredients.ingredient_id INNER JOIN ingredient_suppliers ON ingredients.ingredient_id = ingredient_suppliers.ingredient_id WHERE price > 5 ORDER BY price ASC",
      "SELECT DISTINCT recipe_name, ingredient_name FROM recipes INNER JOIN recipe_ingredients ON recipes.recipe_id = recipe_ingredients.recipe_id INNER JOIN ingredients ON recipe_ingredients.ingredient_id = ingredients.ingredient_id WHERE quantity_required > 1 ORDER BY recipe_name ASC, ingredient_name DESC"
    ]
  }
]