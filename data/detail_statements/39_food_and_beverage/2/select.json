[
  {
    "statements": [
      "SELECT * FROM bar_sales LIMIT 10",
      "SELECT id, drink_name, drink_price FROM bar_sales WHERE quantity >= 5",
      "SELECT drink_name, SUM(quantity) AS total_quantity FROM bar_sales GROUP BY drink_name",
      "SELECT drink_name, AVG(drink_price) AS avg_price FROM bar_sales GROUP BY drink_name",
      "SELECT * FROM bar_sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT id, drink_name, total_sales FROM bar_sales ORDER BY total_sales DESC",
      "SELECT COUNT(*) FROM bar_sales",
      "SELECT drink_name, MAX(drink_price) AS max_price FROM bar_sales",
      "SELECT AVG(quantity) AS average_quantity FROM bar_sales",
      "SELECT drink_name, COUNT(*) AS num_sales FROM bar_sales WHERE sale_date = '2022-02-14'",
      "SELECT drink_name, SUM(quantity) AS total_quantity_sold FROM bar_sales GROUP BY drink_name;",
      "SELECT drink_name, AVG(drink_price) AS avg_price FROM bar_sales GROUP BY drink_name;",
      "SELECT drink_name, COUNT(*) AS num_sales FROM bar_sales GROUP BY drink_name;",
      "SELECT drink_name, MAX(drink_price) AS max_price FROM bar_sales GROUP BY drink_name;",
      "SELECT drink_name, MIN(drink_price) AS min_price FROM bar_sales GROUP BY drink_name;",
      "SELECT sale_date, SUM(total_sales) AS total_sales_per_day FROM bar_sales GROUP BY sale_date;",
      "SELECT sale_date, COUNT(*) AS num_sales_per_day FROM bar_sales GROUP BY sale_date;",
      "SELECT sale_date, MAX(total_sales) AS max_sales_per_day FROM bar_sales GROUP BY sale_date;",
      "SELECT sale_date, MIN(total_sales) AS min_sales_per_day FROM bar_sales GROUP BY sale_date;",
      "SELECT drink_name, SUM(quantity*drink_price) AS total_revenue FROM bar_sales GROUP BY drink_name;",
      "SELECT drink_name, AVG(quantity) AS avg_quantity_sold FROM bar_sales GROUP BY drink_name;",
      "SELECT sale_date, AVG(total_sales) AS avg_sales_per_day FROM bar_sales GROUP BY sale_date;",
      "SELECT drink_name, quantity, total_sales, sale_date FROM bar_sales WHERE drink_price > 5;",
      "SELECT drink_name, quantity, total_sales, sale_date FROM bar_sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT drink_name, total_sales FROM bar_sales ORDER BY total_sales DESC;",
      "SELECT drink_name, total_sales FROM bar_sales ORDER BY total_sales ASC;",
      "SELECT drink_name, quantity FROM bar_sales WHERE drink_price < 5;",
      "SELECT drink_name, quantity FROM bar_sales WHERE total_sales > 100;",
      "SELECT drink_name, drink_price, quantity, total_sales FROM bar_sales WHERE drink_price BETWEEN 5 AND 10;",
      "SELECT DISTINCT drink_name FROM bar_sales;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Sales;",
      "SELECT sale_id, sale_date, total_amount FROM Sales WHERE customer_id = 1;",
      "SELECT * FROM Sales WHERE sale_date >= '2022-01-01';",
      "SELECT customer_id, SUM(total_amount) AS total_sales FROM Sales GROUP BY customer_id;",
      "SELECT product_id, AVG(total_amount) AS avg_amount FROM Sales GROUP BY product_id;",
      "SELECT DISTINCT customer_id FROM Sales;",
      "SELECT * FROM Sales ORDER BY total_amount DESC;",
      "SELECT * FROM Sales WHERE sale_id = 100;",
      "SELECT MAX(total_amount) AS max_amount FROM Sales;",
      "SELECT MIN(total_amount) AS min_amount FROM Sales;",
      "SELECT COUNT(*) AS total_sales FROM Sales;",
      "SELECT * FROM Revenue;",
      "SELECT amount, source FROM Revenue WHERE revenue_date = '2022-01-15';",
      "SELECT SUM(amount) AS total_revenue FROM Revenue;",
      "SELECT MAX(amount) AS max_revenue FROM Revenue;",
      "SELECT DISTINCT source FROM Revenue;",
      "SELECT * FROM Revenue ORDER BY revenue_date DESC;",
      "SELECT * FROM Revenue WHERE revenue_id = 50;",
      "SELECT MIN(amount) AS min_revenue FROM Revenue;",
      "SELECT COUNT(*) AS total_records FROM Revenue;",
      "SELECT * FROM Sales WHERE total_amount > 1000",
      "SELECT customer_id, COUNT(sale_id) FROM Sales GROUP BY customer_id HAVING COUNT(sale_id) > 5",
      "SELECT R.revenue_date, R.amount, S.sale_date FROM Revenue R INNER JOIN Sales S ON R.revenue_date = S.sale_date",
      "SELECT S.sale_date, S.total_amount, R.source FROM Sales S LEFT JOIN Revenue R ON S.customer_id = R.revenue_id",
      "SELECT MAX(total_amount) AS max_amount FROM Sales",
      "SELECT MIN(total_amount) AS min_amount FROM Sales",
      "SELECT AVG(total_amount) AS avg_amount FROM Sales",
      "SELECT SUM(total_amount) AS total_sales FROM Sales",
      "SELECT sale_date, customer_id, product_id FROM Sales WHERE customer_id = 1001",
      "SELECT COUNT(DISTINCT customer_id) AS unique_customers FROM Sales",
      "SELECT AVG(amount) AS avg_revenue FROM Revenue",
      "SELECT source, SUM(amount) AS total_revenue FROM Revenue GROUP BY source",
      "SELECT customer_id, SUM(total_amount) AS total_purchase_amount FROM Sales GROUP BY customer_id",
      "SELECT * FROM Sales ORDER BY sale_date DESC LIMIT 10",
      "SELECT sale_id, sale_date, total_amount FROM Sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-06-30'",
      "SELECT * FROM Revenue WHERE amount > 500",
      "SELECT * FROM Sales WHERE customer_id IN (SELECT customer_id FROM Sales GROUP BY customer_id HAVING COUNT(sale_id) > 1)",
      "SELECT AVG(total_amount) AS avg_amount FROM Sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-06-30'",
      "SELECT R.source, SUM(S.total_amount) AS total_sales FROM Sales S INNER JOIN Revenue R ON S.product_id = R.revenue_id GROUP BY R.source",
      "SELECT * FROM Sales WHERE product_id IS NULL"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Sales;",
      "SELECT sale_id, sale_date FROM Sales;",
      "SELECT * FROM Products;",
      "SELECT product_id, product_name FROM Products;",
      "SELECT * FROM Customers;",
      "SELECT customer_id, customer_name FROM Customers;",
      "SELECT sale_id, total_amount FROM Sales;",
      "SELECT product_id, price FROM Products;",
      "SELECT customer_id, email FROM Customers;",
      "SELECT sale_id, sale_date, total_amount FROM Sales;",
      "SELECT product_id, product_name, price FROM Products;",
      "SELECT customer_id, customer_name, email FROM Customers;",
      "SELECT sale_id, total_amount, sale_date FROM Sales;",
      "SELECT product_id, price, product_name FROM Products;",
      "SELECT customer_id, email, customer_name FROM Customers;",
      "SELECT sale_id, sale_date, total_amount FROM Sales WHERE sale_date > '2022-01-01';",
      "SELECT product_id, product_name, price FROM Products WHERE price > 50;",
      "SELECT customer_id, customer_name, email FROM Customers WHERE customer_name LIKE '%John%';",
      "SELECT * FROM Sales WHERE total_amount < 1000;",
      "SELECT * FROM Products WHERE price BETWEEN 10 AND 50;",
      "SELECT sale_id, sale_date, total_amount FROM Sales WHERE total_amount > 1000 ORDER BY sale_date DESC;",
      "SELECT product_id, product_name, price FROM Products WHERE price BETWEEN 10 AND 50 ORDER BY product_name ASC;",
      "SELECT customer_id, customer_name, email FROM Customers WHERE LENGTH(customer_name) > 10 ORDER BY customer_name ASC;",
      "SELECT product_name, price, customer_name FROM Products p JOIN Sales s ON p.product_id = s.sale_id JOIN Customers c ON s.sale_id = c.customer_id;",
      "SELECT customer_id, customer_name, total_amount FROM Sales s JOIN Customers c ON c.customer_id = s.sale_id WHERE total_amount > 5000 ORDER BY total_amount DESC;",
      "SELECT MAX(total_amount) AS max_amount, MIN(total_amount) AS min_amount FROM Sales;",
      "SELECT AVG(price) AS avg_price FROM Products;",
      "SELECT COUNT(DISTINCT customer_id) AS total_customers FROM Customers;",
      "SELECT SUM(total_amount) AS total_sales_amount FROM Sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT product_name, COUNT(sale_id) AS total_sales FROM Products p JOIN Sales s ON p.product_id = s.sale_id GROUP BY product_name HAVING COUNT(sale_id) > 5;",
      "SELECT customer_name, AVG(price) AS avg_price FROM Customers c JOIN Sales s ON c.customer_id = s.sale_id JOIN Products p ON s.sale_id = p.product_id GROUP BY customer_name;",
      "SELECT product_name, AVG(total_amount) AS avg_sale_amount FROM Products p JOIN Sales s ON p.product_id = s.sale_id GROUP BY product_name;",
      "SELECT DISTINCT customer_name FROM Customers WHERE customer_id IN (SELECT sale_id FROM Sales WHERE total_amount > 2000);",
      "SELECT customer_name, SUM(price) AS total_spent FROM Customers c JOIN Sales s ON c.customer_id = s.sale_id JOIN Products p ON s.sale_id = p.product_id GROUP BY customer_name;",
      "SELECT customer_name, total_amount FROM Customers LEFT JOIN Sales ON Customers.customer_id = Sales.sale_id WHERE Sales.total_amount IS NULL;",
      "SELECT product_name, COUNT(DISTINCT customer_id) AS unique_customers FROM Products p JOIN Sales s ON p.product_id = s.sale_id GROUP BY product_name;",
      "SELECT product_name, MAX(price) AS max_price, MIN(price) AS min_price FROM Products GROUP BY product_name;",
      "SELECT customer_name, total_amount FROM Customers c JOIN Sales s ON c.customer_id = s.sale_id WHERE sale_date = '2022-06-30';",
      "SELECT customer_id, customer_name, total_amount FROM Customers c JOIN Sales s ON c.customer_id = s.sale_id ORDER BY total_amount DESC LIMIT 5;",
      "SELECT product_name, price, total_amount FROM Products p JOIN Sales s ON p.product_id = s.sale_id WHERE price > 50 AND total_amount < 5000;",
      "SELECT COUNT(*) AS total_sales FROM Sales;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Bar;",
      "SELECT id, bar_name FROM Bar;",
      "SELECT address FROM Bar;",
      "SELECT * FROM Bartender;",
      "SELECT id, bartender_name FROM Bartender;",
      "SELECT years_of_experience FROM Bartender;",
      "SELECT * FROM Drink;",
      "SELECT id, drink_name FROM Drink;",
      "SELECT price FROM Drink;",
      "SELECT * FROM Transaction;",
      "SELECT id, drink_id, bartender_id, sale_date, quantity, total_price FROM Transaction;",
      "SELECT total_price FROM Transaction;",
      "SELECT Bar.bar_name, Transaction.sale_date FROM Bar JOIN Transaction ON Bar.id = Transaction.drink_id;",
      "SELECT Bartender.bartender_name, Transaction.quantity FROM Bartender JOIN Transaction ON Bartender.id = Transaction.bartender_id;",
      "SELECT Drink.drink_name, Transaction.total_price FROM Drink JOIN Transaction ON Drink.id = Transaction.drink_id;",
      "SELECT Bar.bar_name, Transaction.sale_date, Bartender.bartender_name FROM Bar JOIN Transaction ON Bar.id = Transaction.drink_id JOIN Bartender ON Bartender.id = Transaction.bartender_id;",
      "SELECT Bar.bar_name, Transaction.sale_date, Drink.drink_name, Transaction.quantity FROM Bar JOIN Transaction ON Bar.id = Transaction.drink_id JOIN Drink ON Drink.id = Transaction.drink_id;",
      "SELECT Bartender.bartender_name, Transaction.sale_date, Drink.drink_name, Transaction.total_price FROM Bartender JOIN Transaction ON Bartender.id = Transaction.bartender_id JOIN Drink ON Drink.id = Transaction.drink_id;",
      "SELECT Bar.bar_name, Bartender.bartender_name FROM Bar, Bartender WHERE Bar.id = Bartender.id;",
      "SELECT Drink.drink_name, Transaction.sale_date, Bartender.bartender_name FROM Drink, Bartender, Transaction WHERE Drink.id = Transaction.drink_id AND Bartender.id = Transaction.bartender_id;",
      "SELECT * FROM Bar WHERE address LIKE '%Street%'",
      "SELECT bartender_name, years_of_experience FROM Bartender WHERE years_of_experience > 5",
      "SELECT drink_name, price FROM Drink ORDER BY price DESC",
      "SELECT * FROM Transaction WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT bar_name, address, bartender_name FROM Bar INNER JOIN Bartender ON Bar.id = Bartender.id",
      "SELECT drink_name, quantity, total_price FROM Drink INNER JOIN Transaction ON Drink.id = Transaction.drink_id",
      "SELECT * FROM Bar WHERE id IN (SELECT bartender_id FROM Transaction)",
      "SELECT DISTINCT bartender_name FROM Bartender",
      "SELECT COUNT(*) FROM Drink",
      "SELECT AVG(price) FROM Drink",
      "SELECT SUM(quantity) FROM Transaction",
      "SELECT MAX(total_price) FROM Transaction",
      "SELECT MIN(years_of_experience) FROM Bartender",
      "SELECT bar_name, SUM(quantity) AS total_quantity FROM Bar INNER JOIN Transaction ON Bar.id = Transaction.bartender_id GROUP BY bar_name ORDER BY total_quantity DESC",
      "SELECT bartender_name, COUNT(*) AS transaction_count FROM Bartender INNER JOIN Transaction ON Bartender.id = Transaction.bartender_id GROUP BY bartender_name",
      "SELECT bar_name, COUNT(*) AS total_transactions FROM Bar INNER JOIN Transaction ON Bar.id = Transaction.bartender_id GROUP BY bar_name HAVING COUNT(*) > 10",
      "SELECT bartender_name, SUM(total_price) AS total_sales FROM Bartender INNER JOIN Transaction ON Bartender.id = Transaction.bartender_id GROUP BY bartender_name ORDER BY total_sales DESC",
      "SELECT * FROM Bar WHERE address LIKE '%Avenue%' OR address LIKE '%Road%'",
      "SELECT drink_name, AVG(price) AS avg_price FROM Drink GROUP BY drink_name HAVING AVG(price) > 5",
      "SELECT bartender_name, SUM(total_price) AS total_revenue FROM Bartender INNER JOIN Transaction ON Bartender.id = Transaction.bartender_id GROUP BY bartender_name HAVING SUM(total_price) > 1000"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Bar;",
      "SELECT name, location FROM Bar;",
      "SELECT bar_id, name FROM Bar;",
      "SELECT DISTINCT name FROM Bar;",
      "SELECT * FROM Employee;",
      "SELECT name, position FROM Employee;",
      "SELECT employee_id, position FROM Employee;",
      "SELECT * FROM Product;",
      "SELECT name, price FROM Product;",
      "SELECT product_id, category FROM Product;",
      "SELECT * FROM Sale;",
      "SELECT product_id, sale_date FROM Sale;",
      "SELECT sale_id, quantity FROM Sale;",
      "SELECT * FROM Revenue;",
      "SELECT sale_id, revenue_amount FROM Revenue;",
      "SELECT revenue_id, revenue_date FROM Revenue;",
      "SELECT name, price FROM Product WHERE category='Electronics';",
      "SELECT name, hire_date FROM Employee WHERE position='Manager';",
      "SELECT bar_id, location FROM Bar WHERE name='ABC Bar';",
      "SELECT sale_id, product_id, employee_id FROM Sale WHERE quantity > 10;",
      "SELECT * FROM Bar;",
      "SELECT name, location FROM Bar WHERE location = 'New York';",
      "SELECT name, position FROM Employee WHERE hire_date >= '2021-01-01';",
      "SELECT name, price FROM Product WHERE category = 'Electronics';",
      "SELECT name, price, category FROM Product WHERE price > 1000;",
      "SELECT name, sale_date, quantity FROM Sale WHERE quantity > 10;",
      "SELECT name, revenue_amount FROM Revenue WHERE revenue_date >= '2021-06-01';",
      "SELECT Employee.name, Product.name, Sale.sale_date FROM Employee JOIN Sale ON Employee.employee_id = Sale.employee_id JOIN Product ON Sale.product_id = Product.product_id;",
      "SELECT Product.name, Sale.quantity, Revenue.revenue_amount FROM Product JOIN Sale ON Product.product_id = Sale.product_id JOIN Revenue ON Sale.sale_id = Revenue.sale_id WHERE Sale.quantity >= 5 AND Revenue.revenue_amount >= 100;",
      "SELECT Bar.name AS bar_name, Employee.name AS employee_name, Sale.sale_date FROM Bar JOIN Employee ON Bar.bar_id = Employee.employee_id JOIN Sale ON Employee.employee_id = Sale.employee_id;",
      "SELECT Product.name, SUM(Sale.quantity) AS total_quantity_sold FROM Product JOIN Sale ON Product.product_id = Sale.product_id GROUP BY Product.name ORDER BY total_quantity_sold DESC;",
      "SELECT Employee.name, COUNT(Sale.sale_id) AS total_sales FROM Employee JOIN Sale ON Employee.employee_id = Sale.employee_id GROUP BY Employee.name ORDER BY total_sales DESC;",
      "SELECT Product.category, AVG(Revenue.revenue_amount) AS average_revenue FROM Product JOIN Sale ON Product.product_id = Sale.product_id JOIN Revenue ON Sale.sale_id = Revenue.sale_id GROUP BY Product.category;",
      "SELECT name, hire_date, position FROM Employee WHERE hire_date > '2020-01-01' AND position = 'Manager';",
      "SELECT Employee.name, ROUND(SUM(Revenue.revenue_amount), 2) AS total_revenue FROM Employee JOIN Sale ON Employee.employee_id = Sale.employee_id JOIN Revenue ON Sale.sale_id = Revenue.sale_id GROUP BY Employee.name;",
      "SELECT Bar.name, Employee.position, AVG(Sale.quantity) AS average_quantity FROM Bar JOIN Employee ON Bar.bar_id = Employee.employee_id JOIN Sale ON Employee.employee_id = Sale.employee_id GROUP BY Bar.name, Employee.position;",
      "SELECT Sale.sale_date, SUM(Revenue.revenue_amount) AS total_revenue FROM Sale JOIN Revenue ON Sale.sale_id = Revenue.sale_id GROUP BY Sale.sale_date ORDER BY total_revenue DESC;",
      "SELECT name, price, category, revenue_amount FROM Product JOIN Sale ON Product.product_id = Sale.product_id JOIN Revenue ON Sale.sale_id = Revenue.sale_id;",
      "SELECT Bar.name, Employee.name, Product.name, Sale.quantity, Revenue.revenue_amount FROM Bar JOIN Employee JOIN Product JOIN Sale JOIN Revenue ON Bar.bar_id = Employee.employee_id AND Employee.employee_id = Sale.employee_id AND Sale.product_id = Product.product_id AND Sale.sale_id = Revenue.sale_id;",
      "SELECT Bar.name AS bar_name, AVG(Sale.quantity) AS average_quantity_sold FROM Bar JOIN Sale ON Bar.bar_id = Sale.bar_id GROUP BY Bar.name ORDER BY average_quantity_sold DESC;"
    ]
  }
]