[
  {
    "statements": [
      "SELECT player_id, player_name, score FROM high_scores WHERE score > 100",
      "SELECT * FROM high_scores WHERE player_name LIKE 'John%'",
      "SELECT player_id, player_name FROM high_scores WHERE score < 50",
      "SELECT * FROM high_scores WHERE player_name = 'Alice'",
      "SELECT player_id, player_name, score FROM high_scores ORDER BY score DESC",
      "SELECT player_id, player_name FROM high_scores ORDER BY player_name ASC",
      "SELECT AVG(score) AS average_score FROM high_scores",
      "SELECT player_id, COUNT(*) AS total_scores FROM high_scores GROUP BY player_id",
      "SELECT MAX(score) AS highest_score FROM high_scores",
      "SELECT player_id, player_name, score FROM high_scores WHERE player_id = 100",
      "SELECT player_id, player_name, score FROM high_scores WHERE score BETWEEN 50 AND 100",
      "SELECT player_name, COUNT(*) AS total_records FROM high_scores GROUP BY player_name HAVING total_records > 1",
      "SELECT player_id, player_name, score FROM high_scores WHERE player_id IN (1, 2, 3)",
      "SELECT DISTINCT player_name FROM high_scores",
      "SELECT player_id, player_name, score FROM high_scores WHERE player_name <> 'Bob'",
      "SELECT player_name, SUM(score) AS total_score FROM high_scores GROUP BY player_name",
      "SELECT player_id, player_name, score FROM high_scores WHERE player_name LIKE '%son'",
      "SELECT player_id, player_name, score FROM high_scores WHERE player_name LIKE 'S%'",
      "SELECT player_id, player_name, score FROM high_scores WHERE player_id IS NOT NULL",
      "SELECT player_id, player_name, score FROM high_scores WHERE player_name IS NULL",
      "SELECT * FROM high_scores WHERE score > 100 ORDER BY player_name DESC LIMIT 5;",
      "SELECT player_id, player_name FROM high_scores WHERE player_name LIKE 'A%' ORDER BY score DESC LIMIT 10;",
      "SELECT COUNT(*) AS total_count FROM high_scores WHERE score BETWEEN 50 AND 100;",
      "SELECT player_name, MAX(score) AS highest_score FROM high_scores GROUP BY player_name ORDER BY highest_score DESC LIMIT 5;",
      "SELECT player_name, AVG(score) AS avg_score FROM high_scores GROUP BY player_name HAVING AVG(score) > 80;",
      "SELECT player_name, COUNT(*) AS total_scores FROM high_scores GROUP BY player_name HAVING COUNT(*) > 1 ORDER BY total_scores DESC LIMIT 5;",
      "SELECT player_id, player_name FROM high_scores WHERE score = (SELECT MAX(score) FROM high_scores);",
      "SELECT player_name, score, RANK() OVER (ORDER BY score DESC) AS rank FROM high_scores;",
      "SELECT player_name, score, DENSE_RANK() OVER (ORDER BY score DESC) AS dense_rank FROM high_scores;",
      "SELECT player_name, score, NTILE(4) OVER (ORDER BY score) AS quartile FROM high_scores;",
      "SELECT player_name, LAG(score) OVER (ORDER BY score) AS prev_score FROM high_scores;",
      "SELECT player_name, LEAD(score) OVER (ORDER BY score) AS next_score FROM high_scores;",
      "SELECT player_name, score, FIRST_VALUE(player_name) OVER (ORDER BY score) AS first_name FROM high_scores;",
      "SELECT player_name, score, LAST_VALUE(player_name) OVER (ORDER BY score) AS last_name FROM high_scores;",
      "SELECT player_name, SUM(score) OVER (PARTITION BY player_id) AS total_score FROM high_scores;",
      "SELECT player_name, score, AVG(score) OVER (PARTITION BY player_id) AS avg_score FROM high_scores;",
      "SELECT player_name, score, ROW_NUMBER() OVER (ORDER BY score DESC) AS row_number FROM high_scores;",
      "SELECT player_name, score, PERCENT_RANK() OVER (ORDER BY score) AS percentile_rank FROM high_scores;",
      "SELECT player_name, score, CUME_DIST() OVER (ORDER BY score) AS cumulative_distribution FROM high_scores;",
      "SELECT player_name, score, NTILE(5) OVER (ORDER BY score) AS quintile FROM high_scores;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM high_scores;",
      "SELECT player_id, score FROM high_scores;",
      "SELECT game_id, score FROM high_scores;",
      "SELECT * FROM games;",
      "SELECT game_id, game_name FROM games;",
      "SELECT player_id, game_id, score FROM high_scores;",
      "SELECT player_id, game_id, score FROM high_scores WHERE player_id = 1;",
      "SELECT player_id, game_id, score FROM high_scores WHERE score > 100;",
      "SELECT game_id, game_name, score FROM games JOIN high_scores ON games.game_id = high_scores.game_id;",
      "SELECT player_id, score, game_name FROM high_scores JOIN games ON high_scores.game_id = games.game_id;",
      "SELECT player_id, game_name, score FROM high_scores JOIN games ON high_scores.game_id = games.game_id WHERE player_id = 2;",
      "SELECT player_id, game_name, score FROM high_scores JOIN games ON high_scores.game_id = games.game_id WHERE game_name = 'Chess';",
      "SELECT AVG(score) as avg_score FROM high_scores;",
      "SELECT COUNT(player_id) as total_players FROM high_scores;",
      "SELECT MAX(score) as max_score FROM high_scores;",
      "SELECT game_name, AVG(score) as avg_score FROM high_scores JOIN games ON high_scores.game_id = games.game_id GROUP BY game_name;",
      "SELECT player_id, SUM(score) as total_score FROM high_scores GROUP BY player_id;",
      "SELECT game_name, COUNT(player_id) as total_players FROM high_scores JOIN games ON high_scores.game_id = games.game_id GROUP BY game_name;",
      "SELECT player_id, game_name, MAX(score) as max_score FROM high_scores JOIN games ON high_scores.game_id = games.game_id GROUP BY player_id, game_name;",
      "SELECT player_id, game_name, score FROM high_scores WHERE player_id IN (1, 2, 3);",
      "SELECT high_scores.player_id, high_scores.score, games.game_name FROM high_scores INNER JOIN games ON high_scores.game_id = games.game_id WHERE high_scores.score > 100 ORDER BY high_scores.score DESC",
      "SELECT player_id, MAX(score) AS highest_score FROM high_scores GROUP BY player_id HAVING COUNT(*) >= 3",
      "SELECT game_id, AVG(score) AS average_score FROM high_scores GROUP BY game_id HAVING AVG(score) > 50",
      "SELECT player_id, game_name, score FROM high_scores LEFT JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, score FROM high_scores RIGHT JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, RANK() OVER (PARTITION BY game_name ORDER BY score DESC) AS game_rank FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, DENSE_RANK() OVER (PARTITION BY game_name ORDER BY score DESC) AS game_rank FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, NTILE(4) OVER (ORDER BY score DESC) AS score_quartile FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, LEAD(score) OVER (PARTITION BY game_name ORDER BY score DESC) AS next_score FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, LAG(score) OVER (PARTITION BY game_name ORDER BY score DESC) AS previous_score FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, FIRST_VALUE(score) OVER (PARTITION BY game_name ORDER BY score DESC) AS top_score FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, LAST_VALUE(score) OVER (PARTITION BY game_name ORDER BY score DESC) AS lowest_score FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, PERCENT_RANK() OVER (PARTITION BY game_name ORDER BY score DESC) AS score_percentile FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, CUME_DIST() OVER (PARTITION BY game_name ORDER BY score DESC) AS cumulative_distribution FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, NTILE(3) OVER (PARTITION BY game_name ORDER BY score DESC) AS custom_quartile FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, NTILE(5) OVER (PARTITION BY game_name ORDER BY score DESC) AS quintile FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, ROW_NUMBER() OVER (PARTITION BY game_name ORDER BY score DESC) AS row_num FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, RANK() OVER (ORDER BY score DESC) AS overall_rank FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, DENSE_RANK() OVER (ORDER BY score DESC) AS overall_dense_rank FROM high_scores JOIN games ON high_scores.game_id = games.game_id",
      "SELECT player_id, game_name, LEAD(score) OVER (ORDER BY score DESC) AS next_score FROM high_scores JOIN games ON high_scores.game_id = games.game_id"
    ]
  },
  {
    "statements": [
      "SELECT player_id, player_name FROM players;",
      "SELECT player_id, join_date FROM players;",
      "SELECT player_name, join_date FROM players;",
      "SELECT player_id, player_name, join_date FROM players;",
      "SELECT game_id, game_name FROM games;",
      "SELECT game_id, release_date FROM games;",
      "SELECT game_name, release_date FROM games;",
      "SELECT game_id, game_name, release_date FROM games;",
      "SELECT player_id, score FROM high_scores;",
      "SELECT player_id, player_name, score FROM players JOIN high_scores ON players.player_id = high_scores.player_id;",
      "SELECT player_name, join_date, score FROM players JOIN high_scores ON players.player_id = high_scores.player_id;",
      "SELECT game_name, release_date, score FROM games JOIN high_scores ON games.game_id = high_scores.player_id;",
      "SELECT player_id, player_name, join_date, score FROM players JOIN high_scores ON players.player_id = high_scores.player_id;",
      "SELECT player_id, player_name, join_date, score FROM players JOIN high_scores ON players.player_id = high_scores.player_id WHERE score > 100;",
      "SELECT player_id, player_name, join_date, score FROM players JOIN high_scores ON players.player_id = high_scores.player_id ORDER BY score DESC;",
      "SELECT player_id, player_name, SUM(score) AS total_score FROM players JOIN high_scores ON players.player_id = high_scores.player_id GROUP BY player_id;",
      "SELECT player_id, player_name, AVG(score) AS avg_score FROM players JOIN high_scores ON players.player_id = high_scores.player_id GROUP BY player_id;",
      "SELECT player_id, player_name, MAX(score) AS max_score FROM players JOIN high_scores ON players.player_id = high_scores.player_id GROUP BY player_id;",
      "SELECT player_id, player_name, MIN(score) AS min_score FROM players JOIN high_scores ON players.player_id = high_scores.player_id GROUP BY player_id;",
      "SELECT player_id, player_name, COUNT(score) AS score_count FROM players JOIN high_scores ON players.player_id = high_scores.player_id GROUP BY player_id;",
      "SELECT player_name, score FROM players INNER JOIN high_scores ON players.player_id = high_scores.player_id WHERE score > 100",
      "SELECT player_name, game_name, score FROM players INNER JOIN high_scores ON players.player_id = high_scores.player_id INNER JOIN games ON high_scores.score > 200 AND games.game_id = high_scores.player_id",
      "SELECT player_name, join_date, game_name, release_date FROM players INNER JOIN high_scores ON players.player_id = high_scores.player_id INNER JOIN games ON high_scores.score > 300 AND games.game_id = high_scores.player_id ORDER BY join_date DESC",
      "SELECT * FROM players WHERE player_id IN (SELECT player_id FROM high_scores WHERE score > 400)",
      "SELECT player_name, game_name, score FROM players LEFT JOIN high_scores ON players.player_id = high_scores.player_id LEFT JOIN games ON high_scores.score > 200 AND games.game_id = high_scores.player_id",
      "SELECT player_name, game_name, release_date FROM players LEFT JOIN high_scores ON players.player_id = high_scores.player_id LEFT JOIN games ON high_scores.score > 300 AND games.game_id = high_scores.player_id ORDER BY join_date ASC"
    ]
  },
  {
    "statements": [
      "SELECT * FROM high_scores",
      "SELECT player_id, score FROM high_scores WHERE score > 100",
      "SELECT player_id, player_name FROM players",
      "SELECT game_id, game_name FROM games",
      "SELECT player_id, game_id, score FROM leaderboard",
      "SELECT player_id, game_id, score FROM leaderboard WHERE score > 500",
      "SELECT player_id, player_name, score FROM players INNER JOIN high_scores ON players.player_id = high_scores.player_id",
      "SELECT player_name, game_name, score FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id INNER JOIN games ON games.game_id = leaderboard.game_id",
      "SELECT player_id, player_name, game_id, game_name, score FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id INNER JOIN games ON games.game_id = leaderboard.game_id",
      "SELECT player_id, player_name, game_id, game_name, score FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id INNER JOIN games ON games.game_id = leaderboard.game_id WHERE score > 100",
      "SELECT player_id, player_name, game_id, game_name, score FROM players LEFT JOIN leaderboard ON players.player_id = leaderboard.player_id LEFT JOIN games ON games.game_id = leaderboard.game_id WHERE score IS NULL",
      "SELECT player_id, player_name, game_id, game_name, score FROM players RIGHT JOIN leaderboard ON players.player_id = leaderboard.player_id RIGHT JOIN games ON games.game_id = leaderboard.game_id",
      "SELECT player_id, player_name, game_id, game_name, score FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id INNER JOIN games ON games.game_id = leaderboard.game_id ORDER BY score DESC",
      "SELECT player_id, player_name, game_id, game_name, MAX(score) AS highest_score FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id INNER JOIN games ON games.game_id = leaderboard.game_id GROUP BY player_id",
      "SELECT player_id, player_name, game_id, game_name, COUNT(*) AS total_games_played FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id INNER JOIN games ON games.game_id = leaderboard.game_id GROUP BY player_id, player_name",
      "SELECT player_id, player_name, game_id, game_name, AVG(score) AS average_score FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id INNER JOIN games ON games.game_id = leaderboard.game_id GROUP BY player_id, player_name, game_id, game_name",
      "SELECT player_id, player_name, game_name, score FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id INNER JOIN games ON games.game_id = leaderboard.game_id WHERE game_name = 'Soccer'",
      "SELECT player_id, player_name, game_name, score FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id INNER JOIN games ON games.game_id = leaderboard.game_id WHERE player_name LIKE 'J%'",
      "SELECT player_id, player_name, game_name, score FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id INNER JOIN games ON games.game_id = leaderboard.game_id WHERE player_name LIKE '%son' AND score > 500",
      "SELECT player_id, player_name, game_name, score FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id INNER JOIN games ON games.game_id = leaderboard.game_id WHERE player_name IN ('Alice', 'Bob', 'Charlie')",
      "SELECT player_name, score FROM players p JOIN high_scores h ON p.player_id = h.player_id WHERE score > 100;",
      "SELECT player_name, game_name, score FROM players p JOIN high_scores h ON p.player_id = h.player_id JOIN leaderboard l ON p.player_id = l.player_id AND h.score = l.score JOIN games g ON l.game_id = g.game_id;",
      "SELECT player_name, game_name, score FROM players p, high_scores h, leaderboard l, games g WHERE p.player_id = h.player_id AND h.player_id = l.player_id AND l.game_id = g.game_id AND h.score = l.score;",
      "SELECT MAX(score) AS max_score FROM high_scores;",
      "SELECT player_name, SUM(score) as total_score FROM players p JOIN high_scores h ON p.player_id = h.player_id GROUP BY player_name;",
      "SELECT player_name, game_name, MAX(score) as max_score FROM players p JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id GROUP BY player_name, game_name;",
      "SELECT player_name, AVG(score) as avg_score FROM players p JOIN high_scores h ON p.player_id = h.player_id GROUP BY player_name;",
      "SELECT player_name, game_name, AVG(score) as avg_score FROM players p JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id GROUP BY player_name, game_name;",
      "SELECT player_name, game_name, MIN(score) as min_score FROM players p JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id GROUP BY player_name, game_name;",
      "SELECT COUNT(DISTINCT player_id) as num_players FROM players;",
      "SELECT player_name, game_name, COUNT(*) as num_games FROM players p JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id GROUP BY player_name, game_name;",
      "SELECT player_name, AVG(score) as avg_score FROM players p JOIN high_scores h ON p.player_id = h.player_id WHERE score > 50 GROUP BY player_name;",
      "SELECT player_name, game_name, MIN(score) as min_score FROM players p JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id WHERE game_name = 'Chess' GROUP BY player_name, game_name;",
      "SELECT player_name, game_name, MAX(score) as max_score FROM players p JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id WHERE player_name LIKE 'J%' GROUP BY player_name, game_name;",
      "SELECT player_id, player_name, game_name, score FROM players p JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id ORDER BY score DESC;",
      "SELECT player_id, player_name, game_name, score FROM players p JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id ORDER BY player_name, game_name, score;",
      "SELECT player_id, player_name, game_name, AVG(score) as avg_score FROM players p JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id GROUP BY player_id, player_name, game_name;",
      "SELECT player_id, player_name, game_name, SUM(score) as total_score FROM players p JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id WHERE player_name = 'Alice' GROUP BY player_id, player_name, game_name;",
      "SELECT player_name, game_name, score FROM players p LEFT JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id;",
      "SELECT player_name, game_name, score FROM players p RIGHT JOIN leaderboard l ON p.player_id = l.player_id JOIN games g ON l.game_id = g.game_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM high_scores;",
      "SELECT player_id, score FROM high_scores;",
      "SELECT player_id, game_id, score FROM high_scores WHERE score > 100;",
      "SELECT player_id, game_id, score FROM high_scores WHERE game_id = 1;",
      "SELECT player_id, game_id, MIN(score) AS min_score FROM high_scores GROUP BY game_id;",
      "SELECT player_name, player_email FROM players;",
      "SELECT player_id, player_name FROM players WHERE player_email LIKE '%@example.com';",
      "SELECT * FROM games;",
      "SELECT game_id, game_title FROM games WHERE game_genre = 'RPG';",
      "SELECT player_id, game_id, score FROM game_scores WHERE score > 500;",
      "SELECT player_id, rank FROM leaderboard;",
      "SELECT player_id, rank FROM leaderboard ORDER BY rank DESC;",
      "SELECT player_id, player_name, game_title FROM players INNER JOIN high_scores ON high_scores.player_id = players.player_id INNER JOIN games ON high_scores.game_id = games.game_id;",
      "SELECT player_name, SUM(score) AS total_score FROM players INNER JOIN high_scores ON players.player_id = high_scores.player_id GROUP BY player_name;",
      "SELECT player_id, player_name, rank FROM players LEFT JOIN leaderboard ON players.player_id = leaderboard.player_id;",
      "SELECT player_id, player_name, rank FROM players RIGHT JOIN leaderboard ON players.player_id = leaderboard.player_id;",
      "SELECT player_id, player_name, rank FROM players FULL JOIN leaderboard ON players.player_id = leaderboard.player_id;",
      "SELECT player_id, player_name, rank FROM players INNER JOIN leaderboard ON players.player_id = leaderboard.player_id WHERE rank < 10;",
      "SELECT player_id, game_id, score FROM high_scores WHERE player_id = 1;",
      "SELECT player_id, game_id, score FROM high_scores WHERE player_id = (SELECT player_id FROM players WHERE player_name = 'Alice');",
      "SELECT player_id, game_id, MAX(score) AS max_score FROM high_scores GROUP BY player_id;",
      "SELECT player_id, player_name FROM players WHERE player_id = 1;",
      "SELECT game_id, game_title, game_genre FROM games WHERE game_genre = 'Action';",
      "SELECT player_id, game_id, score FROM high_scores WHERE score > 100;",
      "SELECT player_name, player_email FROM players WHERE player_name LIKE '%John%';",
      "SELECT MAX(score) AS highest_score FROM high_scores;",
      "SELECT player_id, game_id, score FROM game_scores ORDER BY score DESC LIMIT 10;",
      "SELECT player_name, game_title, score FROM players p JOIN game_scores gs ON p.player_id = gs.player_id JOIN games g ON gs.game_id = g.game_id;",
      "SELECT player_id, rank FROM leaderboard WHERE rank <= 3;",
      "SELECT COUNT(*) AS total_players FROM players;",
      "SELECT AVG(score) AS average_score FROM high_scores;",
      "SELECT player_name, game_title, score FROM players p INNER JOIN game_scores gs ON p.player_id = gs.player_id INNER JOIN games g ON gs.game_id = g.game_id WHERE score > 50;",
      "SELECT player_id, rank FROM leaderboard ORDER BY rank ASC;",
      "SELECT player_email, game_genre FROM players p JOIN game_scores gs ON p.player_id = gs.player_id JOIN games g ON gs.game_id = g.game_id WHERE player_email LIKE '%@gmail.com';",
      "SELECT player_id, game_title, score FROM players p LEFT JOIN game_scores gs ON p.player_id = gs.player_id JOIN games g ON gs.game_id = g.game_id;",
      "SELECT player_id, game_title, score FROM players p RIGHT JOIN game_scores gs ON p.player_id = gs.player_id JOIN games g ON gs.game_id = g.game_id;",
      "SELECT player_id, player_name, rank FROM players p LEFT JOIN leaderboard lb ON p.player_id = lb.player_id;",
      "SELECT player_id, game_id, score FROM high_scores WHERE player_id = (SELECT player_id FROM players WHERE player_name = 'Alice');",
      "SELECT player_name, COUNT(game_id) AS num_games_played FROM players p JOIN game_scores gs ON p.player_id = gs.player_id GROUP BY p.player_name;",
      "SELECT player_id, game_title, rank FROM players p JOIN game_scores gs ON p.player_id = gs.player_id JOIN leaderboard lb ON p.player_id = lb.player_id;",
      "SELECT player_id, game_title, score FROM players p JOIN game_scores gs ON p.player_id = gs.player_id INNER JOIN games g ON gs.game_id = g.game_id WHERE game_genre = 'Strategy';"
    ]
  }
]