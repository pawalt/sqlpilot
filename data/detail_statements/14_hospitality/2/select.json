[
  {
    "statements": [
      "SELECT * FROM RestaurantOrders;",
      "SELECT order_id, customer_id, order_date FROM RestaurantOrders;",
      "SELECT order_id, total_amount FROM RestaurantOrders;",
      "SELECT * FROM RestaurantOrders WHERE customer_id = 1;",
      "SELECT * FROM RestaurantOrders WHERE order_date = '2021-10-01';",
      "SELECT order_id, total_amount FROM RestaurantOrders WHERE status = 'Completed';",
      "SELECT order_id, total_amount FROM RestaurantOrders WHERE total_amount > 50;",
      "SELECT order_id, total_amount FROM RestaurantOrders WHERE status = 'Pending';",
      "SELECT MAX(total_amount) FROM RestaurantOrders;",
      "SELECT MIN(total_amount) FROM RestaurantOrders;",
      "SELECT COUNT(*) FROM RestaurantOrders;",
      "SELECT AVG(total_amount) FROM RestaurantOrders;",
      "SELECT * FROM RestaurantOrders ORDER BY order_date DESC;",
      "SELECT customer_id, COUNT(order_id) FROM RestaurantOrders GROUP BY customer_id;",
      "SELECT SUM(total_amount) FROM RestaurantOrders WHERE customer_id = 2;",
      "SELECT customer_id, AVG(total_amount) FROM RestaurantOrders GROUP BY customer_id HAVING AVG(total_amount) > 30;",
      "SELECT customer_id, MAX(total_amount) FROM RestaurantOrders GROUP BY customer_id HAVING MAX(total_amount) < 100;",
      "SELECT * FROM RestaurantOrders WHERE status IN ('Pending', 'Completed');",
      "SELECT customer_id, COUNT(DISTINCT order_id) FROM RestaurantOrders GROUP BY customer_id;",
      "SELECT customer_id, order_date, status FROM RestaurantOrders WHERE total_amount BETWEEN 50 AND 100;",
      "SELECT * FROM RestaurantOrders WHERE total_amount > 100",
      "SELECT customer_id, order_date FROM RestaurantOrders WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT customer_id, COUNT(order_id) AS order_count FROM RestaurantOrders GROUP BY customer_id",
      "SELECT customer_id, SUM(total_amount) AS total_spent FROM RestaurantOrders GROUP BY customer_id HAVING total_spent > 500",
      "SELECT customer_id, AVG(total_amount) AS avg_amount FROM RestaurantOrders GROUP BY customer_id ORDER BY avg_amount DESC",
      "SELECT DISTINCT customer_id FROM RestaurantOrders",
      "SELECT customer_id, MAX(total_amount) AS max_amount FROM RestaurantOrders GROUP BY customer_id",
      "SELECT COUNT(DISTINCT customer_id) AS unique_customers FROM RestaurantOrders",
      "SELECT customer_id, MIN(order_date) AS first_order FROM RestaurantOrders GROUP BY customer_id",
      "SELECT customer_id, AVG(total_amount) AS avg_amount FROM RestaurantOrders GROUP BY customer_id HAVING avg_amount < 50",
      "SELECT order_id, customer_id, order_date FROM RestaurantOrders WHERE status = 'Pending'",
      "SELECT customer_id, order_date, total_amount FROM RestaurantOrders WHERE total_amount BETWEEN 50 AND 100",
      "SELECT customer_id, DATE_FORMAT(order_date, '%Y-%m-%d') AS formatted_date FROM RestaurantOrders",
      "SELECT customer_id, SUM(total_amount) AS total_spent, MONTH(order_date) AS order_month FROM RestaurantOrders GROUP BY customer_id, order_month",
      "SELECT customer_id, AVG(total_amount) AS avg_amount FROM RestaurantOrders WHERE status = 'Completed' GROUP BY customer_id",
      "SELECT customer_id, COUNT(order_id) AS order_count FROM RestaurantOrders WHERE DATE(order_date) = CURRENT_DATE",
      "SELECT customer_id, total_amount FROM RestaurantOrders WHERE total_amount = (SELECT MAX(total_amount) FROM RestaurantOrders)",
      "SELECT customer_id, SUM(total_amount) AS total_spent FROM RestaurantOrders WHERE YEAR(order_date) = 2021 GROUP BY customer_id",
      "SELECT MAX(total_amount) AS max_order_amount, MIN(total_amount) AS min_order_amount FROM RestaurantOrders",
      "SELECT customer_id, AVG(total_amount) AS avg_amount FROM RestaurantOrders WHERE MONTH(order_date) = 10 GROUP BY customer_id",
      "SELECT customer_id, total_amount, DATEDIFF(CURRENT_DATE, order_date) AS days_since_order FROM RestaurantOrders ORDER BY days_since_order ASC LIMIT 10"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Restaurants;",
      "SELECT restaurant_name, address FROM Restaurants;",
      "SELECT * FROM Orders;",
      "SELECT order_id, restaurant_id, customer_name FROM Orders;",
      "SELECT order_id, order_date, order_total FROM Orders;",
      "SELECT restaurant_name, address, customer_name, order_date FROM Restaurants JOIN Orders ON Restaurants.restaurant_id = Orders.restaurant_id;",
      "SELECT restaurant_name, address, customer_name, order_date FROM Restaurants, Orders WHERE Restaurants.restaurant_id = Orders.restaurant_id;",
      "SELECT * FROM Restaurants WHERE restaurant_id = 1;",
      "SELECT * FROM Restaurants WHERE restaurant_name = 'ABC Restaurant';",
      "SELECT * FROM Orders WHERE order_id = 101;",
      "SELECT * FROM Orders WHERE customer_name = 'John Doe';",
      "SELECT * FROM Restaurants WHERE address LIKE '%Street%';",
      "SELECT * FROM Orders WHERE order_total > 50.00;",
      "SELECT * FROM Restaurants ORDER BY restaurant_name ASC;",
      "SELECT * FROM Restaurants ORDER BY restaurant_name DESC;",
      "SELECT * FROM Orders ORDER BY order_date ASC;",
      "SELECT * FROM Orders ORDER BY order_total DESC;",
      "SELECT COUNT(*) AS total_restaurants FROM Restaurants;",
      "SELECT COUNT(*) AS total_orders FROM Orders;",
      "SELECT AVG(order_total) AS avg_order_total FROM Orders;",
      "SELECT * FROM Restaurants;",
      "SELECT restaurant_name, address FROM Restaurants WHERE restaurant_id = 1;",
      "SELECT * FROM Orders JOIN Restaurants ON Orders.restaurant_id = Restaurants.restaurant_id;",
      "SELECT customer_name, order_date, order_total FROM Orders WHERE order_total > 100;",
      "SELECT Orders.customer_name, Restaurants.restaurant_name, Orders.order_total FROM Orders JOIN Restaurants ON Orders.restaurant_id = Restaurants.restaurant_id;",
      "SELECT Orders.customer_name, Orders.order_date, Orders.order_total, Restaurants.restaurant_name FROM Orders JOIN Restaurants ON Orders.restaurant_id = Restaurants.restaurant_id WHERE Orders.order_total > 50;",
      "SELECT Orders.customer_name, Orders.order_date, Orders.order_total, Restaurants.restaurant_name FROM Orders JOIN Restaurants ON Orders.restaurant_id = Restaurants.restaurant_id ORDER BY Orders.order_date DESC;",
      "SELECT * FROM Orders WHERE order_date BETWEEN '2022-01-01' AND '2022-03-31';",
      "SELECT restaurant_id, SUM(order_total) AS total_sales FROM Orders GROUP BY restaurant_id;",
      "SELECT restaurant_id, AVG(order_total) AS average_order_total FROM Orders GROUP BY restaurant_id HAVING AVG(order_total) > 50;",
      "SELECT restaurant_id, COUNT(*) AS total_orders FROM Orders GROUP BY restaurant_id;",
      "SELECT Restaurants.restaurant_name, COUNT(*) AS total_orders, SUM(order_total) AS total_sales FROM Orders JOIN Restaurants ON Orders.restaurant_id = Restaurants.restaurant_id GROUP BY Restaurants.restaurant_name;",
      "SELECT Orders.order_id, Orders.customer_name, Orders.order_date, Orders.order_total, Restaurants.restaurant_name, Restaurants.address FROM Orders JOIN Restaurants ON Orders.restaurant_id = Restaurants.restaurant_id;",
      "SELECT Orders.customer_name, COUNT(*) AS total_orders, MIN(Orders.order_total) AS min_order_total, MAX(Orders.order_total) AS max_order_total, AVG(Orders.order_total) AS avg_order_total FROM Orders GROUP BY Orders.customer_name;",
      "SELECT customer_name, COUNT(*) AS total_orders, SUM(order_total) AS total_spent FROM Orders GROUP BY customer_name ORDER BY total_spent DESC;",
      "SELECT * FROM Restaurants WHERE restaurant_id IN (SELECT restaurant_id FROM Orders WHERE order_date = '2022-05-31');",
      "SELECT customer_name, AVG(order_total) AS avg_order_total FROM Orders WHERE order_date > '2022-06-30' GROUP BY customer_name HAVING AVG(order_total) > 75;",
      "SELECT customer_name, address FROM Restaurants JOIN Orders ON Restaurants.restaurant_id = Orders.restaurant_id WHERE order_date BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT DISTINCT customer_name FROM Orders;",
      "SELECT Restaurants.restaurant_name, COUNT(*) AS total_orders, SUM(order_total) AS total_sales FROM Orders JOIN Restaurants ON Orders.restaurant_id = Restaurants.restaurant_id GROUP BY Restaurants.restaurant_name HAVING total_sales > 1000;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Orders;",
      "SELECT order_id, order_date FROM Orders WHERE total_amount > 100;",
      "SELECT ingredient_name, quantity FROM Ingredients WHERE quantity < 50;",
      "SELECT * FROM OrderItems WHERE quantity >= 10;",
      "SELECT order_id, customer_id, order_date FROM Orders WHERE order_date >= '2022-01-01';",
      "SELECT * FROM Orders INNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id;",
      "SELECT Orders.order_id, Orders.customer_id, Ingredients.ingredient_name, OrderItems.quantity FROM Orders INNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id INNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id;",
      "SELECT Orders.order_id, Orders.customer_id, OrderItems.quantity, Ingredients.ingredient_name FROM Orders LEFT JOIN OrderItems ON Orders.order_id = OrderItems.order_id LEFT JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id;",
      "SELECT * FROM Orders ORDER BY order_date DESC;",
      "SELECT ingredient_name, SUM(quantity) AS total_quantity FROM Ingredients GROUP BY ingredient_name;",
      "SELECT order_id, SUM(quantity) AS total_quantity FROM OrderItems GROUP BY order_id HAVING total_quantity > 50;",
      "SELECT customer_id, AVG(total_amount) AS avg_amount FROM Orders GROUP BY customer_id;",
      "SELECT order_id, customer_id, SUM(total_amount) AS total_amount FROM Orders GROUP BY order_id, customer_id;",
      "SELECT * FROM Orders WHERE total_amount BETWEEN 50 AND 100;",
      "SELECT order_id, customer_id, order_date FROM Orders WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT order_id, customer_id, order_date FROM Orders WHERE customer_id IN ('123e4567-e89b-12d3-a456-426614174000', '223e4567-e89b-12d3-a456-426614174000');",
      "SELECT order_id, customer_id, order_date FROM Orders WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000' AND order_date >= '2022-01-01';",
      "SELECT order_id, customer_id, order_date FROM Orders WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000' OR total_amount > 100;",
      "SELECT * FROM Orders WHERE EXTRACT(YEAR FROM order_date) = 2022;",
      "SELECT * FROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nWHERE Orders.customer_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT Orders.order_id, Orders.order_date, SUM(Ingredients.quantity * OrderItems.quantity) AS total_quantity\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nGROUP BY Orders.order_id, Orders.order_date;",
      "SELECT Orders.order_id, Orders.order_date, SUM(Ingredients.quantity * OrderItems.quantity) AS total_quantity\nFROM Orders\nLEFT JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nLEFT JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nGROUP BY Orders.order_id, Orders.order_date;",
      "SELECT Orders.order_id, Orders.order_date, Ingredients.ingredient_name, OrderItems.quantity\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nWHERE Orders.order_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT Orders.order_id, Orders.order_date, Orders.total_amount, Ingredients.ingredient_name, OrderItems.quantity, (Ingredients.quantity * OrderItems.quantity) AS total_quantity\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nORDER BY Orders.order_date DESC;",
      "SELECT Orders.order_id, Orders.order_date, Ingredients.ingredient_name, SUM(Ingredients.quantity * OrderItems.quantity) AS total_quantity\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nGROUP BY Orders.order_id, Orders.order_date, Ingredients.ingredient_name;",
      "SELECT Orders.order_id, Orders.order_date, SUM(Ingredients.quantity * OrderItems.quantity) AS total_quantity\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nHAVING total_quantity > 100;",
      "SELECT Orders.customer_id, COUNT(DISTINCT Orders.order_id) AS total_orders\nFROM Orders\nGROUP BY Orders.customer_id\nHAVING total_orders > 5;",
      "SELECT Orders.order_id, Orders.order_date, SUM(Ingredients.quantity) AS total_quantity\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nWHERE Orders.order_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY Orders.order_id, Orders.order_date\nHAVING total_quantity > 50;",
      "SELECT Orders.customer_id, Orders.order_date, AVG(total_amount) AS average_order_amount\nFROM Orders\nGROUP BY Orders.customer_id, Orders.order_date;",
      "SELECT Orders.customer_id, Months.order_month, SUM(Orders.total_amount) AS total_amount\nFROM Orders\nINNER JOIN (\n    SELECT order_id, EXTRACT(MONTH FROM order_date) AS order_month\n    FROM Orders\n) AS Months ON Orders.order_id = Months.order_id\nGROUP BY Orders.customer_id, Months.order_month;",
      "SELECT Orders.order_id, Orders.order_date, Orders.total_amount, Ingredients.ingredient_name, OrderItems.quantity, (Ingredients.quantity * OrderItems.quantity) AS total_quantity\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nWHERE Orders.total_amount > 1000;",
      "SELECT Orders.order_id, Orders.order_date, Ingredients.ingredient_name, OrderItems.quantity, (Ingredients.quantity * OrderItems.quantity) AS total_quantity\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nWHERE Orders.order_date BETWEEN '2022-01-01' AND '2022-12-31'\nORDER BY Orders.order_date ASC, total_quantity DESC;",
      "SELECT Orders.order_id, Orders.order_date, Orders.total_amount, COUNT(Ingredients.ingredient_id) AS total_ingredients\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nGROUP BY Orders.order_id, Orders.order_date, Orders.total_amount;",
      "SELECT Orders.order_id, Orders.order_date, Orders.total_amount, COUNT(Ingredients.ingredient_id) AS total_ingredients\nFROM Orders\nLEFT JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nLEFT JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nGROUP BY Orders.order_id, Orders.order_date, Orders.total_amount\nHAVING total_ingredients < 3;",
      "SELECT Orders.order_id, Orders.order_date, Ingredients.ingredient_name, OrderItems.quantity, (Ingredients.quantity * OrderItems.quantity) AS total_quantity\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nWHERE Orders.order_date BETWEEN '2022-01-01' AND '2022-12-31'\nAND Orders.total_amount > 500\nORDER BY total_quantity DESC;",
      "SELECT Orders.order_id, Orders.order_date, Ingredients.ingredient_name, SUM(Ingredients.quantity * OrderItems.quantity) AS total_quantity\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nGROUP BY Orders.order_id, Orders.order_date, Ingredients.ingredient_name\nORDER BY total_quantity DESC;",
      "SELECT Orders.order_id, Orders.order_date, Orders.total_amount, COUNT(Ingredients.ingredient_id) AS total_ingredients\nFROM Orders\nINNER JOIN OrderItems ON Orders.order_id = OrderItems.order_id\nINNER JOIN Ingredients ON OrderItems.ingredient_id = Ingredients.ingredient_id\nWHERE Orders.order_date BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY Orders.order_id, Orders.order_date, Orders.total_amount\nHAVING total_ingredients > 3;",
      "SELECT Orders.customer_id, COUNT(DISTINCT Orders.order_id) AS total_orders\nFROM Orders\nGROUP BY Orders.customer_id\nORDER BY total_orders DESC;",
      "SELECT Orders.customer_id, COUNT(DISTINCT Orders.order_id) AS total_orders, AVG(total_amount) AS average_order_amount\nFROM Orders\nGROUP BY Orders.customer_id\nORDER BY average_order_amount DESC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Customers;",
      "SELECT customer_id, customer_name FROM Customers;",
      "SELECT customer_name, customer_email FROM Customers;",
      "SELECT * FROM Orders;",
      "SELECT order_id, customer_id, total_amount FROM Orders;",
      "SELECT order_date FROM Orders WHERE customer_id = 1;",
      "SELECT * FROM Ingredients;",
      "SELECT ingredient_id, ingredient_name FROM Ingredients;",
      "SELECT ingredient_name, quantity_in_stock FROM Ingredients;",
      "SELECT * FROM OrderItems;",
      "SELECT order_id, ingredient_id, quantity_ordered FROM OrderItems;",
      "SELECT SUM(total_amount) AS total_sales FROM Orders;",
      "SELECT COUNT(*) AS total_customers FROM Customers;",
      "SELECT AVG(total_amount) AS average_order_amount FROM Orders;",
      "SELECT ingredient_name, SUM(quantity_ordered) AS total_ordered FROM Ingredients INNER JOIN OrderItems ON Ingredients.ingredient_id = OrderItems.ingredient_id GROUP BY Ingredients.ingredient_id;",
      "SELECT customer_name, order_date FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id;",
      "SELECT customer_name, order_date, SUM(total_amount) AS total_order_amount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_id;",
      "SELECT customer_name, COUNT(order_id) AS total_orders FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_id;",
      "SELECT * FROM Orders ORDER BY total_amount DESC;",
      "SELECT * FROM Orders WHERE total_amount > 1000;",
      "SELECT * FROM Customers WHERE customer_name = 'John Doe';",
      "SELECT customer_name, customer_email FROM Customers WHERE customer_id = 1;",
      "SELECT customer_name, order_date, total_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id;",
      "SELECT i.ingredient_name, oi.quantity_ordered FROM Ingredients i JOIN OrderItems oi ON i.ingredient_id = oi.ingredient_id WHERE oi.order_id = 1;",
      "SELECT o.order_id, o.total_amount, c.customer_name FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id ORDER BY o.total_amount DESC;",
      "SELECT c.customer_name, SUM(oi.quantity_ordered) AS total_ordered FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN OrderItems oi ON o.order_id = oi.order_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, i.ingredient_name, oi.quantity_ordered FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Ingredients i ON oi.ingredient_id = i.ingredient_id ORDER BY c.customer_name ASC, oi.quantity_ordered DESC;",
      "SELECT c.customer_name, COUNT(o.order_id) AS total_orders FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
      "SELECT o.order_id, SUM(oi.quantity_ordered * i.quantity_in_stock) AS total_stock_used FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Ingredients i ON oi.ingredient_id = i.ingredient_id GROUP BY o.order_id;",
      "SELECT c.customer_name, AVG(o.total_amount) AS average_order_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING AVG(o.total_amount) > 1000;",
      "SELECT c.customer_name, i.ingredient_name, SUM(oi.quantity_ordered) AS total_ordered FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Ingredients i ON oi.ingredient_id = i.ingredient_id GROUP BY c.customer_name, i.ingredient_name;",
      "SELECT c.customer_name, MAX(o.total_amount) AS max_order_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, MIN(o.total_amount) AS min_order_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, COUNT(DISTINCT o.order_id) AS unique_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id;",
      "SELECT c.customer_name, i.ingredient_name, MAX(total_stock_used) AS max_stock_used FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Ingredients i ON oi.ingredient_id = i.ingredient_id GROUP BY c.customer_name, i.ingredient_name;",
      "SELECT c.customer_name, AVG(oi.quantity_ordered) AS average_quantity_ordered FROM Customers c JOIN OrderItems oi ON c.customer_id = oi.order_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, COUNT(o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
      "SELECT i.ingredient_name, SUM(oi.quantity_ordered) AS total_ordered FROM Ingredients i JOIN OrderItems oi ON i.ingredient_id = oi.ingredient_id GROUP BY i.ingredient_name;",
      "SELECT c.customer_name, COUNT(o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING total_spent > 1000;",
      "SELECT c.customer_name, i.ingredient_name, SUM(oi.quantity_ordered * i.quantity_in_stock) AS total_stock_used FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Ingredients i ON oi.ingredient_id = i.ingredient_id GROUP BY c.customer_name, i.ingredient_name;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Customers",
      "SELECT customer_id, customer_name FROM Customers",
      "SELECT * FROM Orders",
      "SELECT order_id, total_amount FROM Orders",
      "SELECT * FROM Menu",
      "SELECT item_id, item_name FROM Menu",
      "SELECT * FROM Ingredients",
      "SELECT ingredient_id, ingredient_name FROM Ingredients",
      "SELECT * FROM Inventory",
      "SELECT inventory_id, quantity_in_stock FROM Inventory",
      "SELECT c.customer_name, o.order_date FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id",
      "SELECT m.item_name, m.price FROM Menu m",
      "SELECT i.ingredient_name, i.quantity FROM Ingredients i",
      "SELECT iv.inventory_id, iv.quantity_in_stock FROM Inventory iv",
      "SELECT c.customer_name, o.total_amount FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id",
      "SELECT m.item_name, i.ingredient_name FROM Menu m, Ingredients i",
      "SELECT c.customer_name, o.total_amount, oi.quantity_in_stock FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id INNER JOIN Inventory oi ON o.order_id = oi.inventory_id",
      "SELECT * FROM Customers WHERE customer_id = 1",
      "SELECT item_name FROM Menu WHERE price < 10",
      "SELECT ingredient_name FROM Ingredients WHERE quantity > 100",
      "SELECT customer_name, phone_number FROM Customers WHERE customer_id = 1;",
      "SELECT customer_name, order_date, total_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id;",
      "SELECT item_name, price FROM Menu WHERE price <= 10.00;",
      "SELECT ingredient_name, quantity FROM Ingredients WHERE quantity >= 100;",
      "SELECT item_name, price FROM Menu WHERE item_name LIKE '%Pizza%';",
      "SELECT customer_name, phone_number FROM Customers WHERE customer_name LIKE 'A%';",
      "SELECT order_id, total_amount FROM Orders ORDER BY total_amount DESC;",
      "SELECT customer_name, order_date, total_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE total_amount > 100.00;",
      "SELECT item_name, price FROM Menu WHERE price BETWEEN 5.00 AND 15.00;",
      "SELECT ingredient_name, quantity FROM Ingredients WHERE quantity BETWEEN 50 AND 100;",
      "SELECT customer_name, order_date, total_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id ORDER BY order_date;",
      "SELECT item_name, price FROM Menu WHERE item_name IN ('Burger', 'Pizza', 'Salad');",
      "SELECT customer_name, phone_number FROM Customers WHERE customer_id IN (1, 3, 5);",
      "SELECT order_id, total_amount FROM Orders WHERE order_date >= '2022-01-01';",
      "SELECT ingredient_name, quantity FROM Ingredients WHERE ingredient_name NOT LIKE '%Sugar%';",
      "SELECT customer_name, COUNT(order_id) AS order_count FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY customer_name;",
      "SELECT item_name, SUM(price) AS total_price FROM Menu GROUP BY item_name;",
      "SELECT customer_name, MAX(total_amount) AS max_order_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY customer_name;",
      "SELECT ingredient_name, AVG(quantity) AS avg_quantity FROM Ingredients GROUP BY ingredient_name;",
      "SELECT customer_name, phone_number, order_date FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id;"
    ]
  }
]