[
  {
    "statements": [
      "SELECT * FROM blockchain_transactions;",
      "SELECT transaction_id, block_number, timestamp FROM blockchain_transactions;",
      "SELECT sender_address, receiver_address, amount FROM blockchain_transactions;",
      "SELECT * FROM blockchain_transactions WHERE amount > 1000;",
      "SELECT * FROM blockchain_transactions WHERE sender_address = '0x123ABC';",
      "SELECT count(*) FROM blockchain_transactions;",
      "SELECT AVG(amount) FROM blockchain_transactions;",
      "SELECT MAX(amount) FROM blockchain_transactions;",
      "SELECT MIN(amount) FROM blockchain_transactions;",
      "SELECT SUM(amount) FROM blockchain_transactions;",
      "SELECT * FROM blockchain_transactions ORDER BY timestamp DESC;",
      "SELECT * FROM blockchain_transactions WHERE block_number > 1000 ORDER BY block_number ASC;",
      "SELECT * FROM blockchain_transactions WHERE timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT * FROM blockchain_transactions WHERE sender_address LIKE '0x%';",
      "SELECT * FROM blockchain_transactions WHERE receiver_address IN ('0xAAA', '0xBBB', '0xCCC');",
      "SELECT COUNT(DISTINCT sender_address) FROM blockchain_transactions;",
      "SELECT AVG(amount) AS avg_amount, MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM blockchain_transactions;",
      "SELECT block_number, COUNT(*) AS num_transactions FROM blockchain_transactions GROUP BY block_number;",
      "SELECT sender_address, SUM(amount) AS total_sent FROM blockchain_transactions GROUP BY sender_address;",
      "SELECT receiver_address, SUM(amount) AS total_received FROM blockchain_transactions GROUP BY receiver_address;",
      "SELECT * FROM blockchain_transactions WHERE block_number > 100 AND amount >= 100.00;",
      "SELECT transaction_id, block_number FROM blockchain_transactions WHERE sender_address = '0xABCDEF';",
      "SELECT MAX(amount) AS largest_amount FROM blockchain_transactions;",
      "SELECT AVG(amount) AS average_amount FROM blockchain_transactions WHERE receiver_address = '0x123456';",
      "SELECT COUNT(*) AS total_transactions FROM blockchain_transactions WHERE timestamp BETWEEN '2022-01-01' AND '2022-06-30';",
      "SELECT transaction_id, amount FROM blockchain_transactions WHERE sender_address = '0x789012' AND receiver_address = '0x345678';",
      "SELECT DISTINCT sender_address FROM blockchain_transactions WHERE block_number <= 50;",
      "SELECT * FROM blockchain_transactions ORDER BY timestamp DESC LIMIT 10;",
      "SELECT AVG(amount) AS average_amount, MIN(amount) AS min_amount, MAX(amount) AS max_amount FROM blockchain_transactions WHERE timestamp > '2022-01-01';",
      "SELECT transaction_id, amount FROM blockchain_transactions WHERE amount > 500.00 AND block_number % 2 = 0;",
      "SELECT COUNT(DISTINCT receiver_address) AS unique_receivers FROM blockchain_transactions WHERE sender_address = '0xDEF123';",
      "SELECT sender_address, SUM(amount) AS total_sent_amount FROM blockchain_transactions GROUP BY sender_address HAVING total_sent_amount > 1000.00;",
      "SELECT * FROM blockchain_transactions WHERE sender_address IN ('0x123456', '0xABCDEF', '0x789012');",
      "SELECT timestamp, block_number FROM blockchain_transactions WHERE receiver_address = '0xABCDEF' AND timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT transaction_id, receiver_address FROM blockchain_transactions WHERE amount < 50.00 AND block_number BETWEEN 50 AND 100;",
      "SELECT COUNT(*) AS total_transactions, SUM(amount) AS total_amount FROM blockchain_transactions WHERE timestamp < '2022-06-30';",
      "SELECT sender_address, AVG(amount) AS average_sent_amount FROM blockchain_transactions WHERE receiver_address = '0xABCDEF' GROUP BY sender_address;",
      "SELECT receiver_address, SUM(amount) AS total_received_amount FROM blockchain_transactions WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY receiver_address HAVING total_received_amount > 500.00;",
      "SELECT * FROM blockchain_transactions WHERE timestamp = (SELECT MAX(timestamp) FROM blockchain_transactions);",
      "SELECT sender_address, receiver_address FROM blockchain_transactions WHERE amount > 1000.00 AND timestamp BETWEEN '2022-01-01' AND '2022-12-31';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM blockchain_transactions;",
      "SELECT id, transaction_hash, transaction_date FROM blockchain_transactions WHERE id = 1;",
      "SELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE amount > 100;",
      "SELECT * FROM blockchain_blocks;",
      "SELECT block_number, block_hash, block_timestamp FROM blockchain_blocks WHERE block_number = 100;",
      "SELECT miner_address FROM blockchain_blocks WHERE num_transactions > 10;",
      "SELECT id, transaction_date, sender_address FROM blockchain_transactions WHERE receiver_address = '0xabc123';",
      "SELECT * FROM blockchain_transactions WHERE transaction_date >= '2022-01-01';",
      "SELECT block_number, block_hash, num_transactions FROM blockchain_blocks WHERE block_timestamp >= '2022-01-01 00:00:00';",
      "SELECT id, transaction_date, sender_address, amount FROM blockchain_transactions WHERE amount BETWEEN 50 AND 100;",
      "SELECT * FROM blockchain_blocks WHERE miner_address = '0x123def';",
      "SELECT block_number, block_timestamp, miner_address FROM blockchain_blocks WHERE num_transactions < 5;",
      "SELECT id, transaction_hash, receiver_address FROM blockchain_transactions WHERE sender_address = '0x456ghi';",
      "SELECT * FROM blockchain_transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT block_number, block_hash, block_timestamp FROM blockchain_blocks ORDER BY block_timestamp DESC;",
      "SELECT id, sender_address, amount FROM blockchain_transactions ORDER BY amount ASC;",
      "SELECT * FROM blockchain_blocks WHERE num_transactions > 20 ORDER BY block_number ASC;",
      "SELECT id, transaction_date, sender_address, amount FROM blockchain_transactions ORDER BY amount DESC;",
      "SELECT block_number, miner_address, num_transactions FROM blockchain_blocks ORDER BY block_timestamp ASC;",
      "SELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE sender_address = receiver_address;",
      "SELECT * FROM blockchain_transactions WHERE sender_address = '0x1234567890abcdef'",
      "SELECT transaction_hash, amount FROM blockchain_transactions WHERE amount > 1000",
      "SELECT sender_address, receiver_address, MAX(amount) FROM blockchain_transactions GROUP BY sender_address, receiver_address",
      "SELECT COUNT(*) FROM blockchain_transactions WHERE transaction_date >= '2022-01-01'",
      "SELECT AVG(amount) FROM blockchain_transactions WHERE sender_address = '0x9876543210abcdef'",
      "SELECT * FROM blockchain_blocks WHERE block_timestamp >= '2022-01-01 00:00:00' AND miner_address = '0xabcdef1234567890'",
      "SELECT block_number, COUNT(*) FROM blockchain_blocks GROUP BY block_number HAVING COUNT(*) > 5",
      "SELECT block_number, MIN(num_transactions) FROM blockchain_blocks WHERE miner_address = '0xabcdef1234567890'",
      "SELECT block_number, AVG(num_transactions) FROM blockchain_blocks GROUP BY block_number ORDER BY AVG(num_transactions) DESC",
      "SELECT b.block_number, bt.transaction_hash FROM blockchain_blocks b JOIN blockchain_transactions bt ON b.block_number = bt.id"
    ]
  },
  {
    "statements": [
      "SELECT * FROM blockchain_transactions;",
      "SELECT transaction_id, transaction_hash, transaction_date FROM blockchain_transactions WHERE sender_address='abc123';",
      "SELECT block_id, block_hash, block_date FROM block_details WHERE miner_address='xyz456';",
      "SELECT transaction_id, transaction_hash, transaction_date, success FROM transaction_details WHERE gas_fee > 100;",
      "SELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE block_id = 1000;",
      "SELECT * FROM block_details WHERE block_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT transaction_id, transaction_hash, sender_address, receiver_address, amount FROM blockchain_transactions WHERE block_id = 500 AND transaction_date >= '2022-02-01';",
      "SELECT AVG(amount) AS average_amount FROM blockchain_transactions WHERE receiver_address='def789';",
      "SELECT MAX(gas_fee) AS max_gas_fee, MIN(gas_fee) AS min_gas_fee FROM transaction_details WHERE success = True;",
      "SELECT COUNT(*) AS transaction_count FROM block_details WHERE miner_address='pqr321';",
      "SELECT SUM(amount) AS total_amount FROM blockchain_transactions WHERE block_id IN (100, 200, 300);",
      "SELECT DISTINCT(sender_address) FROM blockchain_transactions;",
      "SELECT sender_address, SUM(amount) AS total_sent FROM blockchain_transactions GROUP BY sender_address;",
      "SELECT * FROM transaction_details WHERE success = False ORDER BY transaction_date DESC;",
      "SELECT AVG(gas_fee) AS average_gas_fee, MAX(gas_fee) AS max_gas_fee, MIN(gas_fee) AS min_gas_fee FROM transaction_details;",
      "SELECT receiver_address, COUNT(transaction_id) AS transaction_count FROM blockchain_transactions GROUP BY receiver_address HAVING COUNT(transaction_id) > 10;",
      "SELECT block_id, SUM(amount) AS total_amount FROM blockchain_transactions GROUP BY block_id HAVING SUM(amount) > 1000;",
      "SELECT DISTINCT(miner_address) FROM block_details WHERE block_date < '2022-03-01';",
      "SELECT transaction_id, block_id, amount FROM blockchain_transactions WHERE sender_address='mno987' OR receiver_address='mno987';",
      "SELECT block_id, AVG(amount) AS average_amount FROM blockchain_transactions GROUP BY block_id HAVING AVG(amount) > 500;",
      "SELECT * FROM blockchain_transactions WHERE amount > 1000",
      "SELECT block_id, block_date, miner_address FROM block_details WHERE transaction_count > 5",
      "SELECT transaction_id, transaction_hash, gas_fee FROM transaction_details WHERE gas_fee < 50",
      "SELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE amount < 500",
      "SELECT block_id, block_date, miner_address FROM block_details WHERE block_date >= '2022-01-01'",
      "SELECT transaction_id, transaction_hash, success FROM transaction_details WHERE success = true",
      "SELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE sender_address = 'address1'",
      "SELECT transaction_id, transaction_hash, gas_fee FROM transaction_details WHERE gas_fee > 100",
      "SELECT * FROM blockchain_transactions WHERE receiver_address = 'address2'",
      "SELECT block_id, block_hash, transaction_count FROM block_details WHERE miner_address = 'miner_address1'",
      "SELECT transaction_id, transaction_hash, success FROM transaction_details WHERE success = false",
      "SELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE amount between 100 and 500",
      "SELECT block_id, block_hash, transaction_count FROM block_details WHERE block_date <= '2022-03-31'",
      "SELECT transaction_id, transaction_hash, gas_fee FROM transaction_details WHERE gas_fee = 0",
      "SELECT * FROM blockchain_transactions WHERE sender_address = 'address3'",
      "SELECT block_id, block_date, miner_address FROM block_details WHERE transaction_count < 10",
      "SELECT transaction_id, transaction_hash, success FROM transaction_details WHERE transaction_date > '2022-02-01'",
      "SELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE receiver_address = 'address4'",
      "SELECT block_id, block_hash, transaction_count FROM block_details WHERE block_hash = 'hash1'",
      "SELECT transaction_id, transaction_hash, gas_fee FROM transaction_details WHERE gas_fee between 10 and 50"
    ]
  },
  {
    "statements": [
      "SELECT * FROM blockchain_transactions;",
      "SELECT transaction_id, transaction_amount FROM blockchain_transactions WHERE block_number = 100;",
      "SELECT block_number, block_hash FROM block_information WHERE block_timestamp > '2022-01-01';",
      "SELECT analysis_id, analysis_result FROM transaction_analysis WHERE analysis_timestamp < '2022-06-01';",
      "SELECT * FROM transaction_history ORDER BY history_timestamp DESC;",
      "SELECT transaction_id, block_number FROM blockchain_transactions WHERE transaction_amount > 1000;",
      "SELECT block_number, block_hash, block_timestamp FROM block_information WHERE miner_address = '0x123abc';",
      "SELECT transaction_id, transaction_hash FROM blockchain_transactions WHERE block_number = 50;",
      "SELECT * FROM transaction_analysis WHERE analysis_result LIKE '%fraud%';",
      "SELECT analysis_id, analysis_timestamp FROM transaction_analysis WHERE transaction_id = 500;",
      "SELECT history_id, transaction_id, previous_transaction_id FROM transaction_history WHERE history_timestamp < '2022-05-01';",
      "SELECT * FROM blockchain_transactions WHERE block_number IN (10, 20, 30);",
      "SELECT block_number, block_hash, block_timestamp, miner_address FROM block_information WHERE block_number = 50;",
      "SELECT transaction_id, transaction_amount FROM blockchain_transactions WHERE transaction_timestamp BETWEEN '2022-01-01' AND '2022-06-01';",
      "SELECT analysis_id, analysis_result FROM transaction_analysis WHERE analysis_timestamp > '2022-07-01';",
      "SELECT * FROM transaction_history WHERE transaction_id = 100 OR previous_transaction_id = 200;",
      "SELECT transaction_id, transaction_hash FROM blockchain_transactions WHERE block_number = 1000;",
      "SELECT block_number, block_timestamp FROM block_information WHERE block_number < 50;",
      "SELECT analysis_id, analysis_result FROM transaction_analysis WHERE transaction_id = 100 AND analysis_timestamp > '2022-06-01';",
      "SELECT * FROM blockchain_transactions WHERE transaction_amount < 5000;",
      "SELECT * FROM blockchain_transactions WHERE block_number > 100 AND transaction_amount > 1000",
      "SELECT transaction_id, transaction_amount, transaction_timestamp FROM blockchain_transactions WHERE transaction_amount > 5000 ORDER BY transaction_amount DESC",
      "SELECT bt.transaction_id, bt.transaction_hash, bi.block_timestamp FROM blockchain_transactions bt INNER JOIN block_information bi ON bt.block_number = bi.block_number",
      "SELECT * FROM transaction_analysis WHERE analysis_timestamp BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT bt.transaction_id, bt.transaction_amount, ta.analysis_result FROM blockchain_transactions bt LEFT JOIN transaction_analysis ta ON bt.transaction_id = ta.transaction_id",
      "SELECT * FROM blockchain_transactions WHERE transaction_id IN (SELECT transaction_id FROM transaction_history WHERE previous_transaction_id = 123)",
      "SELECT MIN(transaction_amount), MAX(transaction_amount), AVG(transaction_amount) FROM blockchain_transactions",
      "SELECT bt.transaction_id, bt.transaction_hash, bi.block_hash FROM blockchain_transactions bt LEFT JOIN block_information bi ON bt.block_number = bi.block_number WHERE bt.block_number < 50",
      "SELECT block_number, COUNT(*) FROM blockchain_transactions GROUP BY block_number",
      "SELECT transaction_id, transaction_timestamp FROM blockchain_transactions WHERE transaction_timestamp > '2021-12-01' AND transaction_amount < 500",
      "SELECT bt.transaction_id, bi.block_number, th.history_id FROM blockchain_transactions bt INNER JOIN block_information bi ON bt.block_number = bi.block_number INNER JOIN transaction_history th ON bt.transaction_id = th.transaction_id",
      "SELECT AVG(transaction_amount) AS average_amount, block_number FROM blockchain_transactions GROUP BY block_number HAVING block_number > 100",
      "SELECT bi.miner_address, COUNT(*) AS transactions_count FROM blockchain_transactions bt INNER JOIN block_information bi ON bt.block_number = bi.block_number GROUP BY bi.miner_address ORDER BY transactions_count DESC",
      "SELECT transaction_id, analysis_result FROM transaction_analysis WHERE analysis_result LIKE '%fraud%'",
      "SELECT bt.*, bi.block_hash FROM blockchain_transactions bt INNER JOIN block_information bi ON bt.block_number = bi.block_number WHERE bt.transaction_id = 123",
      "SELECT block_number, COUNT(*) AS transaction_count, SUM(transaction_amount) AS total_amount FROM blockchain_transactions GROUP BY block_number HAVING transaction_count > 2",
      "SELECT bt.transaction_id, bt.transaction_amount, th.history_timestamp FROM blockchain_transactions bt INNER JOIN transaction_history th ON bt.transaction_id = th.transaction_id WHERE th.history_id = 456",
      "SELECT MAX(block_number) AS max_block_number FROM block_information",
      "SELECT AVG(transaction_amount) AS average_amount FROM blockchain_transactions WHERE block_number < 100",
      "SELECT DISTINCT block_number FROM blockchain_transactions",
      "SELECT miner_address, block_number, AVG(transaction_amount) AS avg_amount FROM blockchain_transactions bt INNER JOIN block_information bi ON bt.block_number = bi.block_number GROUP BY miner_address, block_number HAVING AVG(transaction_amount) > 5000"
    ]
  },
  {
    "statements": [
      "SELECT * FROM blockchain_transactions;",
      "SELECT block_number, transaction_hash, sender_address, receiver_address FROM blockchain_transactions;",
      "SELECT transaction_id, transaction_amount FROM blockchain_transactions;",
      "SELECT * FROM blocks;",
      "SELECT block_number, block_hash, previous_block_hash FROM blocks;",
      "SELECT * FROM addresses;",
      "SELECT address_id, address, balance FROM addresses;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, block_number, sender_address_id, receiver_address_id FROM transactions;",
      "SELECT * FROM transaction_metadata;",
      "SELECT transaction_id, metadata_key, metadata_value FROM transaction_metadata;",
      "SELECT block_number, block_timestamp FROM blocks WHERE block_number > 100;",
      "SELECT sender_address, receiver_address FROM transactions WHERE block_number = 50;",
      "SELECT transaction_id, timestamp FROM transactions WHERE sender_address_id = 1;",
      "SELECT block_number, transaction_amount FROM blockchain_transactions WHERE timestamp > '2022-01-01';",
      "SELECT transaction_id, metadata_value FROM transaction_metadata WHERE metadata_key = 'status';",
      "SELECT sender_address, receiver_address FROM transactions JOIN addresses ON transactions.sender_address_id = addresses.address_id;",
      "SELECT sender_address, receiver_address, balance FROM transactions JOIN addresses ON transactions.sender_address_id = addresses.address_id;",
      "SELECT * FROM blocks ORDER BY block_timestamp DESC;",
      "SELECT block_number, block_hash, previous_block_hash FROM blocks WHERE block_timestamp > '2022-01-01';",
      "SELECT transaction_id, transaction_amount * 1.1 AS calculated_amount FROM blockchain_transactions;",
      "SELECT * FROM blockchain_transactions WHERE block_number > 1000;",
      "SELECT sender_address, receiver_address, transaction_amount FROM blockchain_transactions WHERE timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-01-31 23:59:59';",
      "SELECT block_number, COUNT(transaction_id) AS num_transactions FROM blockchain_transactions GROUP BY block_number HAVING num_transactions > 5;",
      "SELECT sender_address, SUM(transaction_amount) AS total_sent_amount FROM blockchain_transactions GROUP BY sender_address;",
      "SELECT sender_address, receiver_address, transaction_amount, timestamp FROM blockchain_transactions WHERE receiver_address = '0xABCDEF';",
      "SELECT * FROM blocks WHERE block_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT sender_address, receiver_address, transaction_amount, timestamp FROM blockchain_transactions WHERE timestamp >= '2022-02-01' AND timestamp < '2022-03-01';",
      "SELECT sender_address, receiver_address, transaction_amount FROM blockchain_transactions WHERE block_number <= 500 AND transaction_amount >= 1000;",
      "SELECT address, balance FROM addresses WHERE balance < 0;",
      "SELECT block_number, block_hash, previous_block_hash, block_timestamp FROM blocks ORDER BY block_timestamp DESC;",
      "SELECT sender_address, receiver_address, transaction_amount, timestamp FROM blockchain_transactions WHERE sender_address = '0x123456' OR receiver_address = '0x789ABC';",
      "SELECT block_number, MAX(transaction_amount) AS max_transaction_amount, MIN(transaction_amount) AS min_transaction_amount FROM blockchain_transactions GROUP BY block_number;",
      "SELECT transaction_id, metadata_value FROM transaction_metadata WHERE metadata_key = 'category' AND metadata_value LIKE '%payment%';",
      "SELECT sender_address, receiver_address, transaction_amount, timestamp FROM blockchain_transactions WHERE block_number IN (100, 200, 300);",
      "SELECT block_number, COUNT(transaction_id) AS num_transactions FROM blockchain_transactions WHERE timestamp < '2022-02-01' GROUP BY block_number HAVING num_transactions > 3;",
      "SELECT sender_address, receiver_address, SUM(transaction_amount) AS total_transaction_amount FROM blockchain_transactions GROUP BY sender_address, receiver_address HAVING total_transaction_amount > 5000;",
      "SELECT address, balance FROM addresses WHERE address LIKE '0x%' AND balance > 10000;",
      "SELECT * FROM blocks WHERE previous_block_hash IS NULL;",
      "SELECT sender_address, receiver_address, transaction_amount, timestamp FROM blockchain_transactions WHERE transaction_amount BETWEEN 2000 AND 5000;",
      "SELECT block_number, AVG(transaction_amount) AS avg_transaction_amount FROM blockchain_transactions GROUP BY block_number HAVING avg_transaction_amount > 2000;"
    ]
  }
]