[
  {
    "statements": [
      "SELECT * FROM nft_ownership_history WHERE nft_id = 'some_uuid_here';",
      "SELECT owner_address FROM nft_ownership_history WHERE transfer_timestamp > '2022-01-01';",
      "SELECT * FROM nft_ownership_history WHERE owner_address = 'wallet_address_here';",
      "SELECT nft_id, owner_address FROM nft_ownership_history;",
      "SELECT DISTINCT owner_address FROM nft_ownership_history;",
      "SELECT COUNT(*) FROM nft_ownership_history;",
      "SELECT * FROM nft_ownership_history ORDER BY transfer_timestamp DESC;",
      "SELECT nft_id, previous_owner_address FROM nft_ownership_history WHERE transfer_timestamp < '2022-01-01';",
      "SELECT nft_id, transfer_timestamp FROM nft_ownership_history WHERE owner_address LIKE '%wallet_address%';",
      "SELECT MAX(transfer_timestamp) FROM nft_ownership_history;",
      "SELECT MIN(transfer_timestamp) FROM nft_ownership_history;",
      "SELECT AVG(DATEDIFF(transfer_timestamp, '2022-01-01')) AS average_days FROM nft_ownership_history;",
      "SELECT nft_id, owner_address, previous_owner_address FROM nft_ownership_history WHERE transfer_timestamp BETWEEN '2022-01-01' AND '2023-01-01';",
      "SELECT nft_id, COUNT(*) AS transfer_count FROM nft_ownership_history GROUP BY nft_id;",
      "SELECT owner_address, COUNT(*) AS transfer_count FROM nft_ownership_history GROUP BY owner_address;",
      "SELECT DATE(transfer_timestamp) AS transfer_date, COUNT(*) AS transfer_count FROM nft_ownership_history GROUP BY DATE(transfer_timestamp);",
      "SELECT nft_id, owner_address, transfer_timestamp FROM nft_ownership_history WHERE owner_address IN ('wallet_address1', 'wallet_address2');",
      "SELECT nft_id, transfer_timestamp FROM nft_ownership_history WHERE owner_address = previous_owner_address;",
      "SELECT nft_id, COUNT(*) AS transfer_count FROM nft_ownership_history WHERE transfer_timestamp IS NOT NULL GROUP BY nft_id;",
      "SELECT owner_address, AVG(DATEDIFF(transfer_timestamp, '2022-01-01')) AS avg_days_since_last_transfer FROM nft_ownership_history GROUP BY owner_address;",
      "SELECT nft_id, owner_address, previous_owner_address FROM nft_ownership_history WHERE transfer_timestamp < NOW()",
      "SELECT * FROM nft_ownership_history WHERE owner_address = '0xabc123'",
      "SELECT DISTINCT owner_address FROM nft_ownership_history",
      "SELECT COUNT(*) FROM nft_ownership_history",
      "SELECT nft_id, MAX(transfer_timestamp) AS latest_transfer FROM nft_ownership_history GROUP BY nft_id",
      "SELECT nft_id, owner_address, previous_owner_address, transfer_timestamp FROM nft_ownership_history ORDER BY transfer_timestamp DESC LIMIT 10",
      "SELECT nft_id, owner_address, previous_owner_address FROM nft_ownership_history WHERE owner_address = '0xdef456' OR previous_owner_address = '0xdef456'",
      "SELECT AVG(EXTRACT(DAY FROM transfer_timestamp)) AS avg_transfer_day FROM nft_ownership_history",
      "SELECT nft_id, COALESCE(previous_owner_address, 'No previous owner') AS previous_owner FROM nft_ownership_history",
      "SELECT owner_address, COUNT(*) AS transfer_count FROM nft_ownership_history GROUP BY owner_address HAVING COUNT(*) > 1",
      "SELECT nft_id, owner_address, EXTRACT(MONTH FROM transfer_timestamp) AS transfer_month FROM nft_ownership_history",
      "SELECT nft_id, owner_address, previous_owner_address, transfer_timestamp FROM nft_ownership_history WHERE nft_id = '12345'",
      "SELECT nft_id, owner_address, transfer_timestamp FROM nft_ownership_history WHERE transfer_timestamp > '2022-01-01'",
      "SELECT owner_address, COUNT(DISTINCT previous_owner_address) AS unique_previous_owners FROM nft_ownership_history GROUP BY owner_address",
      "SELECT nft_id, owner_address, previous_owner_address, COUNT(transfer_timestamp) AS transfer_count FROM nft_ownership_history GROUP BY nft_id, owner_address, previous_owner_address",
      "SELECT nft_id, owner_address, transfer_timestamp FROM nft_ownership_history WHERE transfer_timestamp BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT owner_address, MIN(transfer_timestamp) AS first_transfer, MAX(transfer_timestamp) AS last_transfer FROM nft_ownership_history GROUP BY owner_address",
      "SELECT nft_id, owner_address, previous_owner_address FROM nft_ownership_history WHERE owner_address = previous_owner_address",
      "SELECT nft_id, owner_address, previous_owner_address, transfer_timestamp FROM nft_ownership_history WHERE EXTRACT(YEAR FROM transfer_timestamp) = 2022",
      "SELECT nft_id, owner_address, previous_owner_address, transfer_timestamp FROM nft_ownership_history WHERE nft_id IN ('12345', '67890')"
    ]
  },
  {
    "statements": [
      "SELECT * FROM NFT_Ownership_History;",
      "SELECT NFT_ID, Owner_ID FROM NFT_Ownership_History;",
      "SELECT NFT_ID, Owner_ID, Timestamp FROM NFT_Ownership_History WHERE Owner_ID = 'some_id';",
      "SELECT * FROM NFT_Metadata;",
      "SELECT NFT_ID, Token_Name FROM NFT_Metadata;",
      "SELECT NFT_ID, Token_Description FROM NFT_Metadata WHERE Token_Name LIKE '%art%';",
      "SELECT NFT_ID, Token_Image_URL FROM NFT_Metadata WHERE Token_Name = 'example_token';",
      "SELECT * FROM NFT_Ownership_History JOIN NFT_Metadata ON NFT_Ownership_History.NFT_ID = NFT_Metadata.NFT_ID;",
      "SELECT NFT_Metadata.Token_Name, NFT_Ownership_History.Owner_ID FROM NFT_Metadata JOIN NFT_Ownership_History ON NFT_Metadata.NFT_ID = NFT_Ownership_History.NFT_ID;",
      "SELECT NFT_Metadata.Token_Description, NFT_Ownership_History.Owner_ID FROM NFT_Metadata JOIN NFT_Ownership_History ON NFT_Metadata.NFT_ID = NFT_Ownership_History.NFT_ID WHERE NFT_Ownership_History.Owner_ID = 'some_id';",
      "SELECT * FROM NFT_Ownership_History ORDER BY Timestamp DESC;",
      "SELECT * FROM NFT_Metadata WHERE Token_Name IN ('token1', 'token2', 'token3');",
      "SELECT NFT_Metadata.Token_Image_URL FROM NFT_Metadata WHERE NFT_Metadata.Token_Name = 'example_token' AND Token_Description LIKE '%rare%';",
      "SELECT COUNT(*) FROM NFT_Metadata;",
      "SELECT MAX(Timestamp) FROM NFT_Ownership_History WHERE NFT_ID = 'some_nft_id';",
      "SELECT AVG(Timestamp) FROM NFT_Ownership_History WHERE Owner_ID = 'some_owner_id';",
      "SELECT DISTINCT Owner_ID FROM NFT_Ownership_History;",
      "SELECT NFT_Metadata.Token_Name, COUNT(*) AS Total_Count FROM NFT_Metadata JOIN NFT_Ownership_History ON NFT_Metadata.NFT_ID = NFT_Ownership_History.NFT_ID GROUP BY NFT_Metadata.Token_Name;",
      "SELECT NFT_Metadata.Token_Name, MAX(Timestamp) AS Latest_Timestamp FROM NFT_Metadata JOIN NFT_Ownership_History ON NFT_Metadata.NFT_ID = NFT_Ownership_History.NFT_ID GROUP BY NFT_Metadata.Token_Name;",
      "SELECT Owner_ID, COUNT(*) AS Total_Count FROM NFT_Ownership_History GROUP BY Owner_ID HAVING COUNT(*) > 1;",
      "SELECT NFT_ID, Token_Name, Token_Description FROM NFT_Metadata WHERE NFT_ID = '123456'",
      "SELECT NFT_ID, Token_Image_URL FROM NFT_Metadata WHERE Token_Name LIKE '%crypto%'",
      "SELECT NFT_Metadata.NFT_ID, NFT_Metadata.Token_Name, NFT_Metadata.Token_Description, NFT_Ownership_History.Owner_ID FROM NFT_Metadata JOIN NFT_Ownership_History ON NFT_Metadata.NFT_ID = NFT_Ownership_History.NFT_ID",
      "SELECT NFT_Metadata.NFT_ID, NFT_Metadata.Token_Name, NFT_Metadata.Token_Description, NFT_Ownership_History.Owner_ID, NFT_Ownership_History.Previous_Owner_ID FROM NFT_Metadata JOIN NFT_Ownership_History ON NFT_Metadata.NFT_ID = NFT_Ownership_History.NFT_ID WHERE NFT_Ownership_History.Owner_ID = '789abc'",
      "SELECT NFT_Metadata.NFT_ID, NFT_Metadata.Token_Name, NFT_Metadata.Token_Description, NFT_Ownership_History.Owner_ID FROM NFT_Metadata LEFT JOIN NFT_Ownership_History ON NFT_Metadata.NFT_ID = NFT_Ownership_History.NFT_ID",
      "SELECT NFT_Metadata.NFT_ID, COUNT(NFT_Ownership_History.NFT_ID) AS Total_Transactions FROM NFT_Metadata JOIN NFT_Ownership_History ON NFT_Metadata.NFT_ID = NFT_Ownership_History.NFT_ID GROUP BY NFT_Metadata.NFT_ID",
      "SELECT Owner_ID, COUNT(NFT_ID) AS Total_NFTs_Owned FROM NFT_Ownership_History GROUP BY Owner_ID ORDER BY Total_NFTs_Owned DESC",
      "SELECT NFT_ID, Owner_ID, Previous_Owner_ID, Timestamp FROM NFT_Ownership_History WHERE Timestamp BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT NFT_Ownership_History.Owner_ID, COUNT(NFT_Metadata.NFT_ID) AS Total_NFTs_Owned FROM NFT_Ownership_History JOIN NFT_Metadata ON NFT_Ownership_History.NFT_ID = NFT_Metadata.NFT_ID GROUP BY NFT_Ownership_History.Owner_ID HAVING Total_NFTs_Owned > 5"
    ]
  },
  {
    "statements": [
      "SELECT * FROM NFTOwners;",
      "SELECT * FROM NFTs;",
      "SELECT * FROM Owners;",
      "SELECT owner_name, country FROM Owners;",
      "SELECT nft_name, created_at FROM NFTs;",
      "SELECT owner_name, nft_name FROM Owners JOIN NFTOwners ON Owners.owner_id = NFTOwners.owner_id;",
      "SELECT owner_id, nft_name FROM Owners JOIN NFTOwners ON Owners.owner_id = NFTOwners.owner_id;",
      "SELECT COUNT(*) FROM NFTOwners;",
      "SELECT nft_name, COUNT(*) FROM NFTs GROUP BY nft_name;",
      "SELECT owner_name, COUNT(*) FROM Owners JOIN NFTOwners ON Owners.owner_id = NFTOwners.owner_id GROUP BY owner_name;",
      "SELECT * FROM NFTs WHERE creator_id = 1;",
      "SELECT nft_name, created_at FROM NFTs WHERE nft_id = 1;",
      "SELECT owner_name, nft_name, owned_since FROM Owners JOIN NFTOwners ON Owners.owner_id = NFTOwners.owner_id WHERE nft_id = 1;",
      "SELECT owner_name, country FROM Owners WHERE owner_id = 1;",
      "SELECT nft_name FROM NFTs WHERE created_at > '2022-01-01';",
      "SELECT owner_name, country FROM Owners WHERE country = 'USA';",
      "SELECT * FROM NFTs ORDER BY created_at DESC;",
      "SELECT owner_name, nft_name FROM Owners JOIN NFTOwners ON Owners.owner_id = NFTOwners.owner_id WHERE owned_since < '2022-01-01';",
      "SELECT owner_name, nft_name FROM Owners JOIN NFTOwners ON Owners.owner_id = NFTOwners.owner_id WHERE owned_since BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT owner_name, nft_name, owned_since FROM Owners JOIN NFTOwners ON Owners.owner_id = NFTOwners.owner_id WHERE nft_id = 1;",
      "SELECT * FROM NFTOwners;",
      "SELECT n.owner_name, o.country FROM NFTOwners n JOIN Owners o ON n.owner_id = o.owner_id;",
      "SELECT nft_name, created_at FROM NFTs WHERE creator_id = 1;",
      "SELECT no.owner_name, n.nft_name FROM NFTOwners no JOIN NFTs n ON no.nft_id = n.nft_id; ",
      "SELECT MAX(owned_since) FROM NFTOwners;",
      "SELECT n.owner_id, COUNT(*) FROM NFTOwners n GROUP BY n.owner_id;",
      "SELECT n.owner_name, n.nft_name, o.owner_name FROM NFTOwners n JOIN Owners o ON n.owner_id = o.owner_id;",
      "SELECT * FROM NFTOwners WHERE owner_id = 2 AND nft_id = 3;",
      "SELECT nft_name, owned_since FROM NFTs JOIN NFTOwners ON NFTs.nft_id = NFTOwners.nft_id WHERE owner_id = 1;",
      "SELECT AVG(owner_id) FROM NFTOwners;",
      "SELECT COUNT(DISTINCT owner_id) FROM NFTOwners;",
      "SELECT o.owner_name, COUNT(*) FROM Owners o JOIN NFTOwners n ON o.owner_id = n.owner_id GROUP BY o.owner_name;",
      "SELECT n.owner_id, o.owner_name, COUNT(*) FROM NFTOwners n JOIN Owners o ON n.owner_id = o.owner_id GROUP BY n.owner_id, o.owner_name ORDER BY COUNT(*) DESC;",
      "SELECT owner_id, MAX(owned_since) FROM NFTOwners GROUP BY owner_id;",
      "SELECT n.owner_name, nft_name FROM NFTOwners n JOIN NFTs ON n.nft_id = NFTs.nft_id ORDER BY owned_since DESC;",
      "SELECT n.owner_name, o.country FROM NFTOwners n JOIN Owners o ON n.owner_id = o.owner_id WHERE nft_id IN (SELECT nft_id FROM NFTs WHERE creator_id = 1);",
      "SELECT o.owner_name, COUNT(*) FROM Owners o JOIN NFTOwners n ON o.owner_id = n.owner_id WHERE country = 'USA' GROUP BY o.owner_name;",
      "SELECT DISTINCT owner_id, nft_id FROM NFTOwners WHERE owner_id = 1;",
      "SELECT n.owner_name, AVG(DATE_PART('year', NOW()) - DATE_PART('year', owned_since)) AS avg_own_duration FROM NFTOwners n JOIN Owners o ON n.owner_id = o.owner_id GROUP BY n.owner_name ORDER BY avg_own_duration DESC;",
      "SELECT owner_id, COUNT(*) FROM NFTOwners GROUP BY owner_id HAVING COUNT(*) > 1;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM NFTTokenOwners;",
      "SELECT token_id, owner_address FROM NFTTokenOwners;",
      "SELECT owner_address, ownership_start_date FROM NFTTokenOwners;",
      "SELECT * FROM Owners;",
      "SELECT owner_address, owner_name FROM Owners;",
      "SELECT owner_name, owner_email FROM Owners;",
      "SELECT * FROM Transactions;",
      "SELECT transaction_id, token_id FROM Transactions;",
      "SELECT buyer_address, seller_address FROM Transactions;",
      "SELECT * FROM TokenMetadata;",
      "SELECT token_id, token_name FROM TokenMetadata;",
      "SELECT token_description, token_image_url FROM TokenMetadata;",
      "SELECT token_id, owner_address, ownership_start_date FROM NFTTokenOwners WHERE owner_address='12345';",
      "SELECT owner_address, owner_name FROM Owners WHERE owner_name='Alice';",
      "SELECT buyer_address, seller_address, transaction_date FROM Transactions WHERE transaction_date='2022-01-01';",
      "SELECT * FROM NFTTokenOwners ORDER BY ownership_start_date DESC;",
      "SELECT owner_name, owner_email FROM Owners ORDER BY owner_name;",
      "SELECT token_id, token_name FROM TokenMetadata WHERE token_id=100;",
      "SELECT * FROM Transactions WHERE buyer_address='Alice' AND seller_address='Bob';",
      "SELECT token_image_url FROM TokenMetadata WHERE token_name='NFT1';",
      "SELECT * FROM NFTTokenOwners WHERE ownership_start_date > '2022-01-01';",
      "SELECT owner_address, COUNT(*) FROM NFTTokenOwners GROUP BY owner_address HAVING COUNT(*) > 1;",
      "SELECT ot.owner_name, tt.token_name FROM Owners ot INNER JOIN TokenMetadata tt ON ot.owner_address = tt.token_id;",
      "SELECT tos.token_name, tos.token_description, o.owner_name FROM TokenMetadata tos LEFT JOIN Owners o ON tos.token_id = o.owner_address;",
      "SELECT t.transaction_id, t.buyer_address, t.seller_address, t.transaction_date, tn.token_name FROM Transactions t INNER JOIN TokenMetadata tn ON t.token_id = tn.token_id;",
      "SELECT * FROM Transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT tn.token_name, COUNT(*) FROM TokenMetadata tn INNER JOIN Transactions t ON tn.token_id = t.token_id GROUP BY tn.token_name ORDER BY COUNT(*) DESC;",
      "SELECT tn.token_name, COUNT(*) FROM TokenMetadata tn INNER JOIN Transactions t ON tn.token_id = t.token_id GROUP BY tn.token_name HAVING COUNT(*) > 5;",
      "SELECT tos.token_name, COUNT(*) FROM TokenMetadata tos INNER JOIN NFTTokenOwners no ON tos.token_id = no.token_id GROUP BY tos.token_name ORDER BY COUNT(*) DESC;",
      "SELECT DISTINCT tn.token_name FROM TokenMetadata tn INNER JOIN NFTTokenOwners no ON tn.token_id = no.token_id;",
      "SELECT o.owner_name, t.buyer_address, t.transaction_date FROM Owners o INNER JOIN Transactions t ON o.owner_address = t.buyer_address;",
      "SELECT o.owner_name, t.buyer_address, t.transaction_date FROM Owners o INNER JOIN Transactions t ON o.owner_address = t.buyer_address;",
      "SELECT owner_name, COUNT(*) FROM Owners GROUP BY owner_name ORDER BY COUNT(*) DESC;",
      "SELECT t.transaction_id, tn.token_name, tn.token_description, tos.owner_name FROM Transactions t INNER JOIN TokenMetadata tn ON t.token_id = tn.token_id INNER JOIN NFTTokenOwners tos ON t.token_id = tos.token_id;",
      "SELECT DISTINCT tos.owner_address, o.owner_name FROM NFTTokenOwners tos INNER JOIN Owners o ON tos.owner_address = o.owner_address;",
      "SELECT tn.token_name, COUNT(*) FROM TokenMetadata tn INNER JOIN NFTTokenOwners tos ON tn.token_id = tos.token_id GROUP BY tn.token_name ORDER BY COUNT(*) DESC;",
      "SELECT tos.owner_address, AVG(DATEDIFF(ownership_end_date, ownership_start_date)) AS avg_ownership_duration FROM NFTTokenOwners tos GROUP BY tos.owner_address;",
      "SELECT o.owner_name, COUNT(*) FROM Owners o INNER JOIN Transactions t ON o.owner_address = t.buyer_address GROUP BY o.owner_name ORDER BY COUNT(*) DESC;",
      "SELECT owner_name, COUNT(*) FROM Owners GROUP BY owner_name HAVING COUNT(*) > 1;",
      "SELECT tn.token_name, COUNT(*) FROM TokenMetadata tn INNER JOIN NFTTokenOwners tos ON tn.token_id = tos.token_id GROUP BY tn.token_name HAVING COUNT(*) > 1;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM NFTOwners;",
      "SELECT id, owner_id, nft_id, owned_since FROM NFTOwners WHERE owner_id = 1;",
      "SELECT * FROM NFTs;",
      "SELECT id, token_id, token_name, token_metadata FROM NFTs WHERE id = 1;",
      "SELECT * FROM Owners;",
      "SELECT id, owner_name, owner_address FROM Owners WHERE id = 1;",
      "SELECT * FROM Transactions;",
      "SELECT id, transaction_type, nft_id, owner_id, timestamp FROM Transactions WHERE owner_id = 1;",
      "SELECT * FROM OwnershipHistory;",
      "SELECT id, nft_id, previous_owner_id, current_owner_id, transaction_id, transfer_timestamp FROM OwnershipHistory WHERE current_owner_id = 1;",
      "SELECT NFTOwners.id, NFTOwners.owner_id, NFTs.token_name FROM NFTOwners JOIN NFTs ON NFTOwners.nft_id = NFTs.id;",
      "SELECT Transactions.id, Transactions.owner_id, Owners.owner_name FROM Transactions JOIN Owners ON Transactions.owner_id = Owners.id;",
      "SELECT NFTs.id, NFTs.token_id, Transactions.transaction_type FROM NFTs JOIN Transactions ON NFTs.id = Transactions.nft_id;",
      "SELECT Owners.id, Owners.owner_name, OwnershipHistory.current_owner_id FROM Owners JOIN OwnershipHistory ON Owners.id = OwnershipHistory.current_owner_id;",
      "SELECT NFTOwners.id, NFTs.token_name, Owners.owner_address FROM NFTOwners JOIN NFTs ON NFTOwners.nft_id = NFTs.id JOIN Owners ON NFTOwners.owner_id = Owners.id;",
      "SELECT Transactions.id, Transactions.transaction_type, OwnershipHistory.transfer_timestamp FROM Transactions JOIN OwnershipHistory ON Transactions.id = OwnershipHistory.transaction_id;",
      "SELECT NFTOwners.id, NFTs.token_name, Transactions.timestamp FROM NFTOwners JOIN NFTs ON NFTOwners.nft_id = NFTs.id JOIN Transactions ON NFTOwners.owner_id = Transactions.owner_id;",
      "SELECT Transactions.id, Transactions.transaction_type, Owners.owner_name FROM Transactions JOIN Owners ON Transactions.owner_id = Owners.id JOIN OwnershipHistory ON Transactions.id = OwnershipHistory.transaction_id;",
      "SELECT NFTs.id, NFTs.token_id, Transactions.owner_id, OwnershipHistory.current_owner_id FROM NFTs JOIN Transactions ON NFTs.id = Transactions.nft_id JOIN OwnershipHistory ON Transactions.id = OwnershipHistory.transaction_id;",
      "SELECT * FROM NFTOwners WHERE owner_id = 1;",
      "SELECT * FROM NFTOwners WHERE owned_since BETWEEN '2022-01-01' AND '2022-05-01';",
      "SELECT * FROM NFTOwners INNER JOIN NFTs ON NFTOwners.nft_id = NFTs.id WHERE NFTs.token_name = 'Artwork';",
      "SELECT * FROM NFTOwners INNER JOIN Owners ON NFTOwners.owner_id = Owners.id WHERE Owners.owner_name = 'Alice';",
      "SELECT COUNT(*) FROM NFTs WHERE token_name LIKE '%Land%';",
      "SELECT NFTOwners.owner_id, Owners.owner_name FROM NFTOwners INNER JOIN Owners ON NFTOwners.owner_id = Owners.id;",
      "SELECT NFTs.token_name, COUNT(NFTOwners.id) AS total_owners FROM NFTs INNER JOIN NFTOwners ON NFTs.id = NFTOwners.nft_id GROUP BY NFTs.token_name;",
      "SELECT Owners.owner_name, NFTs.token_name, Transactions.transaction_type FROM Owners INNER JOIN NFTOwners ON Owners.id = NFTOwners.owner_id INNER JOIN NFTs ON NFTOwners.nft_id = NFTs.id INNER JOIN Transactions ON NFTOwners.nft_id = Transactions.nft_id AND NFTOwners.owner_id = Transactions.owner_id;",
      "SELECT * FROM NFTOwners WHERE owner_id IN (SELECT id FROM Owners WHERE owner_name = 'Bob');",
      "SELECT NFTs.token_name, OwnershipHistory.previous_owner_id, OwnershipHistory.current_owner_id FROM NFTs INNER JOIN OwnershipHistory ON NFTs.id = OwnershipHistory.nft_id;",
      "SELECT Owners.owner_name, COUNT(NFTOwners.id) AS total_owned FROM Owners LEFT JOIN NFTOwners ON Owners.id = NFTOwners.owner_id GROUP BY Owners.owner_name;",
      "SELECT NFTOwners.owner_id, COUNT(Transactions.id) AS total_transactions FROM NFTOwners INNER JOIN Transactions ON NFTOwners.nft_id = Transactions.nft_id AND NFTOwners.owner_id = Transactions.owner_id GROUP BY NFTOwners.owner_id;",
      "SELECT NFTs.token_name, SUM(Transactions.transaction_type = 'Buy') AS total_buys, SUM(Transactions.transaction_type = 'Sell') AS total_sells FROM NFTs LEFT JOIN Transactions ON NFTs.id = Transactions.nft_id GROUP BY NFTs.token_name;",
      "SELECT DISTINCT ON (NFTs.id) NFTs.token_name, NFTOwners.owner_id FROM NFTs INNER JOIN NFTOwners ON NFTs.id = NFTOwners.nft_id;",
      "SELECT Owners.owner_name, NFTs.token_name, MAX(OwnershipHistory.transfer_timestamp) AS latest_transfer FROM Owners INNER JOIN NFTOwners ON Owners.id = NFTOwners.owner_id INNER JOIN NFTs ON NFTOwners.nft_id = NFTs.id INNER JOIN OwnershipHistory ON NFTs.id = OwnershipHistory.nft_id GROUP BY Owners.owner_name, NFTs.token_name;",
      "SELECT NFTs.token_name, COUNT(DISTINCT Owners.id) AS unique_owners FROM NFTs INNER JOIN NFTOwners ON NFTs.id = NFTOwners.nft_id INNER JOIN Owners ON NFTOwners.owner_id = Owners.id GROUP BY NFTs.token_name;",
      "SELECT NFTOwners.owner_id, NFTs.token_name, COUNT(Transactions.id) AS total_transactions FROM NFTOwners INNER JOIN NFTs ON NFTOwners.nft_id = NFTs.id LEFT JOIN Transactions ON NFTOwners.nft_id = Transactions.nft_id AND NFTOwners.owner_id = Transactions.owner_id GROUP BY NFTOwners.owner_id, NFTs.token_name;",
      "SELECT owner_address, COUNT(nft_id) AS total_nfts FROM Owners INNER JOIN NFTOwners ON Owners.id = NFTOwners.owner_id GROUP BY owner_address;",
      "SELECT Owners.owner_name, COUNT(OwnershipHistory.id) AS total_transfers FROM Owners INNER JOIN OwnershipHistory ON Owners.id = OwnershipHistory.current_owner_id GROUP BY Owners.owner_name;",
      "SELECT NFTs.token_name, AVG(EXTRACT(hour FROM owned_since)) AS avg_owned_hours FROM NFTs INNER JOIN NFTOwners ON NFTs.id = NFTOwners.nft_id GROUP BY NFTs.token_name;"
    ]
  }
]