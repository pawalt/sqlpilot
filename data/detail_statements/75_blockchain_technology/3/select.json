[
  {
    "statements": [
      "SELECT * FROM blockchain_participants WHERE participant_id = 1;",
      "SELECT participant_name FROM blockchain_participants WHERE participant_id = 2;",
      "SELECT participant_id, participant_name FROM blockchain_participants WHERE participant_name LIKE 'A%';",
      "SELECT * FROM blockchain_participants WHERE participant_name = 'Alice';",
      "SELECT participant_id, public_key FROM blockchain_participants WHERE participant_name = 'Bob';",
      "SELECT * FROM blockchain_participants WHERE public_key LIKE '%abc%';",
      "SELECT COUNT(*) FROM blockchain_participants;",
      "SELECT MAX(participant_id) FROM blockchain_participants;",
      "SELECT MIN(participant_id) FROM blockchain_participants;",
      "SELECT AVG(participant_id) FROM blockchain_participants;",
      "SELECT DISTINCT participant_name FROM blockchain_participants;",
      "SELECT * FROM blockchain_participants ORDER BY participant_id ASC;",
      "SELECT * FROM blockchain_participants ORDER BY participant_id DESC;",
      "SELECT * FROM blockchain_participants LIMIT 5;",
      "SELECT * FROM blockchain_participants OFFSET 5;",
      "SELECT * FROM blockchain_participants WHERE participant_id IN (1, 2, 3);",
      "SELECT * FROM blockchain_participants WHERE participant_name IN ('Alice', 'Bob');",
      "SELECT * FROM blockchain_participants WHERE participant_id BETWEEN 1 AND 3;",
      "SELECT * FROM blockchain_participants WHERE participant_name NOT LIKE '%Admin%';",
      "SELECT * FROM blockchain_participants WHERE public_key IS NOT NULL;",
      "SELECT * FROM blockchain_participants WHERE participant_id = 1;",
      "SELECT participant_id, participant_name FROM blockchain_participants WHERE participant_name LIKE 'A%';",
      "SELECT participant_id, participant_name FROM blockchain_participants WHERE LENGTH(participant_name) > 10;",
      "SELECT COUNT(*) AS num_participants FROM blockchain_participants;",
      "SELECT AVG(participant_id) AS avg_participant_id FROM blockchain_participants;",
      "SELECT participant_id, COUNT(*) AS num_transactions FROM blockchain_transactions GROUP BY participant_id;",
      "SELECT participant_id, participant_name FROM blockchain_participants ORDER BY participant_name ASC;",
      "SELECT participant_id, participant_name FROM blockchain_participants ORDER BY participant_id DESC;",
      "SELECT DISTINCT public_key FROM blockchain_participants;",
      "SELECT * FROM blockchain_participants WHERE public_key IN (SELECT public_key FROM trusted_participants);",
      "SELECT * FROM blockchain_participants WHERE participant_name = 'Alice' OR participant_name = 'Bob';",
      "SELECT participant_id, participant_name FROM blockchain_participants WHERE participant_name LIKE '%blockchain%';",
      "SELECT * FROM blockchain_participants WHERE participant_id BETWEEN 1 AND 10;",
      "SELECT * FROM blockchain_participants WHERE public_key LIKE '%ABC%' AND participant_name LIKE '%Doe%';",
      "SELECT COUNT(*) AS num_participants FROM blockchain_participants HAVING num_participants > 5;",
      "SELECT COUNT(DISTINCT participant_name) AS num_unique_names FROM blockchain_participants;",
      "SELECT participant_id, participant_name FROM blockchain_participants WHERE participant_id > 5 LIMIT 5;",
      "SELECT * FROM blockchain_participants WHERE public_key IS NOT NULL;",
      "SELECT * FROM blockchain_participants WHERE participant_name = 'Charlie' UNION SELECT * FROM blockchain_participants WHERE participant_name = 'David';",
      "SELECT MAX(participant_id) AS max_participant_id FROM blockchain_participants;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM blockchain_participants;",
      "SELECT participant_id, participant_name FROM blockchain_participants;",
      "SELECT public_key FROM blockchain_participants;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, participant_id, transaction_amount, transaction_date FROM transactions;",
      "SELECT transaction_amount FROM transactions;",
      "SELECT participant_name, transaction_amount FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id;",
      "SELECT * FROM blockchain_participants WHERE participant_id = 1;",
      "SELECT * FROM blockchain_participants WHERE participant_name = 'Alice';",
      "SELECT * FROM transactions WHERE transaction_amount > 1000;",
      "SELECT * FROM transactions WHERE transaction_date >= '2022-01-01';",
      "SELECT * FROM blockchain_participants ORDER BY participant_name ASC;",
      "SELECT * FROM transactions ORDER BY transaction_amount DESC;",
      "SELECT COUNT(*) AS total_participants FROM blockchain_participants;",
      "SELECT AVG(transaction_amount) AS avg_transaction_amount FROM transactions;",
      "SELECT MAX(transaction_amount) AS max_transaction_amount FROM transactions;",
      "SELECT MIN(transaction_amount) AS min_transaction_amount FROM transactions;",
      "SELECT SUM(transaction_amount) AS total_transaction_amount FROM transactions;",
      "SELECT public_key, COUNT(*) AS total_transactions FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id GROUP BY public_key HAVING COUNT(*) > 1;",
      "SELECT participant_name, COUNT(*) AS total_transactions FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id GROUP BY participant_name HAVING COUNT(*) > 1;",
      "SELECT participant_name, public_key FROM blockchain_participants WHERE participant_id = 1;",
      "SELECT * FROM blockchain_participants WHERE participant_name LIKE 'A%';",
      "SELECT participant_name, transaction_amount, transaction_date FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id WHERE transaction_amount > 1000;",
      "SELECT participant_name, transaction_date FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT COUNT(*) AS total_transactions FROM transactions WHERE participant_id = 2;",
      "SELECT participant_name, SUM(transaction_amount) AS total_amount FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id GROUP BY participant_name HAVING total_amount > 5000;",
      "SELECT participant_name, transaction_amount FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id ORDER BY transaction_amount DESC;",
      "SELECT COUNT(*) AS total_participants FROM blockchain_participants;",
      "SELECT participant_name, AVG(transaction_amount) AS average_amount FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id GROUP BY participant_name HAVING average_amount > 500;",
      "SELECT participant_name, MAX(transaction_amount) AS max_amount FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id GROUP BY participant_name;",
      "SELECT participant_name, public_key FROM blockchain_participants WHERE participant_name IN ('Alice', 'Bob', 'Charlie');",
      "SELECT DISTINCT participant_name FROM blockchain_participants;",
      "SELECT participant_name, public_key FROM blockchain_participants WHERE participant_name LIKE '%e%';",
      "SELECT participant_name, public_key, transaction_amount FROM blockchain_participants LEFT JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id ORDER BY transaction_amount;",
      "SELECT participant_name, public_key, YEAR(transaction_date) AS transaction_year FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id;",
      "SELECT participant_name, COUNT(transaction_id) AS total_transactions FROM blockchain_participants LEFT JOIN transactions ON blockchain_participant.participant_id = transactions.participant_id GROUP BY participant_name HAVING total_transactions > 2;",
      "SELECT participant_name, AVG(transaction_amount) AS average_amount FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id WHERE transaction_amount > 500 GROUP BY participant_name;",
      "SELECT participant_name, transaction_amount, DAY(transaction_date) AS transaction_day FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id WHERE transaction_day = 15;",
      "SELECT participant_name, public_key, transaction_date FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id WHERE YEAR(transaction_date) = 2022;",
      "SELECT participant_name, public_key, public_key FROM blockchain_participants WHERE public_key IS NOT NULL;",
      "SELECT participant_name, public_key FROM blockchain_participants WHERE participant_name = 'Alice' OR participant_name = 'Bob';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM blockchain_participants;",
      "SELECT participant_name FROM blockchain_participants;",
      "SELECT public_key FROM blockchain_participants;",
      "SELECT * FROM transactions;",
      "SELECT amount FROM transactions;",
      "SELECT * FROM verification_requests;",
      "SELECT verified FROM verification_requests;",
      "SELECT t.transaction_id, t.amount, p.participant_name FROM transactions t JOIN blockchain_participants p ON t.participant_id = p.participant_id;",
      "SELECT t.transaction_id, t.amount, v.verified FROM transactions t JOIN verification_requests v ON t.participant_id = v.participant_id;",
      "SELECT p.participant_name, v.verified FROM blockchain_participants p JOIN verification_requests v ON p.participant_id = v.participant_id;",
      "SELECT * FROM blockchain_participants WHERE participant_name = 'Alice';",
      "SELECT * FROM transactions WHERE participant_id = 'abcde-12345-67890';",
      "SELECT * FROM verification_requests WHERE verified = TRUE;",
      "SELECT * FROM blockchain_participants WHERE public_key = 'xyzabc123';",
      "SELECT SUM(amount) AS total_amount FROM transactions;",
      "SELECT COUNT(*) AS total_participants FROM blockchain_participants;",
      "SELECT AVG(amount) AS average_amount FROM transactions;",
      "SELECT MAX(amount) AS max_amount FROM transactions;",
      "SELECT MIN(amount) AS min_amount FROM transactions;",
      "SELECT participant_id, COUNT(transaction_id) AS total_transactions FROM transactions GROUP BY participant_id;",
      "SELECT participant_id, COUNT(request_id) AS total_requests FROM verification_requests GROUP BY participant_id;",
      "SELECT * FROM blockchain_participants WHERE participant_id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT participant_name, public_key FROM blockchain_participants;",
      "SELECT * FROM transactions WHERE amount > 1000;",
      "SELECT transactions.transaction_id, transactions.amount, blockchain_participants.participant_name FROM transactions JOIN blockchain_participants ON transactions.participant_id = blockchain_participants.participant_id;",
      "SELECT COUNT(*) as total_transactions FROM transactions;",
      "SELECT SUM(amount) as total_amount FROM transactions;",
      "SELECT * FROM verification_requests WHERE verified = TRUE;",
      "SELECT blockchain_participants.participant_name, verification_requests.verified FROM blockchain_participants JOIN verification_requests ON blockchain_participants.participant_id = verification_requests.participant_id;",
      "SELECT participant_id, COUNT(*) as total_transactions FROM transactions GROUP BY participant_id;",
      "SELECT participant_id, participant_name, SUM(amount) as total_amount FROM transactions JOIN blockchain_participants ON transactions.participant_id = blockchain_participants.participant_id GROUP BY participant_id;",
      "SELECT participant_id, participant_name, SUM(amount) as total_amount FROM transactions JOIN blockchain_participants ON transactions.participant_id = blockchain_participants.participant_id GROUP BY participant_id HAVING total_amount > 5000;",
      "SELECT participant_id, participant_name, COUNT(*) as total_verifications FROM verification_requests JOIN blockchain_participants ON verification_requests.participant_id = blockchain_participants.participant_id GROUP BY participant_id;",
      "SELECT participant_id, participant_name, COUNT(*) as total_verifications FROM verification_requests JOIN blockchain_participants ON verification_requests.participant_id = blockchain_participants.participant_id GROUP BY participant_id HAVING total_verifications < 5;",
      "SELECT * FROM blockchain_participants ORDER BY participant_name ASC;",
      "SELECT * FROM transactions WHERE amount BETWEEN 1000 AND 5000;",
      "SELECT transaction_id, participant_id, amount FROM transactions WHERE participant_id IN (SELECT participant_id FROM blockchain_participants WHERE participant_name = 'Alice');",
      "SELECT * FROM transactions WHERE EXTRACT(MONTH FROM transaction_date) = 8;",
      "SELECT participant_name, COUNT(*) as total_transactions FROM blockchain_participants LEFT JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id GROUP BY participant_name;",
      "SELECT participant_name, SUM(amount) as total_amount FROM blockchain_participants LEFT JOIN transactions ON blockchain_participants.participant_id = transactions.participant_id GROUP BY participant_name;",
      "SELECT verification_requests.participant_id, COUNT(*) as total_verifications FROM verification_requests FULL JOIN blockchain_participants ON verification_requests.participant_id = blockchain_participants.participant_id GROUP BY verification_requests.participant_id HAVING COUNT(*) < 3;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM blockchain_participants;",
      "SELECT participant_id, participant_name FROM blockchain_participants WHERE participant_id = 1;",
      "SELECT * FROM transactions;",
      "SELECT sender_id, receiver_id, amount FROM transactions WHERE transaction_id = 1;",
      "SELECT * FROM participant_history;",
      "SELECT participant_id, action_description FROM participant_history WHERE history_id = 1;",
      "SELECT * FROM verification_logs;",
      "SELECT participant_id, verification_status FROM verification_logs WHERE log_id = 1;",
      "SELECT participant_id, verification_status, verification_timestamp FROM verification_logs WHERE verification_status = true;",
      "SELECT participant_name, public_key FROM blockchain_participants;",
      "SELECT * FROM transactions WHERE amount > 100;",
      "SELECT * FROM participant_history WHERE action_timestamp > '2022-01-01';",
      "SELECT participant_name, public_key FROM blockchain_participants WHERE participant_id = 2;",
      "SELECT participant_name, address FROM blockchain_participants WHERE participant_name LIKE 'Alice%';",
      "SELECT sender_id, receiver_id, timestamp FROM transactions WHERE sender_id = 1 OR receiver_id = 1;",
      "SELECT * FROM verification_logs WHERE verification_status = false;",
      "SELECT participant_id, action_timestamp FROM participant_history WHERE action_timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT COUNT(*) FROM blockchain_participants;",
      "SELECT SUM(amount) FROM transactions;",
      "SELECT AVG(amount) FROM transactions;",
      "SELECT * FROM blockchain_participants;",
      "SELECT participant_id, participant_name FROM blockchain_participants WHERE address='123 Main Street';",
      "SELECT participant_id, public_key FROM blockchain_participants WHERE participant_name LIKE '%Alice%';",
      "SELECT * FROM transactions WHERE amount > 1000;",
      "SELECT sender_id, receiver_id, amount FROM transactions WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT participant_id, action_description FROM participant_history WHERE participant_id = 5 ORDER BY action_timestamp DESC;",
      "SELECT * FROM verification_logs WHERE participant_id = 10 AND verification_status=true;",
      "SELECT log_id, participant_id, verification_timestamp FROM verification_logs WHERE verification_timestamp > '2022-01-01 00:00:00';",
      "SELECT participant_id, COUNT(*) AS action_count FROM participant_history GROUP BY participant_id HAVING COUNT(*) > 10;",
      "SELECT participant_name, SUM(amount) AS total_sent FROM blockchain_participants JOIN transactions ON blockchain_participants.participant_id = transactions.sender_id GROUP BY participant_name;",
      "SELECT COUNT(*) AS total_participants FROM blockchain_participants;",
      "SELECT participant_id, MIN(action_timestamp) AS first_action FROM participant_history GROUP BY participant_id;",
      "SELECT MAX(amount) AS largest_transaction_amount FROM transactions;",
      "SELECT participant_id, AVG(amount) AS average_transaction_amount FROM transactions GROUP BY participant_id;",
      "SELECT participant_id, COUNT(*) AS verification_count FROM verification_logs WHERE verification_status=true GROUP BY participant_id HAVING COUNT(*) > 5;",
      "SELECT participant_id, MAX(verification_timestamp) AS last_verification FROM verification_logs GROUP BY participant_id;",
      "SELECT participant_id, AVG(amount) AS avg_transaction_amount FROM transactions WHERE sender_id IN (SELECT receiver_id FROM transactions GROUP BY receiver_id);",
      "SELECT transaction_id, sender_id, receiver_id, amount FROM transactions WHERE participant_id = sender_id OR participant_id = receiver_id;",
      "SELECT * FROM transactions t1 JOIN transactions t2 ON t1.sender_id = t2.receiver_id;",
      "SELECT participant_id, AVG(amount) AS avg_sent_amount FROM transactions GROUP BY participant_id HAVING AVG(amount) > 5000;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM blockchain_participants",
      "SELECT participant_name FROM blockchain_participants",
      "SELECT public_key FROM blockchain_participants",
      "SELECT * FROM blockchain_transactions",
      "SELECT amount FROM blockchain_transactions",
      "SELECT * FROM blockchain_blocks",
      "SELECT nonce FROM blockchain_blocks",
      "SELECT * FROM blockchain_wallets",
      "SELECT balance FROM blockchain_wallets",
      "SELECT * FROM blockchain_verification",
      "SELECT verified_at FROM blockchain_verification",
      "SELECT participant_name, public_key FROM blockchain_participants",
      "SELECT sender_id, receiver_id, amount FROM blockchain_transactions",
      "SELECT previous_block_id, nonce FROM blockchain_blocks",
      "SELECT participant_id, balance FROM blockchain_wallets",
      "SELECT verification_id, verified_at FROM blockchain_verification",
      "SELECT * FROM blockchain_participants WHERE participant_id = 1",
      "SELECT * FROM blockchain_transactions WHERE sender_id = 2",
      "SELECT * FROM blockchain_blocks WHERE block_id = 3",
      "SELECT * FROM blockchain_wallets WHERE participant_id = 4",
      "SELECT * FROM blockchain_verification WHERE participant_id = 5",
      "SELECT * FROM blockchain_participants;",
      "SELECT participant_id, participant_name FROM blockchain_participants WHERE participant_id > 100;",
      "SELECT b.participant_name, w.balance FROM blockchain_participants b JOIN blockchain_wallets w ON b.participant_id = w.participant_id;",
      "SELECT t.transaction_id, t.amount, p.participant_name AS sender, q.participant_name AS receiver FROM blockchain_transactions t JOIN blockchain_participants p ON t.sender_id = p.participant_id JOIN blockchain_participants q ON t.receiver_id = q.participant_id;",
      "SELECT participant_name, public_key FROM blockchain_participants WHERE public_key LIKE '%key%';",
      "SELECT * FROM blockchain_blocks WHERE timestamp >= '2022-01-01';",
      "SELECT w.wallet_id, w.balance, p.participant_name FROM blockchain_wallets w LEFT JOIN blockchain_participants p ON w.participant_id = p.participant_id WHERE w.balance > 1000;",
      "SELECT participant_id, COUNT(*) AS transaction_count FROM blockchain_transactions GROUP BY participant_id;",
      "SELECT p.participant_name, COUNT(*) AS verification_count FROM blockchain_verification v JOIN blockchain_participants p ON v.participant_id = p.participant_id GROUP BY participant_name ORDER BY verification_count DESC;",
      "SELECT b.block_id, b.timestamp, COUNT(t.transaction_id) AS transaction_count FROM blockchain_blocks b LEFT JOIN blockchain_transactions t ON b.block_id = t.block_id GROUP BY b.block_id;",
      "SELECT p.participant_name, SUM(w.balance) AS total_balance FROM blockchain_wallets w JOIN blockchain_participants p ON w.participant_id = p.participant_id GROUP BY p.participant_name ORDER BY total_balance DESC;",
      "SELECT p.participant_name, MIN(w.balance) AS min_balance, MAX(w.balance) AS max_balance FROM blockchain_participants p JOIN blockchain_wallets w ON p.participant_id = w.participant_id GROUP BY p.participant_name;",
      "SELECT participant_name, AVG(balance) AS avg_balance FROM blockchain_participants p JOIN blockchain_wallets w ON p.participant_id = w.participant_id GROUP BY participant_name;",
      "SELECT participant_name, TIMESTAMPDIFF(MINUTE, verified_at, NOW()) AS minutes_since_verification FROM blockchain_participants p JOIN blockchain_verification v ON p.participant_id = v.participant_id;",
      "SELECT p.participant_name, SUM(t.amount) AS total_sent_amount FROM blockchain_transactions t JOIN blockchain_participants p ON t.sender_id = p.participant_id GROUP BY p.participant_name ORDER BY total_sent_amount DESC;",
      "SELECT b.block_id, b.timestamp, SUM(t.amount) AS total_transactions_amount FROM blockchain_blocks b JOIN blockchain_transactions t ON b.block_id = t.block_id GROUP BY b.block_id;",
      "SELECT p.participant_name, COUNT(t.transaction_id) AS transaction_count, SUM(t.amount) AS total_amount FROM blockchain_transactions t JOIN blockchain_participants p ON t.sender_id = p.participant_id GROUP BY p.participant_name;",
      "SELECT p1.participant_name AS sender, p2.participant_name AS receiver, SUM(t.amount) AS total_amount FROM blockchain_transactions t JOIN blockchain_participants p1 ON t.sender_id = p1.participant_id JOIN blockchain_participants p2 ON t.receiver_id = p2.participant_id GROUP BY sender, receiver ORDER BY total_amount DESC;",
      "SELECT p.participant_name, MAX(w.balance) - MIN(w.balance) AS balance_difference FROM blockchain_participants p JOIN blockchain_wallets w ON p.participant_id = w.participant_id GROUP BY p.participant_name;",
      "SELECT p.participant_name, COUNT(v.verification_id) AS verification_count, TIMESTAMPDIFF(DAY, MIN(v.verified_at), MAX(v.verified_at)) AS days_since_first_last_verification FROM blockchain_verification v JOIN blockchain_participants p ON v.participant_id = p.participant_id GROUP BY p.participant_name;"
    ]
  }
]