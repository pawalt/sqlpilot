[
  {
    "statements": [
      "SELECT * FROM CustomerBehaviorData;",
      "SELECT customer_id, product_id FROM CustomerBehaviorData;",
      "SELECT transaction_date, transaction_amount FROM CustomerBehaviorData;",
      "SELECT * FROM CustomerBehaviorData WHERE customer_id = 100;",
      "SELECT * FROM CustomerBehaviorData WHERE transaction_amount > 100;",
      "SELECT customer_id, product_id, category FROM CustomerBehaviorData WHERE category = 'Electronics';",
      "SELECT DISTINCT product_id FROM CustomerBehaviorData;",
      "SELECT category, COUNT(*) FROM CustomerBehaviorData GROUP BY category;",
      "SELECT * FROM CustomerBehaviorData ORDER BY transaction_date DESC;",
      "SELECT AVG(transaction_amount) FROM CustomerBehaviorData;",
      "SELECT customer_id, SUM(transaction_amount) FROM CustomerBehaviorData GROUP BY customer_id;",
      "SELECT customer_id, MAX(transaction_amount) FROM CustomerBehaviorData GROUP BY customer_id;",
      "SELECT category, AVG(transaction_amount) FROM CustomerBehaviorData GROUP BY category;",
      "SELECT * FROM CustomerBehaviorData WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT COUNT(*) FROM CustomerBehaviorData;",
      "SELECT customer_id, AVG(transaction_amount) FROM CustomerBehaviorData GROUP BY customer_id HAVING AVG(transaction_amount) > 200;",
      "SELECT * FROM CustomerBehaviorData WHERE product_id IN (1, 2, 3);",
      "SELECT category, MAX(transaction_amount) FROM CustomerBehaviorData GROUP BY category;",
      "SELECT * FROM CustomerBehaviorData LIMIT 10;",
      "SELECT category, SUM(transaction_amount) FROM CustomerBehaviorData GROUP BY category ORDER BY SUM(transaction_amount) DESC;",
      "SELECT * FROM CustomerBehaviorData WHERE transaction_amount > 100",
      "SELECT customer_id, AVG(transaction_amount) FROM CustomerBehaviorData GROUP BY customer_id",
      "SELECT customer_id, COUNT(DISTINCT product_id) FROM CustomerBehaviorData GROUP BY customer_id",
      "SELECT category, SUM(transaction_amount) FROM CustomerBehaviorData GROUP BY category",
      "SELECT *, RANK() OVER(PARTITION BY category ORDER BY transaction_amount DESC) AS rank FROM CustomerBehaviorData",
      "SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount) FROM CustomerBehaviorData",
      "SELECT customer_id, AVG(transaction_amount) AS avg_amount FROM CustomerBehaviorData GROUP BY customer_id HAVING avg_amount > 50",
      "SELECT customer_id, MAX(transaction_date) FROM CustomerBehaviorData GROUP BY customer_id HAVING MAX(transaction_date) <= '2022-01-31'",
      "SELECT DISTINCT transaction_date FROM CustomerBehaviorData",
      "SELECT category, COUNT(*) AS total_transactions FROM CustomerBehaviorData WHERE transaction_amount > 200 GROUP BY category HAVING total_transactions > 3",
      "SELECT customer_id, MIN(transaction_amount), MAX(transaction_amount) FROM CustomerBehaviorData WHERE customer_id IN (1, 2, 3) GROUP BY customer_id",
      "SELECT customer_id, category, SUM(transaction_amount) FROM CustomerBehaviorData GROUP BY customer_id, category HAVING SUM(transaction_amount) > 500",
      "SELECT customer_id, product_id, AVG(transaction_amount) AS avg_amount FROM CustomerBehaviorData WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY customer_id, product_id",
      "SELECT category, AVG(transaction_amount) AS avg_amount FROM CustomerBehaviorData WHERE transaction_date = '2022-01-15' GROUP BY category",
      "SELECT customer_id, product_id, transaction_date, transaction_amount, category FROM CustomerBehaviorData WHERE customer_id = 1 AND transaction_amount > 50",
      "SELECT customer_id, product_id, transaction_date, transaction_amount, category FROM CustomerBehaviorData WHERE category LIKE '%electronics%'",
      "SELECT MAX(transaction_amount) AS max_amount, MIN(transaction_amount) AS min_amount FROM CustomerBehaviorData",
      "SELECT DISTINCT category FROM CustomerBehaviorData",
      "SELECT * FROM CustomerBehaviorData ORDER BY transaction_date DESC LIMIT 10",
      "SELECT customer_id, COUNT(*) AS total_transactions FROM CustomerBehaviorData WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY customer_id HAVING total_transactions > 5"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_id, customer_name FROM customers WHERE customer_id = 1;",
      "SELECT customer_id, customer_name FROM customers WHERE customer_name LIKE 'A%';",
      "SELECT customer_id, email FROM customers WHERE email LIKE '%@gmail.com';",
      "SELECT * FROM orders;",
      "SELECT order_id, total_amount FROM orders WHERE total_amount > 100;",
      "SELECT order_id, order_date FROM orders WHERE order_date = '2022-01-15';",
      "SELECT * FROM orders WHERE payment_method = 'Credit Card';",
      "SELECT customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customer_name, total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customer_name, total_amount FROM customers RIGHT JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customer_name, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 50;",
      "SELECT customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id ORDER BY total_amount DESC;",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT customer_name, COUNT(*) AS order_count FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING order_count > 2;",
      "SELECT customer_name, AVG(total_amount) AS avg_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT customer_name, MAX(total_amount) AS max_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT customer_name, MIN(total_amount) AS min_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT customer_name, customer_id, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount BETWEEN 50 AND 100;",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT customer_name, email FROM customers WHERE phone_number LIKE '%123%';",
      "SELECT o.order_id, c.customer_name, o.order_date FROM orders o INNER JOIN customers c ON o.customer_id = c.customer_id;",
      "SELECT c.customer_name, SUM(o.total_amount) AS total_spent FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, AVG(o.total_amount) AS avg_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
      "SELECT customer_id, COUNT(order_id) AS order_count FROM orders GROUP BY customer_id HAVING count(order_id) > 5;",
      "SELECT c.customer_name, COUNT(o.order_id) AS order_count FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
      "SELECT customer_id, customer_name, order_id, order_date FROM (SELECT * FROM customers INNER JOIN orders ON customers.customer_id=orders.customer_id) AS combined_table;",
      "SELECT customer_id, customer_name, order_id, order_date FROM customers JOIN orders USING(customer_id);",
      "SELECT c.customer_name, o.order_date, o.total_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id WHERE total_amount > 100;",
      "SELECT customer_id, customer_name, total_amount FROM customers LEFT JOIN orders ON customers.customer_id=orders.custmer_id AND total_amount IS NULL;",
      "SELECT customer_name, phone_number, payment_method FROM customers, orders WHERE customers.customer_id = orders.customer_id;",
      "SELECT customer_id, customer_name, email FROM customers UNION SELECT customer_id, customer_name, email FROM customers;",
      "SELECT customer_id, SUM(total_amount) AS total_spent FROM orders WHERE order_date > '2022-01-01' GROUP BY customer_id HAVING total_spent > 500;",
      "SELECT customer_id, customer_name, MAX(total_amount) AS max_amount FROM customers INNER JOIN orders ON customers.customer_id=orders.customer_id GROUP BY customer_id;",
      "SELECT customer_id, customer_name, total_amount FROM customers JOIN orders USING(customer_id) ORDER BY total_amount DESC;",
      "SELECT customer_id, AVG(total_amount) AS avg_amount FROM orders GROUP BY customer_id ORDER BY avg_amount DESC;",
      "SELECT customer_name, email, phone_number, order_date FROM customers FULL OUTER JOIN orders ON customers.customer_id=orders.customer_id;",
      "SELECT customer_id, customer_name, order_date, payment_method FROM customers INNER JOIN orders ON customers.customer_id=orders.customer_id WHERE order_date < '2022-03-01' AND payment_method='Credit Card';",
      "SELECT customer_id, customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id=orders.customer_id WHERE total_amount BETWEEN 50 AND 100;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, email_address FROM customers;",
      "SELECT customer_name, registration_date FROM customers WHERE registration_date > '2021-01-01';",
      "SELECT order_id, order_date, total_amount FROM orders;",
      "SELECT product_name, category, price FROM products;",
      "SELECT customer_name, email_address, order_date, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT product_name, category, price, total_amount FROM products INNER JOIN orders ON products.product_id = orders.order_id;",
      "SELECT customer_name, email_address, product_name, category, price FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN products ON orders.product_id = products.product_id;",
      "SELECT customer_name, email_address, order_date, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.total_amount > 1000;",
      "SELECT product_name, category, price FROM products WHERE category = 'Clothing';",
      "SELECT customer_name, email_address, order_date, total_amount, product_name, category FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN products ON orders.product_id = products.product_id WHERE category = 'Electronics';",
      "SELECT customer_name, email_address, order_date, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31';",
      "SELECT customer_name, email_address, SUM(total_amount) AS total_spent FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id;",
      "SELECT category, AVG(price) AS average_price FROM products GROUP BY category;",
      "SELECT customer_name, COUNT(order_id) AS total_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_name, COUNT(order_id) AS total_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date > '2021-06-01' GROUP BY customers.customer_id;",
      "SELECT customer_name, COUNT(order_id) AS total_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 500 GROUP BY customers.customer_id;",
      "SELECT customer_name, AVG(total_amount) AS average_order_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_name, MIN(total_amount) AS min_order_amount, MAX(total_amount) AS max_order_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id;",
      "SELECT customer_name, product_name, MIN(price) AS min_price, MAX(price) AS max_price FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN products ON orders.product_id = products.product_id GROUP BY customers.customer_id, product_name;",
      "SELECT customer_name, email_address FROM customers WHERE registration_date > '2021-01-01';",
      "SELECT c.customer_name, o.order_date, o.total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.total_amount > 1000;",
      "SELECT p.product_name, p.category, o.total_amount FROM products p JOIN order_details od ON p.product_id = od.product_id JOIN orders o ON od.order_id = o.order_id WHERE o.order_date BETWEEN '2021-01-01' AND '2021-12-31';",
      "SELECT customer_name, COUNT(*) AS num_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING num_orders > 5;",
      "SELECT c.customer_name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY total_spent DESC;",
      "SELECT product_name, price FROM products WHERE category = 'Electronics' AND price > 500;",
      "SELECT customer_name, COUNT(*) AS num_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.total_amount > 500 GROUP BY c.customer_id HAVING num_orders > 2;",
      "SELECT product_name, category, SUM(od.quantity) AS total_quantity FROM products p JOIN order_details od ON p.product_id = od.product_id GROUP BY p.product_id ORDER BY total_quantity DESC;",
      "SELECT c.customer_name, p.product_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE o.order_date > '2021-01-01' AND o.order_date < '2022-01-01';",
      "SELECT customer_name, AVG(total_amount) AS avg_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING avg_order_amount > 500;",
      "SELECT c.customer_name, p.product_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.category = 'Clothing' AND o.total_amount < 1000;",
      "SELECT product_name, MAX(price) AS max_price FROM products GROUP BY category ORDER BY max_price DESC;",
      "SELECT c.customer_name, COUNT(DISTINCT p.category) AS num_categories FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id GROUP BY c.customer_id HAVING num_categories > 2;",
      "SELECT customer_name, AVG(total_amount) AS avg_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date < '2021-06-01' GROUP BY c.customer_id HAVING avg_order_amount > 300;",
      "SELECT p.product_name, SUM(od.quantity) AS total_quantity FROM products p JOIN order_details od ON p.product_id = od.product_id GROUP BY p.product_id HAVING total_quantity > 50;",
      "SELECT customer_name, MIN(total_amount) AS min_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY min_order_amount ASC;",
      "SELECT customer_name, MAX(total_amount) AS max_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY max_order_amount DESC;",
      "SELECT c.customer_name, AVG(o.total_amount) AS avg_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.customer_name LIKE '%Smith%' GROUP BY c.customer_id;",
      "SELECT product_name, price FROM products WHERE product_name LIKE '%T-shirt%' AND price < 50;",
      "SELECT customer_name, MAX(o.order_date) AS last_order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_id, customer_name, customer_email FROM customers;",
      "SELECT customer_id, customer_name, customer_address FROM customers WHERE customer_id = 1;",
      "SELECT * FROM orders;",
      "SELECT order_id, order_date, total_amount FROM orders WHERE customer_id = 1;",
      "SELECT * FROM products;",
      "SELECT product_id, product_name, price FROM products WHERE category = 'Electronics';",
      "SELECT * FROM order_items;",
      "SELECT order_id, product_id, quantity FROM order_items WHERE product_id = 1;",
      "SELECT c.customer_name, p.product_name, oi.quantity, oi.unit_price FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id WHERE c.customer_id = 1;",
      "SELECT c.customer_name, p.product_name, oi.quantity, oi.unit_price FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id LEFT JOIN order_items oi ON o.order_id = oi.order_id LEFT JOIN products p ON oi.product_id = p.product_id WHERE p.category = 'Clothing';",
      "SELECT customer_id, COUNT(*) AS total_orders FROM orders GROUP BY customer_id;",
      "SELECT category, AVG(price) AS avg_price FROM products GROUP BY category;",
      "SELECT customer_name, SUM(oi.quantity) AS total_quantity FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id WHERE c.customer_id = 2 GROUP BY customer_name;",
      "SELECT customer_name, SUM(oi.quantity * oi.unit_price) AS total_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id WHERE c.customer_id = 3 GROUP BY customer_name;",
      "SELECT customer_name, MAX(total_amount) AS max_order_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name;",
      "SELECT customer_name, MIN(total_amount) AS min_order_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name;",
      "SELECT customer_name, AVG(total_amount) AS avg_order_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name;",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name;",
      "SELECT c.customer_name, p.product_name, SUM(oi.quantity) AS total_quantity FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id GROUP BY c.customer_name, p.product_name;",
      "SELECT * FROM customers;",
      "SELECT customer_name, customer_email FROM customers WHERE customer_id = 1;",
      "SELECT * FROM orders WHERE order_date > '2022-01-01';",
      "SELECT customer_name, total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
      "SELECT p.product_name, oi.quantity, oi.unit_price FROM products p JOIN order_items oi ON p.product_id = oi.product_id;",
      "SELECT SUM(total_amount) AS total_sales FROM orders;",
      "SELECT category, AVG(price) AS avg_price FROM products GROUP BY category;",
      "SELECT customer_name, COUNT(order_id) AS total_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT customer_name, total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE total_amount > 1000;",
      "SELECT product_name, SUM(quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY product_name;",
      "SELECT customer_name, CASE WHEN total_amount > 500 THEN 'High Value' ELSE 'Low Value' END AS order_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
      "SELECT customer_name, order_date, SUM(total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-06-30' GROUP BY customer_name, order_date;",
      "SELECT category, AVG(quantity) AS avg_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY category;",
      "SELECT customer_name, CASE WHEN total_amount > 1000 THEN 'VIP' WHEN total_amount > 500 THEN 'Premium' ELSE 'Standard' END AS customer_type FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
      "SELECT customer_name, COUNT(product_id) AS total_products_ordered FROM customers c JOIN order_items oi ON c.customer_id = oi.order_id GROUP BY customer_name;",
      "SELECT product_name, category, MAX(price) AS max_price FROM products GROUP BY category, product_name;",
      "SELECT customer_name, COUNT(order_id) AS total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name HAVING COUNT(order_id) > 1;",
      "SELECT customer_name, total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id ORDER BY total_amount DESC;",
      "SELECT product_name, COUNT(*) AS total_orders FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY product_name HAVING COUNT(*) > 5;",
      "SELECT customer_name, COUNT(order_id) AS total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY customer_name ORDER BY total_orders DESC LIMIT 5;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT * FROM orders;",
      "SELECT * FROM products;",
      "SELECT * FROM order_items;",
      "SELECT * FROM payment_transactions;",
      "SELECT customer_name, email FROM customers;",
      "SELECT product_name, unit_price FROM products;",
      "SELECT order_date, total_amount FROM orders;",
      "SELECT quantity, subtotal_amount FROM order_items;",
      "SELECT transaction_date, amount FROM payment_transactions;",
      "SELECT customer_name, phone_number FROM customers;",
      "SELECT order_date, total_amount, order_id FROM orders;",
      "SELECT product_name, category FROM products;",
      "SELECT order_id, product_id, quantity FROM order_items;",
      "SELECT transaction_id, transaction_date, payment_method FROM payment_transactions;",
      "SELECT customer_name, email, phone_number FROM customers;",
      "SELECT product_name, unit_price, category FROM products;",
      "SELECT order_date, total_amount, order_id FROM orders WHERE total_amount > 1000;",
      "SELECT product_name, unit_price, category FROM products WHERE unit_price < 50.00;",
      "SELECT order_id, product_id, quantity FROM order_items WHERE quantity > 5",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, email FROM customers WHERE phone_number LIKE '%123%';",
      "SELECT * FROM orders JOIN customers ON orders.customer_id = customers.customer_id;",
      "SELECT order_id, total_amount FROM orders WHERE total_amount > 1000;",
      "SELECT product_name, unit_price FROM products WHERE category = 'Electronics';",
      "SELECT * FROM order_items JOIN products ON order_items.product_id = products.product_id;",
      "SELECT orders.order_id, SUM(quantity) AS total_quantity FROM order_items JOIN orders ON order_items.order_id = orders.order_id GROUP BY orders.order_id;",
      "SELECT customer_id, customer_name, COUNT(order_id) AS total_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
      "SELECT customer_id, customer_name, COUNT(order_id) AS total_orders, SUM(total_amount) AS total_spent FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
      "SELECT customer_name, order_id, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 500;",
      "SELECT customers.customer_name, orders.order_id, payment_transactions.amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payment_transactions ON orders.order_id = payment_transactions.order_id;",
      "SELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date >= '2022-06-01' AND order_date < '2022-07-01';",
      "SELECT customer_name, product_name, quantity, subtotal_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id;",
      "SELECT customer_name, COUNT(DISTINCT category) AS total_categories FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY customer_name;",
      "SELECT customer_name, AVG(total_amount) AS avg_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING AVG(total_amount) > 500;",
      "SELECT customer_id, customer_name, order_id, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id UNION ALL SELECT customer_id, customer_name, order_id, total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE order_id IS NULL;",
      "SELECT customer_name, MAX(total_amount) AS max_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
      "SELECT customer_name, MIN(total_amount) AS min_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customer_id = 2 GROUP BY customer_name;",
      "SELECT customer_name, COUNT(DISTINCT customer_id) AS total_customers FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payment_transactions ON orders.order_id = payment_transactions.order_id GROUP BY customer_name;",
      "SELECT customer_name, SUM(amount) AS total_payments FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN payment_transactions ON orders.order_id = payment_transactions.order_id GROUP BY customer_name;"
    ]
  }
]