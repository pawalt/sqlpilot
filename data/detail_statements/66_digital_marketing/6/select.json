[
  {
    "statements": [
      "SELECT * FROM customer_profiles;",
      "SELECT customer_id, customer_name, age FROM customer_profiles WHERE age > 30;",
      "SELECT customer_name, email_address, phone_number FROM customer_profiles WHERE age BETWEEN 25 AND 40;",
      "SELECT customer_id, customer_name, gender FROM customer_profiles WHERE gender = 'Male';",
      "SELECT customer_id, customer_name, email_address FROM customer_profiles WHERE customer_name LIKE '%John%';",
      "SELECT customer_id, customer_name, source_channel FROM customer_profiles WHERE source_channel = 'Online';",
      "SELECT customer_id, customer_name, phone_number FROM customer_profiles WHERE email_address LIKE '%@gmail.com';",
      "SELECT customer_name, age FROM customer_profiles WHERE age <= 25;",
      "SELECT customer_id, email_address FROM customer_profiles WHERE gender = 'Female' AND age > 40;",
      "SELECT customer_name, source_channel FROM customer_profiles WHERE source_channel IN ('Online', 'Store');",
      "SELECT customer_id, customer_name, age FROM customer_profiles WHERE source_channel = 'Online' AND age > 30;",
      "SELECT customer_name, phone_number FROM customer_profiles WHERE customer_name = 'Alice';",
      "SELECT customer_id, gender FROM customer_profiles WHERE gender LIKE 'F%';",
      "SELECT customer_id, customer_name, email_address FROM customer_profiles WHERE age < 30 AND gender = 'Male';",
      "SELECT customer_name, source_channel FROM customer_profiles WHERE source_channel NOT IN ('Online', 'Store');",
      "SELECT customer_id, phone_number FROM customer_profiles WHERE age BETWEEN 18 AND 25;",
      "SELECT customer_name, gender FROM customer_profiles WHERE age > 30 AND source_channel = 'Online';",
      "SELECT customer_id, customer_name FROM customer_profiles WHERE customer_name NOT LIKE '%Smith%';",
      "SELECT customer_id, gender FROM customer_profiles WHERE gender = 'Other';",
      "SELECT customer_id, customer_name, age FROM customer_profiles ORDER BY age DESC;",
      "SELECT * FROM customer_profiles WHERE customer_id = 100;",
      "SELECT customer_name, email_address FROM customer_profiles WHERE age > 18;",
      "SELECT customer_name, phone_number FROM customer_profiles WHERE gender = 'Female';",
      "SELECT customer_id, customer_name, age FROM customer_profiles WHERE source_channel = 'Online';",
      "SELECT * FROM customer_profiles WHERE age BETWEEN 30 AND 50;",
      "SELECT customer_name, email_address, age FROM customer_profiles WHERE age <= 25;",
      "SELECT customer_id, gender FROM customer_profiles WHERE age >= 35;",
      "SELECT customer_id, customer_name FROM customer_profiles WHERE gender = 'Male' AND source_channel = 'Offline';",
      "SELECT customer_id, phone_number FROM customer_profiles WHERE customer_name LIKE 'J%';",
      "SELECT * FROM customer_profiles WHERE source_channel IN ('Online', 'In-Store');",
      "SELECT customer_name, gender, age FROM customer_profiles WHERE phone_number IS NOT NULL;",
      "SELECT * FROM customer_profiles WHERE age = (SELECT MAX(age) FROM customer_profiles);",
      "SELECT customer_id, customer_name FROM customer_profiles WHERE gender = 'Female' OR gender = 'Others';",
      "SELECT customer_name, email_address, phone_number FROM customer_profiles WHERE age > 30 AND age < 50;",
      "SELECT customer_id, customer_name, gender FROM customer_profiles WHERE customer_name NOT LIKE 'A%';",
      "SELECT * FROM customer_profiles WHERE customer_name IN ('Alice', 'Bob', 'Charlie');",
      "SELECT customer_id, email_address FROM customer_profiles WHERE source_channel LIKE '%Social%';",
      "SELECT customer_id, email_address, phone_number FROM customer_profiles WHERE age % 5 = 0;",
      "SELECT customer_name, age FROM customer_profiles WHERE gender = 'Male' ORDER BY age DESC;",
      "SELECT customer_id, email_address, source_channel FROM customer_profiles WHERE phone_number NOT LIKE '555%';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT first_name, last_name FROM customers WHERE customer_id = 101;",
      "SELECT * FROM orders;",
      "SELECT order_id, total_amount FROM orders WHERE order_date > '2022-01-01';",
      "SELECT first_name, last_name, email FROM customers WHERE customer_id = 102;",
      "SELECT * FROM customers WHERE last_name LIKE 'Smith%';",
      "SELECT order_id, total_amount FROM orders WHERE customer_id = 103;",
      "SELECT first_name, last_name, email FROM customers WHERE first_name = 'Alice';",
      "SELECT order_id, order_date FROM orders WHERE customer_id = 104;",
      "SELECT * FROM customers WHERE email LIKE '%@gmail.com';",
      "SELECT order_id, total_amount FROM orders WHERE total_amount > 1000;",
      "SELECT first_name, last_name, email FROM customers ORDER BY last_name ASC;",
      "SELECT order_id, total_amount FROM orders ORDER BY total_amount DESC;",
      "SELECT * FROM customers WHERE customer_id BETWEEN 105 AND 110;",
      "SELECT customer_id, first_name FROM customers WHERE first_name <> 'John';",
      "SELECT COUNT(*) AS total_orders FROM orders;",
      "SELECT AVG(total_amount) AS average_amount FROM orders;",
      "SELECT MAX(total_amount) AS max_amount FROM orders;",
      "SELECT MIN(total_amount) AS min_amount FROM orders;",
      "SELECT DISTINCT first_name FROM customers;",
      "SELECT * FROM customers WHERE first_name = 'Alice';",
      "SELECT first_name, last_name, email FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.total_amount > 1000 ORDER BY orders.total_amount DESC;",
      "SELECT customers.first_name, orders.total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.total_amount IS NULL;",
      "SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE total_amount < 500);",
      "SELECT first_name, last_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY first_name, last_name HAVING total_spent > 5000;",
      "SELECT first_name, last_name, email FROM customers WHERE customer_id = (SELECT customer_id FROM orders WHERE total_amount IN (SELECT MAX(total_amount) FROM orders));",
      "SELECT first_name, last_name, COUNT(order_id) AS order_count FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY first_name, last_name HAVING order_count < 3;",
      "SELECT c1.first_name, c1.last_name, c2.first_name AS referred_by FROM customers c1 LEFT JOIN customers c2 ON c1.customer_id = c2.customer_id WHERE c1.customer_id <> c2.customer_id;",
      "SELECT first_name, last_name, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT first_name, last_name, email FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);",
      "SELECT first_name, last_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE first_name LIKE '%a%' AND total_amount > 100;",
      "SELECT c1.first_name AS customer_name, c2.first_name AS referred_by FROM customers c1 LEFT JOIN customers c2 ON c1.customer_id = c2.customer_id WHERE c2.customer_id IS NOT NULL;",
      "SELECT first_name, last_name, email FROM customers WHERE customer_id = (SELECT MAX(customer_id) FROM customers);",
      "SELECT first_name, last_name, COUNT(order_id) AS order_count FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY first_name, last_name HAVING order_count >= 2;",
      "SELECT first_name, last_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date < '2022-06-01';",
      "SELECT first_name, last_name, email FROM customers WHERE customer_id = (SELECT customer_id FROM orders WHERE order_date = (SELECT MAX(order_date) FROM orders));",
      "SELECT first_name, last_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount = (SELECT MIN(total_amount) FROM orders);",
      "SELECT first_name, last_name, email FROM customers WHERE customer_id = ANY (SELECT customer_id FROM orders WHERE order_date > '2022-01-01');",
      "SELECT first_name, last_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount BETWEEN 500 AND 1000;",
      "SELECT first_name, last_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date = (SELECT MIN(order_date) FROM orders);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT first_name, last_name FROM customers;",
      "SELECT customer_id, email FROM customers;",
      "SELECT * FROM marketing_channels;",
      "SELECT channel_name, channel_type FROM marketing_channels;",
      "SELECT channel_id, channel_description FROM marketing_channels;",
      "SELECT * FROM customer_interaction;",
      "SELECT customer_id, interaction_description FROM customer_interaction;",
      "SELECT interaction_id, date_time FROM customer_interaction;",
      "SELECT c.first_name, c.last_name, mc.channel_name FROM customers c JOIN customer_interaction ci ON c.customer_id = ci.customer_id JOIN marketing_channels mc ON ci.channel_id = mc.channel_id;",
      "SELECT c.customer_id, c.phone_number, mc.channel_name, ci.date_time FROM customers c JOIN customer_interaction ci ON c.customer_id = ci.customer_id JOIN marketing_channels mc ON ci.channel_id = mc.channel_id;",
      "SELECT c.last_name, mc.channel_name, ci.interaction_description FROM customers c JOIN customer_interaction ci ON c.customer_id = ci.customer_id JOIN marketing_channels mc ON ci.channel_id = mc.channel_id;",
      "SELECT c.first_name, mc.channel_type FROM customers c JOIN customer_interaction ci ON c.customer_id = ci.customer_id JOIN marketing_channels mc ON ci.channel_id = mc.channel_id;",
      "SELECT c.first_name, mc.channel_description, ci.date_time FROM customers c JOIN customer_interaction ci ON c.customer_id = ci.customer_id JOIN marketing_channels mc ON ci.channel_id = mc.channel_id;",
      "SELECT c.last_name, mc.channel_description, ci.interaction_description FROM customers c JOIN customer_interaction ci ON c.customer_id = ci.customer_id JOIN marketing_channels mc ON ci.channel_id = mc.channel_id;",
      "SELECT c.first_name, c.email, mc.channel_description, ci.date_time FROM customers c JOIN customer_interaction ci ON c.customer_id = ci.customer_id JOIN marketing_channels mc ON ci.channel_id = mc.channel_id;",
      "SELECT c.first_name, c.phone_number, mc.channel_description, ci.interaction_description FROM customers c JOIN customer_interaction ci ON c.customer_id = ci.customer_id JOIN marketing_channels mc ON ci.channel_id = mc.channel_id;",
      "SELECT c.last_name, c.email, mc.channel_type, ci.date_time FROM customers c JOIN customer_interaction ci ON c.customer_id = ci.customer_id JOIN marketing_channels mc ON ci.channel_id = mc.channel_id;",
      "SELECT * FROM customers;",
      "SELECT first_name, last_name, email FROM customers WHERE customer_id = 1;",
      "SELECT customer_id, first_name, last_name, phone_number FROM customers WHERE email LIKE '%gmail.com';",
      "SELECT * FROM marketing_channels WHERE channel_type = 'Social Media';",
      "SELECT channel_name, channel_description FROM marketing_channels WHERE channel_type = 'Email';",
      "SELECT * FROM customer_interaction WHERE date_time BETWEEN '2022-01-01 00:00:00' AND '2022-02-01 23:59:59';",
      "SELECT customers.first_name, customers.last_name, marketing_channels.channel_name FROM customers INNER JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id INNER JOIN marketing_channels ON customer_interaction.channel_id = marketing_channels.channel_id;",
      "SELECT customers.customer_id, COUNT(customer_interaction.interaction_id) AS total_interactions FROM customers LEFT JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id GROUP BY customers.customer_id;",
      "SELECT customers.first_name, customers.last_name, COUNT(customer_interaction.interaction_id) AS total_interactions FROM customers LEFT JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id GROUP BY customers.customer_id HAVING COUNT(customer_interaction.interaction_id) > 5;",
      "SELECT customers.first_name, customers.last_name, marketing_channels.channel_name, customer_interaction.date_time FROM customers INNER JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id INNER JOIN marketing_channels ON customer_interaction.channel_id = marketing_channels.channel_id WHERE customers.first_name = 'John' AND customer_interaction.date_time > '2022-01-01 00:00:00';",
      "SELECT customers.first_name, customers.last_name, marketing_channels.channel_name, customer_interaction.date_time FROM customers INNER JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id INNER JOIN marketing_channels ON customer_interaction.channel_id = marketing_channels.channel_id WHERE marketing_channels.channel_type = 'Email' AND customer_interaction.date_time < '2022-02-01 23:59:59';",
      "SELECT customers.first_name, customers.last_name, marketing_channels.channel_name, customer_interaction.date_time FROM customers INNER JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id INNER JOIN marketing_channels ON customer_interaction.channel_id = marketing_channels.channel_id WHERE customers.last_name LIKE 'S%' AND marketing_channels.channel_type = 'Social Media' AND customer_interaction.date_time BETWEEN '2022-01-01 00:00:00' AND '2022-02-28 23:59:59';",
      "SELECT customers.customer_id, customers.first_name, customers.last_name, COUNT(customer_interaction.interaction_id) AS total_interactions FROM customers LEFT JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id GROUP BY customers.customer_id ORDER BY total_interactions DESC;",
      "SELECT customers.customer_id, COUNT(customer_interaction.interaction_id) AS total_interactions FROM customers LEFT JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id GROUP BY customers.customer_id HAVING COUNT(customer_interaction.interaction_id) > 3 ORDER BY total_interactions ASC;",
      "SELECT customers.first_name, COUNT(DISTINCT marketing_channels.channel_id) AS total_channels FROM customers INNER JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id INNER JOIN marketing_channels ON customer_interaction.channel_id = marketing_channels.channel_id GROUP BY customers.first_name;",
      "SELECT customers.first_name, last_name, SUM(CASE WHEN marketing_channels.channel_type = 'Email' THEN 1 ELSE 0 END) AS email_interactions, SUM(CASE WHEN marketing_channels.channel_type = 'Social Media' THEN 1 ELSE 0 END) AS social_media_interactions FROM customers INNER JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id INNER JOIN marketing_channels ON customer_interaction.channel_id = marketing_channels.channel_id GROUP BY customers.first_name, last_name;",
      "SELECT channel_type, COUNT(customer_interaction.interaction_id) AS total_interactions FROM marketing_channels LEFT JOIN customer_interaction ON marketing_channels.channel_id = customer_interaction.channel_id GROUP BY channel_type;",
      "SELECT customers.first_name, customers.last_name, MAX(customer_interaction.date_time) AS last_interaction_date FROM customers INNER JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id GROUP BY customers.first_name, customers.last_name;",
      "SELECT customers.first_name, customers.last_name, AVG(customer_interaction.date_time) AS avg_interaction_time FROM customers INNER JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id GROUP BY customers.first_name, customers.last_name;",
      "SELECT customers.first_name, customers.last_name, MIN(customer_interaction.date_time) AS first_interaction_date FROM customers INNER JOIN customer_interaction ON customers.customer_id = customer_interaction.customer_id GROUP BY customers.first_name, customers.last_name;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, email FROM customers;",
      "SELECT order_id, customer_id, order_date FROM orders;",
      "SELECT product_name, unit_price FROM products;",
      "SELECT channel_name, channel_type FROM marketing_channels;",
      "SELECT customer_id, customer_name, email, phone_number, address FROM customers;",
      "SELECT order_id, customer_id, order_date, total_amount FROM orders;",
      "SELECT product_id, product_name, unit_price FROM products;",
      "SELECT channel_id, channel_name, channel_type FROM marketing_channels;",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, email FROM customers WHERE customer_id = 1;",
      "SELECT order_id, customer_id, order_date FROM orders WHERE customer_id = 2;",
      "SELECT product_name, unit_price FROM products WHERE product_id = 3;",
      "SELECT channel_name, channel_type FROM marketing_channels WHERE channel_id = 4;",
      "SELECT customer_id, customer_name, email, phone_number, address FROM customers WHERE customer_id = 2;",
      "SELECT order_id, customer_id, order_date, total_amount FROM orders WHERE customer_id = 3;",
      "SELECT product_id, product_name, unit_price FROM products WHERE product_id = 4;",
      "SELECT channel_id, channel_name, channel_type FROM marketing_channels WHERE channel_id = 5;",
      "SELECT * FROM customers WHERE customer_name LIKE 'A%';",
      "SELECT order_id, customer_id, order_date FROM orders WHERE order_date >= '2022-01-01';",
      "SELECT customer_name, email, phone_number FROM customers;",
      "SELECT customer_name, address FROM customers WHERE customer_id = 1001;",
      "SELECT customer_name, email, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT * FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date > '2022-01-01';",
      "SELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 1000;",
      "SELECT product_name, unit_price FROM products WHERE unit_price BETWEEN 50 AND 100;",
      "SELECT customer_name, email, product_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.order_id = products.product_id;",
      "SELECT customer_id, COUNT(order_id) AS total_orders FROM orders GROUP BY customer_id;",
      "SELECT channel_name, channel_type FROM marketing_channels WHERE channel_type = 'Social Media';",
      "SELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING SUM(total_amount) > 5000;",
      "SELECT customer_name, email, phone_number, address FROM customers WHERE customer_name LIKE 'A%' AND address LIKE '%Street';",
      "SELECT product_name, unit_price FROM products ORDER BY unit_price DESC;",
      "SELECT customer_name, email FROM customers WHERE email LIKE '%gmail.com';",
      "SELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id ORDER BY total_amount ASC;",
      "SELECT customer_name, email, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT channel_name, COUNT(channel_id) AS total_channels FROM marketing_channels GROUP BY channel_name;",
      "SELECT customer_name, email, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.product_id = products.product_id WHERE product_name = 'Laptop';",
      "SELECT customer_id, MAX(total_amount) AS max_amount FROM orders GROUP BY customer_id;",
      "SELECT product_name, AVG(unit_price) AS avg_price FROM products GROUP BY product_name HAVING AVG(unit_price) > 50;",
      "SELECT customer_name, email, phone_number FROM customers ORDER BY customer_name ASC LIMIT 10 OFFSET 5;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_id, first_name, last_name FROM customers;",
      "SELECT customer_id, email FROM customers;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, customer_id, amount FROM transactions;",
      "SELECT * FROM orders;",
      "SELECT order_id, customer_id, total_amount FROM orders;",
      "SELECT * FROM campaigns;",
      "SELECT campaign_id, campaign_name, start_date FROM campaigns;",
      "SELECT * FROM channels;",
      "SELECT channel_id, channel_name FROM channels;",
      "SELECT * FROM customers WHERE first_name = 'John';",
      "SELECT * FROM transactions WHERE amount > 100;",
      "SELECT * FROM orders WHERE total_amount < 500;",
      "SELECT * FROM campaigns WHERE start_date > '2022-01-01';",
      "SELECT * FROM channels WHERE platform = 'Instagram';",
      "SELECT customers.first_name, transactions.amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id;",
      "SELECT orders.total_amount, customers.email FROM orders JOIN customers ON orders.customer_id = customers.customer_id;",
      "SELECT campaigns.campaign_name, channels.channel_name FROM campaigns JOIN channels ON campaigns.channel_id = channels.channel_id;",
      "SELECT customers.first_name, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id LIMIT 10;",
      "SELECT customers.first_name, transactions.amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id LIMIT 5;",
      "SELECT * FROM customers WHERE email='example@example.com';",
      "SELECT first_name, last_name, email FROM customers WHERE phone_number LIKE '%1234%';",
      "SELECT customer_id, COUNT(*) AS total_transactions FROM transactions GROUP BY customer_id HAVING total_transactions > 5;",
      "SELECT orders.order_id, customers.first_name, transactions.amount FROM orders JOIN customers ON orders.customer_id = customers.customer_id JOIN transactions ON orders.customer_id = transactions.customer_id WHERE transactions.amount > 1000;",
      "SELECT * FROM campaigns WHERE start_date >= '2021-01-01' AND end_date <= '2021-12-31';",
      "SELECT customer_id, SUM(amount) AS total_spent FROM transactions GROUP BY customer_id ORDER BY total_spent DESC LIMIT 10;",
      "SELECT channel_name, COUNT(*) AS total_orders FROM orders JOIN channels ON orders.customer_id = channels.customer_id GROUP BY channel_id ORDER BY total_orders DESC;",
      "SELECT first_name, last_name, email FROM customers UNION SELECT NULL, NULL, NULL FROM customers WHERE first_name IS NULL;",
      "SELECT campaign_name, start_date, end_date FROM campaigns WHERE start_date < '2021-06-01' AND end_date > '2021-06-30';",
      "SELECT customer_id, COUNT(*) AS total_orders FROM orders WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY customer_id HAVING total_orders > 3;",
      "SELECT * FROM transactions WHERE amount IN (SELECT MAX(amount) AS highest_amount FROM transactions);",
      "SELECT * FROM campaigns WHERE campaign_name LIKE '%Summer%' ORDER BY start_date ASC;",
      "SELECT customer_id, COUNT(*) AS total_orders FROM orders WHERE total_amount > 500 GROUP BY customer_id HAVING total_orders > 2;",
      "SELECT customer_id, AVG(amount) AS avg_transaction_amount FROM transactions GROUP BY customer_id HAVING AVG(amount) > 500;",
      "SELECT customers.first_name, customers.last_name, COUNT(*) AS total_orders FROM orders JOIN customers ON orders.customer_id = customers.customer_id GROUP BY customers.customer_id HAVING total_orders > 2;",
      "SELECT channel_name, platform FROM channels WHERE channel_name LIKE '%Social%' OR platform='Website';",
      "SELECT * FROM campaigns WHERE campaign_id NOT IN (SELECT campaign_id FROM transactions);",
      "SELECT customer_id, COUNT(*) AS total_orders FROM orders WHERE customer_id IN (SELECT customer_id FROM transactions WHERE amount > 1000) GROUP BY customer_id;",
      "SELECT DISTINCT platform FROM channels;",
      "SELECT customer_id, AVG(total_amount) AS avg_order_value FROM orders GROUP BY customer_id HAVING avg_order_value > 1000;"
    ]
  }
]