[
  {
    "statements": [
      "SELECT * FROM robot_logs;",
      "SELECT log_id, error_message FROM robot_logs;",
      "SELECT error_message FROM robot_logs WHERE operation_type = 'UPDATE';",
      "SELECT * FROM robot_logs WHERE error_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT COUNT(*) AS total_logs FROM robot_logs;",
      "SELECT AVG(DATE_PART('hour', error_timestamp)) AS avg_hours FROM robot_logs;",
      "SELECT operation_type, COUNT(*) AS total_operations FROM robot_logs GROUP BY operation_type;",
      "SELECT * FROM robot_logs ORDER BY error_timestamp DESC;",
      "SELECT DISTINCT operation_type FROM robot_logs;",
      "SELECT * FROM robot_logs WHERE error_message LIKE '%error%';",
      "SELECT MAX(error_timestamp) AS latest_error FROM robot_logs;",
      "SELECT * FROM robot_logs WHERE operation_type IN ('UPDATE', 'DELETE');",
      "SELECT AVG(EXTRACT(EPOCH FROM error_timestamp)) AS avg_timestamp FROM robot_logs;",
      "SELECT * FROM robot_logs LIMIT 5;",
      "SELECT COUNT(DISTINCT operation_type) AS total_distinct_operations FROM robot_logs;",
      "SELECT * FROM robot_logs OFFSET 10;",
      "SELECT error_message, operation_type FROM robot_logs WHERE log_id = 100;",
      "SELECT * FROM robot_logs WHERE error_message IS NULL;",
      "SELECT error_timestamp::DATE AS error_date FROM robot_logs;",
      "SELECT * FROM robot_logs WHERE EXTRACT(HOUR FROM error_timestamp) > 12;",
      "SELECT * FROM robot_logs WHERE operation_type ILIKE 'up%';",
      "SELECT log_id, error_message FROM robot_logs WHERE error_timestamp > '2021-01-01'",
      "SELECT error_message FROM robot_logs WHERE operation_type = 'update'",
      "SELECT * FROM robot_logs WHERE error_message LIKE '%error%'",
      "SELECT operation_type, COUNT(*) FROM robot_logs GROUP BY operation_type",
      "SELECT * FROM robot_logs ORDER BY error_timestamp DESC LIMIT 10",
      "SELECT AVG(EXTRACT(EPOCH FROM error_timestamp)) FROM robot_logs",
      "SELECT error_message, operation_type FROM robot_logs WHERE error_timestamp BETWEEN '2021-01-01' AND '2021-03-31'",
      "SELECT operation_type, COUNT(*) AS count FROM robot_logs GROUP BY operation_type HAVING count > 5",
      "SELECT DISTINCT operation_type FROM robot_logs",
      "SELECT AVG(EXTRACT(EPOCH FROM error_timestamp)) AS average_time FROM robot_logs",
      "SELECT error_message, operation_type FROM robot_logs ORDER BY error_timestamp",
      "SELECT log_id, operation_type, error_timestamp FROM robot_logs WHERE operation_type = 'delete' ORDER BY error_timestamp DESC",
      "SELECT COUNT(*) FROM robot_logs WHERE operation_type = 'insert'",
      "SELECT * FROM robot_logs WHERE EXTRACT(DOW FROM error_timestamp) = 2",
      "SELECT operation_type, MAX(EXTRACT(EPOCH FROM error_timestamp)) AS max_time FROM robot_logs GROUP BY operation_type",
      "SELECT log_id, error_message FROM robot_logs WHERE error_timestamp >='2021-01-01' AND error_timestamp <'2022-01-01'",
      "SELECT * FROM robot_logs WHERE error_timestamp::DATE = '2021-06-15'",
      "SELECT operation_type, COUNT(*) FROM robot_logs WHERE error_message IS NOT NULL GROUP BY operation_type",
      "SELECT error_message, operation_type, EXTRACT(DAY FROM error_timestamp) AS day FROM robot_logs",
      "SELECT log_id, error_message, operation_type, error_timestamp FROM robot_logs WHERE log_id IN (1, 3, 5, 7, 9)"
    ]
  },
  {
    "statements": [
      "SELECT * FROM errors",
      "SELECT error_id, error_message FROM errors",
      "SELECT * FROM troubleshooting",
      "SELECT troubleshooting_id, action_taken FROM troubleshooting",
      "SELECT error_message, error_timestamp FROM errors",
      "SELECT action_taken, troubleshooting_timestamp FROM troubleshooting",
      "SELECT error_id, robot_id FROM errors",
      "SELECT robot_id, action_taken FROM troubleshooting",
      "SELECT * FROM errors WHERE robot_id = 1",
      "SELECT * FROM troubleshooting WHERE troubleshooting_id = 5",
      "SELECT error_id, error_message FROM errors WHERE error_id = 3",
      "SELECT * FROM troubleshooting WHERE robot_id = 2",
      "SELECT error_message FROM errors WHERE robot_id = 1",
      "SELECT troubleshooting_id FROM troubleshooting WHERE robot_id = 2",
      "SELECT * FROM errors WHERE error_timestamp > '2022-01-01'",
      "SELECT * FROM troubleshooting WHERE troubleshooting_timestamp < '2022-03-15'",
      "SELECT * FROM errors WHERE error_id BETWEEN 5 AND 10",
      "SELECT * FROM troubleshooting WHERE robot_id IN (1, 3, 5)",
      "SELECT * FROM errors ORDER BY error_timestamp DESC",
      "SELECT * FROM troubleshooting ORDER BY troubleshooting_timestamp ASC",
      "SELECT errors.error_id, errors.error_message, troubleshooting.robot_id FROM errors JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_timestamp < troubleshooting.troubleshooting_timestamp",
      "SELECT errors.error_id, errors.error_message, troubleshooting.action_taken FROM errors LEFT JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_timestamp < CURRENT_TIMESTAMP",
      "SELECT errors.error_id, errors.error_message, troubleshooting.troubleshooting_id, troubleshooting.action_taken FROM errors RIGHT JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_timestamp < '2023-01-01 00:00:00'",
      "SELECT errors.error_id, errors.error_message, troubleshooting.robot_id FROM errors JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_message LIKE '%error%'",
      "SELECT COUNT(errors.error_id) AS total_errors, troubleshooting.robot_id FROM errors INNER JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id GROUP BY troubleshooting.robot_id HAVING total_errors > 5",
      "SELECT DISTINCT errors.error_id, errors.robot_id, troubleshooting.troubleshooting_id FROM errors JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_id IN (1, 2, 3)",
      "SELECT errors.error_id, errors.robot_id, troubleshooting.troubleshooting_id FROM errors LEFT JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_timestamp > '2022-01-01 00:00:00' AND troubleshooting.troubleshooting_timestamp < CURRENT_TIMESTAMP",
      "SELECT errors.error_id, errors.error_message, troubleshooting.robot_id FROM errors RIGHT JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_timestamp BETWEEN '2021-01-01 00:00:00' AND '2022-01-01 00:00:00'",
      "SELECT AVG(errors.error_id) AS avg_error_id, troubleshooting.robot_id FROM errors INNER JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id GROUP BY troubleshooting.robot_id",
      "SELECT errors.error_id, errors.robot_id, troubleshooting.troubleshooting_timestamp FROM errors JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_message NOT LIKE '%warning%'",
      "SELECT MAX(errors.error_id) AS max_error_id, AVG(troubleshooting.troubleshooting_id) AS avg_troubleshooting_id FROM errors JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_timestamp < '2023-01-01 00:00:00'",
      "SELECT errors.error_id, errors.error_message, troubleshooting.robot_id FROM errors JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id ORDER BY errors.error_id DESC",
      "SELECT errors.error_id, errors.error_message, troubleshooting.robot_id FROM errors JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE troubleshooting.troubleshooting_timestamp < '2022-02-02 00:00:00' AND errors.robot_id = 1",
      "SELECT COUNT(*) AS total_records FROM errors UNION SELECT COUNT(*) AS total_records FROM troubleshooting",
      "SELECT DISTINCT errors.error_id, errors.error_message, troubleshooting.troubleshooting_id FROM errors JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_timestamp = troubleshooting.troubleshooting_timestamp",
      "SELECT errors.error_id, errors.error_message, troubleshooting.robot_id FROM errors RIGHT JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.robot_id IN (3, 4, 5)",
      "SELECT errors.error_id, errors.error_message, troubleshooting.robot_id FROM errors JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_timestamp > '2022-01-01 00:00:00' AND troubleshooting.troubleshooting_timestamp < '2023-01-01 00:00:00'",
      "SELECT MIN(errors.error_id) AS min_error_id, MAX(troubleshooting.troubleshooting_id) AS max_troubleshooting_id FROM errors INNER JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id",
      "SELECT errors.error_id, errors.error_message, troubleshooting.robot_id FROM errors JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_timestamp < '2022-02-02 00:00:00'",
      "SELECT AVG(errors.error_id) AS avg_error_id, troubleshooting.robot_id FROM errors INNER JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id GROUP BY troubleshooting.robot_id",
      "SELECT errors.error_id, errors.error_message, troubleshooting.robot_id FROM errors JOIN troubleshooting ON errors.robot_id = troubleshooting.robot_id WHERE errors.error_timestamp BETWEEN '2021-01-01 00:00:00' AND '2022-01-01 00:00:00'"
    ]
  },
  {
    "statements": [
      "SELECT * FROM errors WHERE id = 1",
      "SELECT error_message FROM errors WHERE id = 2",
      "SELECT id, error_message FROM errors WHERE timestamp > '2022-01-01'",
      "SELECT * FROM errors WHERE id IN (1, 2, 3)",
      "SELECT * FROM errors WHERE error_message LIKE '%error%'",
      "SELECT * FROM errors WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT COUNT(*) FROM errors",
      "SELECT id, COUNT(*) AS error_count FROM errors GROUP BY id",
      "SELECT MAX(timestamp) FROM errors",
      "SELECT AVG(id) AS avg_id FROM errors",
      "SELECT id, AVG(timestamp) AS avg_timestamp FROM errors GROUP BY id",
      "SELECT * FROM errors ORDER BY timestamp DESC LIMIT 5",
      "SELECT DISTINCT error_message FROM errors",
      "SELECT * FROM errors WHERE id = (SELECT MAX(id) FROM errors)",
      "SELECT * FROM errors WHERE id = (SELECT MIN(id) FROM errors)",
      "SELECT * FROM errors WHERE id IS NOT NULL",
      "SELECT * FROM errors WHERE error_message IS NULL",
      "SELECT * FROM errors WHERE timestamp >= NOW() - INTERVAL 1 DAY",
      "SELECT id, DATE(timestamp) AS date FROM errors",
      "SELECT * FROM errors WHERE id = 1 OR error_message = 'Critical Error'",
      "SELECT * FROM errors WHERE id = 1;",
      "SELECT id, error_message FROM errors WHERE timestamp >= '2022-01-01';",
      "SELECT COUNT(*) FROM errors;",
      "SELECT MAX(timestamp) FROM errors;",
      "SELECT id, error_message, timestamp FROM errors WHERE id BETWEEN 10 AND 20;",
      "SELECT DISTINCT error_message FROM errors;",
      "SELECT * FROM errors ORDER BY timestamp DESC LIMIT 10;",
      "SELECT id, timestamp FROM errors WHERE error_message LIKE '%error%';",
      "SELECT * FROM errors WHERE timestamp BETWEEN '2022-01-01' AND '2023-01-01';",
      "SELECT id, error_message, timestamp FROM errors WHERE error_message IN ('Error 1', 'Error 2');",
      "SELECT COUNT(DISTINCT error_message) FROM errors;",
      "SELECT id, error_message FROM errors WHERE TIMESTAMPDIFF(MONTH, timestamp, NOW()) < 6;",
      "SELECT id, timestamp FROM errors WHERE DATE(timestamp) = CURDATE();",
      "SELECT AVG(id), MIN(id), MAX(id) FROM errors;",
      "SELECT * FROM errors WHERE id NOT IN (SELECT id FROM errors WHERE error_message = 'No Errors');",
      "SELECT COUNT(*), DATE(timestamp) FROM errors GROUP BY DATE(timestamp);",
      "SELECT id, error_message FROM errors WHERE TIME(timestamp) < '12:00:00';",
      "SELECT id, error_message, timestamp FROM errors WHERE error_message REGEXP '^[0-9]+$';",
      "SELECT id, error_message FROM errors WHERE YEAR(timestamp) = YEAR(NOW());",
      "SELECT * FROM errors WHERE MONTH(timestamp) = MONTH(NOW());"
    ]
  },
  {
    "statements": [
      "SELECT * FROM RobotErrors;",
      "SELECT error_message FROM RobotErrors WHERE error_id = 1;",
      "SELECT error_timestamp FROM RobotErrors ORDER BY error_timestamp DESC;",
      "SELECT * FROM RobotLogs;",
      "SELECT log_message FROM RobotLogs WHERE robot_id = 2;",
      "SELECT log_timestamp FROM RobotLogs WHERE log_id = 5;",
      "SELECT * FROM RobotOperationalData;",
      "SELECT temperature, battery_level FROM RobotOperationalData WHERE robot_id = 3;",
      "SELECT * FROM RobotMaintenanceLogs;",
      "SELECT maintenance_description FROM RobotMaintenanceLogs WHERE robot_id = 4;",
      "SELECT maintenance_timestamp FROM RobotMaintenanceLogs ORDER BY maintenance_timestamp ASC;",
      "SELECT error_message, error_timestamp FROM RobotErrors WHERE robot_id = 1;",
      "SELECT log_message, log_timestamp FROM RobotLogs WHERE robot_id = 2;",
      "SELECT temperature, battery_level FROM RobotOperationalData WHERE robot_id = 3 AND operation_mode = 'Standby';",
      "SELECT maintenance_description, maintenance_timestamp FROM RobotMaintenanceLogs WHERE robot_id = 4 AND maintenance_log_id = 10;",
      "SELECT error_message, error_timestamp, robot_id FROM RobotErrors WHERE error_id = 1;",
      "SELECT log_message, log_timestamp, robot_id FROM RobotLogs WHERE robot_id = 2;",
      "SELECT temperature, battery_level, operation_mode FROM RobotOperationalData WHERE robot_id = 3;",
      "SELECT maintenance_description, maintenance_timestamp, robot_id FROM RobotMaintenanceLogs WHERE robot_id = 4;",
      "SELECT * FROM RobotErrors WHERE error_id IN (1, 2, 3);",
      "SELECT * FROM RobotErrors WHERE robot_id = 1;",
      "SELECT error_id, error_message FROM RobotErrors WHERE error_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT log_message, log_timestamp FROM RobotLogs WHERE robot_id = 2 AND log_timestamp >= '2022-03-01';",
      "SELECT * FROM RobotOperationalData WHERE temperature > 50 OR battery_level < 20;",
      "SELECT data_id, temperature, battery_level FROM RobotOperationalData WHERE operation_mode = 'autonomous';",
      "SELECT * FROM RobotMaintenanceLogs WHERE robot_id = 3 ORDER BY maintenance_timestamp DESC;",
      "SELECT maintenance_log_id, maintenance_description FROM RobotMaintenanceLogs WHERE maintenance_timestamp < '2022-02-15';",
      "SELECT * FROM RobotErrors JOIN RobotLogs ON RobotErrors.robot_id = RobotLogs.robot_id;",
      "SELECT RobotLogs.log_message, RobotLogs.log_timestamp, RobotOperationalData.temperature FROM RobotLogs JOIN RobotOperationalData ON RobotLogs.robot_id = RobotOperationalData.robot_id;",
      "SELECT * FROM RobotErrors JOIN RobotLogs ON RobotErrors.robot_id = RobotLogs.robot_id JOIN RobotOperationalData ON RobotLogs.robot_id = RobotOperationalData.robot_id WHERE RobotErrors.error_timestamp >= '2022-02-01';",
      "SELECT RobotErrors.error_id, RobotLogs.log_message, RobotOperationalData.temperature, RobotMaintenanceLogs.maintenance_description FROM RobotErrors JOIN RobotLogs ON RobotErrors.robot_id = RobotLogs.robot_id JOIN RobotOperationalData ON RobotLogs.robot_id = RobotOperationalData.robot_id JOIN RobotMaintenanceLogs ON RobotLogs.robot_id = RobotMaintenanceLogs.robot_id;",
      "SELECT * FROM RobotErrors WHERE error_message LIKE '%critical%' AND robot_id IN (1, 2, 3);",
      "SELECT AVG(temperature) AS avg_temperature FROM RobotOperationalData WHERE robot_id = 1;",
      "SELECT robot_id, COUNT(*) AS error_count FROM RobotErrors GROUP BY robot_id;",
      "SELECT robot_id, MAX(battery_level) AS max_battery_level, MIN(battery_level) AS min_battery_level FROM RobotOperationalData GROUP BY robot_id;",
      "SELECT robot_id, AVG(temperature) AS avg_temperature, MAX(battery_level) AS max_battery_level FROM RobotOperationalData GROUP BY robot_id HAVING AVG(temperature) > 50;",
      "SELECT robot_id, COUNT(*) AS total_logs, COUNT(DISTINCT error_id) AS unique_errors FROM RobotLogs JOIN RobotErrors ON RobotLogs.robot_id = RobotErrors.robot_id GROUP BY robot_id;",
      "SELECT robot_id, AVG(temperature) AS avg_temperature, COUNT(*) AS total_logs FROM RobotOperationalData JOIN RobotLogs ON RobotOperationalData.robot_id = RobotLogs.robot_id GROUP BY robot_id HAVING AVG(temperature) > 40;",
      "SELECT robot_id, SUM(battery_level) AS total_battery FROM RobotOperationalData WHERE operation_mode = 'manual' GROUP BY robot_id;",
      "SELECT robot_id, SUM(temperature) AS total_temperature FROM RobotOperationalData WHERE operation_mode = 'autonomous' GROUP BY robot_id;",
      "SELECT robot_id, AVG(temperature) AS avg_temperature, COUNT(*) AS total_logs FROM RobotOperationalData JOIN RobotLogs ON RobotOperationalData.robot_id = RobotLogs.robot_id WHERE RobotLogs.log_timestamp >= '2022-03-01' GROUP BY robot_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM logs",
      "SELECT id, error_message FROM logs",
      "SELECT error_code FROM logs",
      "SELECT * FROM logs WHERE error_code = 404",
      "SELECT id, timestamp FROM logs WHERE error_message LIKE '%error%'",
      "SELECT * FROM logs ORDER BY timestamp DESC",
      "SELECT COUNT(*) FROM logs",
      "SELECT AVG(error_code) FROM logs",
      "SELECT MIN(timestamp) FROM logs",
      "SELECT MAX(error_code) FROM logs",
      "SELECT id, error_message, error_code FROM logs WHERE timestamp > '2022-01-01'",
      "SELECT id FROM logs WHERE error_message = 'Server Error'",
      "SELECT * FROM logs WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT id, error_code FROM logs WHERE error_message IS NULL",
      "SELECT DISTINCT error_message FROM logs",
      "SELECT * FROM logs LIMIT 10 OFFSET 5",
      "SELECT id, error_message FROM logs WHERE timestamp > '2022-01-01' AND error_code = 500",
      "SELECT MAX(id) FROM logs",
      "SELECT * FROM logs WHERE id IN (1, 2, 3)",
      "SELECT * FROM logs WHERE error_message LIKE 'Database%'",
      "SELECT * FROM logs WHERE error_code = 404;",
      "SELECT error_message, timestamp FROM logs WHERE error_code = 500 ORDER BY timestamp DESC;",
      "SELECT id, error_message FROM logs WHERE timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT COUNT(*) FROM logs WHERE error_message LIKE '%error%';",
      "SELECT * FROM logs WHERE error_message = 'Critical Error' AND timestamp >= '2022-03-01';",
      "SELECT DISTINCT error_code FROM logs;",
      "SELECT * FROM logs WHERE timestamp BETWEEN '2022-01-01' AND '2022-02-01' ORDER BY timestamp DESC LIMIT 10;",
      "SELECT MIN(timestamp) AS first_error FROM logs WHERE error_code = 404;",
      "SELECT COUNT(DISTINCT error_message) FROM logs;",
      "SELECT AVG(error_code) AS avg_code FROM logs;",
      "SELECT id, error_message, timestamp FROM logs WHERE id IN (1, 2, 3);",
      "SELECT * FROM logs WHERE timestamp >= '2022-01-01' AND timestamp < '2022-02-01';",
      "SELECT MAX(error_code) AS max_code FROM logs;",
      "SELECT id, error_message FROM logs WHERE error_code = 500 AND (error_message LIKE '%error%' OR error_message LIKE '%warning%');",
      "SELECT COUNT(*) FROM logs WHERE timestamp >= CURRENT_DATE();",
      "SELECT * FROM logs WHERE error_message LIKE '%error%' OR error_message LIKE '%warning%' ORDER BY timestamp ASC;",
      "SELECT AVG(error_code) AS avg_error_code, MAX(error_code) AS max_error_code, MIN(error_code) AS min_error_code FROM logs;",
      "SELECT id, error_code FROM logs WHERE timestamp >= '2022-01-01' AND timestamp < '2022-02-01';",
      "SELECT * FROM logs WHERE error_code = 500 AND timestamp >= '2022-03-01';",
      "SELECT id, error_message, timestamp FROM logs WHERE error_message IS NOT NULL;"
    ]
  }
]