[
  {
    "statements": [
      "SELECT * FROM SensorData",
      "SELECT sensor_id, timestamp, sensor_type, sensor_value FROM SensorData",
      "SELECT sensor_id, sensor_type FROM SensorData",
      "SELECT * FROM SensorData WHERE sensor_type = 'temperature'",
      "SELECT AVG(sensor_value) AS avg_value FROM SensorData",
      "SELECT sensor_id, MAX(sensor_value) AS max_value FROM SensorData GROUP BY sensor_id",
      "SELECT sensor_type, COUNT(sensor_id) AS total_count FROM SensorData GROUP BY sensor_type",
      "SELECT sensor_id, timestamp FROM SensorData WHERE sensor_type = 'humidity'",
      "SELECT * FROM SensorData ORDER BY timestamp DESC",
      "SELECT sensor_id, SUM(sensor_value) AS total_value FROM SensorData GROUP BY sensor_id",
      "SELECT sensor_id, timestamp, sensor_type FROM SensorData WHERE sensor_value > 50",
      "SELECT DISTINCT sensor_type FROM SensorData",
      "SELECT sensor_id, sensor_type FROM SensorData ORDER BY sensor_id",
      "SELECT sensor_id, sensor_type, sensor_value FROM SensorData WHERE sensor_type = 'pressure'",
      "SELECT sensor_id, MIN(sensor_value) AS min_value FROM SensorData GROUP BY sensor_id",
      "SELECT sensor_id, timestamp FROM SensorData WHERE sensor_value < 10",
      "SELECT sensor_type, AVG(sensor_value) AS avg_value FROM SensorData GROUP BY sensor_type",
      "SELECT sensor_id, sensor_type, sensor_value FROM SensorData WHERE sensor_value BETWEEN 20 AND 30",
      "SELECT sensor_id, timestamp, sensor_type FROM SensorData WHERE sensor_type IN ('temperature', 'humidity')",
      "SELECT sensor_id, timestamp, sensor_type, sensor_value FROM SensorData WHERE sensor_value <> 0",
      "SELECT * FROM SensorData;",
      "SELECT sensor_id, timestamp FROM SensorData WHERE sensor_type = 'Temperature';",
      "SELECT sensor_id, AVG(sensor_value) AS avg_value FROM SensorData GROUP BY sensor_id;",
      "SELECT sensor_id, timestamp FROM SensorData WHERE sensor_value > 50 ORDER BY timestamp DESC;",
      "SELECT sensor_id, sensor_type, COUNT(sensor_id) AS readings_count FROM SensorData GROUP BY sensor_id, sensor_type;",
      "SELECT sensor_id, sensor_type, MAX(sensor_value) AS max_value FROM SensorData WHERE sensor_type = 'Humidity' GROUP BY sensor_id;",
      "SELECT sensor_id, COUNT(*) AS total_readings, MAX(sensor_value) AS max_value, MIN(sensor_value) AS min_value FROM SensorData WHERE sensor_type = 'Pressure' GROUP BY sensor_id ORDER BY total_readings DESC;",
      "SELECT sensor_id, timestamp, sensor_value FROM SensorData WHERE sensor_type = 'Light' AND sensor_value < 100;",
      "SELECT sensor_id, sensor_type, timestamp, sensor_value FROM SensorData WHERE sensor_type IN ('Temperature', 'Humidity') AND sensor_value BETWEEN 20 AND 30;",
      "SELECT sensor_id, sensor_type, timestamp, sensor_value FROM SensorData WHERE sensor_type = 'Pressure' AND EXTRACT(MONTH FROM timestamp) = 8;",
      "SELECT sensor_id, sensor_type, timestamp FROM SensorData WHERE DATE(timestamp) = '2022-09-15';",
      "SELECT sensor_id, sensor_type, timestamp, sensor_value FROM SensorData WHERE sensor_type = 'Light' AND sensor_value >= 100;",
      "SELECT sensor_id, sensor_type, timestamp, sensor_value FROM SensorData WHERE sensor_type = 'Temperature' AND TIMESTAMPDIFF(SECOND, timestamp, NOW()) <= 3600;",
      "SELECT sensor_id, sensor_type, timestamp, sensor_value FROM SensorData WHERE sensor_value BETWEEN 50 AND 100 AND sensor_type IN ('Humidity', 'Pressure') ORDER BY sensor_value DESC;",
      "SELECT DISTINCT sensor_type FROM SensorData;",
      "SELECT sensor_id, COUNT(DISTINCT sensor_type) AS unique_types FROM SensorData GROUP BY sensor_id HAVING unique_types > 1;",
      "SELECT sensor_id, sensor_type, AVG(sensor_value) AS avg_value FROM SensorData WHERE sensor_type = 'Temperature' GROUP BY sensor_id HAVING avg_value > 25;",
      "SELECT sensor_id, sensor_type, MIN(sensor_value) AS min_value, MAX(sensor_value) AS max_value FROM SensorData GROUP BY sensor_id HAVING max_value - min_value > 10;",
      "SELECT sensor_id, sensor_type, timestamp, ROUND(sensor_value, 2) AS rounded_value FROM SensorData WHERE sensor_type = 'Temperature';",
      "SELECT sensor_id, sensor_type, DATE(timestamp) AS date, HOUR(timestamp) AS hour FROM SensorData WHERE sensor_type = 'Temperature' ORDER BY hour DESC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM robot_data;",
      "SELECT id, sensor_id, sensor_type FROM robot_data WHERE sensor_type = 'temperature';",
      "SELECT AVG(reading) AS avg_reading FROM robot_data GROUP BY sensor_id;",
      "SELECT * FROM robot_status;",
      "SELECT robot_id, status FROM robot_status WHERE battery_level < 50;",
      "SELECT MAX(battery_level) AS max_battery_level FROM robot_status;",
      "SELECT id, robot_id, status FROM robot_status WHERE last_updated >= '2022-01-01';",
      "SELECT * FROM robot_data WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT COUNT(*) AS total_records FROM robot_data;",
      "SELECT sensor_id, COUNT(*) AS sensor_count FROM robot_data GROUP BY sensor_id HAVING sensor_count > 100;",
      "SELECT robot_id, AVG(battery_level) AS avg_battery_level FROM robot_status GROUP BY robot_id;",
      "SELECT * FROM robot_data ORDER BY timestamp DESC;",
      "SELECT id, sensor_id, sensor_type FROM robot_data LIMIT 10;",
      "SELECT status, COUNT(*) AS status_count FROM robot_status GROUP BY status;",
      "SELECT DISTINCT sensor_type FROM robot_data;",
      "SELECT robot_id, MIN(battery_level) AS min_battery_level FROM robot_status GROUP BY robot_id;",
      "SELECT robot_id, MAX(battery_level) AS max_battery_level FROM robot_status GROUP BY robot_id;",
      "SELECT id, sensor_id, reading FROM robot_data WHERE reading > 100;",
      "SELECT * FROM robot_data WHERE sensor_id IN (1, 2, 3);",
      "SELECT robot_id, status, DATE(last_updated) AS last_updated_date FROM robot_status;",
      "SELECT * FROM robot_data WHERE sensor_type = 'temperature';",
      "SELECT sensor_id, reading FROM robot_data WHERE reading > 50;",
      "SELECT robot_id, status FROM robot_status WHERE status = 'offline';",
      "SELECT id, sensor_type, timestamp FROM robot_data WHERE timestamp > '2022-01-01';",
      "SELECT * FROM robot_data JOIN robot_status ON robot_data.sensor_id = robot_status.robot_id WHERE robot_status.status = 'online';",
      "SELECT robot_id, MAX(battery_level) AS max_battery_level FROM robot_status GROUP BY robot_id;",
      "SELECT COUNT(*) AS total_robots FROM robot_status;",
      "SELECT AVG(reading) AS avg_reading FROM robot_data WHERE sensor_type = 'humidity';",
      "SELECT * FROM robot_data WHERE sensor_id IN (SELECT robot_id FROM robot_status WHERE status = 'offline');",
      "SELECT id, status, last_updated FROM robot_status ORDER BY last_updated DESC LIMIT 5;",
      "SELECT sensor_id, MIN(reading) AS min_reading FROM robot_data GROUP BY sensor_id;",
      "SELECT * FROM robot_data WHERE sensor_type LIKE 'accelerometer%';",
      "SELECT robot_id, AVG(battery_level) AS avg_battery_level FROM robot_status GROUP BY robot_id HAVING AVG(battery_level) > 80;",
      "SELECT id, sensor_type, timestamp FROM robot_data WHERE timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT COUNT(DISTINCT sensor_id) AS unique_sensors FROM robot_data;",
      "SELECT robot_id, COUNT(*) AS total_readings FROM robot_data GROUP BY robot_id;",
      "SELECT sensor_id, AVG(reading) AS avg_reading FROM robot_data GROUP BY sensor_id HAVING AVG(reading) > 50;",
      "SELECT timestamp, AVG(reading) AS avg_reading FROM robot_data GROUP BY timestamp;",
      "SELECT robot_id, MAX(battery_level) - MIN(battery_level) AS battery_range FROM robot_status GROUP BY robot_id;",
      "SELECT sensor_id, SUM(reading) AS total_reading FROM robot_data GROUP BY sensor_id HAVING SUM(reading) > 1000;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM RobotSensorData;",
      "SELECT sensor_id, sensor_type FROM RobotSensorData WHERE sensor_value > 50;",
      "SELECT COUNT(*) FROM RobotSensorData WHERE timestamp > '2022-01-01';",
      "SELECT AVG(sensor_value) FROM RobotSensorData WHERE sensor_type = 'temperature';",
      "SELECT MAX(sensor_value) FROM RobotSensorData WHERE sensor_type = 'humidity';",
      "SELECT MIN(sensor_value) FROM RobotSensorData WHERE sensor_type = 'pressure';",
      "SELECT * FROM RobotSensorData WHERE sensor_type IN ('temperature', 'humidity');",
      "SELECT * FROM RobotSensorData ORDER BY timestamp DESC;",
      "SELECT * FROM RobotLocationData;",
      "SELECT location_id, latitude, longitude FROM RobotLocationData WHERE latitude < 0;",
      "SELECT COUNT(*) FROM RobotLocationData WHERE timestamp > '2022-01-01';",
      "SELECT AVG(latitude), AVG(longitude) FROM RobotLocationData;",
      "SELECT MAX(latitude), MIN(latitude) FROM RobotLocationData;",
      "SELECT * FROM RobotLocationData WHERE longitude BETWEEN -90 AND -80;",
      "SELECT * FROM RobotLocationData ORDER BY timestamp ASC;",
      "SELECT * FROM RobotEventData;",
      "SELECT event_id, event_type FROM RobotEventData WHERE event_type = 'error';",
      "SELECT COUNT(*) FROM RobotEventData WHERE timestamp > '2022-01-01';",
      "SELECT event_type, COUNT(*) FROM RobotEventData GROUP BY event_type;",
      "SELECT * FROM RobotEventData WHERE event_description LIKE '%critical%';",
      "SELECT * FROM RobotSensorData",
      "SELECT sensor_id, sensor_type, timestamp FROM RobotSensorData ORDER BY sensor_id DESC",
      "SELECT AVG(sensor_value) AS average_value FROM RobotSensorData",
      "SELECT sensor_type, COUNT(*) AS count FROM RobotSensorData GROUP BY sensor_type",
      "SELECT * FROM RobotLocationData WHERE timestamp >= '2022-01-01 00:00:00'",
      "SELECT * FROM RobotLocationData WHERE latitude BETWEEN 20.0 AND 30.0 AND longitude BETWEEN -100.0 AND -90.0",
      "SELECT * FROM RobotLocationData ORDER BY timestamp DESC LIMIT 10",
      "SELECT * FROM RobotEventData WHERE event_type = 'Error'",
      "SELECT event_type, COUNT(*) AS count FROM RobotEventData GROUP BY event_type HAVING count > 5",
      "SELECT * FROM RobotSensorData INNER JOIN RobotLocationData ON RobotSensorData.timestamp = RobotLocationData.timestamp",
      "SELECT * FROM RobotSensorData LEFT JOIN RobotLocationData ON RobotSensorData.timestamp = RobotLocationData.timestamp",
      "SELECT * FROM RobotEventData WHERE timestamp >= '2022-01-01 00:00:00' AND timestamp < '2022-01-02 00:00:00'",
      "SELECT * FROM RobotSensorData WHERE sensor_value > 50.0",
      "SELECT * FROM RobotEventData WHERE event_type LIKE 'Warning%'",
      "SELECT sensor_id, sensor_value, timestamp FROM RobotSensorData WHERE sensor_type = 'Temperature'",
      "SELECT * FROM RobotLocationData WHERE latitude > 40.0 OR longitude < -90.0",
      "SELECT * FROM RobotEventData WHERE event_description LIKE '%critical%'",
      "SELECT DISTINCT event_type FROM RobotEventData",
      "SELECT MAX(sensor_value) AS max_value FROM RobotSensorData",
      "SELECT sensor_type, MAX(sensor_value) AS max_value FROM RobotSensorData GROUP BY sensor_type"
    ]
  },
  {
    "statements": [
      "SELECT * FROM robot_data;",
      "SELECT robot_id, timestamp, sensor_type FROM robot_data WHERE sensor_type = 'temperature';",
      "SELECT robot_id, sensor_type, sensor_value FROM robot_data WHERE sensor_value > 50.0;",
      "SELECT robot_id, timestamp FROM robot_data WHERE timestamp < '2022-01-01 00:00:00';",
      "SELECT * FROM robot_status;",
      "SELECT robot_id, status, battery_level FROM robot_status WHERE battery_level < 20.0;",
      "SELECT robot_id, status FROM robot_status WHERE status = 'error';",
      "SELECT * FROM robot_location;",
      "SELECT robot_id, latitude, longitude FROM robot_location WHERE latitude BETWEEN 10.0 AND 20.0;",
      "SELECT robot_id, timestamp FROM robot_location ORDER BY timestamp DESC;",
      "SELECT * FROM robot_errors;",
      "SELECT robot_id, error_message FROM robot_errors WHERE error_id = 1001;",
      "SELECT robot_id, error_message FROM robot_errors WHERE timestamp > '2022-01-01 00:00:00';",
      "SELECT error_id, robot_id FROM robot_errors ORDER BY error_id DESC;",
      "SELECT robot_id, error_message FROM robot_errors WHERE error_message LIKE '%critical%';",
      "SELECT robot_id, error_message FROM robot_errors WHERE error_message LIKE '%software%';",
      "SELECT * FROM robot_data JOIN robot_status ON robot_data.robot_id = robot_status.robot_id;",
      "SELECT rd.sensor_type, rs.status FROM robot_data rd JOIN robot_status rs ON rd.robot_id = rs.robot_id;",
      "SELECT rl.longitude, re.error_message FROM robot_location rl JOIN robot_errors re ON rl.robot_id = re.robot_id;",
      "SELECT rd.sensor_value, re.error_message FROM robot_data rd JOIN robot_errors re ON rd.robot_id = re.robot_id;",
      "SELECT robot_id, timestamp, sensor_type, sensor_value FROM robot_data WHERE sensor_type = 'Temperature'",
      "SELECT robot_id, status, battery_level FROM robot_status WHERE status = 'Active'",
      "SELECT robot_id, latitude, longitude FROM robot_location WHERE latitude BETWEEN 10.5 AND 20.5",
      "SELECT error_id, robot_id, error_message FROM robot_errors WHERE robot_id = 10",
      "SELECT * FROM robot_data ORDER BY timestamp DESC LIMIT 5",
      "SELECT robot_id, status, battery_level FROM robot_status WHERE battery_level < 20.0",
      "SELECT * FROM robot_location WHERE timestamp > '2022-01-01'",
      "SELECT robot_id, timestamp, sensor_type, sensor_value FROM robot_data WHERE sensor_type IN ('Temperature', 'Pressure')",
      "SELECT robot_id, status, battery_level FROM robot_status WHERE status = 'Inactive'",
      "SELECT * FROM robot_errors ORDER BY timestamp DESC LIMIT 3",
      "SELECT robot_id, latitude, longitude FROM robot_location WHERE longitude BETWEEN -80.0 AND -70.0",
      "SELECT error_id, robot_id, error_message FROM robot_errors WHERE timestamp > '2022-01-01'",
      "SELECT * FROM robot_data WHERE timestamp > '2022-03-01' AND sensor_type = 'Humidity'",
      "SELECT robot_id, status, battery_level FROM robot_status WHERE battery_level > 80.0",
      "SELECT * FROM robot_location WHERE timestamp > '2022-02-01'",
      "SELECT robot_id, timestamp, sensor_type, sensor_value FROM robot_data WHERE sensor_value > 50.0",
      "SELECT robot_id, status, battery_level FROM robot_status WHERE status IN ('Active', 'Error')",
      "SELECT * FROM robot_errors WHERE timestamp > '2022-04-01'",
      "SELECT robot_id, latitude, longitude FROM robot_location WHERE timestamp > '2022-03-01'",
      "SELECT error_id, robot_id, error_message FROM robot_errors WHERE error_message LIKE '%critical%'"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Sensors LIMIT 10",
      "SELECT sensor_id, temperature FROM Sensors WHERE temperature > 25",
      "SELECT * FROM Accelerometer LIMIT 5",
      "SELECT x_axis, y_axis FROM Accelerometer WHERE x_axis > 0",
      "SELECT * FROM Gyroscope LIMIT 3",
      "SELECT pitch, roll FROM Gyroscope WHERE pitch > 0",
      "SELECT * FROM GPS LIMIT 4",
      "SELECT latitude, longitude FROM GPS WHERE latitude < 0",
      "SELECT * FROM Battery LIMIT 6",
      "SELECT voltage, current FROM Battery WHERE current > 0",
      "SELECT sensor_id, timestamp, temperature FROM Sensors WHERE temperature > 30",
      "SELECT accel_id, timestamp, x_axis, y_axis FROM Accelerometer WHERE y_axis < 0",
      "SELECT gyro_id, timestamp, roll, yaw FROM Gyroscope WHERE yaw > 0",
      "SELECT gps_id, timestamp, latitude, longitude FROM GPS WHERE longitude < 0",
      "SELECT battery_id, timestamp, voltage, current FROM Battery WHERE voltage > 12",
      "SELECT sensor_id, timestamp, humidity FROM Sensors WHERE humidity > 40",
      "SELECT accel_id, timestamp, x_axis FROM Accelerometer WHERE x_axis < -1",
      "SELECT gyro_id, timestamp, pitch, yaw FROM Gyroscope WHERE pitch < 0",
      "SELECT gps_id, timestamp, latitude FROM GPS WHERE latitude > 0",
      "SELECT battery_id, timestamp, current FROM Battery WHERE current < 0",
      "SELECT * FROM Sensors WHERE temperature > 25 AND humidity < 50",
      "SELECT sensor_id, timestamp, temperature FROM Sensors WHERE humidity > 60",
      "SELECT * FROM Accelerometer WHERE ABS(x_axis) > 2 AND ABS(y_axis) > 2 AND ABS(z_axis) > 2",
      "SELECT accel_id, timestamp, x_axis FROM Accelerometer WHERE y_axis < 0",
      "SELECT * FROM Gyroscope WHERE roll >= 45 AND yaw <= -30",
      "SELECT gyro_id, timestamp, pitch FROM Gyroscope WHERE roll < 0",
      "SELECT * FROM GPS WHERE latitude < 40 AND longitude > -75",
      "SELECT gps_id, timestamp, longitude FROM GPS WHERE latitude > 45",
      "SELECT * FROM Battery WHERE voltage > 12 AND current < 2",
      "SELECT battery_id, timestamp, current FROM Battery WHERE voltage < 10",
      "SELECT * FROM Sensors, Accelerometer WHERE Sensors.sensor_id = Accelerometer.accel_id",
      "SELECT * FROM Sensors, Gyroscope WHERE Sensors.sensor_id = Gyroscope.gyro_id",
      "SELECT * FROM Accelerometer, Gyroscope WHERE Accelerometer.accel_id = Gyroscope.gyro_id",
      "SELECT * FROM Gyroscope, GPS WHERE Gyroscope.gyro_id = GPS.gps_id",
      "SELECT * FROM Sensors, GPS WHERE Sensors.sensor_id = GPS.gps_id",
      "SELECT * FROM Accelerometer, GPS WHERE Accelerometer.accel_id = GPS.gps_id",
      "SELECT * FROM Gyroscope, Battery WHERE Gyroscope.gyro_id = Battery.battery_id",
      "SELECT * FROM Sensors, Battery WHERE Sensors.sensor_id = Battery.battery_id",
      "SELECT * FROM Accelerometer, Battery WHERE Accelerometer.accel_id = Battery.battery_id",
      "SELECT * FROM GPS, Battery WHERE GPS.gps_id = Battery.battery_id"
    ]
  }
]