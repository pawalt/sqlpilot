[
  {
    "statements": [
      "SELECT * FROM waste_collection_accounts;",
      "SELECT account_id, customer_name FROM waste_collection_accounts;",
      "SELECT account_id, customer_name, account_balance FROM waste_collection_accounts WHERE account_status = 'active';",
      "SELECT * FROM waste_collection_accounts WHERE account_balance > 100;",
      "SELECT account_id, customer_name, billing_address FROM waste_collection_accounts WHERE account_status = 'inactive';",
      "SELECT account_id, account_balance FROM waste_collection_accounts WHERE customer_name LIKE 'J%';",
      "SELECT * FROM waste_collection_accounts WHERE billing_address IS NULL;",
      "SELECT account_id, account_balance FROM waste_collection_accounts WHERE account_status = 'active' ORDER BY account_balance DESC;",
      "SELECT account_id, customer_name, billing_address FROM waste_collection_accounts WHERE account_balance < 50 ORDER BY customer_name;",
      "SELECT account_id, account_balance FROM waste_collection_accounts WHERE customer_name = 'Alice' OR customer_name = 'Bob';",
      "SELECT COUNT(*) FROM waste_collection_accounts;",
      "SELECT AVG(account_balance) FROM waste_collection_accounts WHERE account_status = 'active';",
      "SELECT DISTINCT customer_name FROM waste_collection_accounts;",
      "SELECT MIN(account_balance), MAX(account_balance) FROM waste_collection_accounts;",
      "SELECT customer_name, SUM(account_balance) FROM waste_collection_accounts GROUP BY customer_name;",
      "SELECT account_id, account_balance FROM waste_collection_accounts WHERE customer_name LIKE '%Smith%' OR billing_address LIKE '%Smith%';",
      "SELECT customer_name, AVG(account_balance) FROM waste_collection_accounts GROUP BY account_status;",
      "SELECT customer_name, account_balance FROM waste_collection_accounts WHERE account_balance BETWEEN 50 AND 100;",
      "SELECT COUNT(DISTINCT account_status) FROM waste_collection_accounts;",
      "SELECT account_id, customer_name, account_balance FROM waste_collection_accounts WHERE account_balance > 200 AND account_status = 'active';",
      "SELECT * FROM waste_collection_accounts WHERE account_status = 'active';",
      "SELECT customer_name, account_balance FROM waste_collection_accounts WHERE account_balance > 1000;",
      "SELECT customer_name, billing_address FROM waste_collection_accounts WHERE account_status = 'active' AND account_balance < 500;",
      "SELECT customer_name, account_balance FROM waste_collection_accounts WHERE account_status = 'inactive' ORDER BY account_balance DESC;",
      "SELECT customer_name, account_balance FROM waste_collection_accounts WHERE billing_address LIKE '%Street%';",
      "SELECT customer_name, SUM(account_balance) AS total_balance FROM waste_collection_accounts GROUP BY customer_name HAVING total_balance > 5000;",
      "SELECT account_id, customer_name FROM waste_collection_accounts WHERE LENGTH(customer_name) > 10;",
      "SELECT customer_name, account_balance FROM waste_collection_accounts WHERE account_balance BETWEEN 500 AND 1000;",
      "SELECT customer_name, account_balance FROM waste_collection_accounts WHERE account_balance < 0;",
      "SELECT customer_name, billing_address FROM waste_collection_accounts WHERE account_balance < 0 OR account_status = 'inactive';",
      "SELECT customer_name, account_balance FROM waste_collection_accounts WHERE customer_name LIKE 'A%' AND account_status = 'active';",
      "SELECT customer_name, account_balance FROM waste_collection_accounts WHERE account_balance < 0 AND account_status = 'active';",
      "SELECT customer_name, MAX(account_balance) AS max_balance FROM waste_collection_accounts;",
      "SELECT count(*) AS active_accounts FROM waste_collection_accounts WHERE account_status = 'active';",
      "SELECT customer_name, SUM(account_balance) AS total_balance FROM waste_collection_accounts WHERE account_status = 'active' GROUP BY customer_name HAVING total_balance > 1000;",
      "SELECT customer_name, AVG(account_balance) AS avg_balance FROM waste_collection_accounts WHERE account_status = 'active';",
      "SELECT distinct billing_address FROM waste_collection_accounts;",
      "SELECT count(*) AS total_accounts FROM waste_collection_accounts;",
      "SELECT customer_name, account_balance FROM waste_collection_accounts WHERE account_balance >= 1000 ORDER BY account_balance ASC LIMIT 5;",
      "SELECT customer_name, account_balance FROM waste_collection_accounts WHERE account_balance >= 1000 ORDER BY account_balance DESC LIMIT 5;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customer_accounts;",
      "SELECT customer_id, customer_name FROM customer_accounts;",
      "SELECT address FROM customer_accounts;",
      "SELECT phone_number FROM customer_accounts;",
      "SELECT * FROM billing_information;",
      "SELECT bill_id, customer_id FROM billing_information;",
      "SELECT bill_amount FROM billing_information;",
      "SELECT payment_status FROM billing_information;",
      "SELECT customer_accounts.customer_id, customer_accounts.customer_name, billing_information.bill_amount, billing_information.payment_status FROM customer_accounts JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id;",
      "SELECT customer_accounts.customer_id, customer_accounts.customer_name, billing_information.bill_amount, billing_information.payment_status FROM customer_accounts LEFT JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id;",
      "SELECT customer_accounts.customer_id, customer_accounts.customer_name, billing_information.bill_amount, billing_information.payment_status FROM customer_accounts RIGHT JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id;",
      "SELECT customer_accounts.customer_id, customer_accounts.customer_name, billing_information.bill_amount, billing_information.payment_status FROM customer_accounts INNER JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id;",
      "SELECT customer_accounts.customer_id, customer_accounts.customer_name, billing_information.bill_amount, billing_information.payment_status FROM customer_accounts OUTER JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id;",
      "SELECT customer_accounts.customer_id, customer_accounts.customer_name, billing_information.bill_amount, billing_information.payment_status FROM customer_accounts LEFT OUTER JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id;",
      "SELECT customer_accounts.customer_id, customer_accounts.customer_name, billing_information.bill_amount, billing_information.payment_status FROM customer_accounts RIGHT OUTER JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id;",
      "SELECT customer_accounts.customer_id, customer_accounts.customer_name, billing_information.bill_amount, billing_information.payment_status FROM customer_accounts FULL OUTER JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id;",
      "SELECT customer_accounts.customer_id, customer_accounts.customer_name, billing_information.bill_amount, billing_information.payment_status FROM customer_accounts CROSS JOIN billing_information;",
      "SELECT AVG(bill_amount) AS avg_amount FROM billing_information;",
      "SELECT customer_id, SUM(bill_amount) AS total_bill_amount FROM billing_information GROUP BY customer_id;",
      "SELECT customer_id, COUNT(bill_id) AS total_bills FROM billing_information GROUP BY customer_id;",
      "SELECT customer_id, customer_name, address, phone_number FROM customer_accounts WHERE customer_id = 123;",
      "SELECT customer_id, customer_name, address, phone_number FROM customer_accounts WHERE customer_name LIKE 'A%';",
      "SELECT customer_id, customer_name, address, phone_number FROM customer_accounts WHERE address LIKE '%Street';",
      "SELECT customer_id, customer_name, address, phone_number FROM customer_accounts WHERE phone_number LIKE '555%';",
      "SELECT customer_id, customer_name, address, phone_number, bill_amount, payment_status FROM customer_accounts LEFT JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id;",
      "SELECT customer_id, customer_name, address, phone_number, bill_amount, payment_status FROM customer_accounts RIGHT JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id;",
      "SELECT customer_id, customer_name, address, phone_number, bill_id, bill_amount, payment_status FROM customer_accounts INNER JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id WHERE payment_status = 'Pending';",
      "SELECT customer_id, customer_name, address, phone_number, SUM(bill_amount) AS total_bills FROM customer_accounts INNER JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id GROUP BY customer_id;",
      "SELECT customer_id, customer_name, address, phone_number, AVG(bill_amount) AS avg_bill_amount FROM customer_accounts INNER JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id GROUP BY customer_id HAVING AVG(bill_amount) > 100;",
      "SELECT customer_id, customer_name, address, phone_number, MAX(bill_amount) AS highest_bill_amount FROM customer_accounts INNER JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id GROUP BY customer_id;",
      "SELECT customer_id, customer_name, address, phone_number, MIN(bill_amount) AS lowest_bill_amount FROM customer_accounts INNER JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id GROUP BY customer_id;",
      "SELECT customer_id, customer_name, address, phone_number FROM customer_accounts WHERE customer_id IN (SELECT customer_id FROM billing_information WHERE payment_status = 'Paid');",
      "SELECT customer_id, customer_name, address, phone_number FROM customer_accounts WHERE customer_id NOT IN (SELECT customer_id FROM billing_information WHERE payment_status = 'Pending');",
      "SELECT customer_id, customer_name, address, phone_number FROM customer_accounts WHERE customer_id = (SELECT MAX(customer_id) FROM billing_information);",
      "SELECT customer_id, customer_name, address, phone_number FROM customer_accounts WHERE customer_name IN ('Alice', 'Bob', 'Charlie');",
      "SELECT customer_id, customer_name, address, phone_number FROM customer_accounts WHERE customer_id BETWEEN 100 AND 200;",
      "SELECT customer_id, customer_name, address, phone_number, COUNT(*) AS total_customers FROM customer_accounts;",
      "SELECT customer_id, customer_name, COUNT(bill_id) AS total_bills FROM customer_accounts LEFT JOIN billing_information ON customer_accounts.customer_id = billing_information.customer_id GROUP BY customer_id;",
      "SELECT customer_id, customer_name, address, phone_number FROM customer_accounts ORDER BY customer_name ASC;",
      "SELECT customer_id, customer_name, address, phone_number FROM customer_accounts ORDER BY customer_id DESC LIMIT 5;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, address FROM customers;",
      "SELECT customer_name, phone_number FROM customers;",
      "SELECT * FROM billing_info;",
      "SELECT billing_date, amount FROM billing_info;",
      "SELECT * FROM waste_collection;",
      "SELECT collection_date, weight FROM waste_collection;",
      "SELECT customers.customer_name, billing_info.amount FROM customers INNER JOIN billing_info ON customers.customer_id = billing_info.customer_id;",
      "SELECT customers.customer_name, waste_collection.weight FROM customers INNER JOIN waste_collection ON customers.customer_id = waste_collection.customer_id;",
      "SELECT customers.customer_name, billing_info.amount, waste_collection.weight FROM customers INNER JOIN billing_info ON customers.customer_id = billing_info.customer_id INNER JOIN waste_collection ON customers.customer_id = waste_collection.customer_id;",
      "SELECT customers.customer_name, billing_info.billing_date, waste_collection.collection_date FROM customers INNER JOIN billing_info ON customers.customer_id = billing_info.customer_id INNER JOIN waste_collection ON customers.customer_id = waste_collection.customer_id;",
      "SELECT customers.customer_name, billing_info.amount FROM customers LEFT JOIN billing_info ON customers.customer_id = billing_info.customer_id;",
      "SELECT customers.customer_name, waste_collection.weight FROM customers LEFT JOIN waste_collection ON customers.customer_id = waste_collection.customer_id;",
      "SELECT customers.customer_name, billing_info.amount, waste_collection.weight FROM customers LEFT JOIN billing_info ON customers.customer_id = billing_info.customer_id LEFT JOIN waste_collection ON customers.customer_id = waste_collection.customer_id;",
      "SELECT customers.customer_name, billing_info.billing_date, waste_collection.collection_date FROM customers LEFT JOIN billing_info ON customers.customer_id = billing_info.customer_id LEFT JOIN waste_collection ON customers.customer_id = waste_collection.customer_id;",
      "SELECT customers.customer_name, billing_info.amount FROM customers RIGHT JOIN billing_info ON customers.customer_id = billing_info.customer_id;",
      "SELECT customers.customer_name, waste_collection.weight FROM customers RIGHT JOIN waste_collection ON customers.customer_id = waste_collection.customer_id;",
      "SELECT customers.customer_name, billing_info.amount, waste_collection.weight FROM customers RIGHT JOIN billing_info ON customers.customer_id = billing_info.customer_id RIGHT JOIN waste_collection ON customers.customer_id = waste_collection.customer_id;",
      "SELECT customers.customer_name, billing_info.billing_date, waste_collection.collection_date FROM customers RIGHT JOIN billing_info ON customers.customer_id = billing_info.customer_id RIGHT JOIN waste_collection ON customers.customer_id = waste_collection.customer_id;",
      "SELECT customers.customer_name, billing_info.amount FROM customers FULL JOIN billing_info ON customers.customer_id = billing_info.customer_id;",
      "SELECT customers.customer_name, waste_collection.weight FROM customers FULL JOIN waste_collection ON customers.customer_id = waste_collection.customer_id;",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, address FROM customers WHERE address LIKE 'New%';",
      "SELECT customer_name, phone_number FROM customers WHERE customer_id IN (SELECT customer_id FROM billing_info WHERE amount > 100);",
      "SELECT c.customer_name, b.billing_date, w.collection_date FROM customers c INNER JOIN billing_info b ON c.customer_id = b.customer_id INNER JOIN waste_collection w ON c.customer_id = w.customer_id;",
      "SELECT c.customer_id, c.customer_name, SUM(b.amount) AS total_amount FROM customers c LEFT JOIN billing_info b ON c.customer_id = b.customer_id GROUP BY c.customer_id, c.customer_name;",
      "SELECT c.customer_name, b.billing_date, w.weight FROM customers c LEFT JOIN billing_info b ON c.customer_id = b.customer_id LEFT JOIN waste_collection w ON c.customer_id = w.customer_id WHERE b.amount > 200 AND w.weight > 50;",
      "SELECT c.customer_name, MAX(b.amount) AS max_amount FROM customers c INNER JOIN billing_info b ON c.customer_id = b.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, AVG(w.weight) AS avg_weight FROM customers c INNER JOIN waste_collection w ON c.customer_id = w.customer_id GROUP BY c.customer_name HAVING avg_weight > 100;",
      "SELECT c.customer_name, MIN(b.billing_date) AS first_billing FROM customers c LEFT JOIN billing_info b ON c.customer_id = b.customer_id GROUP BY c.customer_name;",
      "SELECT c.customer_name, COUNT(w.collection_id) AS num_collections FROM customers c INNER JOIN waste_collection w ON c.customer_id = w.customer_id GROUP BY c.customer_name HAVING num_collections > 5;",
      "SELECT c.customer_name, b.billing_date, w.collection_date FROM customers c LEFT JOIN billing_info b ON c.customer_id = b.customer_id LEFT JOIN waste_collection w ON c.customer_id = w.customer_id WHERE b.amount > 0 OR w.weight > 0;",
      "SELECT c.customer_name, b.amount FROM customers c INNER JOIN billing_info b ON c.customer_id = b.customer_id WHERE b.billing_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT c.customer_name, b.amount FROM customers c INNER JOIN billing_info b ON c.customer_id = b.customer_id WHERE b.billing_date <= '2022-06-30' GROUP BY c.customer_name HAVING SUM(b.amount) > 500;",
      "SELECT c.customer_name, b.amount, w.weight FROM customers c INNER JOIN billing_info b ON c.customer_id = b.customer_id INNER JOIN waste_collection w ON c.customer_id = w.customer_id WHERE b.amount > 100 OR w.weight > 50;",
      "SELECT c.customer_name, b.amount, w.weight FROM customers c INNER JOIN billing_info b ON c.customer_id = b.customer_id INNER JOIN waste_collection w ON c.customer_id = w.customer_id WHERE b.billing_date BETWEEN '2022-01-01' AND '2022-12-31' OR w.collection_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT c.customer_id, c.customer_name, AVG(b.amount) AS avg_amount, AVG(w.weight) AS avg_weight FROM customers c LEFT JOIN billing_info b ON c.customer_id = b.customer_id LEFT JOIN waste_collection w ON c.customer_id = w.customer_id GROUP BY c.customer_id, c.customer_name;",
      "SELECT c.customer_name, b.billing_date, w.collection_date FROM customers c INNER JOIN billing_info b ON c.customer_id = b.customer_id INNER JOIN waste_collection w ON c.customer_id = w.customer_id WHERE b.amount > 0 AND w.weight > 0;",
      "SELECT c1.customer_name AS customer_name_1, c2.customer_name AS customer_name_2 FROM customers c1, customers c2 WHERE c1.customer_id < c2.customer_id;",
      "SELECT c.customer_name, COUNT(b.bill_id) AS num_bills FROM customers c LEFT JOIN billing_info b ON c.customer_id = b.customer_id GROUP BY c.customer_name HAVING num_bills < 3;",
      "SELECT c.customer_name, b.amount, w.weight FROM customers c LEFT JOIN billing_info b ON c.customer_id = b.customer_id LEFT JOIN waste_collection w ON c.customer_id = w.customer_id WHERE b.amount IS NULL OR w.weight IS NULL;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers",
      "SELECT customer_name, customer_email FROM customers",
      "SELECT customer_id, customer_name, customer_address FROM customers",
      "SELECT * FROM accounts",
      "SELECT account_id, account_type, account_balance FROM accounts",
      "SELECT * FROM bills",
      "SELECT bill_id, bill_amount, due_date FROM bills",
      "SELECT * FROM services",
      "SELECT service_name, service_cost FROM services",
      "SELECT * FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id",
      "SELECT customers.customer_name, accounts.account_balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id",
      "SELECT * FROM accounts JOIN bills ON accounts.account_id = bills.account_id",
      "SELECT accounts.account_type, bills.bill_amount FROM accounts JOIN bills ON accounts.account_id = bills.account_id",
      "SELECT * FROM services JOIN bills ON services.service_id = bills.account_id",
      "SELECT services.service_name, bills.due_date FROM services JOIN bills ON services.service_id = bills.account_id",
      "SELECT * FROM customers WHERE customer_id = 1",
      "SELECT customer_name FROM customers WHERE customer_id = 2",
      "SELECT * FROM accounts WHERE account_type = 'Savings'",
      "SELECT account_balance FROM accounts WHERE customer_id = 3",
      "SELECT * FROM bills WHERE bill_amount > 100",
      "SELECT bill_id, due_date FROM bills WHERE account_id = 4",
      "SELECT * FROM customers;",
      "SELECT customer_id, customer_name, customer_email FROM customers WHERE customer_id = 1;",
      "SELECT customers.customer_name, accounts.account_type FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id;",
      "SELECT customers.customer_name, accounts.account_type, bills.bill_amount FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN bills ON accounts.account_id = bills.account_id;",
      "SELECT customers.customer_name, services.service_name, services.service_cost FROM customers CROSS JOIN services;",
      "SELECT customers.customer_name, accounts.account_balance FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id;",
      "SELECT customers.customer_name, services.service_name FROM customers INNER JOIN services ON customers.customer_id = services.service_id;",
      "SELECT customer_name AS name, account_type AS type FROM accounts;",
      "SELECT customer_name, account_balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.account_balance > 1000;",
      "SELECT customers.customer_name, services.service_name, services.service_cost FROM customers CROSS JOIN services WHERE services.service_cost < 50;",
      "SELECT customer_name, service_name, bill_amount FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN bills ON accounts.account_id = bills.account_id WHERE bill_amount > 100;",
      "SELECT customer_name, account_balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id WHERE account_balance <= 500;",
      "SELECT customer_name, account_balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id ORDER BY account_balance DESC;",
      "SELECT customer_name, account_balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id ORDER BY account_balance ASC;",
      "SELECT customer_name, bill_amount FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN bills ON accounts.account_id = bills.account_id ORDER BY bill_amount DESC;",
      "SELECT customer_name, bill_amount FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN bills ON accounts.account_id = bills.account_id ORDER BY bill_amount ASC;",
      "SELECT customers.customer_name, COUNT(accounts.account_id) as num_accounts FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_name;",
      "SELECT AVG(account_balance) as avg_balance FROM accounts;",
      "SELECT MAX(account_balance) as max_balance FROM accounts GROUP BY account_type;",
      "SELECT customer_name, SUM(bill_amount) as total_bills FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN bills ON accounts.account_id = bills.account_id GROUP BY customer_name HAVING total_bills > 500;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT name, email FROM customers WHERE customer_id = 1;",
      "SELECT * FROM accounts;",
      "SELECT customer_id, balance FROM accounts WHERE account_id = 2;",
      "SELECT * FROM services;",
      "SELECT service_name, cost FROM services WHERE service_id = 1;",
      "SELECT * FROM billing;",
      "SELECT * FROM billing WHERE amount > 100;",
      "SELECT * FROM payments;",
      "SELECT payment_id, amount FROM payments WHERE billing_id = 3;",
      "SELECT c.name, b.amount FROM customers c JOIN billing b ON c.customer_id = b.customer_id;",
      "SELECT a.customer_id, SUM(a.balance) AS total_balance FROM accounts a GROUP BY a.customer_id;",
      "SELECT s.service_name, b.amount FROM services s JOIN billing b ON s.service_id = b.service_id;",
      "SELECT c.name, SUM(b.amount) AS total_amount FROM customers c JOIN billing b ON c.customer_id = b.customer_id GROUP BY c.name;",
      "SELECT c.name, p.amount, p.payment_date FROM customers c JOIN billing b ON c.customer_id = b.customer_id JOIN payments p ON b.billing_id = p.billing_id;",
      "SELECT c.name, a.balance, b.amount, b.service_id FROM customers c JOIN accounts a ON c.customer_id = a.customer_id JOIN billing b ON c.customer_id = b.customer_id;",
      "SELECT c.name, s.service_name, b.amount, p.amount FROM customers c JOIN billing b ON c.customer_id = b.customer_id JOIN services s ON b.service_id = s.service_id JOIN payments p ON b.billing_id = p.billing_id;",
      "SELECT c.name, a.balance, b.amount, s.cost FROM customers c JOIN accounts a ON c.customer_id = a.customer_id JOIN billing b ON c.customer_id = b.customer_id JOIN services s ON b.service_id = s.service_id;",
      "SELECT AVG(balance) AS avg_balance FROM accounts;",
      "SELECT MAX(amount) AS max_amount FROM payments;",
      "SELECT * FROM customers;",
      "SELECT customer_id, name, email FROM customers WHERE customer_id = 1;",
      "SELECT customers.customer_id, customers.name, accounts.balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id;",
      "SELECT billing.customer_id, SUM(billing.amount) AS total_amount FROM billing GROUP BY billing.customer_id;",
      "SELECT customers.name, services.service_name, billing.amount FROM customers JOIN billing ON customers.customer_id = billing.customer_id JOIN services ON billing.service_id = services.service_id;",
      "SELECT customers.name, payments.amount, payments.payment_date FROM customers JOIN billing ON customers.customer_id = billing.customer_id JOIN payments ON billing.billing_id = payments.billing_id;",
      "SELECT customers.name, accounts.balance, payments.amount FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN billing ON customers.customer_id = billing.customer_id JOIN payments ON billing.billing_id = payments.billing_id;",
      "SELECT billing.customer_id, services.service_name, SUM(billing.amount) AS total_amount FROM billing JOIN services ON billing.service_id = services.service_id GROUP BY billing.customer_id, services.service_name;",
      "SELECT * FROM accounts WHERE balance > 1000;",
      "SELECT customers.name, billing.amount FROM customers JOIN billing ON customers.customer_id = billing.customer_id WHERE billing.amount > 500;",
      "SELECT customers.name, services.service_name, billing.amount FROM customers JOIN billing ON customers.customer_id = billing.customer_id JOIN services ON billing.service_id = services.service_id WHERE services.cost > 50;",
      "SELECT customers.name, payments.amount FROM customers JOIN billing ON customers.customer_id = billing.customer_id JOIN payments ON billing.billing_id = payments.billing_id WHERE payments.payment_date > '2022-01-01';",
      "SELECT DISTINCT customers.name FROM customers JOIN billing ON customers.customer_id = billing.customer_id WHERE billing.amount > 1000;",
      "SELECT customers.name, services.service_name, payments.amount FROM customers JOIN billing ON customers.customer_id = billing.customer_id JOIN services ON billing.service_id = services.service_id JOIN payments ON billing.billing_id = payments.billing_id WHERE payments.payment_date BETWEEN '2022-01-01' AND '2022-03-31';",
      "SELECT customers.name, accounts.balance, billing.amount FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN billing ON customers.customer_id = billing.customer_id WHERE billing.amount > accounts.balance;",
      "SELECT customers.name, services.service_name, payments.amount FROM customers JOIN billing ON customers.customer_id = billing.customer_id JOIN services ON billing.service_id = services.service_id JOIN payments ON billing.billing_id = payments.billing_id WHERE payments.amount > services.cost;",
      "SELECT customers.name, SUM(billing.amount) AS total_amount FROM customers JOIN billing ON customers.customer_id = billing.customer_id GROUP BY customers.name;",
      "SELECT services.service_name, AVG(billing.amount) AS avg_amount FROM services JOIN billing ON services.service_id = billing.service_id GROUP BY services.service_name;",
      "SELECT customers.name, MAX(payments.amount) AS max_payment FROM customers JOIN billing ON customers.customer_id = billing.customer_id JOIN payments ON billing.billing_id = payments.billing_id GROUP BY customers.name;",
      "SELECT customers.name, MIN(billing.amount) AS min_amount FROM customers JOIN billing ON customers.customer_id = billing.customer_id GROUP BY customers.name;"
    ]
  }
]