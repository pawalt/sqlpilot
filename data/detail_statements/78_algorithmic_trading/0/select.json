[
  {
    "statements": [
      "SELECT * FROM stock_prices WHERE symbol = 'AAPL';",
      "SELECT date, close_price FROM stock_prices WHERE symbol = 'AAPL';",
      "SELECT MAX(close_price) FROM stock_prices;",
      "SELECT MIN(close_price) FROM stock_prices;",
      "SELECT AVG(close_price) FROM stock_prices;",
      "SELECT symbol, COUNT(*) FROM stock_prices GROUP BY symbol;",
      "SELECT symbol, MAX(date) FROM stock_prices GROUP BY symbol;",
      "SELECT symbol, MIN(date) FROM stock_prices GROUP BY symbol;",
      "SELECT symbol, SUM(close_price) FROM stock_prices GROUP BY symbol;",
      "SELECT symbol, AVG(close_price) FROM stock_prices GROUP BY symbol;",
      "SELECT DISTINCT symbol FROM stock_prices;",
      "SELECT * FROM stock_prices WHERE date = '2022-01-01';",
      "SELECT * FROM stock_prices WHERE close_price > 100;",
      "SELECT * FROM stock_prices WHERE close_price BETWEEN 50 AND 100;",
      "SELECT * FROM stock_prices WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT * FROM stock_prices ORDER BY date DESC;",
      "SELECT * FROM stock_prices ORDER BY close_price ASC;",
      "SELECT * FROM stock_prices LIMIT 10;",
      "SELECT * FROM stock_prices WHERE symbol LIKE 'AAPL%';",
      "SELECT * FROM stock_prices WHERE symbol IN ('AAPL', 'GOOGL');",
      "SELECT * FROM stock_prices WHERE symbol='AAPL' AND date>'2021-01-01' ORDER BY date DESC LIMIT 10",
      "SELECT symbol, MAX(price) AS max_price FROM stock_prices GROUP BY symbol HAVING max_price>100",
      "SELECT symbol, AVG(price) AS avg_price FROM stock_prices WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY symbol HAVING avg_price<50",
      "SELECT symbol, date, price FROM stock_prices WHERE symbol IN ('AAPL', 'GOOGL', 'MSFT') AND price>100 ORDER BY date",
      "SELECT symbol, COUNT(*) AS num_records FROM stock_prices GROUP BY symbol HAVING num_records>50",
      "SELECT symbol, MIN(price) AS min_price, MAX(price) AS max_price FROM stock_prices WHERE date>='2021-06-01' AND date<='2021-06-30' GROUP BY symbol",
      "SELECT symbol, COUNT(*) AS num_records FROM stock_prices WHERE price<50 GROUP BY symbol HAVING num_records>=10",
      "SELECT symbol, AVG(price) AS avg_price FROM stock_prices WHERE date='2021-12-31' GROUP BY symbol HAVING avg_price<50",
      "SELECT symbol, date, price FROM stock_prices WHERE symbol='AMZN' AND date BETWEEN '2021-01-01' AND '2021-12-31' ORDER BY date DESC",
      "SELECT DISTINCT symbol FROM stock_prices",
      "SELECT COUNT(DISTINCT symbol) AS num_symbols FROM stock_prices",
      "SELECT symbol, MAX(price) AS max_price FROM stock_prices WHERE date='2021-01-01' GROUP BY symbol HAVING max_price>500",
      "SELECT symbol, MIN(price) AS min_price, MAX(price) AS max_price FROM stock_prices WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY symbol",
      "SELECT symbol, AVG(price) AS avg_price FROM stock_prices WHERE date>='2021-01-01' AND date<='2021-12-31' GROUP BY symbol HAVING avg_price<50",
      "SELECT symbol, date, price FROM stock_prices WHERE symbol='AAPL' AND date='2021-12-31'",
      "SELECT symbol, COUNT(DISTINCT date) AS num_dates FROM stock_prices GROUP BY symbol HAVING num_dates>100",
      "SELECT SUM(price) AS total_price FROM stock_prices WHERE date BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT symbol, AVG(price) AS avg_price FROM stock_prices WHERE date BETWEEN '2021-06-01' AND '2021-06-30' GROUP BY symbol HAVING avg_price>200",
      "SELECT symbol, COUNT(*) AS num_records FROM stock_prices WHERE date='2021-12-31' GROUP BY symbol HAVING num_records>50",
      "SELECT symbol, date, price FROM stock_prices WHERE symbol='GOOGL' AND price>500 ORDER BY date"
    ]
  },
  {
    "statements": [
      "SELECT * FROM historical_stock_data WHERE symbol = 'AAPL';",
      "SELECT symbol, date, close_price FROM historical_stock_data WHERE volume > 1000000;",
      "SELECT id, symbol, open_price, close_price FROM historical_stock_data WHERE date = '2022-01-01';",
      "SELECT * FROM historical_stock_data WHERE open_price < close_price;",
      "SELECT strategy_name, description FROM trading_strategies WHERE start_date > '2021-01-01';",
      "SELECT * FROM trading_strategies WHERE end_date < '2022-12-31';",
      "SELECT symbol, date, open_price, volume FROM historical_stock_data WHERE symbol = 'MSFT' AND date BETWEEN '2022-01-01' AND '2022-03-31';",
      "SELECT id, symbol, date FROM historical_stock_data WHERE close_price > 100 AND volume > 500000;",
      "SELECT * FROM historical_stock_data WHERE close_price < 50 ORDER BY date DESC;",
      "SELECT * FROM trading_strategies WHERE description ILIKE '%trend%';",
      "SELECT symbol, date, volume FROM historical_stock_data WHERE close_price > 100 OR volume < 500000;",
      "SELECT symbol, close_price FROM historical_stock_data WHERE date BETWEEN '2022-01-01' AND '2022-06-30' AND volume < 1000000;",
      "SELECT strategy_name, start_date, end_date FROM trading_strategies WHERE strategy_name IN ('Moving Average', 'RSI');",
      "SELECT * FROM historical_stock_data WHERE date = CURRENT_DATE;",
      "SELECT id, symbol, date FROM historical_stock_data WHERE open_price > 100 AND close_price < 80;",
      "SELECT * FROM historical_stock_data WHERE symbol = 'GOOGL' AND date < '2022-07-01';",
      "SELECT * FROM trading_strategies WHERE start_date < '2022-01-01' AND end_date > '2022-12-31';",
      "SELECT symbol, open_price, close_price FROM historical_stock_data WHERE symbol IN ('AAPL', 'TSLA', 'AMZN');",
      "SELECT * FROM trading_strategies WHERE description NOT ILIKE '%high frequency%';",
      "SELECT * FROM historical_stock_data WHERE volume > 500000 ORDER BY volume DESC;",
      "SELECT * FROM historical_stock_data WHERE symbol = 'AAPL' AND date >= '2021-01-01'",
      "SELECT symbol, open_price, close_price FROM historical_stock_data WHERE symbol = 'GOOGL' AND date BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT symbol, MAX(close_price) AS max_close_price FROM historical_stock_data GROUP BY symbol",
      "SELECT symbol, AVG(volume) AS avg_volume FROM historical_stock_data WHERE date >= '2021-01-01' GROUP BY symbol",
      "SELECT * FROM historical_stock_data WHERE date = (SELECT MAX(date) FROM historical_stock_data)",
      "SELECT s.strategy_name, s.description, h.symbol, h.open_price FROM trading_strategies s INNER JOIN historical_stock_data h ON s.start_date <= h.date AND s.end_date >= h.date",
      "SELECT symbol, close_price, volume FROM historical_stock_data WHERE symbol IN ('AAPL', 'GOOGL', 'MSFT') AND close_price > 100",
      "SELECT * FROM historical_stock_data WHERE date BETWEEN '2021-07-01' AND '2021-09-30' ORDER BY date DESC LIMIT 10",
      "SELECT symbol, SUM(volume) AS total_volume FROM historical_stock_data WHERE symbol = 'IBM' AND date >= '2021-01-01' GROUP BY symbol",
      "SELECT * FROM historical_stock_data WHERE date = '2021-12-15' AND close_price > (SELECT AVG(close_price) FROM historical_stock_data)",
      "SELECT strategy_name, COUNT(*) AS num_trades FROM trading_strategies s INNER JOIN historical_stock_data h ON s.start_date <= h.date AND s.end_date >= h.date GROUP BY strategy_name",
      "SELECT symbol, date, close_price, LAG(close_price) OVER (PARTITION BY symbol ORDER BY date) AS prev_close_price FROM historical_stock_data WHERE symbol = 'TSLA'",
      "SELECT symbol, AVG(close_price) AS avg_close_price FROM historical_stock_data WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY symbol HAVING AVG(close_price) > 500",
      "SELECT symbol, MAX(open_price) AS max_open_price, MIN(open_price) AS min_open_price FROM historical_stock_data WHERE date >= '2021-01-01' GROUP BY symbol",
      "SELECT s.strategy_name, h.symbol, h.date, h.close_price FROM trading_strategies s LEFT JOIN historical_stock_data h ON s.start_date <= h.date AND s.end_date >= h.date WHERE h.close_price < 100",
      "SELECT symbol, date, close_price, RANK() OVER (PARTITION BY symbol ORDER BY date) AS rank_by_date FROM historical_stock_data WHERE symbol = 'AAPL'",
      "SELECT strategy_name, AVG(close_price) AS avg_close_price FROM trading_strategies s INNER JOIN historical_stock_data h ON s.start_date <= h.date AND s.end_date >= h.date GROUP BY strategy_name HAVING AVG(close_price) > 200",
      "SELECT symbol, date, close_price, open_price, LAG(close_price, 1) OVER (ORDER BY date) AS prev_close_price FROM historical_stock_data WHERE symbol = 'AAPL'",
      "SELECT symbol, close_price, volume, CASE WHEN close_price > open_price THEN 'Positive' ELSE 'Negative' END AS price_movement FROM historical_stock_data WHERE date = '2021-12-31'",
      "SELECT symbol, date, close_price, LEAD(close_price, 1) OVER (ORDER BY date) AS next_close_price FROM historical_stock_data WHERE symbol = 'GOOGL'"
    ]
  },
  {
    "statements": [
      "SELECT * FROM stock_prices;",
      "SELECT symbol, date, open_price, close_price FROM stock_prices WHERE symbol = 'AAPL';",
      "SELECT * FROM trading_strategies;",
      "SELECT strategy_name, description FROM trading_strategies WHERE strategy_id = 1;",
      "SELECT * FROM historical_data;",
      "SELECT symbol, date, high_price, low_price FROM historical_data WHERE symbol = 'GOOGL';",
      "SELECT symbol, date, high_price FROM historical_data WHERE date >= '2022-01-01';",
      "SELECT DISTINCT symbol FROM stock_prices;",
      "SELECT AVG(open_price) AS avg_open_price FROM stock_prices;",
      "SELECT MAX(close_price) AS max_close_price FROM stock_prices;",
      "SELECT MIN(low_price) AS min_low_price FROM historical_data;",
      "SELECT COUNT(*) AS total_records FROM historical_data;",
      "SELECT symbol, MAX(high_price) AS max_high_price FROM historical_data GROUP BY symbol;",
      "SELECT symbol, AVG(high_price) AS avg_high_price FROM historical_data GROUP BY symbol HAVING avg_high_price > 500;",
      "SELECT symbol, date, open_price, close_price FROM stock_prices ORDER BY date DESC;",
      "SELECT symbol, date, open_price, close_price FROM stock_prices WHERE date BETWEEN '2022-01-01' AND '2022-02-01';",
      "SELECT symbol, date, open_price, close_price FROM stock_prices WHERE date < '2022-03-01' AND close_price > open_price;",
      "SELECT symbol, date, high_price, low_price FROM historical_data WHERE symbol IN ('AAPL', 'GOOGL');",
      "SELECT symbol, date, high_price, low_price FROM historical_data WHERE symbol = 'AAPL' UNION SELECT symbol, date, high_price, low_price FROM historical_data WHERE symbol = 'GOOGL';",
      "SELECT symbol, extract(year from date) AS year, AVG(high_price) AS avg_high_price FROM historical_data GROUP BY symbol, year;",
      "SELECT symbol, date, open_price, close_price, volume FROM stock_prices WHERE symbol = 'AAPL';",
      "SELECT * FROM stock_prices WHERE date >= '2022-01-01' AND date <= '2022-01-31';",
      "SELECT symbol, AVG(open_price) AS avg_open_price, AVG(close_price) AS avg_close_price FROM stock_prices GROUP BY symbol;",
      "SELECT symbol, date, open_price, close_price FROM stock_prices WHERE volume > 1000000 ORDER BY date DESC;",
      "SELECT trading_strategies.strategy_name, historical_data.date, historical_data.high_price FROM trading_strategies INNER JOIN historical_data ON trading_strategies.strategy_id = historical_data.record_id WHERE trading_strategies.strategy_name = 'Mean Reversion';",
      "SELECT distinct symbol FROM stock_prices WHERE date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT symbol, date, high_price, low_price FROM historical_data WHERE symbol IN ('AAPL', 'GOOGL', 'MSFT');",
      "SELECT symbol, AVG(close_price) AS avg_close_price FROM stock_prices WHERE volume > 5000000 GROUP BY symbol HAVING AVG(close_price) > 100;",
      "SELECT symbol, date, open_price, close_price FROM stock_prices WHERE date >= '2022-03-01' AND date <= '2022-03-31' AND (open_price < close_price OR volume > 2000000);",
      "SELECT trading_strategies.strategy_name, historical_data.date, historical_data.low_price FROM trading_strategies INNER JOIN historical_data ON trading_strategies.strategy_id = historical_data.record_id WHERE trading_strategies.strategy_name = 'Trend Following' ORDER BY historical_data.date;",
      "SELECT symbol, date, high_price, low_price FROM historical_data WHERE date = '2022-06-15';",
      "SELECT symbol, MAX(high_price) AS max_high_price, MIN(low_price) AS min_low_price FROM historical_data GROUP BY symbol;",
      "SELECT symbol, date, close_price, volume FROM stock_prices WHERE symbol = 'GOOGL' AND (close_price < open_price OR volume > 3000000);",
      "SELECT DISTINCT strategy_name FROM trading_strategies;",
      "SELECT symbol, DATE_PART('month', date) AS month, AVG(close_price) AS avg_close_price FROM stock_prices GROUP BY symbol, month HAVING COUNT(*) > 10;",
      "SELECT symbol, date, open_price, close_price FROM stock_prices WHERE symbol LIKE 'A%' AND date >= '2022-04-01' AND date <= '2022-04-30';",
      "SELECT symbol, date, volume, (close_price - open_price) AS price_diff FROM stock_prices WHERE volume > 5000000 AND date >= '2022-05-01';",
      "SELECT symbol, COUNT(*) AS num_records FROM stock_prices GROUP BY symbol HAVING COUNT(*) > 50;",
      "SELECT trading_strategies.strategy_name, COUNT(*) AS num_records FROM trading_strategies INNER JOIN historical_data ON trading_strategies.strategy_id = historical_data.record_id GROUP BY trading_strategies.strategy_name HAVING COUNT(*) > 5;",
      "SELECT symbol, date, close_price, volume FROM stock_prices WHERE date = (SELECT MAX(date) FROM stock_prices);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM stock_prices;",
      "SELECT symbol, price FROM stock_prices WHERE date = '2022-01-01';",
      "SELECT symbol, volume FROM stock_prices ORDER BY volume DESC;",
      "SELECT * FROM stock_splits;",
      "SELECT symbol, split_ratio FROM stock_splits WHERE split_date = '2022-01-01';",
      "SELECT * FROM stock_dividends;",
      "SELECT symbol, dividend FROM stock_dividends WHERE ex_dividend_date = '2022-01-01';",
      "SELECT * FROM trading_strategies;",
      "SELECT strategy_name, description FROM trading_strategies WHERE strategy_id = 1;",
      "SELECT * FROM stock_prices WHERE symbol = 'AAPL';",
      "SELECT symbol, price FROM stock_prices WHERE symbol = 'AAPL' AND date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT * FROM stock_splits WHERE symbol = 'GOOGL';",
      "SELECT symbol, split_ratio, split_date FROM stock_splits WHERE symbol = 'GOOGL' AND split_ratio > 2.0;",
      "SELECT * FROM stock_dividends WHERE symbol = 'MSFT';",
      "SELECT symbol, dividend, ex_dividend_date FROM stock_dividends WHERE symbol = 'MSFT' AND dividend > 0.5;",
      "SELECT * FROM trading_strategies WHERE strategy_id = 2;",
      "SELECT strategy_name, description FROM trading_strategies WHERE strategy_id IN (1, 3);",
      "SELECT * FROM stock_prices WHERE date >= '2022-01-01';",
      "SELECT symbol, price FROM stock_prices WHERE price > 100;",
      "SELECT * FROM stock_splits WHERE split_date >= '2022-01-01';",
      "SELECT * FROM stock_prices WHERE symbol = 'AAPL' AND price > 100",
      "SELECT symbol, date, price FROM stock_prices WHERE date BETWEEN '2022-01-01' AND '2022-01-31'",
      "SELECT symbol, MAX(price) AS max_price FROM stock_prices GROUP BY symbol",
      "SELECT symbol, AVG(price) AS avg_price FROM stock_prices WHERE volume > 100000 GROUP BY symbol",
      "SELECT symbol, COUNT(*) AS total_records FROM stock_prices WHERE price < 50",
      "SELECT sp.symbol, sd.split_date, sd.split_ratio FROM stock_splits sd JOIN stock_prices sp ON sd.symbol = sp.symbol",
      "SELECT sd.symbol, sd.split_date, sp.price FROM stock_splits sd JOIN stock_prices sp ON sd.symbol = sp.symbol AND sp.date = sd.split_date",
      "SELECT symbol, SUM(volume) AS total_volume FROM stock_prices GROUP BY symbol HAVING total_volume > 500000",
      "SELECT symbol, date, price, volume FROM stock_prices WHERE symbol = 'GOOGL' ORDER BY price DESC",
      "SELECT * FROM stock_dividends WHERE dividend > 0.5",
      "SELECT symbol, MAX(dividend) AS max_dividend FROM stock_dividends GROUP BY symbol",
      "SELECT * FROM stock_prices sp LEFT JOIN stock_splits ss ON sp.symbol = ss.symbol AND sp.date = ss.split_date",
      "SELECT symbol, ex_dividend_date, dividend FROM stock_dividends UNION SELECT symbol, split_date, split_ratio FROM stock_splits",
      "SELECT sp.symbol, sd.split_date, sd.split_ratio FROM stock_splits sd LEFT JOIN stock_prices sp ON sd.symbol = sp.symbol",
      "SELECT symbol, dividend FROM stock_dividends WHERE symbol IN ('AAPL', 'MSFT')",
      "SELECT * FROM trading_strategies WHERE strategy_name LIKE '%Trend%'",
      "SELECT COUNT(*) AS total_strategies FROM trading_strategies",
      "SELECT * FROM stock_prices sp WHERE EXISTS (SELECT * FROM stock_splits ss WHERE sp.symbol = ss.symbol)",
      "SELECT symbol, date, price FROM stock_prices WHERE symbol = 'AMZN' AND price > (SELECT AVG(price) FROM stock_prices)",
      "SELECT symbol, date, price FROM stock_prices WHERE symbol = 'AAPL' AND EXISTS (SELECT * FROM stock_dividends WHERE symbol = 'AAPL' AND ex_dividend_date = date)",
      "SELECT DISTINCT symbol FROM stock_prices"
    ]
  },
  {
    "statements": [
      "SELECT * FROM stock_prices;",
      "SELECT symbol, open_price, close_price FROM stock_prices;",
      "SELECT symbol, high_price, low_price FROM stock_prices WHERE date = '2022-01-01';",
      "SELECT company_name, sector FROM stock_info;",
      "SELECT * FROM stock_info WHERE sector = 'Technology';",
      "SELECT * FROM trading_strategies;",
      "SELECT strategy_name, description FROM trading_strategies;",
      "SELECT date, cumulative_return FROM strategy_results WHERE strategy_id = 1;",
      "SELECT * FROM strategy_trades;",
      "SELECT symbol, action, quantity, price FROM strategy_trades WHERE strategy_id = 2;",
      "SELECT symbol, action, price FROM strategy_trades WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT * FROM stock_prices JOIN stock_info ON stock_prices.symbol = stock_info.symbol;",
      "SELECT trading_strategies.strategy_name, strategy_trades.symbol, strategy_trades.action, strategy_trades.quantity, strategy_trades.price FROM trading_strategies INNER JOIN strategy_trades ON trading_strategies.strategy_id = strategy_trades.strategy_id;",
      "SELECT symbol, close_price FROM stock_prices ORDER BY close_price DESC;",
      "SELECT strategy_name, description FROM trading_strategies ORDER BY strategy_name ASC;",
      "SELECT symbol, open_price, close_price, high_price, low_price FROM stock_prices WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT company_name, sector, industry FROM stock_info WHERE sector = 'Finance' AND industry = 'Banking';",
      "SELECT MAX(high_price) AS max_high_price FROM stock_prices;",
      "SELECT AVG(close_price) AS avg_close_price FROM stock_prices;",
      "SELECT strategy_id, COUNT(*) AS trade_count FROM strategy_trades GROUP BY strategy_id HAVING COUNT(*) > 10;",
      "SELECT * FROM stock_prices WHERE date = '2022-01-01' AND symbol = 'AAPL'",
      "SELECT symbol, open_price, close_price FROM stock_prices WHERE close_price > open_price",
      "SELECT symbol, COUNT(*) AS total_trades FROM strategy_trades GROUP BY symbol",
      "SELECT strategy_name, description FROM trading_strategies WHERE strategy_name LIKE 'Trend%'",
      "SELECT company_name, sector, industry FROM stock_info WHERE sector = 'Technology'",
      "SELECT symbol, MAX(high_price) AS max_high_price FROM stock_prices GROUP BY symbol",
      "SELECT * FROM strategy_results ORDER BY date DESC",
      "SELECT * FROM trading_strategies WHERE CHAR_LENGTH(description) > 100",
      "SELECT symbol, SUM(quantity) AS total_quantity FROM strategy_trades GROUP BY symbol HAVING total_quantity > 1000",
      "SELECT * FROM stock_prices WHERE DATE_PART('month', date) = 1 AND DATE_PART('year', date) = 2022",
      "SELECT * FROM strategy_trades WHERE action = 'BUY' AND price > 100",
      "SELECT company_name, sector, industry FROM stock_info ORDER BY company_name ASC",
      "SELECT symbol, AVG(close_price) AS avg_close_price FROM stock_prices GROUP BY symbol",
      "SELECT * FROM trading_strategies WHERE strategy_id IN (1, 3, 5)",
      "SELECT symbol, COUNT(*) AS total_trades FROM strategy_trades WHERE quantity > 100 GROUP BY symbol",
      "SELECT * FROM strategy_results WHERE cumulative_return > 0.1",
      "SELECT * FROM stock_prices WHERE high_price = (SELECT MAX(high_price) FROM stock_prices)",
      "SELECT * FROM stock_prices WHERE close_price BETWEEN 100 AND 200",
      "SELECT symbol, MIN(low_price) AS min_low_price FROM stock_prices GROUP BY symbol",
      "SELECT * FROM trading_strategies WHERE LOWER(strategy_name) LIKE '%momentum%'"
    ]
  }
]