[
  {
    "statements": [
      "SELECT * FROM students WHERE student_id = 1",
      "SELECT name FROM students",
      "SELECT student_id, name FROM students WHERE student_id > 5",
      "SELECT * FROM students WHERE name = 'Alice'",
      "SELECT * FROM students WHERE course_enrollments CONTAINS 'Math'",
      "SELECT student_id, name, course_enrollments FROM students WHERE course_enrollments CONTAINS ALL ['Math', 'Science']",
      "SELECT student_id, name FROM students WHERE course_enrollments CONTAINS ONLY 'English'",
      "SELECT * FROM students LIMIT 10",
      "SELECT COUNT(*) FROM students",
      "SELECT MAX(student_id) FROM students",
      "SELECT MIN(student_id) FROM students",
      "SELECT AVG(student_id) FROM students",
      "SELECT SUM(student_id) FROM students",
      "SELECT DISTINCT name FROM students",
      "SELECT * FROM students ORDER BY student_id DESC",
      "SELECT * FROM students WHERE student_id BETWEEN 1 AND 10",
      "SELECT * FROM students WHERE name LIKE 'A%'",
      "SELECT * FROM students WHERE name IN ('Alice', 'Bob')",
      "SELECT * FROM students WHERE course_enrollments CONTAINS ANY ['Math', 'Science']",
      "SELECT * FROM students WHERE course_enrollments IS EMPTY",
      "SELECT * FROM students;",
      "SELECT student_id, name FROM students WHERE student_id = 1;",
      "SELECT student_id, name, course_enrollments FROM students WHERE student_id = 2;",
      "SELECT student_id, name FROM students WHERE student_id <= 10;",
      "SELECT * FROM students WHERE course_enrollments CONTAINS 'Math';",
      "SELECT * FROM students WHERE course_enrollments CONTAINS ALL ['Math', 'Science'];",
      "SELECT count(*) FROM students;",
      "SELECT * FROM students ORDER BY name ASC;",
      "SELECT * FROM students ORDER BY name DESC;",
      "SELECT student_id, count(course_enrollments) FROM students GROUP BY student_id;",
      "SELECT student_id, name FROM students WHERE ARRAY_LENGTH(course_enrollments) > 1;",
      "SELECT student_id, name, course_enrollments[1] FROM students;",
      "SELECT student_id, name, course_enrollments[2] AS second_course FROM students;",
      "SELECT student_id, name, course FROM students LATERAL VIEW explode(course_enrollments) table AS course;",
      "SELECT student_id, name, course_enrollments[0] FROM students;",
      "SELECT student_id, name, course_enrollments FROM students WHERE course_enrollments IS NULL;",
      "SELECT student_id, name, course_enrollments FROM students WHERE course_enrollments IS NOT NULL;",
      "SELECT student_id, name, course_enrollments FROM students WHERE name LIKE '%son%';",
      "SELECT * FROM students WHERE name LIKE 'A%' OR name LIKE 'B%';",
      "SELECT student_id, name, course_enrollments FROM students WHERE student_id IN (1, 2, 3);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT id, name FROM students;",
      "SELECT id, name, course_enrollments FROM students;",
      "SELECT course_enrollments[1] FROM students;",
      "SELECT * FROM courses;",
      "SELECT course_id, course_name FROM courses;",
      "SELECT id, name, course_enrollments, course_name FROM students, courses;",
      "SELECT s.id, s.name, c.course_name FROM students s JOIN courses c ON s.course_enrollments[1] = c.course_id;",
      "SELECT s.name, c.course_name FROM students s JOIN courses c ON c.course_id = ANY(s.course_enrollments);",
      "SELECT s.id, s.name, ARRAY_LENGTH(s.course_enrollments) AS num_courses FROM students s;",
      "SELECT s.id, s.name, COALESCE(s.course_enrollments[2], 'No course') AS second_course FROM students s;",
      "SELECT s.id, s.name, LENGTH(s.name) AS name_length FROM students s;",
      "SELECT s.id, s.name, POSITION('CS' IN s.course_enrollments) AS cs_course_index FROM students s;",
      "SELECT s.id, s.name, UPPER(s.name) AS uppercase_name FROM students s;",
      "SELECT DISTINCT name FROM students;",
      "SELECT COUNT(id) AS num_students FROM students;",
      "SELECT AVG(LENGTH(name)) AS avg_name_length FROM students;",
      "SELECT MAX(LENGTH(name)) AS max_name_length FROM students;",
      "SELECT MIN(LENGTH(name)) AS min_name_length FROM students;",
      "SELECT course_name, COUNT(*) AS num_students_in_course FROM students, courses WHERE course_id = ANY(course_enrollments) GROUP BY course_name;",
      "SELECT id, name FROM students WHERE id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT id, name, course_enrollments FROM students WHERE course_enrollments CONTAINS 'Math';",
      "SELECT students.id, students.name, courses.course_name FROM students INNER JOIN courses ON students.course_enrollments CONTAINS courses.course_name;",
      "SELECT id, name FROM students WHERE course_enrollments[0] = 'Math';",
      "SELECT id, name FROM students WHERE course_enrollments[1] = 'Science';",
      "SELECT id, name FROM students WHERE course_enrollments SIZE > 1;",
      "SELECT id, name FROM students WHERE course_enrollments SIZE = 0;",
      "SELECT id, name FROM students WHERE name LIKE '%John%';",
      "SELECT COUNT(*) FROM students;",
      "SELECT students.id, students.name, COUNT(*) AS course_count FROM students INNER JOIN courses ON students.course_enrollments CONTAINS courses.course_name GROUP BY students.id, students.name;",
      "SELECT MAX(CAST(id AS INT)) FROM students;",
      "SELECT * FROM students ORDER BY name ASC LIMIT 10;",
      "SELECT id, name FROM students WHERE id IN ('123e4567-e89b-12d3-a456-426614174000', '456e4567-e89b-12d3-a456-426614174000');",
      "SELECT id, name FROM students WHERE id = ANY(SELECT id FROM students WHERE course_enrollments CONTAINS 'Math');",
      "SELECT id, name FROM students WHERE id = (SELECT id FROM students WHERE course_enrollments CONTAINS 'Math' LIMIT 1);",
      "SELECT id, name FROM students WHERE id = ANY(SELECT id FROM students WHERE course_enrollments SIZE > 1);",
      "SELECT DISTINCT course_enrollments FROM students;",
      "SELECT id, name FROM students WHERE id = '123e4567-e89b-12d3-a456-426614174000' AND name = 'John';",
      "SELECT id, name FROM students WHERE course_enrollments CONTAINS ALL('Math', 'Science');",
      "SELECT id, name, course_enrollments FROM students WHERE course_enrollments NOT CONTAINS 'Art';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT student_id, name FROM students;",
      "SELECT * FROM courses;",
      "SELECT course_id, course_name FROM courses;",
      "SELECT * FROM enrollments;",
      "SELECT enrollment_id, student_id, course_id FROM enrollments;",
      "SELECT students.name, courses.course_name FROM students, courses;",
      "SELECT students.name, courses.course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON courses.course_id = enrollments.course_id;",
      "SELECT * FROM students WHERE student_id = 1;",
      "SELECT * FROM students WHERE name = 'Alice';",
      "SELECT * FROM students WHERE student_course_enrollments @> '{\"course1\"}';",
      "SELECT COUNT(*) FROM students;",
      "SELECT AVG(student_id) FROM students;",
      "SELECT MAX(student_id) FROM students;",
      "SELECT MIN(student_id) FROM students;",
      "SELECT DISTINCT name FROM students;",
      "SELECT * FROM students LIMIT 5;",
      "SELECT * FROM students OFFSET 10;",
      "SELECT * FROM students ORDER BY student_id ASC;",
      "SELECT * FROM students ORDER BY student_id DESC;",
      "SELECT name FROM students WHERE student_id = 1;",
      "SELECT * FROM students WHERE name LIKE 'A%';",
      "SELECT student_id, name FROM students WHERE student_course_enrollments @> '[{\"course\":\"Math\"}]';",
      "SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id;",
      "SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id WHERE course_name = 'Science';",
      "SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id WHERE student_id = 3;",
      "SELECT COUNT(*) FROM students;",
      "SELECT course_name, COUNT(*) FROM enrollments JOIN courses ON enrollments.course_id = courses.course_id GROUP BY course_name;",
      "SELECT course_name, COUNT(*) FROM enrollments JOIN courses ON enrollments.course_id = courses.course_id GROUP BY course_name HAVING COUNT(*) > 5;",
      "SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id ORDER BY course_name;",
      "SELECT student_id, name, course_name FROM students LEFT JOIN enrollments ON students.student_id = enrollments.student_id LEFT JOIN courses ON enrollments.course_id = courses.course_id;",
      "SELECT student_id, name, course_name FROM students RIGHT JOIN enrollments ON students.student_id = enrollments.student_id RIGHT JOIN courses ON enrollments.course_id = courses.course_id;",
      "SELECT student_id, name, course_name FROM students FULL JOIN enrollments ON students.student_id = enrollments.student_id FULL JOIN courses ON enrollments.course_id = courses.course_id;",
      "SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id LIMIT 10;",
      "SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id OFFSET 5;",
      "SELECT DISTINCT course_name FROM courses;",
      "SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id UNION SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id WHERE course_name = 'Math';",
      "SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id INTERSECT SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id WHERE course_name = 'Science';",
      "SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id EXCEPT SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id WHERE course_name = 'Math';",
      "SELECT student_id, name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id FETCH FIRST 5 ROWS ONLY;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM students;",
      "SELECT student_id, student_name FROM students;",
      "SELECT student_id, student_name, student_major FROM students;",
      "SELECT * FROM courses;",
      "SELECT course_id, course_name FROM courses;",
      "SELECT * FROM enrollments;",
      "SELECT enrollment_id, student_id, course_id, enrollment_date FROM enrollments;",
      "SELECT * FROM grades;",
      "SELECT grade_id, enrollment_id, grade_score FROM grades;",
      "SELECT s.student_name, c.course_name, g.grade_score FROM students s, courses c, enrollments e, grades g WHERE s.student_id = e.student_id AND c.course_id = e.course_id AND e.enrollment_id = g.enrollment_id;",
      "SELECT s.student_name, s.student_major, c.course_name, g.grade_score FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id INNER JOIN courses c ON e.course_id = c.course_id INNER JOIN grades g ON e.enrollment_id = g.enrollment_id;",
      "SELECT s.student_name, COUNT(e.enrollment_id) AS num_enrollments FROM students s LEFT JOIN enrollments e ON s.student_id = e.student_id GROUP BY s.student_name;",
      "SELECT c.course_name, COUNT(e.enrollment_id) AS num_enrollments FROM courses c LEFT JOIN enrollments e ON c.course_id = e.course_id GROUP BY c.course_name;",
      "SELECT s.student_name, AVG(g.grade_score) AS average_score FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id INNER JOIN grades g ON e.enrollment_id = g.enrollment_id GROUP BY s.student_name;",
      "SELECT c.course_name, AVG(g.grade_score) AS average_score FROM courses c INNER JOIN enrollments e ON c.course_id = e.course_id INNER JOIN grades g ON e.enrollment_id = g.enrollment_id GROUP BY c.course_name;",
      "SELECT s.student_name, c.course_name, MAX(g.grade_score) AS max_score FROM students s, courses c, enrollments e, grades g WHERE s.student_id = e.student_id AND c.course_id = e.course_id AND e.enrollment_id = g.enrollment_id GROUP BY s.student_name, c.course_name;",
      "SELECT s.student_name, c.course_name, MIN(g.grade_score) AS min_score FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id INNER JOIN courses c ON e.course_id = c.course_id INNER JOIN grades g ON e.enrollment_id = g.enrollment_id GROUP BY s.student_name, c.course_name;",
      "SELECT s.student_name, c.course_name, SUM(g.grade_score) AS total_score FROM students s LEFT JOIN enrollments e ON s.student_id = e.student_id LEFT JOIN courses c ON e.course_id = c.course_id LEFT JOIN grades g ON e.enrollment_id = g.enrollment_id GROUP BY s.student_name, c.course_name;",
      "SELECT s.student_name, c.course_name, AVG(g.grade_score) AS average_score FROM students s LEFT JOIN enrollments e ON s.student_id = e.student_id LEFT JOIN courses c ON e.course_id = c.course_id LEFT JOIN grades g ON e.enrollment_id = g.enrollment_id GROUP BY s.student_name, c.course_name;",
      "SELECT s.student_name, c.course_name, g.grade_score FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id INNER JOIN courses c ON e.course_id = c.course_id LEFT JOIN grades g ON e.enrollment_id = g.enrollment_id WHERE g.grade_score >= 80;",
      "SELECT s.student_name, c.course_name, g.grade_score FROM students s, courses c, enrollments e, grades g WHERE s.student_id = e.student_id AND c.course_id = e.course_id AND e.enrollment_id = g.enrollment_id AND g.grade_score <= 60;",
      "SELECT * FROM students;",
      "SELECT student_name, student_major FROM students WHERE student_major='Computer Science';",
      "SELECT student_name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id;",
      "SELECT student_name, grade_score FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id;",
      "SELECT student_name, course_name, grade_score FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id;",
      "SELECT student_name, AVG(grade_score) AS average_grade FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id GROUP BY student_name;",
      "SELECT student_name, course_name, enrollment_date FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id ORDER BY enrollment_date DESC;",
      "SELECT COUNT(student_id) AS student_count FROM students;",
      "SELECT course_name, COUNT(enrollment_id) AS enrollment_count FROM courses JOIN enrollments ON courses.course_id = enrollments.course_id GROUP BY course_name;",
      "SELECT student_name, MAX(grade_score) AS highest_grade FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id GROUP BY student_name ORDER BY highest_grade DESC;",
      "SELECT student_name, MIN(grade_score) AS lowest_grade FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id GROUP BY student_name ORDER BY lowest_grade;",
      "SELECT student_name, AVG(grade_score) AS average_grade FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id GROUP BY student_name HAVING AVG(grade_score) >= 80;",
      "SELECT student_name, course_name, grade_score FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id WHERE grade_score >= 90;",
      "SELECT student_name, course_name, grade_score FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id WHERE course_name LIKE '%Math%';",
      "SELECT student_name, course_name, grade_score FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT student_name, course_name, grade_score FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id WHERE student_id IN (1, 3, 5);",
      "SELECT student_name, course_name, grade_score FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id WHERE student_name NOT LIKE '%John%';",
      "SELECT student_name, course_name, grade_score FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id JOIN grades ON enrollments.enrollment_id = grades.enrollment_id WHERE student_major IS NULL;",
      "SELECT student_name, course_name, grade_score FROM students JOIN enrollments ON students.student_id = enrollments.student_id LEFT JOIN courses ON enrollments.course_id = courses.course_id LEFT JOIN grades ON enrollments.enrollment_id = grades.enrollment_id;",
      "SELECT student_name, course_name, grade_score FROM students JOIN enrollments ON students.student_id = enrollments.student_id RIGHT JOIN courses ON enrollments.course_id = courses.course_id RIGHT JOIN grades ON enrollments.enrollment_id = grades.enrollment_id;",
      "SELECT student_name, course_name, grade_score FROM students JOIN enrollments ON students.student_id = enrollments.student_id FULL JOIN courses ON enrollments.course_id = courses.course_id FULL JOIN grades ON enrollments.enrollment_id = grades.enrollment_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Students;",
      "SELECT student_id, name, enrollment_date FROM Students;",
      "SELECT * FROM Courses;",
      "SELECT course_id, course_name FROM Courses;",
      "SELECT * FROM Enrollments;",
      "SELECT enrollment_id, student_id, course_id, enrollment_date FROM Enrollments;",
      "SELECT * FROM Grades;",
      "SELECT grade_id, enrollment_id, grade_value FROM Grades;",
      "SELECT * FROM Teachers;",
      "SELECT teacher_id, teacher_name FROM Teachers;",
      "SELECT student_id FROM Enrollments WHERE course_id = 101;",
      "SELECT DISTINCT course_id FROM Enrollments WHERE student_id = 1001;",
      "SELECT name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id WHERE course_id = 101;",
      "SELECT course_name FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id WHERE student_id = 1001;",
      "SELECT teacher_name FROM Teachers JOIN Courses ON Teachers.teacher_id = Courses.course_id WHERE course_name = 'Math';",
      "SELECT * FROM Students WHERE enrollment_date > '2021-01-01';",
      "SELECT * FROM Courses WHERE course_name LIKE '%Science%';",
      "SELECT AVG(grade_value) FROM Grades WHERE enrollment_id = 1001;",
      "SELECT MAX(grade_value) FROM Grades WHERE enrollment_id = 1001;",
      "SELECT teacher_id, teacher_name, course_name FROM Teachers JOIN Courses ON Teachers.teacher_id = Courses.course_id;",
      "SELECT * FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id",
      "SELECT Students.name, Courses.course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id",
      "SELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id",
      "SELECT Students.name, Courses.course_name, Grades.grade_value FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
      "SELECT Students.name, Grades.grade_value FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
      "SELECT Teachers.teacher_name, Courses.course_name FROM Teachers JOIN Courses ON Teachers.teacher_id = Courses.course_id",
      "SELECT Teachers.teacher_name, Courses.course_name, Enrollments.enrollment_date FROM Teachers JOIN Courses ON Teachers.teacher_id = Courses.course_id JOIN Enrollments ON Courses.course_id = Enrollments.course_id",
      "SELECT Students.name, Courses.course_name, Enrollments.enrollment_date, Grades.grade_value FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
      "SELECT Teachers.teacher_name, Courses.course_name, Grades.grade_value FROM Teachers JOIN Courses ON Teachers.teacher_id = Courses.course_id JOIN Enrollments ON Courses.course_id = Enrollments.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
      "SELECT Students.name, Enrollment.enrollment_date, Grades.grade_value FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
      "SELECT Teachers.teacher_name, Courses.course_name, Enrollments.enrollment_date, Grades.grade_value FROM Teachers JOIN Courses ON Teachers.teacher_id = Courses.course_id JOIN Enrollments ON Courses.course_id = Enrollments.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id",
      "SELECT DISTINCT Students.name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id",
      "SELECT COUNT(*) AS total_students FROM Students",
      "SELECT Courses.course_name, COUNT(*) AS total_students FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id GROUP BY Courses.course_name",
      "SELECT Students.name, AVG(Grades.grade_value) AS average_grade FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Students.name",
      "SELECT Teachers.teacher_name, MAX(Grades.grade_value) AS highest_grade FROM Teachers JOIN Courses ON Teachers.teacher_id = Courses.course_id JOIN Enrollments ON Courses.course_id = Enrollments.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Teachers.teacher_name",
      "SELECT Students.name FROM Students WHERE Students.enrollment_date BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT Courses.course_name, COUNT(*) AS total_students, AVG(Grades.grade_value) AS average_grade FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Courses.course_name",
      "SELECT Students.name, Courses.course_name, MAX(Grades.grade_value) AS highest_grade FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Students.name, Courses.course_name",
      "SELECT Teachers.teacher_name, AVG(Grades.grade_value) AS average_grade FROM Teachers JOIN Courses ON Teachers.teacher_id = Courses.course_id JOIN Enrollments ON Courses.course_id = Enrollments.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Teachers.teacher_name"
    ]
  }
]