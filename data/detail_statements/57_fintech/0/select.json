[
  {
    "statements": [
      "SELECT * FROM customer_financial_data WHERE customer_id = 1;",
      "SELECT first_name, last_name FROM customer_financial_data WHERE email = 'john.doe@example.com';",
      "SELECT * FROM customer_financial_data WHERE last_name = 'Smith';",
      "SELECT first_name, email FROM customer_financial_data WHERE phone_number = '123456789';",
      "SELECT * FROM customer_financial_data WHERE address LIKE '%Street%';",
      "SELECT first_name, phone_number FROM customer_financial_data WHERE customer_id < 10;",
      "SELECT * FROM customer_financial_data WHERE last_name = 'Johnson' AND email LIKE '%@gmail.com%';",
      "SELECT * FROM customer_financial_data WHERE address IS NOT NULL;",
      "SELECT * FROM customer_financial_data WHERE phone_number IS NULL;",
      "SELECT first_name, last_name FROM customer_financial_data WHERE customer_id = 5;",
      "SELECT * FROM customer_financial_data WHERE email = 'mary.smith@example.com' OR email = 'jane.doe@example.com';",
      "SELECT first_name, email FROM customer_financial_data WHERE phone_number = '987654321';",
      "SELECT * FROM customer_financial_data WHERE last_name = 'Brown' OR address LIKE '%Avenue%';",
      "SELECT first_name, phone_number FROM customer_financial_data WHERE customer_id >= 15;",
      "SELECT * FROM customer_financial_data WHERE email NOT LIKE '%@yahoo.com%';",
      "SELECT * FROM customer_financial_data WHERE address IS NULL;",
      "SELECT first_name, last_name FROM customer_financial_data WHERE email = 'michael.jackson@example.com';",
      "SELECT * FROM customer_financial_data WHERE first_name LIKE '%A%';",
      "SELECT email, phone_number FROM customer_financial_data WHERE last_name = 'Williams';",
      "SELECT * FROM customer_financial_data WHERE customer_id > 20;",
      "SELECT * FROM customer_financial_data WHERE customer_id = 1;",
      "SELECT first_name, last_name FROM customer_financial_data WHERE email = 'example@email.com';",
      "SELECT address FROM customer_financial_data WHERE phone_number LIKE '%555%';",
      "SELECT * FROM customer_financial_data WHERE email IS NOT NULL AND phone_number IS NOT NULL;",
      "SELECT DISTINCT address FROM customer_financial_data;",
      "SELECT first_name, last_name, email FROM customer_financial_data WHERE last_name LIKE 'S%';",
      "SELECT COUNT(*) AS total_customers FROM customer_financial_data;",
      "SELECT first_name, last_name, email, address FROM customer_financial_data WHERE customer_id > 10;",
      "SELECT DISTINCT first_name, last_name FROM customer_financial_data WHERE email LIKE '%@gmail.com';",
      "SELECT * FROM customer_financial_data WHERE customer_id BETWEEN 5 AND 10;",
      "SELECT first_name, last_name, phone_number FROM customer_financial_data WHERE address LIKE '%Street%';",
      "SELECT COUNT(DISTINCT email) AS total_emails FROM customer_financial_data WHERE phone_number IS NOT NULL;",
      "SELECT first_name, email FROM customer_financial_data WHERE last_name LIKE 'J%';",
      "SELECT * FROM customer_financial_data WHERE customer_id = (SELECT MAX(customer_id) FROM customer_financial_data);",
      "SELECT email, phone_number FROM customer_financial_data WHERE first_name = 'John' OR last_name = 'Doe';",
      "SELECT first_name, email FROM customer_financial_data WHERE phone_number IS NOT NULL ORDER BY first_name ASC;",
      "SELECT * FROM customer_financial_data WHERE last_name = 'Smith' AND address IN ('123 Main St', '456 Elm St');",
      "SELECT first_name, last_name, email FROM customer_financial_data WHERE customer_id < 5 OR customer_id > 15;",
      "SELECT * FROM customer_financial_data WHERE customer_id IN (SELECT customer_id FROM customer_financial_data WHERE email LIKE '%@yahoo.com%');",
      "SELECT MAX(customer_id) AS max_customer_id, MIN(customer_id) AS min_customer_id FROM customer_financial_data;",
      "SELECT first_name, last_name, email FROM customer_financial_data WHERE address NOT LIKE '%Ave%';"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT name, email FROM customers WHERE customer_id = 1;",
      "SELECT address FROM customers WHERE name LIKE 'A%';",
      "SELECT customer_id, name, phone_number FROM customers WHERE phone_number IS NOT NULL;",
      "SELECT * FROM customers WHERE address ILIKE '%Street%';",
      "SELECT customer_id, account_number FROM financial_data WHERE balance > 1000;",
      "SELECT customer_id, account_number, transaction_history FROM financial_data WHERE customer_id = 2;",
      "SELECT * FROM financial_data WHERE transaction_history::jsonb @> '{\"type\": \"debit\"}'::jsonb;",
      "SELECT MAX(balance) AS max_balance FROM financial_data;",
      "SELECT AVG(balance) AS avg_balance FROM financial_data WHERE customer_id = 3;",
      "SELECT customer_id, name, balance FROM customers INNER JOIN financial_data ON customers.customer_id = financial_data.customer_id;",
      "SELECT customer_id, name, balance FROM customers LEFT JOIN financial_data ON customers.customer_id = financial_data.customer_id;",
      "SELECT customer_id, name, balance FROM customers RIGHT JOIN financial_data ON customers.customer_id = financial_data.customer_id;",
      "SELECT customer_id, name, balance FROM customers FULL JOIN financial_data ON customers.customer_id = financial_data.customer_id;",
      "SELECT COUNT(*) AS total_customers FROM customers;",
      "SELECT COUNT(*) AS total_debits FROM financial_data WHERE transaction_history::jsonb @> '{\"type\": \"debit\"}'::jsonb;",
      "SELECT AVG(balance) AS avg_balance FROM financial_data GROUP BY customer_id;",
      "SELECT customer_id, SUM(balance) AS total_balance FROM financial_data GROUP BY customer_id;",
      "SELECT customer_id, COUNT(*) AS transaction_count FROM financial_data GROUP BY customer_id HAVING COUNT(*) > 5;",
      "SELECT * FROM customers ORDER BY name DESC;",
      "SELECT * FROM financial_data ORDER BY balance ASC;",
      "SELECT * FROM customers;",
      "SELECT name, email FROM customers WHERE customer_id = 1;",
      "SELECT c.name, f.balance FROM customers c JOIN financial_data f ON c.customer_id = f.customer_id WHERE f.balance > 1000;",
      "SELECT c.name, f.balance FROM customers c JOIN financial_data f ON c.customer_id = f.customer_id WHERE f.balance < 0;",
      "SELECT c.name, f.transaction_history FROM customers c JOIN financial_data f ON c.customer_id = f.customer_id WHERE f.balance > 10000;",
      "SELECT AVG(balance) FROM financial_data;",
      "SELECT SUM(balance) FROM financial_data;",
      "SELECT c.name, MAX(balance) FROM customers c JOIN financial_data f ON c.customer_id = f.customer_id;",
      "SELECT c.name, MIN(balance) FROM customers c JOIN financial_data f ON c.customer_id = f.customer_id;",
      "SELECT COUNT(*) FROM customers;",
      "SELECT DISTINCT name FROM customers;",
      "SELECT * FROM customers ORDER BY name DESC;",
      "SELECT * FROM customers WHERE address LIKE 'New %';",
      "SELECT * FROM customers WHERE phone_number LIKE '%555%';",
      "SELECT name, email, balance FROM customers c JOIN financial_data f ON c.customer_id = f.customer_id WHERE c.address = '123 Main Street';",
      "SELECT c.name, f.balance FROM customers c JOIN financial_data f ON c.customer_id = f.customer_id GROUP BY c.name;",
      "SELECT SUM(balance) FROM financial_data GROUP BY customer_id;",
      "SELECT c.name, COUNT(*) FROM customers c JOIN financial_data f ON c.customer_id = f.customer_id GROUP BY c.name HAVING COUNT(*) > 1;",
      "SELECT * FROM customers c LEFT JOIN financial_data f ON c.customer_id = f.customer_id WHERE f.customer_id IS NULL;",
      "SELECT name, AVG(balance) FROM customers c JOIN financial_data f ON c.customer_id = f.customer_id GROUP BY name HAVING AVG(balance) > 5000;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_name, email FROM customers;",
      "SELECT customer_name, phone_number, address FROM customers;",
      "SELECT * FROM accounts;",
      "SELECT account_type, balance FROM accounts;",
      "SELECT account_id, customer_id, account_type FROM accounts;",
      "SELECT * FROM transactions;",
      "SELECT transaction_type, amount FROM transactions;",
      "SELECT account_id, transaction_type FROM transactions;",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, email FROM customers WHERE customer_id = 1;",
      "SELECT * FROM accounts WHERE balance > 1000;",
      "SELECT account_id, customer_id, balance FROM accounts WHERE creation_date > '2021-01-01';",
      "SELECT * FROM transactions WHERE amount < 0;",
      "SELECT transaction_id, account_id, transaction_type FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2022-01-01';",
      "SELECT * FROM customers ORDER BY customer_name ASC;",
      "SELECT * FROM accounts ORDER BY balance DESC;",
      "SELECT * FROM transactions ORDER BY transaction_date ASC;",
      "SELECT COUNT(*) FROM customers;",
      "SELECT COUNT(*) FROM accounts;",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT customer_name, email FROM customers WHERE phone_number IS NOT NULL;",
      "SELECT * FROM accounts WHERE balance > 1000;",
      "SELECT customer_name, address FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts);",
      "SELECT * FROM transactions WHERE transaction_date >= '2022-01-01';",
      "SELECT customer_name, account_type, balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id;",
      "SELECT customer_name, account_type, balance FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id;",
      "SELECT customer_name, account_type, balance FROM customers RIGHT JOIN accounts ON customers.customer_id = accounts.customer_id;",
      "SELECT customer_name, account_type, SUM(balance) AS total_balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_name;",
      "SELECT customer_name, COUNT(*) AS num_accounts FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_name;",
      "SELECT customer_id, customer_name, COUNT(*) AS num_transactions FROM customers INNER JOIN transactions ON customers.customer_id = (SELECT customer_id FROM accounts WHERE accounts.account_id = transactions.account_id) GROUP BY customer_id, customer_name;",
      "SELECT customer_name, MAX(balance) AS highest_balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_name;",
      "SELECT customer_name, account_type, balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id WHERE balance > 1000;",
      "SELECT customer_name, transaction_type, amount FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id INNER JOIN transactions ON accounts.account_id = transactions.account_id;",
      "SELECT * FROM customers WHERE customer_name LIKE 'A%';",
      "SELECT customer_name, account_type, balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id WHERE transaction_date >= '2022-01-01';",
      "SELECT customer_name, account_type, balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id ORDER BY balance DESC;",
      "SELECT customer_name, account_type, balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id LIMIT 10;",
      "SELECT DISTINCT customer_name FROM customers;",
      "SELECT customer_name, account_type, balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id UNION SELECT customer_name, account_type, balance FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customer_accounts;",
      "SELECT account_id, account_balance FROM customer_accounts WHERE account_balance > 1000;",
      "SELECT customer_name, customer_email FROM customer_information;",
      "SELECT transaction_id, transaction_amount FROM customer_transactions WHERE transaction_amount < 0;",
      "SELECT customer_id, log_message FROM customer_logs;",
      "SELECT account_id, account_balance, customer_id FROM customer_accounts JOIN customer_information ON customer_accounts.customer_id = customer_information.customer_id;",
      "SELECT customer_id, customer_name, customer_email, customer_address FROM customer_information WHERE customer_id = 1;",
      "SELECT account_id, account_balance FROM customer_accounts WHERE account_id = 5;",
      "SELECT customer_id, log_message, log_date FROM customer_logs WHERE log_date > '2022-01-01';",
      "SELECT transaction_id, transaction_amount, transaction_date FROM customer_transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT account_id, SUM(transaction_amount) AS total_spent FROM customer_transactions GROUP BY account_id;",
      "SELECT customer_id, AVG(account_balance) AS avg_balance FROM customer_accounts GROUP BY customer_id;",
      "SELECT customer_id, COUNT(log_id) AS log_count FROM customer_logs GROUP BY customer_id;",
      "SELECT customer_id, MAX(account_balance) AS max_balance FROM customer_accounts GROUP BY customer_id;",
      "SELECT customer_id, MIN(transaction_amount) AS min_transaction FROM customer_transactions GROUP BY customer_id;",
      "SELECT customer_id, customer_name, SUM(account_balance) AS total_balance FROM customer_accounts JOIN customer_information ON customer_accounts.customer_id = customer_information.customer_id GROUP BY customer_id;",
      "SELECT account_id, customer_name, customer_email, SUM(transaction_amount) AS total_transactions FROM customer_transactions JOIN customer_information ON customer_information.customer_id = customer_transactions.account_id GROUP BY account_id;",
      "SELECT customer_id, AVG(transaction_amount) AS avg_transaction FROM customer_transactions GROUP BY customer_id HAVING avg_transaction > 500;",
      "SELECT customer_id, COUNT(transaction_id) AS transaction_count FROM customer_transactions GROUP BY customer_id HAVING transaction_count > 10;",
      "SELECT customer_id, customer_name, MAX(log_date) AS latest_log_date FROM customer_logs JOIN customer_information ON customer_logs.customer_id = customer_information.customer_id GROUP BY customer_id;",
      "SELECT * FROM customer_accounts WHERE account_balance > 1000",
      "SELECT customer_name, customer_email FROM customer_information",
      "SELECT * FROM customer_transactions WHERE transaction_amount < 0",
      "SELECT customer_name, account_balance FROM customer_accounts JOIN customer_information ON customer_accounts.customer_id = customer_information.customer_id",
      "SELECT customer_name, transaction_amount FROM customer_information JOIN customer_accounts ON customer_information.customer_id = customer_accounts.customer_id JOIN customer_transactions ON customer_accounts.account_id = customer_transactions.account_id",
      "SELECT DISTINCT customer_email FROM customer_information",
      "SELECT customer_name, account_balance, transaction_amount FROM customer_accounts JOIN customer_transactions ON customer_accounts.account_id = customer_transactions.account_id",
      "SELECT SUM(account_balance) AS total_balance FROM customer_accounts",
      "SELECT AVG(transaction_amount) AS avg_transaction_amount FROM customer_transactions",
      "SELECT customer_name, COUNT(*) AS total_transactions FROM customer_information JOIN customer_accounts ON customer_information.customer_id = customer_accounts.customer_id JOIN customer_transactions ON customer_accounts.account_id = customer_transactions.account_id GROUP BY customer_name",
      "SELECT customer_name, MAX(transaction_amount) AS max_transaction FROM customer_information JOIN customer_accounts ON customer_information.customer_id = customer_accounts.customer_id JOIN customer_transactions ON customer_accounts.account_id = customer_transactions.account_id GROUP BY customer_name",
      "SELECT customer_name, MIN(account_balance) AS min_balance FROM customer_information JOIN customer_accounts ON customer_information.customer_id = customer_accounts.customer_id GROUP BY customer_name",
      "SELECT COUNT(*) AS total_accounts, MAX(account_balance) AS max_balance, MIN(account_balance) AS min_balance FROM customer_accounts",
      "SELECT customer_name, AVG(account_balance) AS avg_balance FROM customer_accounts JOIN customer_information ON customer_accounts.customer_id = customer_information.customer_id GROUP BY customer_name",
      "SELECT customer_name, SUM(transaction_amount) AS total_spent FROM customer_information JOIN customer_accounts ON customer_information.customer_id = customer_accounts.customer_id JOIN customer_transactions ON customer_accounts.account_id = customer_transactions.account_id GROUP BY customer_name",
      "SELECT customer_name, SUM(transaction_amount) AS total_spent FROM customer_information JOIN customer_accounts ON customer_information.customer_id = customer_accounts.customer_id JOIN customer_transactions ON customer_accounts.account_id = customer_transactions.account_id WHERE transaction_amount < 0 GROUP BY customer_name",
      "SELECT customer_name, MAX(transaction_date) AS last_transaction_date FROM customer_information JOIN customer_accounts ON customer_information.customer_id = customer_accounts.customer_id JOIN customer_transactions ON customer_accounts.account_id = customer_transactions.account_id GROUP BY customer_name",
      "SELECT customer_name, MIN(transaction_date) AS first_transaction_date FROM customer_information JOIN customer_accounts ON customer_information.customer_id = customer_accounts.customer_id JOIN customer_transactions ON customer_accounts.account_id = customer_transactions.account_id GROUP BY customer_name ORDER BY first_transaction_date ASC",
      "SELECT customer_name, SUM(transaction_amount) AS total_spent FROM customer_information JOIN customer_accounts ON customer_information.customer_id = customer_accounts.customer_id JOIN customer_transactions ON customer_accounts.account_id = customer_transactions.account_id GROUP BY customer_name HAVING total_spent > 1000",
      "SELECT COUNT(DISTINCT customer_id) AS total_customers FROM customer_accounts"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Customers;",
      "SELECT full_name, email FROM Customers WHERE customer_id = 1;",
      "SELECT account_id, account_type, balance FROM Accounts;",
      "SELECT transaction_id, transaction_type, amount, transaction_date FROM Transactions WHERE account_id = 1;",
      "SELECT customer_id, credit_score FROM CreditScores;",
      "SELECT alert_id, alert_type FROM Alerts WHERE customer_id = 1;",
      "SELECT full_name, email, address FROM Customers WHERE customer_id = 2;",
      "SELECT account_id, account_type, balance FROM Accounts WHERE customer_id = 2;",
      "SELECT transaction_id, transaction_type, amount FROM Transactions WHERE account_id = 2;",
      "SELECT * FROM CreditScores WHERE customer_id = 2;",
      "SELECT alert_id, alert_type, description FROM Alerts WHERE customer_id = 2;",
      "SELECT full_name, email, phone_number, address FROM Customers WHERE customer_id = 3;",
      "SELECT account_id, account_type FROM Accounts WHERE customer_id = 3;",
      "SELECT transaction_id, transaction_type, amount, transaction_date FROM Transactions WHERE account_id = 3;",
      "SELECT customer_id, credit_score FROM CreditScores WHERE customer_id = 3;",
      "SELECT alert_id, alert_type, description FROM Alerts WHERE customer_id = 3;",
      "SELECT full_name, email, phone_number FROM Customers WHERE address LIKE '%Street%';",
      "SELECT account_id, account_type, balance FROM Accounts WHERE balance > 1000;",
      "SELECT transaction_id, transaction_type, amount FROM Transactions WHERE transaction_type = 'deposit';",
      "SELECT * FROM CreditScores WHERE credit_score > 700;",
      "SELECT alert_id, alert_type, description FROM Alerts WHERE alert_type = 'Fraud Alert';",
      "SELECT * FROM Customers;",
      "SELECT full_name, email FROM Customers WHERE address LIKE '%Street%';",
      "SELECT account_id, balance FROM Accounts WHERE balance > 1000;",
      "SELECT * FROM Transactions WHERE transaction_type = 'DEPOSIT' AND amount >= 500;",
      "SELECT customer_id, credit_score FROM CreditScores;",
      "SELECT * FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id WHERE Customers.full_name = 'John Doe';",
      "SELECT * FROM Customers LEFT JOIN Accounts ON Customers.customer_id = Accounts.customer_id;",
      "SELECT * FROM Customers RIGHT JOIN CreditScores ON Customers.customer_id = CreditScores.customer_id;",
      "SELECT t.transaction_id, t.amount, a.account_type FROM Transactions t JOIN Accounts a ON t.account_id = a.account_id WHERE t.transaction_date > '2022-01-01';",
      "SELECT c.full_name, a.account_id, t.amount FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id WHERE t.amount > 1000;",
      "SELECT c.full_name, c.email, a.balance FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.balance < 0;",
      "SELECT a.account_id, a.balance, t.amount, t.transaction_type, t.transaction_date FROM Accounts a JOIN Transactions t ON a.account_id = t.account_id WHERE a.balance < 0 AND t.transaction_type = 'WITHDRAWAL' AND t.amount > 100;",
      "SELECT c.full_name, c.phone_number, t.amount, t.transaction_type FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id WHERE t.amount < 0;",
      "SELECT c.full_name, a.account_type, t.amount, t.transaction_type FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id WHERE t.transaction_type = 'TRANSFER';",
      "SELECT c.full_name, c.address, t.amount, t.transaction_type FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id WHERE t.amount > 500 AND t.transaction_type = 'DEPOSIT' AND c.address LIKE '%Avenue%';",
      "SELECT c.full_name, c.email, a.account_type, t.amount, t.transaction_type FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id WHERE t.transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT c.full_name, c.email, cs.credit_score, t.amount, t.transaction_type FROM Customers c JOIN CreditScores cs ON c.customer_id = cs.customer_id JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id WHERE cs.credit_score < 700 AND t.amount > 1000;",
      "SELECT c.full_name, a.account_type, t.amount, t.transaction_type FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id WHERE t.amount BETWEEN 500 AND 1000;",
      "SELECT c.full_name, c.email, a.balance FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.full_name HAVING SUM(a.balance) > 10000;",
      "SELECT c.full_name, c.email, COUNT(t.transaction_id) AS num_transactions FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id GROUP BY c.full_name HAVING num_transactions >= 5;"
    ]
  }
]