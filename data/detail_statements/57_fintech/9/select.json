[
  {
    "statements": [
      "SELECT * FROM StockPrices;",
      "SELECT id, stock_name FROM StockPrices;",
      "SELECT stock_name, current_price FROM StockPrices WHERE current_price > 100;",
      "SELECT * FROM StockPrices WHERE stock_name = 'AAPL';",
      "SELECT id, current_price FROM StockPrices WHERE current_price < 50;",
      "SELECT stock_name, last_updated FROM StockPrices ORDER BY last_updated DESC;",
      "SELECT * FROM StockPrices WHERE last_updated >= '2022-03-01';",
      "SELECT id, stock_name, current_price FROM StockPrices WHERE stock_name LIKE '%Tech%';",
      "SELECT id, current_price, last_updated FROM StockPrices WHERE last_updated BETWEEN '2022-02-01' AND '2022-02-28';",
      "SELECT stock_name, current_price FROM StockPrices ORDER BY current_price DESC;",
      "SELECT * FROM StockPrices WHERE current_price BETWEEN 50 AND 100;",
      "SELECT id, stock_name, last_updated FROM StockPrices WHERE current_price >= 75;",
      "SELECT stock_name, current_price FROM StockPrices WHERE last_updated < '2022-03-15';",
      "SELECT id, current_price FROM StockPrices WHERE current_price = (SELECT MAX(current_price) FROM StockPrices);",
      "SELECT id, stock_name FROM StockPrices WHERE last_updated = (SELECT MAX(last_updated) FROM StockPrices);",
      "SELECT * FROM StockPrices WHERE stock_name IN ('GOOGL', 'MSFT', 'AMZN');",
      "SELECT id, current_price FROM StockPrices WHERE current_price > (SELECT AVG(current_price) FROM StockPrices);",
      "SELECT stock_name, last_updated FROM StockPrices WHERE last_updated > (SELECT MIN(last_updated) FROM StockPrices);",
      "SELECT id, last_updated FROM StockPrices WHERE current_price < (SELECT MIN(current_price) FROM StockPrices);",
      "SELECT * FROM StockPrices WHERE last_updated = (SELECT MAX(last_updated) FROM StockPrices);",
      "SELECT stock_name, current_price FROM StockPrices WHERE current_price > 100 ORDER BY last_updated DESC LIMIT 10",
      "SELECT * FROM StockPrices WHERE stock_name LIKE '%Apple%'",
      "SELECT stock_name, AVG(current_price) AS avg_price FROM StockPrices GROUP BY stock_name HAVING AVG(current_price) > 50",
      "SELECT id, stock_name, current_price FROM StockPrices WHERE last_updated BETWEEN '2021-01-01' AND '2021-12-31'",
      "SELECT COUNT(*) AS num_rows FROM StockPrices",
      "SELECT stock_name, MAX(current_price) AS max_price FROM StockPrices",
      "SELECT stock_name, MIN(current_price) AS min_price FROM StockPrices",
      "SELECT stock_name, SUM(current_price) AS total_price FROM StockPrices",
      "SELECT stock_name, current_price FROM StockPrices ORDER BY stock_name ASC",
      "SELECT stock_name, current_price, last_updated FROM StockPrices WHERE last_updated >= '2022-01-01' ORDER BY last_updated ASC LIMIT 5",
      "SELECT * FROM StockPrices WHERE current_price < 50",
      "SELECT stock_name, current_price FROM StockPrices WHERE stock_name = 'Google'",
      "SELECT DISTINCT stock_name FROM StockPrices",
      "SELECT stock_name, current_price FROM StockPrices WHERE current_price BETWEEN 50 AND 100",
      "SELECT stock_name, current_price FROM StockPrices WHERE stock_name IN ('Apple', 'Microsoft')",
      "SELECT stock_name, current_price FROM StockPrices WHERE stock_name NOT LIKE '%Technology%'",
      "SELECT stock_name, current_price FROM StockPrices WHERE stock_name = 'Amazon' AND current_price > 200",
      "SELECT id, stock_name, current_price FROM StockPrices WHERE last_updated > '2022-01-01'",
      "SELECT * FROM StockPrices WHERE current_price = (SELECT MAX(current_price) FROM StockPrices)",
      "SELECT stock_name, current_price FROM StockPrices WHERE last_updated > '2022-01-01' AND current_price < 100"
    ]
  },
  {
    "statements": [
      "SELECT * FROM stock_prices;",
      "SELECT symbol, price FROM stock_prices WHERE price > 100;",
      "SELECT symbol, last_updated FROM stock_prices WHERE symbol = 'AAPL';",
      "SELECT symbol, price FROM stock_prices WHERE last_updated >= '2022-01-01';",
      "SELECT symbol, AVG(price) AS avg_price FROM stock_prices GROUP BY symbol;",
      "SELECT MAX(price) AS max_price FROM stock_prices;",
      "SELECT MIN(price) AS min_price FROM stock_prices;",
      "SELECT symbol, price FROM stock_prices ORDER BY price DESC;",
      "SELECT symbol, price FROM stock_prices ORDER BY last_updated DESC;",
      "SELECT symbol, price FROM stock_prices LIMIT 10;",
      "SELECT symbol, price FROM stock_prices OFFSET 5;",
      "SELECT * FROM stock_prices INNER JOIN market_fluctuations ON stock_prices.symbol = market_fluctuations.symbol;",
      "SELECT sf.symbol, sf.percentage_change, sp.price FROM market_fluctuations sf JOIN stock_prices sp ON sf.symbol = sp.symbol;",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol;",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp LEFT JOIN market_fluctuations mf ON sp.symbol = mf.symbol;",
      "SELECT sp.symbol AS stock_symbol, mf.symbol AS market_symbol, sp.price, mf.percentage_change FROM stock_prices sp RIGHT JOIN market_fluctuations mf ON sp.symbol = mf.symbol;",
      "SELECT sp.symbol, COUNT(mf.id) AS fluctuation_count FROM stock_prices sp LEFT JOIN market_fluctuations mf ON sp.symbol = mf.symbol GROUP BY sp.symbol;",
      "SELECT sp.symbol, sp.price, COALESCE(mf.percentage_change, 0) AS percentage_change FROM stock_prices sp LEFT JOIN market_fluctuations mf ON sp.symbol = mf.symbol;",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol WHERE mf.timestamp >= '2022-01-01';",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol AND mf.percentage_change >= 0;",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol AND mf.timestamp < (SELECT MAX(timestamp) FROM market_fluctuations);",
      "SELECT symbol, price FROM stock_prices WHERE price > 100",
      "SELECT symbol, price, last_updated FROM stock_prices WHERE symbol = 'AAPL'",
      "SELECT symbol, AVG(price) AS average_price FROM stock_prices GROUP BY symbol",
      "SELECT symbol, MAX(price) AS max_price FROM stock_prices GROUP BY symbol HAVING MAX(price) > 200",
      "SELECT symbol, price, last_updated FROM stock_prices WHERE last_updated BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT symbol, percentage_change FROM market_fluctuations WHERE percentage_change < -5",
      "SELECT symbol, percentage_change, timestamp FROM market_fluctuations WHERE symbol = 'GOOG'",
      "SELECT symbol, AVG(percentage_change) AS avg_change FROM market_fluctuations GROUP BY symbol",
      "SELECT symbol, MAX(percentage_change) AS max_change FROM market_fluctuations GROUP BY symbol HAVING MAX(percentage_change) > 10",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp LEFT JOIN market_fluctuations mf ON sp.symbol = mf.symbol",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp RIGHT JOIN market_fluctuations mf ON sp.symbol = mf.symbol",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp INNER JOIN market_fluctuations mf ON sp.symbol = mf.symbol",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol WHERE sp.price > 150 AND mf.percentage_change < -1",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol ORDER BY sp.price DESC",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol LIMIT 10",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol OFFSET 5",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol ORDER BY sp.price DESC LIMIT 5",
      "SELECT sp.symbol, sp.price, mf.percentage_change FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol ORDER BY sp.price DESC LIMIT 5 OFFSET 2",
      "SELECT sp.symbol AS StockSymbol, sp.price AS StockPrice, mf.percentage_change AS MarketChange FROM stock_prices sp JOIN market_fluctuations mf ON sp.symbol = mf.symbol"
    ]
  },
  {
    "statements": [
      "SELECT * FROM stock_prices WHERE stock_id = 1",
      "SELECT stock_name, price FROM stock_prices",
      "SELECT * FROM stock_prices ORDER BY price DESC",
      "SELECT stock_name, price FROM stock_prices WHERE price > 100",
      "SELECT stock_name, price, last_updated FROM stock_prices WHERE stock_id = 2",
      "SELECT * FROM market_fluctuations WHERE market_id = 1",
      "SELECT market_name, fluctuation FROM market_fluctuations",
      "SELECT * FROM market_fluctuations ORDER BY fluctuation ASC",
      "SELECT market_name, fluctuation FROM market_fluctuations WHERE fluctuation < 0",
      "SELECT * FROM stock_updates WHERE update_id = 1",
      "SELECT stock_id, update_info FROM stock_updates",
      "SELECT * FROM stock_updates ORDER BY update_time DESC",
      "SELECT stock_id, update_info FROM stock_updates WHERE update_time > '2022-01-01'",
      "SELECT * FROM stock_prices JOIN stock_updates ON stock_prices.stock_id = stock_updates.stock_id",
      "SELECT sp.stock_name, su.update_info FROM stock_prices sp JOIN stock_updates su ON sp.stock_id = su.stock_id",
      "SELECT * FROM stock_prices INNER JOIN stock_updates ON stock_prices.stock_id = stock_updates.stock_id",
      "SELECT market_id, market_name, fluctuation FROM market_fluctuations JOIN stock_prices ON market_id = stock_id",
      "SELECT m.market_name, s.stock_name, s.price FROM market_fluctuations m JOIN stock_prices s ON m.market_id = s.stock_id",
      "SELECT sp.stock_name, su.update_time FROM stock_prices sp LEFT JOIN stock_updates su ON sp.stock_id = su.stock_id",
      "SELECT mf.market_name, su.update_time FROM market_fluctuations mf RIGHT JOIN stock_updates su ON mf.market_id = su.stock_id",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices WHERE price > 100",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices WHERE stock_name LIKE '%Tech%'",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices WHERE price BETWEEN 50 AND 100",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices ORDER BY price DESC",
      "SELECT stock_name, price, last_updated FROM stock_prices WHERE last_updated >= '2022-01-01'",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices INNER JOIN stock_updates ON stock_prices.stock_id = stock_updates.stock_id",
      "SELECT stock_id, stock_name, stock_updates.update_info, stock_updates.update_time FROM stock_prices INNER JOIN stock_updates ON stock_prices.stock_id = stock_updates.stock_id WHERE stock_updates.update_time > '2022-01-01'",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices WHERE stock_id IN (1, 2, 3)",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices WHERE last_updated BETWEEN '2022-01-01' AND '2022-12-31'",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices WHERE last_updated >= '2022-01-01' AND price > 100",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices WHERE price < 50 OR price > 150",
      "SELECT stock_name, SUM(price) AS total_price FROM stock_prices GROUP BY stock_name ORDER BY total_price DESC",
      "SELECT stock_name, COUNT(*) AS total_updates FROM stock_updates GROUP BY stock_name ORDER BY total_updates DESC",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices WHERE stock_name IN ('Apple', 'Google', 'Microsoft')",
      "SELECT stock_id, stock_name, COUNT(*) AS total_updates FROM stock_prices LEFT JOIN stock_updates ON stock_prices.stock_id = stock_updates.stock_id GROUP BY stock_id",
      "SELECT stock_id, AVG(price) AS avg_price FROM stock_prices GROUP BY stock_id HAVING AVG(price) > 100",
      "SELECT stock_id, stock_name, MAX(price) AS max_price FROM stock_prices GROUP BY stock_id",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices WHERE last_updated = (SELECT MAX(last_updated) FROM stock_prices)",
      "SELECT stock_id, stock_name, SUM(fluctuation) AS total_fluctuation FROM market_fluctuations WHERE timestamp >= '2022-01-01' GROUP BY stock_id",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices WHERE EXISTS (SELECT * FROM stock_updates WHERE stock_prices.stock_id = stock_updates.stock_id)",
      "SELECT stock_id, stock_name, price, last_updated FROM stock_prices LIMIT 10"
    ]
  },
  {
    "statements": [
      "SELECT * FROM StockPrices;",
      "SELECT stock_id, stock_name FROM StockPrices;",
      "SELECT stock_id, price FROM StockPrices WHERE price > 100;",
      "SELECT * FROM MarketFluctuations;",
      "SELECT * FROM MarketFluctuations WHERE percent_change < -2;",
      "SELECT stock_id, percent_change FROM MarketFluctuations WHERE recorded_at > '2022-01-01';",
      "SELECT * FROM StockHistory;",
      "SELECT history_id, stock_id, price FROM StockHistory WHERE stock_id = 1;",
      "SELECT * FROM MarketTrends;",
      "SELECT trend_id, trend_name FROM MarketTrends;",
      "SELECT * FROM StockPrices WHERE stock_name LIKE 'AAPL%';",
      "SELECT stock_id, stock_name, price FROM StockPrices WHERE price BETWEEN 50 AND 100;",
      "SELECT * FROM StockHistory WHERE recorded_at BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT stock_id, price, recorded_at FROM StockHistory WHERE stock_id = 1 AND price < 50;",
      "SELECT stock_id, price, recorded_at FROM StockHistory WHERE recorded_at > '2022-01-01' AND recorded_at < '2022-02-01';",
      "SELECT stock_id, price, recorded_at FROM StockHistory ORDER BY price DESC;",
      "SELECT stock_id, percent_change, recorded_at FROM MarketFluctuations ORDER BY percent_change ASC;",
      "SELECT stock_id, trend_name FROM StockPrices JOIN MarketTrends ON StockPrices.stock_id = MarketTrends.trend_id;",
      "SELECT StockPrices.stock_id, StockPrices.stock_name, MarketFluctuations.percent_change FROM StockPrices LEFT JOIN MarketFluctuations ON StockPrices.stock_id = MarketFluctuations.stock_id;",
      "SELECT stock_id, AVG(price) AS average_price FROM StockHistory GROUP BY stock_id;",
      "SELECT COUNT(*) AS total_records FROM StockPrices;",
      "SELECT * FROM StockPrices;",
      "SELECT stock_name, price FROM StockPrices WHERE price > 100;",
      "SELECT stock_id, stock_name, price, last_update FROM StockPrices WHERE stock_name LIKE '%Tech%';",
      "SELECT stock_name, percent_change FROM StockPrices JOIN MarketFluctuations ON StockPrices.stock_id = MarketFluctuations.stock_id;",
      "SELECT stock_name, price, recorded_at FROM StockPrices JOIN StockHistory ON StockPrices.stock_id = StockHistory.stock_id WHERE price < 50;",
      "SELECT * FROM StockPrices ORDER BY price DESC;",
      "SELECT stock_id, MAX(price) AS max_price FROM StockPrices GROUP BY stock_id;",
      "SELECT COUNT(stock_id) AS total_stocks FROM StockPrices;",
      "SELECT stock_name, AVG(price) AS avg_price FROM StockPrices GROUP BY stock_name;",
      "SELECT COUNT(DISTINCT stock_id) AS unique_stocks FROM MarketFluctuations;",
      "SELECT stock_name, MAX(percent_change) AS max_change FROM MarketFluctuations JOIN StockPrices ON MarketFluctuations.stock_id = StockPrices.stock_id;",
      "SELECT * FROM MarketTrends WHERE trend_name = 'Bull Market';",
      "SELECT trend_name, COUNT(*) AS total_trends FROM MarketTrends GROUP BY trend_name;",
      "SELECT stock_id, COUNT(*) AS total_records FROM StockHistory GROUP BY stock_id;",
      "SELECT stock_name, AVG(percent_change) AS avg_change FROM MarketFluctuations JOIN StockPrices ON MarketFluctuations.stock_id = StockPrices.stock_id GROUP BY stock_name;",
      "SELECT stock_id, MIN(price) AS min_price, MAX(price) AS max_price FROM StockHistory GROUP BY stock_id;",
      "SELECT stock_name, COUNT(*) AS total_fluctuations FROM MarketFluctuations JOIN StockPrices ON MarketFluctuations.stock_id = StockPrices.stock_id GROUP BY stock_name;",
      "SELECT * FROM StockPrices WHERE last_update > '2022-01-01';",
      "SELECT stock_name, SUM(percent_change) AS total_change FROM MarketFluctuations JOIN StockPrices ON MarketFluctuations.stock_id = StockPrices.stock_id GROUP BY stock_name;",
      "SELECT trend_name, LENGTH(trend_description) AS description_length FROM MarketTrends;",
      "SELECT stock_id, AVG(price) AS avg_price, COUNT(*) AS total_records FROM StockHistory GROUP BY stock_id HAVING COUNT(*) > 5;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM stock_data;",
      "SELECT stock_symbol, stock_price FROM stock_data;",
      "SELECT stock_symbol, stock_price, last_updated FROM stock_data WHERE stock_price > 100;",
      "SELECT * FROM stock_history;",
      "SELECT stock_symbol, price FROM stock_history;",
      "SELECT stock_symbol, price, date FROM stock_history WHERE price < 50;",
      "SELECT * FROM stock_exchange;",
      "SELECT exchange_name, location FROM stock_exchange WHERE location = 'New York';",
      "SELECT * FROM market_news;",
      "SELECT news_id, news_title FROM market_news;",
      "SELECT news_title, publish_date FROM market_news WHERE publish_date >= '2022-01-01';",
      "SELECT * FROM stock_alerts;",
      "SELECT stock_symbol, alert_type, alert_time FROM stock_alerts;",
      "SELECT stock_symbol, alert_type, alert_message FROM stock_alerts WHERE alert_type = 'critical';",
      "SELECT stock_symbol, alert_message, alert_time FROM stock_alerts WHERE alert_time BETWEEN '2022-01-01' AND '2022-03-01';",
      "SELECT COUNT(*) FROM stock_data;",
      "SELECT stock_symbol, MAX(stock_price) FROM stock_data;",
      "SELECT exchange_name, COUNT(*) FROM stock_exchange GROUP BY exchange_name;",
      "SELECT AVG(price) FROM stock_history;",
      "SELECT news_title FROM market_news ORDER BY publish_date DESC LIMIT 5;",
      "SELECT stock_symbol, alert_type FROM stock_alerts ORDER BY alert_time ASC LIMIT 10;",
      "SELECT * FROM stock_data WHERE stock_price > 50",
      "SELECT stock_symbol, stock_price, last_updated FROM stock_data WHERE stock_price BETWEEN 50 AND 100",
      "SELECT stock_symbol, price, date FROM stock_history WHERE stock_symbol = 'AAPL' AND date > '2022-01-01'",
      "SELECT exchange_name, location FROM stock_exchange WHERE location = 'New York'",
      "SELECT news_title, publish_date FROM market_news WHERE publish_date > '2022-01-01'",
      "SELECT * FROM stock_alerts WHERE alert_time <= NOW()",
      "SELECT stock_symbol, alert_type, alert_message FROM stock_alerts WHERE alert_type = 'High Volatility'",
      "SELECT stock_symbol, MAX(stock_price) AS max_price FROM stock_data GROUP BY stock_symbol",
      "SELECT news_title, news_content FROM market_news WHERE news_title LIKE '%COVID%'",
      "SELECT stock_symbol, AVG(stock_price) AS avg_price FROM stock_data GROUP BY stock_symbol HAVING avg_price > 50",
      "SELECT exchange_name, COUNT(*) AS num_stocks FROM stock_exchange INNER JOIN stock_data ON stock_exchange.exchange_name = stock_data.stock_symbol GROUP BY exchange_name",
      "SELECT news_title, publish_date FROM market_news WHERE news_content LIKE '%earnings%' AND publish_date BETWEEN '2022-01-01' AND '2022-06-30'",
      "SELECT stock_symbol, SUM(price) AS total_price FROM stock_history WHERE date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY stock_symbol",
      "SELECT DISTINCT stock_symbol FROM stock_history WHERE date = '2022-07-15'",
      "SELECT alert_type, COUNT(*) AS num_alerts FROM stock_alerts GROUP BY alert_type ORDER BY num_alerts DESC",
      "SELECT stock_symbol, MIN(stock_price) AS min_price FROM stock_data GROUP BY stock_symbol HAVING min_price < 10",
      "SELECT exchange_name, COUNT(*) AS num_stocks, AVG(stock_price) AS avg_price FROM stock_exchange LEFT JOIN stock_data ON stock_exchange.exchange_name = stock_data.stock_symbol GROUP BY exchange_name",
      "SELECT news_title, publish_date FROM market_news WHERE publish_date = (SELECT MAX(publish_date) FROM market_news)",
      "SELECT stock_symbol, COUNT(*) AS num_records FROM stock_data UNION ALL SELECT stock_symbol, COUNT(*) FROM stock_history",
      "SELECT exchange_name, MAX(stock_price) AS max_price FROM stock_exchange LEFT JOIN stock_data ON stock_exchange.exchange_name = stock_data.stock_symbol GROUP BY exchange_name",
      "SELECT DISTINCT stock_symbol FROM stock_data WHERE last_updated < '2022-08-01'"
    ]
  }
]