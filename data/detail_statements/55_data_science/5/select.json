[
  {
    "statements": [
      "SELECT * FROM raw_data_cleaning;",
      "SELECT id, data_entry FROM raw_data_cleaning;",
      "SELECT cleaning_method, cleaned_data FROM raw_data_cleaning;",
      "SELECT id, data_entry, cleaning_method, cleaned_data FROM raw_data_cleaning;",
      "SELECT * FROM raw_data_cleaning WHERE id = 1;",
      "SELECT * FROM raw_data_cleaning WHERE data_entry LIKE '%keyword%';",
      "SELECT * FROM raw_data_cleaning WHERE cleaning_method = 'manual';",
      "SELECT * FROM raw_data_cleaning WHERE id BETWEEN 1 AND 10;",
      "SELECT * FROM raw_data_cleaning ORDER BY id ASC;",
      "SELECT * FROM raw_data_cleaning ORDER BY id DESC;",
      "SELECT COUNT(*) FROM raw_data_cleaning;",
      "SELECT MAX(id) FROM raw_data_cleaning;",
      "SELECT MIN(id) FROM raw_data_cleaning;",
      "SELECT AVG(id) FROM raw_data_cleaning;",
      "SELECT SUM(id) FROM raw_data_cleaning;",
      "SELECT DISTINCT cleaning_method FROM raw_data_cleaning;",
      "SELECT cleaning_method, COUNT(*) FROM raw_data_cleaning GROUP BY cleaning_method;",
      "SELECT * FROM raw_data_cleaning LIMIT 5;",
      "SELECT * FROM raw_data_cleaning OFFSET 5;",
      "SELECT * FROM raw_data_cleaning LIMIT 5 OFFSET 10;",
      "SELECT id, UPPER(cleaning_method) AS cleaned_method FROM raw_data_cleaning;",
      "SELECT * FROM raw_data_cleaning;",
      "SELECT id, data_entry, cleaning_method FROM raw_data_cleaning WHERE id > 100;",
      "SELECT cleaned_data FROM raw_data_cleaning WHERE cleaning_method = 'manual';",
      "SELECT id, SUBSTRING(data_entry, 1, 10) AS data_short FROM raw_data_cleaning;",
      "SELECT id, cleaning_method, LENGTH(cleaned_data) AS data_length FROM raw_data_cleaning;",
      "SELECT id, UPPER(data_entry) AS uppercase_data FROM raw_data_cleaning;",
      "SELECT * FROM raw_data_cleaning ORDER BY id DESC;",
      "SELECT AVG(id) AS avg_id FROM raw_data_cleaning;",
      "SELECT MAX(id) AS max_id, MIN(id) AS min_id FROM raw_data_cleaning;",
      "SELECT COUNT(*) AS num_entries FROM raw_data_cleaning;",
      "SELECT DISTINCT cleaning_method FROM raw_data_cleaning;",
      "SELECT id, data_entry FROM raw_data_cleaning WHERE data_entry LIKE '%error%';",
      "SELECT id, cleaned_data FROM raw_data_cleaning WHERE LENGTH(cleaned_data) > 100;",
      "SELECT cleaning_method, COUNT(*) AS num_cleaned FROM raw_data_cleaning GROUP BY cleaning_method;",
      "SELECT SUBSTRING_INDEX(data_entry, ' ', 1) AS first_word FROM raw_data_cleaning;",
      "SELECT id, data_entry FROM raw_data_cleaning WHERE data_entry REGEXP '^[0-9]';",
      "SELECT DISTINCT SUBSTRING_INDEX(data_entry, ' ', 1) AS first_word FROM raw_data_cleaning;",
      "SELECT id, data_entry, cleaned_data FROM raw_data_cleaning WHERE data_entry IS NOT NULL AND cleaned_data IS NOT NULL;",
      "SELECT id, data_entry, cleaning_method FROM raw_data_cleaning WHERE id IN (1, 5, 10);",
      "SELECT id, cleaning_method, cleaned_data FROM raw_data_cleaning WHERE cleaning_method LIKE '%auto%' ORDER BY id ASC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Cleaning_Steps;",
      "SELECT step_id, step_description FROM Cleaning_Steps WHERE completed = TRUE;",
      "SELECT process_name FROM Preprocessing_Steps;",
      "SELECT process_id, process_name FROM Preprocessing_Steps WHERE process_id = 1;",
      "SELECT * FROM Cleaning_Steps WHERE step_id = 3;",
      "SELECT count(*) FROM Cleaning_Steps;",
      "SELECT process_id, parameters->>'param1' FROM Preprocessing_Steps WHERE process_name = 'Normalization';",
      "SELECT step_id, step_description FROM Cleaning_Steps WHERE step_description LIKE '%remove%';",
      "SELECT * FROM Preprocessing_Steps ORDER BY process_id DESC;",
      "SELECT process_id, parameters->>'param2' FROM Preprocessing_Steps WHERE process_name = 'Tokenization';",
      "SELECT step_description, completed FROM Cleaning_Steps WHERE step_id = 5 AND completed = FALSE;",
      "SELECT process_id, process_name FROM Preprocessing_Steps WHERE parameters->>'language' = 'english';",
      "SELECT * FROM Cleaning_Steps WHERE step_id BETWEEN 2 AND 5;",
      "SELECT process_id, process_name FROM Preprocessing_Steps WHERE process_name ILIKE '%stemming%';",
      "SELECT AVG(process_id) FROM Preprocessing_Steps;",
      "SELECT MIN(step_id) FROM Cleaning_Steps;",
      "SELECT MAX(process_id) FROM Preprocessing_Steps;",
      "SELECT * FROM Cleaning_Steps WHERE completed IS NULL;",
      "SELECT process_id, parameters->'param3' AS param3 FROM Preprocessing_Steps WHERE process_name = 'Lemmatization';",
      "SELECT COUNT(DISTINCT process_name) FROM Preprocessing_Steps;",
      "SELECT * FROM Cleaning_Steps WHERE completed = true;",
      "SELECT step_id, step_description FROM Cleaning_Steps WHERE step_id > 5;",
      "SELECT process_name, parameters->>'data' FROM Preprocessing_Steps WHERE process_name LIKE '%clean%';",
      "SELECT step_description, completed FROM Cleaning_Steps WHERE completed = false ORDER BY step_id DESC;",
      "SELECT COUNT(*) FROM Cleaning_Steps;",
      "SELECT AVG(step_id) FROM Cleaning_Steps WHERE completed = true;",
      "SELECT process_name, jsonb_array_elements_text(parameters->'tags') AS tag FROM Preprocessing_Steps;",
      "SELECT step_description, completed FROM Cleaning_Steps WHERE step_id IN (1, 3, 5);",
      "SELECT * FROM Preprocessing_Steps WHERE parameters->>'type' = 'csv' AND parameters->>'delimiter' = ',';",
      "SELECT process_name, jsonb_typeof(parameters->'options') AS option_type FROM Preprocessing_Steps;",
      "SELECT MAX(step_id) FROM Cleaning_Steps;",
      "SELECT process_name, jsonb_array_length(parameters->'tags') AS tag_count FROM Preprocessing_Steps;",
      "SELECT step_description, completed FROM Cleaning_Steps WHERE step_description ILIKE '%remove%';",
      "SELECT DISTINCT step_description FROM Cleaning_Steps;",
      "SELECT process_name, jsonb_object_keys(parameters) AS param_key FROM Preprocessing_Steps;",
      "SELECT COUNT(DISTINCT completed) FROM Cleaning_Steps;",
      "SELECT process_name, jsonb_pretty(parameters) FROM Preprocessing_Steps;",
      "SELECT step_description, completed FROM Cleaning_Steps LIMIT 10 OFFSET 5;",
      "SELECT process_name, jsonb_strip_nulls(parameters) FROM Preprocessing_Steps;",
      "SELECT step_id, step_description, completed FROM Cleaning_Steps WHERE step_id BETWEEN 5 AND 10;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM data_cleaning;",
      "SELECT id, raw_data FROM data_cleaning;",
      "SELECT cleaned_data FROM data_cleaning WHERE id = 'abc123';",
      "SELECT * FROM preprocessing_logs;",
      "SELECT log_id, cleaned_data_id, preprocessing_step FROM preprocessing_logs;",
      "SELECT * FROM preprocessing_logs WHERE timestamp > '2022-01-01';",
      "SELECT * FROM ml_model_results;",
      "SELECT result_id, cleaned_data_id, model_name FROM ml_model_results;",
      "SELECT result_id, accuracy FROM ml_model_results WHERE model_name = 'Logistic Regression';",
      "SELECT data_cleaning.id, data_cleaning.raw_data, ml_model_results.model_name FROM data_cleaning INNER JOIN ml_model_results ON data_cleaning.id = ml_model_results.cleaned_data_id;",
      "SELECT data_cleaning.id, data_cleaning.raw_data, ml_model_results.model_name FROM data_cleaning LEFT JOIN ml_model_results ON data_cleaning.id = ml_model_results.cleaned_data_id;",
      "SELECT data_cleaning.id, data_cleaning.raw_data, preprocessing_logs.preprocessing_step FROM data_cleaning LEFT JOIN preprocessing_logs ON data_cleaning.id = preprocessing_logs.cleaned_data_id;",
      "SELECT data_cleaning.id, data_cleaning.raw_data, ml_model_results.model_name FROM data_cleaning INNER JOIN ml_model_results ON data_cleaning.id = ml_model_results.cleaned_data_id WHERE ml_model_results.accuracy > 0.9;",
      "SELECT raw_data, preprocessing_step, timestamp FROM data_cleaning INNER JOIN preprocessing_logs ON data_cleaning.id = preprocessing_logs.cleaned_data_id;",
      "SELECT data_cleaning.id, data_cleaning.raw_data, ml_model_results.model_name, ml_model_results.accuracy FROM data_cleaning INNER JOIN ml_model_results ON data_cleaning.id = ml_model_results.cleaned_data_id WHERE ml_model_results.accuracy > 0.8;",
      "SELECT cleaned_data_id, model_name, MAX(accuracy) FROM ml_model_results GROUP BY cleaned_data_id, model_name;",
      "SELECT model_name, AVG(accuracy) AS avg_accuracy FROM ml_model_results GROUP BY model_name ORDER BY avg_accuracy DESC;",
      "SELECT raw_data, MIN(accuracy) AS min_accuracy FROM data_cleaning INNER JOIN ml_model_results ON data_cleaning.id = ml_model_results.cleaned_data_id GROUP BY raw_data;",
      "SELECT COUNT(*) AS total_records FROM data_cleaning;",
      "SELECT model_name, COUNT(*) AS total_models FROM ml_model_results GROUP BY model_name HAVING COUNT(*) > 1;",
      "SELECT * FROM data_cleaning WHERE id = '1e944458-d2a9-4ad0-a398-447a1a55826f';",
      "SELECT raw_data, cleaned_data FROM data_cleaning WHERE id = '1e944458-d2a9-4ad0-a398-447a1a55826f';",
      "SELECT preprocessing_steps FROM data_cleaning WHERE id = '1e944458-d2a9-4ad0-a398-447a1a55826f';",
      "SELECT raw_data, preprocessing_steps FROM data_cleaning WHERE id = '1e944458-d2a9-4ad0-a398-447a1a55826f';",
      "SELECT id, raw_data, cleaned_data, preprocessing_steps FROM data_cleaning;",
      "SELECT * FROM preprocessing_logs WHERE log_id = 'b6a00381-12bb-46a5-9d74-8679cb3cf05a';",
      "SELECT preprocessing_step, timestamp FROM preprocessing_logs WHERE cleaned_data_id = '1e944458-d2a9-4ad0-a398-447a1a55826f';",
      "SELECT log_id, preprocessing_step FROM preprocessing_logs WHERE timestamp > '2022-12-31';",
      "SELECT * FROM ml_model_results WHERE result_id = '48e3b42b-d6a1-42a2-95c3-7faf3647ab24';",
      "SELECT model_name, accuracy FROM ml_model_results WHERE cleaned_data_id = '1e944458-d2a9-4ad0-a398-447a1a55826f';",
      "SELECT model_name, prediction_results FROM ml_model_results WHERE cleaned_data_id = '1e944458-d2a9-4ad0-a398-447a1a55826f';",
      "SELECT * FROM data_cleaning JOIN preprocessing_logs ON data_cleaning.id = preprocessing_logs.cleaned_data_id;",
      "SELECT * FROM data_cleaning JOIN ml_model_results ON data_cleaning.id = ml_model_results.cleaned_data_id;",
      "SELECT data_cleaning.id, data_cleaning.raw_data, preprocessing_logs.preprocessing_step FROM data_cleaning JOIN preprocessing_logs ON data_cleaning.id = preprocessing_logs.cleaned_data_id;",
      "SELECT data_cleaning.id, data_cleaning.cleaned_data, ml_model_results.model_name FROM data_cleaning JOIN ml_model_results ON data_cleaning.id = ml_model_results.cleaned_data_id;",
      "SELECT data_cleaning.id, data_cleaning.raw_data, preprocessing_logs.preprocessing_step, ml_model_results.model_name FROM data_cleaning JOIN preprocessing_logs ON data_cleaning.id = preprocessing_logs.cleaned_data_id JOIN ml_model_results ON data_cleaning.id = ml_model_results.cleaned_data_id;",
      "SELECT d.id, d.raw_data, pl.preprocessing_step, mr.model_name FROM data_cleaning d JOIN preprocessing_logs pl ON d.id = pl.cleaned_data_id JOIN ml_model_results mr ON d.id = mr.cleaned_data_id;",
      "SELECT d.id, d.raw_data, d.cleaned_data, pl.preprocessing_step, mr.model_name FROM data_cleaning d JOIN preprocessing_logs pl ON d.id = pl.cleaned_data_id JOIN ml_model_results mr ON d.id = mr.cleaned_data_id;",
      "SELECT d.id, d.raw_data, d.cleaned_data, pl.preprocessing_step, mr.model_name, mr.accuracy FROM data_cleaning d JOIN preprocessing_logs pl ON d.id = pl.cleaned_data_id JOIN ml_model_results mr ON d.id = mr.cleaned_data_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM CleaningSupplies",
      "SELECT item_name, quantity FROM CleaningSupplies",
      "SELECT item_name FROM CleaningSupplies WHERE quantity > 10",
      "SELECT * FROM DataCleansingSteps",
      "SELECT step_description FROM DataCleansingSteps",
      "SELECT * FROM PreprocessedData",
      "SELECT cleaned_data, label FROM PreprocessedData",
      "SELECT * FROM MLModelTrainingData",
      "SELECT features, target_variable FROM MLModelTrainingData",
      "SELECT features FROM MLModelTrainingData WHERE target_variable = 'positive'",
      "SELECT * FROM CleaningSupplies JOIN PreprocessedData ON CleaningSupplies.id = PreprocessedData.data_id",
      "SELECT item_name, cleaned_data FROM CleaningSupplies JOIN PreprocessedData ON CleaningSupplies.id = PreprocessedData.data_id",
      "SELECT * FROM CleaningSupplies LEFT JOIN DataCleansingSteps ON CleaningSupplies.id = DataCleansingSteps.step_id",
      "SELECT item_name, step_description FROM CleaningSupplies LEFT JOIN DataCleansingSteps ON CleaningSupplies.id = DataCleansingSteps.step_id",
      "SELECT * FROM PreprocessedData INNER JOIN MLModelTrainingData ON PreprocessedData.data_id = MLModelTrainingData.sample_id",
      "SELECT cleaned_data, features FROM PreprocessedData INNER JOIN MLModelTrainingData ON PreprocessedData.data_id = MLModelTrainingData.sample_id",
      "SELECT * FROM CleaningSupplies WHERE id = 1",
      "SELECT * FROM DataCleansingSteps WHERE step_id = 2",
      "SELECT * FROM PreprocessedData WHERE label = 1",
      "SELECT * FROM MLModelTrainingData WHERE target_variable = 'negative'",
      "SELECT item_name AS item, quantity AS qty FROM CleaningSupplies",
      "SELECT item_name, quantity FROM CleaningSupplies WHERE quantity > 10",
      "SELECT step_description FROM DataCleansingSteps WHERE step_id = 1",
      "SELECT cleaned_data, label FROM PreprocessedData WHERE label = 1",
      "SELECT features FROM MLModelTrainingData WHERE sample_id = 5",
      "SELECT item_name FROM CleaningSupplies WHERE id = 2",
      "SELECT step_id, step_description FROM DataCleansingSteps WHERE step_id > 5",
      "SELECT cleaned_data, label FROM PreprocessedData WHERE label = 0",
      "SELECT features, target_variable FROM MLModelTrainingData WHERE target_variable = 'yes'",
      "SELECT item_name, quantity FROM CleaningSupplies WHERE quantity <= 5",
      "SELECT step_description FROM DataCleansingSteps WHERE step_id < 3",
      "SELECT cleaned_data, label FROM PreprocessedData WHERE label = 1",
      "SELECT features FROM MLModelTrainingData WHERE sample_id > 10",
      "SELECT item_name FROM CleaningSupplies WHERE id = 5",
      "SELECT step_id, step_description FROM DataCleansingSteps WHERE step_id = 3",
      "SELECT cleaned_data, label FROM PreprocessedData WHERE label = 1",
      "SELECT features, target_variable FROM MLModelTrainingData WHERE target_variable = 'no'",
      "SELECT item_name, quantity FROM CleaningSupplies WHERE quantity > 15",
      "SELECT step_description FROM DataCleansingSteps WHERE step_id = 2",
      "SELECT cleaned_data, label FROM PreprocessedData WHERE label = 0",
      "SELECT features FROM MLModelTrainingData WHERE sample_id = 15"
    ]
  },
  {
    "statements": [
      "SELECT * FROM cleaning_users;",
      "SELECT username, email FROM cleaning_users;",
      "SELECT user_id, username, last_login FROM cleaning_users WHERE user_id = 1;",
      "SELECT * FROM cleaning_orders;",
      "SELECT order_id, order_date FROM cleaning_orders WHERE user_id = 1;",
      "SELECT product_name, price FROM cleaning_products;",
      "SELECT product_id, category FROM cleaning_products WHERE price > 50.00;",
      "SELECT * FROM cleaning_reviews;",
      "SELECT user_id, product_id, rating FROM cleaning_reviews WHERE rating > 4;",
      "SELECT log_date, log_message FROM cleaning_logs;",
      "SELECT log_id, log_date, log_type FROM cleaning_logs WHERE log_type = 'error';",
      "SELECT username, email FROM cleaning_users ORDER BY last_login DESC;",
      "SELECT product_name, price FROM cleaning_products ORDER BY price DESC;",
      "SELECT user_id, product_id, rating FROM cleaning_reviews ORDER BY rating DESC;",
      "SELECT * FROM cleaning_users WHERE username LIKE '%john%';",
      "SELECT * FROM cleaning_orders WHERE total_amount BETWEEN 50.00 AND 100.00;",
      "SELECT * FROM cleaning_products WHERE category = 'kitchen';",
      "SELECT * FROM cleaning_reviews WHERE review_text IS NOT NULL;",
      "SELECT * FROM cleaning_logs WHERE log_message LIKE '%error%' OR log_message LIKE '%warning%';",
      "SELECT * FROM cleaning_orders LIMIT 5;",
      "SELECT * FROM cleaning_users WHERE username = 'john_doe';",
      "SELECT user_id, email FROM cleaning_users WHERE user_id IN (SELECT user_id FROM cleaning_orders WHERE total_amount > 100);",
      "SELECT product_name, price FROM cleaning_products WHERE price BETWEEN 50 AND 100 ORDER BY price DESC;",
      "SELECT * FROM cleaning_orders JOIN cleaning_users ON cleaning_orders.user_id = cleaning_users.user_id;",
      "SELECT product_name, category FROM cleaning_products WHERE category = 'Kitchen';",
      "SELECT user_id, product_id, rating FROM cleaning_reviews WHERE rating > 4;",
      "SELECT * FROM cleaning_orders WHERE order_date >= '2022-01-01' AND order_date <= '2022-03-31';",
      "SELECT username, email FROM cleaning_users WHERE last_login IS NOT NULL;",
      "SELECT product_name, price FROM cleaning_products WHERE price = (SELECT MAX(price) FROM cleaning_products);",
      "SELECT * FROM cleaning_reviews JOIN cleaning_users ON cleaning_reviews.user_id = cleaning_users.user_id;",
      "SELECT user_id, COUNT(review_id) AS num_reviews FROM cleaning_reviews GROUP BY user_id HAVING COUNT(review_id) > 5;",
      "SELECT AVG(rating) AS avg_rating FROM cleaning_reviews;",
      "SELECT product_name, AVG(price) AS avg_price FROM cleaning_products GROUP BY category;",
      "SELECT user_id, SUM(total_amount) AS total_spent FROM cleaning_orders GROUP BY user_id;",
      "SELECT category, COUNT(product_id) AS num_products FROM cleaning_products GROUP BY category;",
      "SELECT COUNT(*) AS num_logs FROM cleaning_logs WHERE log_type = 'error';",
      "SELECT * FROM cleaning_orders WHERE total_amount = (SELECT MIN(total_amount) FROM cleaning_orders);",
      "SELECT MAX(total_amount) AS max_amount, MIN(total_amount) AS min_amount FROM cleaning_orders;",
      "SELECT * FROM cleaning_users WHERE username LIKE 'j%';",
      "SELECT * FROM cleaning_orders WHERE EXTRACT(MONTH FROM order_date) = 2;"
    ]
  }
]