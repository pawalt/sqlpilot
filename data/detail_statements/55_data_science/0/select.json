[
  {
    "statements": [
      "SELECT * FROM machine_learning_data;",
      "SELECT feature_1, label FROM machine_learning_data;",
      "SELECT * FROM machine_learning_data WHERE label = 1;",
      "SELECT feature_1, feature_2 FROM machine_learning_data WHERE label = 0;",
      "SELECT * FROM machine_learning_data WHERE feature_3 > 0.5;",
      "SELECT AVG(feature_1) AS average_feature1 FROM machine_learning_data;",
      "SELECT MAX(feature_2) AS max_feature2 FROM machine_learning_data;",
      "SELECT label, COUNT(*) AS label_count FROM machine_learning_data GROUP BY label;",
      "SELECT * FROM machine_learning_data ORDER BY feature_1 DESC;",
      "SELECT * FROM machine_learning_data ORDER BY label ASC, feature_2 DESC;",
      "SELECT * FROM machine_learning_data WHERE feature_1 BETWEEN 0.2 AND 0.8;",
      "SELECT * FROM machine_learning_data WHERE feature_1 < 0.5 AND label = 1;",
      "SELECT * FROM machine_learning_data WHERE feature_1 >= 0.5 AND feature_3 < 0.3;",
      "SELECT COUNT(*) AS total_records FROM machine_learning_data;",
      "SELECT DISTINCT label FROM machine_learning_data;",
      "SELECT AVG(feature_1) AS avg_f1_label_0 FROM machine_learning_data WHERE label = 0;",
      "SELECT SUM(feature_2) AS sum_f2_label_1 FROM machine_learning_data WHERE label = 1;",
      "SELECT COUNT(*) AS total_records_label_1 FROM machine_learning_data WHERE label = 1;",
      "SELECT AVG(feature_3) AS avg_f3_label_0 FROM machine_learning_data WHERE label = 0;",
      "SELECT feature_1, label, CASE WHEN feature_1 >= 0.5 THEN 'High' ELSE 'Low' END AS feature1_category FROM machine_learning_data;",
      "SELECT * FROM machine_learning_data WHERE feature_1 > 0.5 AND feature_2 < 0.3 ORDER BY feature_3 DESC LIMIT 10",
      "SELECT AVG(feature_1), MAX(feature_2), MIN(label) FROM machine_learning_data GROUP BY feature_3 HAVING COUNT(*) > 5",
      "SELECT id, feature_1, label FROM machine_learning_data WHERE feature_1 BETWEEN 0.1 AND 0.5 AND label = 1",
      "SELECT * FROM machine_learning_data WHERE id IN (1, 5, 10)",
      "SELECT COUNT(*), feature_1 FROM machine_learning_data GROUP BY label HAVING feature_1 < 0.3",
      "SELECT id, AVG(feature_2), SUM(label) FROM machine_learning_data GROUP BY id HAVING COUNT(*) >= 3",
      "SELECT feature_1, label FROM machine_learning_data WHERE feature_1 < feature_2 ORDER BY label ASC, feature_1 DESC LIMIT 5",
      "SELECT * FROM machine_learning_data WHERE label = (SELECT MAX(label) FROM machine_learning_data)",
      "SELECT id, SUM(feature_1), AVG(label) FROM machine_learning_data GROUP BY label HAVING SUM(feature_1) > 1",
      "SELECT * FROM machine_learning_data WHERE id = (SELECT MIN(id) FROM machine_learning_data)",
      "SELECT COUNT(*), AVG(feature_2), MAX(label) FROM machine_learning_data GROUP BY feature_3 HAVING COUNT(*) >= 2",
      "SELECT id, feature_1, label FROM machine_learning_data WHERE feature_1 > 0.5 OR (feature_2 < 0.3 AND label = 1)",
      "SELECT * FROM machine_learning_data ORDER BY feature_1 ASC, feature_2 DESC LIMIT 5",
      "SELECT id, AVG(feature_2), MAX(label) FROM machine_learning_data GROUP BY feature_1 HAVING AVG(feature_2) > 0.2",
      "SELECT id, feature_1, label FROM machine_learning_data WHERE feature_1 < 0.5 OR feature_2 >= 0.3 ORDER BY feature_1 ASC, feature_2 DESC LIMIT 10",
      "SELECT * FROM machine_learning_data WHERE id = 5 OR label IN (0, 1)",
      "SELECT AVG(feature_1), SUM(feature_2), COUNT(label) FROM machine_learning_data GROUP BY label HAVING SUM(feature_2) > 3",
      "SELECT id, MAX(feature_1), MIN(feature_2) FROM machine_learning_data GROUP BY id HAVING COUNT(*) > 1",
      "SELECT id, feature_1, feature_3 FROM machine_learning_data WHERE feature_1 + feature_3 > 1.0 ORDER BY feature_1 DESC, feature_3 ASC LIMIT 5",
      "SELECT * FROM machine_learning_data WHERE label = 1 AND (feature_1 > 0.3 OR feature_2 < 0.2)",
      "SELECT id, SUM(feature_1), AVG(label) FROM machine_learning_data GROUP BY label HAVING AVG(label) < 0.5"
    ]
  },
  {
    "statements": [
      "SELECT * FROM dataset;",
      "SELECT data FROM dataset WHERE id = 1;",
      "SELECT model_name FROM model WHERE model_id = 1;",
      "SELECT * FROM dataset JOIN model ON dataset.id = model.dataset_id;",
      "SELECT dataset.data, model.model_name FROM dataset INNER JOIN model ON dataset.id = model.dataset_id;",
      "SELECT * FROM model WHERE dataset_id = 2;",
      "SELECT dataset_id, COUNT(*) FROM model GROUP BY dataset_id;",
      "SELECT * FROM dataset WHERE data LIKE 'example%';",
      "SELECT * FROM model ORDER BY dataset_id DESC;",
      "SELECT dataset.id, model.model_id FROM dataset, model WHERE dataset.id = model.dataset_id;",
      "SELECT MAX(id) FROM dataset;",
      "SELECT MIN(model_id) FROM model;",
      "SELECT AVG(id) FROM dataset;",
      "SELECT DISTINCT id FROM dataset;",
      "SELECT COUNT(*) FROM model WHERE dataset_id = 1;",
      "SELECT SUM(id) FROM dataset;",
      "SELECT dataset.id, model.model_id FROM dataset LEFT JOIN model ON dataset.id = model.dataset_id;",
      "SELECT dataset.id, model.model_id FROM dataset RIGHT JOIN model ON dataset.id = model.dataset_id;",
      "SELECT dataset.id, model.model_id FROM dataset FULL JOIN model ON dataset.id = model.dataset_id;",
      "SELECT * FROM dataset WHERE id IN (1, 2, 3);",
      "SELECT * FROM model WHERE model_id BETWEEN 1 AND 5;",
      "SELECT * FROM dataset JOIN model ON dataset.id = model.dataset_id WHERE dataset.id = 1;",
      "SELECT model.model_name, dataset.data FROM model INNER JOIN dataset ON model.dataset_id = dataset.id ORDER BY model.model_id DESC;",
      "SELECT model.model_name, dataset.data FROM model INNER JOIN dataset ON model.dataset_id = dataset.id WHERE dataset.id BETWEEN 1 AND 10;",
      "SELECT COUNT(*) AS num_models FROM model INNER JOIN dataset ON model.dataset_id = dataset.id;",
      "SELECT AVG(model.model_id) AS avg_model_id FROM model LEFT JOIN dataset ON model.dataset_id = dataset.id;",
      "SELECT dataset.id, model.model_name FROM model INNER JOIN dataset ON model.dataset_id = dataset.id WHERE model.model_name LIKE '%classification%';",
      "SELECT dataset.id, model.model_name FROM model LEFT JOIN dataset ON model.dataset_id = dataset.id WHERE model.model_id IS NOT NULL;",
      "SELECT dataset.data, model.model_name FROM model RIGHT JOIN dataset ON model.dataset_id = dataset.id WHERE dataset.id IN (1, 2, 3);",
      "SELECT DISTINCT model.model_name FROM model INNER JOIN dataset ON model.dataset_id = dataset.id;",
      "SELECT dataset.id, SUM(model.model_id) AS sum_model_id FROM model INNER JOIN dataset ON model.dataset_id = dataset.id GROUP BY dataset.id;",
      "SELECT dataset.id, model.model_name, COUNT(*) AS num_models FROM model INNER JOIN dataset ON model.dataset_id = dataset.id GROUP BY dataset.id, model.model_name;",
      "SELECT * FROM model WHERE model.model_name = 'Logistic Regression' OR model.model_name = 'Random Forest';",
      "SELECT dataset.id, model.model_name FROM model LEFT JOIN dataset ON model.dataset_id = dataset.id WHERE dataset.data LIKE '%pattern%';",
      "SELECT dataset.id, model.model_name FROM model LEFT JOIN dataset ON model.dataset_id = dataset.id ORDER BY dataset.id, model.model_name;",
      "SELECT dataset.id, model.model_name FROM model INNER JOIN dataset ON model.dataset_id = dataset.id LIMIT 5 OFFSET 2;",
      "SELECT dataset.id, model.model_name FROM model INNER JOIN dataset ON model.dataset_id = dataset.id FETCH FIRST 5 ROWS ONLY;",
      "SELECT dataset.id, model.model_name FROM model INNER JOIN dataset ON model.dataset_id = dataset.id UNION SELECT dataset.id, model_id AS model_name FROM model INNER JOIN dataset ON model.dataset_id = dataset.id;",
      "SELECT dataset.id, model.model_name FROM model INNER JOIN dataset ON model.dataset_id = dataset.id EXCEPT SELECT dataset.id, model_id AS model_name FROM model INNER JOIN dataset ON model.dataset_id = dataset.id;",
      "SELECT dataset.id, model.model_name FROM model INNER JOIN dataset ON model.dataset_id = dataset.id INTERSECT SELECT dataset.id, model_id AS model_name FROM model INNER JOIN dataset ON model.dataset_id = dataset.id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM dataset;",
      "SELECT id, data FROM dataset;",
      "SELECT data, label FROM dataset WHERE id = 1;",
      "SELECT * FROM model;",
      "SELECT model_name, accuracy FROM model;",
      "SELECT * FROM training_data;",
      "SELECT dataset_id, model_id, training_timestamp FROM training_data;",
      "SELECT * FROM dataset WHERE label = 'category';",
      "SELECT id, data, label FROM dataset WHERE id IN (1, 2, 3);",
      "SELECT * FROM model WHERE accuracy > 0.8;",
      "SELECT * FROM training_data WHERE model_id = 1;",
      "SELECT dataset_id, model_id, training_timestamp FROM training_data WHERE model_id = 2;",
      "SELECT * FROM dataset ORDER BY id DESC;",
      "SELECT * FROM model ORDER BY accuracy ASC;",
      "SELECT * FROM dataset LIMIT 5;",
      "SELECT * FROM model LIMIT 3;",
      "SELECT avg(accuracy) FROM model;",
      "SELECT dataset_id, count(model_id) FROM training_data GROUP BY dataset_id;",
      "SELECT model_id, count(dataset_id) FROM training_data GROUP BY model_id HAVING count(dataset_id) > 5;",
      "SELECT dataset_id, max(training_timestamp) FROM training_data GROUP BY dataset_id;",
      "SELECT * FROM dataset WHERE id = 1;",
      "SELECT model_name, accuracy FROM model WHERE accuracy > 0.9;",
      "SELECT dataset.id, dataset.data, training_data.model_id FROM dataset JOIN training_data ON dataset.id = training_data.dataset_id;",
      "SELECT dataset.id, dataset.label, model.model_name FROM dataset JOIN training_data ON dataset.id = training_data.dataset_id JOIN model ON training_data.model_id = model.model_id;",
      "SELECT dataset.id, dataset.data, model.model_name FROM dataset JOIN training_data ON dataset.id = training_data.dataset_id JOIN model ON training_data.model_id = model.model_id WHERE model.accuracy > 0.8;",
      "SELECT COUNT(*) FROM dataset;",
      "SELECT MAX(accuracy) FROM model;",
      "SELECT avg(accuracy) FROM model;",
      "SELECT dataset.id, dataset.label, model.model_name, model.accuracy FROM dataset JOIN training_data ON dataset.id = training_data.dataset_id JOIN model ON training_data.model_id = model.model_id ORDER BY model.accuracy DESC;",
      "SELECT dataset.id, dataset.label, model.model_name, model.accuracy FROM dataset JOIN training_data ON dataset.id = training_data.dataset_id JOIN model ON training_data.model_id = model.model_id WHERE model.accuracy > 0.7 ORDER BY model.accuracy DESC;",
      "SELECT dataset.id, dataset.data FROM dataset WHERE data LIKE '%pattern%';",
      "SELECT model_id, AVG(accuracy) as average_accuracy FROM training_data GROUP BY model_id;",
      "SELECT model_name, AVG(accuracy) as avg_accuracy FROM model GROUP BY model_name;",
      "SELECT dataset.id, dataset.data, COUNT(*) as num_models FROM dataset JOIN training_data ON dataset.id = training_data.dataset_id GROUP BY dataset.id;",
      "SELECT dataset.id, dataset.data, model.model_name FROM dataset JOIN training_data ON dataset.id = training_data.dataset_id JOIN model ON training_data.model_id = model.model_id HAVING COUNT(model.model_name) > 2;",
      "SELECT dataset_id, COUNT(*) as num_trainings FROM training_data GROUP BY dataset_id HAVING num_trainings > 3;",
      "SELECT dataset_id, model_id FROtraining_data WHERE model_id IN (SELECT model_id FROM model WHERE accuracy > 0.8);",
      "SELECT dataset.id, dataset.data, model.model_name, model.accuracy FROM dataset LEFT JOIN training_data ON dataset.id = training_data.dataset_id LEFT JOIN model ON training_data.model_id = model.model_id;",
      "SELECT dataset.id, dataset.data, model.model_name, model.accuracy FROM dataset RIGHT JOIN training_data ON dataset.id = training_data.dataset_id RIGHT JOIN model ON training_data.model_id = model.model_id;",
      "SELECT dataset.id, dataset.label, model.model_id, model.model_name, training_data.training_timestamp FROM dataset JOIN model ON dataset.id = model.model_id JOIN training_data ON dataset.id = training_data.dataset_id ORDER BY training_data.training_timestamp DESC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM dataset;",
      "SELECT id, data FROM dataset WHERE id = '123e4567-e89b-12d3-a456-426614174000';",
      "SELECT model_name, optimizer FROM model;",
      "SELECT * FROM training_data WHERE model_id = '123e4567-e89b-12d3-a456-426614174001';",
      "SELECT id, evaluation_result FROM evaluation;",
      "SELECT model_id, evaluation_result FROM evaluation WHERE model_id = '123e4567-e89b-12d3-a456-426614174002';",
      "SELECT * FROM dataset WHERE id = '123e4567-e89b-12d3-a456-426614174003';",
      "SELECT * FROM model WHERE id = '123e4567-e89b-12d3-a456-426614174004';",
      "SELECT * FROM training_data WHERE dataset_id = '123e4567-e89b-12d3-a456-426614174005';",
      "SELECT id, data FROM dataset WHERE id = '123e4567-e89b-12d3-a456-426614174006';",
      "SELECT model_name, optimizer, learning_rate FROM model WHERE id = '123e4567-e89b-12d3-a456-426614174007';",
      "SELECT * FROM dataset WHERE id = '123e4567-e89b-12d3-a456-426614174008';",
      "SELECT * FROM model WHERE optimizer = 'Adam';",
      "SELECT * FROM training_data WHERE model_id = '123e4567-e89b-12d3-a456-426614174009';",
      "SELECT id, evaluation_result FROM evaluation WHERE id = '123e4567-e89b-12d3-a456-426614174010';",
      "SELECT model_id, evaluation_result FROM evaluation WHERE model_id = '123e4567-e89b-12d3-a456-426614174011';",
      "SELECT * FROM dataset WHERE id = '123e4567-e89b-12d3-a456-426614174012';",
      "SELECT * FROM model WHERE id = '123e4567-e89b-12d3-a456-426614174013';",
      "SELECT * FROM training_data WHERE dataset_id = '123e4567-e89b-12d3-a456-426614174014';",
      "SELECT id, data FROM dataset WHERE id = '123e4567-e89b-12d3-a456-426614174015';",
      "SELECT * FROM dataset WHERE id = '123e4567-e89b-12d3-a456-426614174001';",
      "SELECT model_name, optimizer FROM model WHERE learning_rate > 0.001;",
      "SELECT dataset_id, model_id FROM training_data WHERE model_id = '123e4567-e89b-12d3-a456-426614174002' AND dataset_id = '123e4567-e89b-12d3-a456-426614174003';",
      "SELECT * FROM evaluation WHERE model_id = '123e4567-e89b-12d3-a456-426614174004';",
      "SELECT model_id, AVG(learning_rate) FROM model GROUP BY model_id HAVING AVG(learning_rate) > 0.005;",
      "SELECT * FROM dataset JOIN training_data ON dataset.id = training_data.dataset_id;",
      "SELECT * FROM model LEFT JOIN evaluation ON model.id = evaluation.model_id;",
      "SELECT MAX(learning_rate) AS max_learning_rate FROM model;",
      "SELECT dataset_id, COUNT(model_id) FROM training_data GROUP BY dataset_id;",
      "SELECT model_id, JSONB_ARRAY_LENGTH(evaluation_result) AS num_metrics FROM evaluation WHERE model_id = '123e4567-e89b-12d3-a456-426614174005';",
      "SELECT model_name, COUNT(*) AS num_evaluations FROM model JOIN evaluation ON model.id = evaluation.model_id GROUP BY model_name;",
      "SELECT DISTINCT model_name FROM model WHERE learning_rate BETWEEN 0.001 AND 0.01;",
      "SELECT * FROM dataset WHERE data -> 'key1' = 'value1';",
      "SELECT COUNT(*) FROM model WHERE optimizer = 'adam';",
      "SELECT * FROM training_data td INNER JOIN model m ON td.model_id = m.id INNER JOIN dataset d ON td.dataset_id = d.id;",
      "SELECT * FROM evaluation e INNER JOIN model m ON e.model_id = m.id WHERE JSONB_EXISTS(model_name, 'pretrained_model');",
      "SELECT * FROM dataset d LEFT JOIN training_data td ON d.id = td.dataset_id WHERE td.model_id IS NULL;",
      "SELECT model_id, MIN(learning_rate) AS min_lr, MAX(learning_rate) AS max_lr FROM model GROUP BY model_id;",
      "SELECT * FROM model WHERE model_name LIKE 'Neural%';",
      "SELECT * FROM training_data WHERE model_id IN ('123e4567-e89b-12d3-a456-426614174006', '123e4567-e89b-12d3-a456-426614174007');"
    ]
  },
  {
    "statements": [
      "SELECT * FROM dataset;",
      "SELECT id, data FROM dataset WHERE id = 1;",
      "SELECT model_name, model_accuracy FROM model;",
      "SELECT * FROM model WHERE model_id = 10;",
      "SELECT model_id, start_time, end_time FROM training_history;",
      "SELECT training_id, loss, accuracy FROM training_history WHERE model_id = 5;",
      "SELECT model_id, optimizer FROM hyperparameters;",
      "SELECT * FROM hyperparameters WHERE hyper_id = 7;",
      "SELECT model_id, evaluation_date FROM evaluation_metrics;",
      "SELECT metric_id, precision, recall FROM evaluation_metrics WHERE model_id = 15;",
      "SELECT * FROM dataset WHERE id < 5;",
      "SELECT model_name FROM model WHERE model_accuracy > 0.8;",
      "SELECT * FROM training_history WHERE loss < 0.5;",
      "SELECT optimizer FROM hyperparameters WHERE learning_rate > 0.001;",
      "SELECT * FROM evaluation_metrics WHERE recall > 0.6;",
      "SELECT * FROM dataset ORDER BY id DESC;",
      "SELECT model_name, model_accuracy FROM model ORDER BY model_accuracy DESC;",
      "SELECT training_id, end_time FROM training_history ORDER BY end_time;",
      "SELECT hyper_id, batch_size FROM hyperparameters ORDER BY hyper_id;",
      "SELECT * FROM evaluation_metrics WHERE evaluation_date = '2022-01-15';",
      "SELECT * FROM dataset;",
      "SELECT model_id, model_name, model_accuracy FROM model WHERE model_accuracy > 0.8;",
      "SELECT TH.start_time, TH.end_time, H.learning_rate FROM training_history TH JOIN hyperparameters H ON TH.model_id = H.model_id;",
      "SELECT EM.* FROM evaluation_metrics EM JOIN model M ON EM.model_id = M.model_id WHERE M.model_name = 'ImageClassifier';",
      "SELECT dataset.id, model.model_name, TH.start_time, EM.evaluation_date FROM dataset JOIN model ON dataset.id = model.model_id JOIN training_history TH ON model.model_id = TH.model_id JOIN evaluation_metrics EM ON model.model_id = EM.model_id;",
      "SELECT model_name, start_time, end_time, accuracy FROM model JOIN training_history ON model.model_id = training_history.model_id;",
      "SELECT COUNT(*) FROM dataset;",
      "SELECT AVG(model_accuracy) FROM model;",
      "SELECT MAX(loss), MIN(loss) FROM training_history WHERE model_id = 2;",
      "SELECT model_id, MAX(accuracy), MIN(accuracy) FROM training_history GROUP BY model_id;",
      "SELECT model_id, AVG(loss) AS average_loss, AVG(accuracy) AS average_accuracy FROM training_history GROUP BY model_id HAVING AVG(accuracy) > 0.75;",
      "SELECT model_name, evaluation_date, precision, recall, f1_score FROM evaluation_metrics JOIN model ON evaluation_metrics.model_id = model.model_id WHERE model_accuracy > 0.8;",
      "SELECT TH.start_time, TH.end_time, M.model_name, HM.learning_rate, HM.optimizer FROM training_history TH JOIN model M ON TH.model_id = M.model_id JOIN hyperparameters HM ON M.model_id = HM.model_id;",
      "SELECT model_id, AVG(batch_size) AS avg_batch_size, MAX(epochs) FROM hyperparameters GROUP BY model_id;",
      "SELECT model_name, evaluation_date, precision, recall, f1_score FROM evaluation_metrics WHERE evaluation_date BETWEEN '2022-01-01' AND '2022-12-31';",
      "SELECT COUNT(*) FROM dataset WHERE data @> '{"
    ]
  }
]