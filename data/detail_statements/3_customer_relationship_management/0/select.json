[
  {
    "statements": [
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT first_name, last_name FROM customers WHERE email = 'test@example.com';",
      "SELECT customer_id, first_name, last_name FROM customers WHERE phone_number = '123-456-7890';",
      "SELECT * FROM customers WHERE email LIKE '%@gmail.com';",
      "SELECT customer_id, first_name, last_name FROM customers WHERE customer_id > 5;",
      "SELECT * FROM customers WHERE purchase_history IS NOT NULL;",
      "SELECT customer_id, email FROM customers WHERE first_name = 'John' AND last_name = 'Doe';",
      "SELECT customer_id, phone_number FROM customers WHERE phone_number IS NULL;",
      "SELECT * FROM customers WHERE email = 'customer1@example.com';",
      "SELECT first_name, last_name, email FROM customers WHERE last_name LIKE 'S%';",
      "SELECT * FROM customers WHERE customer_id BETWEEN 10 AND 20;",
      "SELECT customer_id, first_name, last_name FROM customers WHERE email NOT LIKE '%example%';",
      "SELECT * FROM customers WHERE purchase_history ->> 'total_purchases' > '1000';",
      "SELECT customer_id, email FROM customers WHERE purchase_history @> '{\"loyalty_status\": \"gold\"}';",
      "SELECT * FROM customers ORDER BY first_name ASC;",
      "SELECT * FROM customers ORDER BY last_name DESC;",
      "SELECT customer_id, first_name, last_name FROM customers ORDER BY customer_id DESC;",
      "SELECT COUNT(*) FROM customers;",
      "SELECT MAX(customer_id) FROM customers;",
      "SELECT MIN(customer_id) FROM customers;",
      "SELECT * FROM customers WHERE customer_id = 100;",
      "SELECT first_name, last_name, email FROM customers WHERE email LIKE 'john.doe%';",
      "SELECT customer_id, first_name, last_name, phone_number FROM customers WHERE phone_number IS NOT NULL;",
      "SELECT * FROM customers WHERE purchase_history->'products' @> '[{\"name\": \"Shirt\"}]';",
      "SELECT customer_id, first_name, last_name, email FROM customers WHERE purchase_history @> '{\"total_spent\": {\"$gt\": 1000}}';",
      "SELECT * FROM customers WHERE last_name = 'Smith' AND email LIKE '%@gmail.com';",
      "SELECT customer_id, first_name, last_name, phone_number FROM customers WHERE purchase_history @> '{\"total_items\": {\"$lt\": 5}}';",
      "SELECT * FROM customers WHERE email = 'test@example.com' OR phone_number = '123-456-7890';",
      "SELECT first_name, last_name, email FROM customers WHERE purchase_history @> '{\"last_purchase\": {\"$gt\": \"2022-01-01\"}}';",
      "SELECT customer_id, JSONB_ARRAY_LENGTH(purchase_history->'products') AS total_products FROM customers WHERE JSONB_ARRAY_LENGTH(purchase_history->'products') > 3;",
      "SELECT * FROM customers WHERE first_name ILIKE 'j%';",
      "SELECT customer_id, first_name, last_name, email FROM customers WHERE purchase_history->'products' @> '[{\"category\": \"Electronics\"}]';",
      "SELECT * FROM customers WHERE purchase_history->>'total_spent'::numeric > 1500;",
      "SELECT customer_id, first_name, last_name, email FROM customers WHERE purchase_history->'products' @> '[{\"price\": {\"$gt\": 100}}]';",
      "SELECT * FROM customers WHERE phone_number LIKE '%555%' AND email NOT LIKE '%test%';",
      "SELECT customer_id, first_name, last_name, email FROM customers WHERE purchase_history->'products' @> '[{\"name\": \"Shoes\", \"size\": \"10\"}]';",
      "SELECT * FROM customers WHERE first_name <> 'Alice' AND last_name <> 'Bob';",
      "SELECT customer_id, first_name, last_name, email FROM customers WHERE purchase_history @> '{\"total_spent\": {\"$lt\": 500}}';",
      "SELECT * FROM customers WHERE email LIKE '%@example.com' AND purchase_history->>'total_spent'::numeric < 1000;",
      "SELECT first_name, last_name, phone_number FROM customers WHERE purchase_history->>'total_items'::numeric >= 2;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customer_information;",
      "SELECT first_name, last_name, email FROM customer_information WHERE customer_id = 100;",
      "SELECT customer_id, first_name, last_name FROM customer_information WHERE email LIKE '%@example.com';",
      "SELECT * FROM customer_information WHERE phone_number LIKE '555%';",
      "SELECT customer_id, CONCAT(first_name, ' ', last_name) AS full_name FROM customer_information;",
      "SELECT customer_id, purchase_date, product_name, quantity FROM purchase_details WHERE purchase_date >= '2022-01-01';",
      "SELECT customer_information.first_name, purchase_details.product_name FROM customer_information JOIN purchase_details ON customer_information.customer_id = purchase_details.customer_id;",
      "SELECT customer_id, purchase_history FROM customer_information WHERE purchase_history IS NOT NULL;",
      "SELECT customer_id, COUNT(purchase_id) AS total_purchases FROM purchase_details GROUP BY customer_id;",
      "SELECT customer_id, AVG(quantity) AS avg_quantity FROM purchase_details GROUP BY customer_id;",
      "SELECT customer_id, MAX(quantity) AS max_quantity FROM purchase_details GROUP BY customer_id;",
      "SELECT customer_id, MIN(quantity) AS min_quantity FROM purchase_details GROUP BY customer_id;",
      "SELECT customer_id, SUM(quantity) AS total_quantity FROM purchase_details GROUP BY customer_id;",
      "SELECT customer_id, AVG(quantity) AS avg_quantity FROM purchase_details WHERE purchase_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id;",
      "SELECT customer_id, product_name, SUM(quantity) AS total_quantity FROM purchase_details GROUP BY customer_id, product_name;",
      "SELECT customer_id, purchase_date, SUM(quantity) AS total_quantity FROM purchase_details WHERE purchase_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id, purchase_date;",
      "SELECT customer_id, purchase_date, product_name, quantity FROM purchase_details ORDER BY purchase_date DESC;",
      "SELECT customer_id, purchase_date, product_name, quantity FROM purchase_details ORDER BY quantity DESC;",
      "SELECT customer_id, purchase_date, product_name, quantity FROM purchase_details ORDER BY quantity ASC;",
      "SELECT DISTINCT customer_id FROM purchase_details;",
      "SELECT * FROM customer_information WHERE customer_id = 123;",
      "SELECT first_name, last_name, email FROM customer_information WHERE last_name LIKE 'S%';",
      "SELECT customer_id, COUNT(*) AS total_purchases FROM purchase_details GROUP BY customer_id HAVING total_purchases > 5;",
      "SELECT customer_id, AVG(quantity) AS avg_quantity FROM purchase_details GROUP BY customer_id ORDER BY avg_quantity DESC;",
      "SELECT customer_id, product_name, purchase_date FROM purchase_details WHERE purchase_date BETWEEN '2022-01-01' AND '2022-12-31' ORDER BY purchase_date DESC;",
      "SELECT c.customer_id, c.first_name, c.last_name, p.product_name FROM customer_information c JOIN purchase_details p ON c.customer_id = p.customer_id;",
      "SELECT c.first_name, c.last_name, COUNT(p.purchase_id) AS total_purchases FROM customer_information c LEFT JOIN purchase_details p ON c.customer_id = p.customer_id GROUP BY c.customer_id;",
      "SELECT c.first_name, c.last_name, CONCAT(c.first_name, ' ', c.last_name) AS full_name, p.product_name FROM customer_information c JOIN purchase_details p ON c.customer_id = p.customer_id;",
      "SELECT customer_id, CONCAT(first_name, ' ', last_name) AS full_name, LENGTH(email) AS email_length FROM customer_information;",
      "SELECT customer_id, first_name, last_name, product_name, quantity FROM customer_information c JOIN purchase_details p ON c.customer_id = p.customer_id WHERE quantity > 10;",
      "SELECT c.customer_id, c.first_name, c.last_name, p.product_name, p.purchase_date FROM customer_information c JOIN purchase_details p ON c.customer_id = p.customer_id ORDER BY p.purchase_date DESC;",
      "SELECT CONCAT(first_name, ' ', last_name) AS full_name, email, purchase_history FROM customer_information;",
      "SELECT DISTINCT customer_id, first_name FROM customer_information;",
      "SELECT customer_id, first_name, last_name, email, phone_number FROM customer_information WHERE phone_number IS NOT NULL;",
      "SELECT customer_id, first_name, last_name, COUNT(*) AS total_purchases FROM purchase_details GROUP BY customer_id HAVING total_purchases > 3;",
      "SELECT first_name, last_name, email FROM customer_information WHERE LENGTH(email) > 15;",
      "SELECT customer_id, first_name, last_name, product_name, quantity FROM customer_information c JOIN purchase_details p ON c.customer_id = p.customer_id WHERE quantity <= 5;",
      "SELECT customer_id, first_name, last_name, email, phone_number, purchase_history FROM customer_information WHERE purchase_history LIKE '%refund%';",
      "SELECT customer_id, first_name, last_name, p.product_name, p.purchase_date FROM customer_information c JOIN purchase_details p ON c.customer_id = p.customer_id WHERE p.purchase_date >= '2022-06-01';",
      "SELECT customer_id, COUNT(*) AS total_purchases FROM purchase_details GROUP BY customer_id ORDER BY total_purchases DESC LIMIT 5;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_id, name, email FROM customers;",
      "SELECT name, phone_number FROM customers WHERE customer_id = 1;",
      "SELECT * FROM purchases;",
      "SELECT customer_id, total_amount FROM purchases;",
      "SELECT date, total_amount FROM purchases WHERE customer_id = 2;",
      "SELECT * FROM products;",
      "SELECT name, price FROM products;",
      "SELECT product_id, name FROM products WHERE price > 100;",
      "SELECT c.name as customer_name, p.name as product_name FROM customers c, products p;",
      "SELECT c.name as customer_name, p.name as product_name FROM customers c JOIN purchases pu ON c.customer_id = pu.customer_id JOIN products p ON pu.total_amount > 500;",
      "SELECT p.name, pu.total_amount FROM purchases pu JOIN products p ON pu.total_amount > 1000;",
      "SELECT c.name, p.price FROM customers c JOIN purchases pu ON c.customer_id = pu.customer_id JOIN products p ON pu.total_amount BETWEEN 100 AND 500;",
      "SELECT c.name, p.name, p.price FROM customers c JOIN purchases pu ON c.customer_id = pu.customer_id JOIN products p ON pu.total_amount BETWEEN 100 AND 500;",
      "SELECT c.customer_id, c.name, COUNT(p.purchase_id) AS total_purchases FROM customers c JOIN purchases p ON c.customer_id = p.customer_id GROUP BY c.customer_id;",
      "SELECT c.name, SUM(p.total_amount) AS total_spent FROM customers c JOIN purchases p ON c.customer_id = p.customer_id GROUP BY c.name;",
      "SELECT c.name AS customer_name, COUNT(p.purchase_id) AS total_purchases FROM customers c JOIN purchases p ON c.customer_id = p.customer_id WHERE p.date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY c.name;",
      "SELECT c.name, AVG(p.total_amount) AS avg_purchase FROM customers c JOIN purchases p ON c.customer_id = p.customer_id GROUP BY c.name HAVING avg_purchase > 200;",
      "SELECT c.name, MAX(p.total_amount) AS max_purchase FROM customers c JOIN purchases p ON c.customer_id = p.customer_id GROUP BY c.name HAVING max_purchase < 1000;",
      "SELECT * FROM customers;",
      "SELECT name, email FROM customers WHERE phone_number LIKE '%555%';",
      "SELECT customers.name, purchases.date, purchases.total_amount FROM customers INNER JOIN purchases ON customers.customer_id = purchases.customer_id;",
      "SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM purchases WHERE total_amount > 1000);",
      "SELECT products.name, products.price FROM products ORDER BY price DESC;",
      "SELECT customers.name, products.name FROM customers INNER JOIN purchases ON customers.customer_id = purchases.customer_id INNER JOIN products ON purchases.product_id = products.product_id;",
      "SELECT COUNT(*) AS total_customers FROM customers;",
      "SELECT AVG(total_amount) AS avg_amount FROM purchases;",
      "SELECT customers.customer_id, customers.name, SUM(total_amount) AS total_spent FROM customers INNER JOIN purchases ON customers.customer_id = purchases.customer_id GROUP BY customers.customer_id;",
      "SELECT * FROM products WHERE price BETWEEN 50 AND 100;",
      "SELECT AVG(price) AS avg_price FROM products;",
      "SELECT customers.name, COUNT(purchases.purchase_id) AS total_purchases FROM customers LEFT JOIN purchases ON customers.customer_id = purchases.customer_id GROUP BY customers.name;",
      "SELECT name, COUNT(*) AS total_purchases FROM products INNER JOIN purchases ON products.product_id = purchases.product_id GROUP BY name;",
      "SELECT customer_id, MAX(total_amount) AS max_purchase_amount FROM purchases GROUP BY customer_id;",
      "SELECT customers.name, products.name, purchases.total_amount FROM customers LEFT JOIN purchases ON customers.customer_id = purchases.customer_id LEFT JOIN products ON purchases.product_id = products.product_id;",
      "SELECT customers.address, COUNT(*) AS total_purchases FROM customers INNER JOIN purchases ON customers.customer_id = purchases.customer_id GROUP BY customers.address HAVING COUNT(*) > 1;",
      "SELECT * FROM customers WHERE name LIKE 'J%' AND email LIKE '%gmail.com';",
      "SELECT customer_id, name, date, total_amount FROM customers INNER JOIN purchases ON customers.customer_id = purchases.customer_id WHERE date BETWEEN '2021-01-01' AND '2021-12-31';",
      "SELECT DISTINCT name FROM customers;",
      "SELECT AVG(total_amount) AS avg_amount, MAX(total_amount) AS max_amount, MIN(total_amount) AS min_amount FROM purchases;",
      "SELECT customers.name, products.name, COUNT(*) AS total_purchases FROM customers INNER JOIN purchases ON customers.customer_id = purchases.customer_id INNER JOIN products ON purchases.product_id = products.product_id GROUP BY customers.name, products.name HAVING COUNT(*) > 1;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT customer_id, full_name, email FROM customers;",
      "SELECT customer_id, purchase_history FROM customers;",
      "SELECT * FROM addresses;",
      "SELECT address_id, customer_id, street_address, city, state, zip_code FROM addresses;",
      "SELECT * FROM orders;",
      "SELECT order_id, customer_id, order_date FROM orders;",
      "SELECT order_id, total_amount, payment_status FROM orders;",
      "SELECT * FROM products;",
      "SELECT product_id, product_name, price FROM products;",
      "SELECT product_id, product_name, description, price FROM products;",
      "SELECT count(*) AS total_customers FROM customers;",
      "SELECT avg(total_amount) AS average_amount FROM orders;",
      "SELECT sum(price) AS total_price FROM products;",
      "SELECT distinct city FROM addresses;",
      "SELECT customer_id, sum(total_amount) AS total_spent FROM orders GROUP BY customer_id;",
      "SELECT product_name, count(*) AS total_orders FROM orders JOIN products ON orders.customer_id = products.product_id GROUP BY product_name;",
      "SELECT * FROM customers WHERE email IS NOT NULL;",
      "SELECT * FROM orders WHERE payment_status = 'Paid';",
      "SELECT full_name, count(*) AS total_orders FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY full_name;",
      "SELECT * FROM customers;",
      "SELECT full_name, email FROM customers WHERE phone_number IS NOT NULL;",
      "SELECT customer_id, full_name, purchase_history FROM customers WHERE LENGTH(full_name) > 10;",
      "SELECT * FROM addresses WHERE city = 'New York' AND state = 'NY';",
      "SELECT order_id, order_date, total_amount FROM orders WHERE customer_id = 1001;",
      "SELECT product_id, product_name, price FROM products WHERE price >= 50.00;",
      "SELECT customer_id, full_name, email FROM customers JOIN addresses ON customers.customer_id = addresses.customer_id;",
      "SELECT customer_id, full_name, total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;",
      "SELECT order_id, product_name, price FROM orders JOIN products ON orders.order_id = products.product_id;",
      "SELECT customer_id, full_name, city, state, total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id JOIN addresses ON customers.customer_id = addresses.customer_id;",
      "SELECT c.full_name, a.street_address, o.total_amount FROM customers c LEFT JOIN addresses a ON c.customer_id = a.customer_id JOIN orders o ON c.customer_id = o.customer_id;",
      "SELECT * FROM customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM orders);",
      "SELECT customer_id, AVG(total_amount) AS avg_amount FROM orders GROUP BY customer_id HAVING AVG(total_amount) > 100;",
      "SELECT customer_id, COUNT(order_id) AS order_count FROM orders GROUP BY customer_id ORDER BY order_count DESC;",
      "SELECT customer_id, SUM(total_amount) AS total_spent FROM orders GROUP BY customer_id;",
      "SELECT customer_id, MAX(total_amount) AS max_spent, MIN(total_amount) AS min_spent FROM orders GROUP BY customer_id;",
      "SELECT customer_id, purchase_history->'$.orders' AS orders FROM customers WHERE JSON_LENGTH(purchase_history, '$.orders') > 0;",
      "SELECT customer_id, purchase_history->'$.last_order' AS last_order_date FROM customers WHERE JSON_EXISTS(purchase_history, '$.last_order');",
      "SELECT customer_id, full_name, total_amount FROM customers WHERE EXISTS (SELECT * FROM orders WHERE orders.customer_id = customers.customer_id);",
      "SELECT customer_id, full_name, AVG(price) AS avg_price FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.product_id = products.product_id GROUP BY customer_id HAVING avg_price > 50;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM customers;",
      "SELECT first_name, last_name, email FROM customers;",
      "SELECT customer_id, first_name, phone_number FROM customers;",
      "SELECT * FROM purchases;",
      "SELECT product_name, quantity, price FROM purchases;",
      "SELECT sum(price) as total_price FROM purchases;",
      "SELECT * FROM addresses;",
      "SELECT city, state, zipcode FROM addresses;",
      "SELECT * FROM payments;",
      "SELECT payment_type, amount, payment_date FROM payments;",
      "SELECT customer_id, payment_type FROM payments;",
      "SELECT * FROM customer_preferences;",
      "SELECT preference_key, preference_value FROM customer_preferences;",
      "SELECT * FROM customers INNER JOIN addresses ON customers.customer_id = addresses.customer_id;",
      "SELECT customers.first_name, addresses.city FROM customers INNER JOIN addresses ON customers.customer_id = addresses.customer_id;",
      "SELECT * FROM purchases INNER JOIN customers ON purchases.customer_id = customers.customer_id;",
      "SELECT purchases.product_name, customers.first_name FROM purchases INNER JOIN customers ON purchases.customer_id = customers.customer_id;",
      "SELECT * FROM addresses INNER JOIN customers ON addresses.customer_id = customers.customer_id;",
      "SELECT addresses.city, customers.first_name FROM addresses INNER JOIN customers ON addresses.customer_id = customers.customer_id;",
      "SELECT * FROM payments INNER JOIN customers ON payments.customer_id = customers.customer_id;",
      "SELECT payments.amount, customers.first_name FROM payments INNER JOIN customers ON payments.customer_id = customers.customer_id;",
      "SELECT * FROM customers WHERE customer_id = 1;",
      "SELECT first_name, last_name FROM customers WHERE last_name LIKE 'S%';",
      "SELECT product_name, quantity FROM purchases WHERE price > 50;",
      "SELECT * FROM addresses INNER JOIN customers ON addresses.customer_id = customers.customer_id;",
      "SELECT customer_id, payment_type FROM payments WHERE amount >= 100;",
      "SELECT * FROM customer_preferences WHERE preference_key = 'language';",
      "SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM purchases WHERE price >= 100);",
      "SELECT customer_id, street_name, city FROM addresses WHERE city = 'New York' AND state = 'NY';",
      "SELECT * FROM purchases WHERE quantity BETWEEN 2 AND 5;",
      "SELECT customer_id, SUM(amount) AS total_payments FROM payments GROUP BY customer_id;",
      "SELECT customer_id, COUNT(purchase_id) AS total_purchases FROM purchases GROUP BY customer_id HAVING total_purchases > 3;",
      "SELECT first_name, last_name, email FROM customers WHERE LENGTH(email) > 10;",
      "SELECT customer_id, AVG(price) AS avg_price FROM purchases GROUP BY customer_id;",
      "SELECT customer_id, SUM(quantity * price) AS total_spent FROM purchases GROUP BY customer_id;",
      "SELECT * FROM customers WHERE customer_id = (SELECT customer_id FROM payments ORDER BY payment_date DESC LIMIT 1);",
      "SELECT customer_id, preference_value FROM customer_preferences WHERE preference_key = 'theme';",
      "SELECT * FROM payments WHERE DATE(payment_date) = '2022-01-01';",
      "SELECT customer_id, MAX(amount) AS max_payment FROM payments GROUP BY customer_id;",
      "SELECT customer_id, COUNT(address_id) AS num_addresses FROM addresses GROUP BY customer_id HAVING num_addresses > 1;",
      "SELECT * FROM purchases WHERE price = (SELECT MAX(price) FROM purchases);"
    ]
  }
]