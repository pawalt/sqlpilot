[
  {
    "statements": [
      "SELECT * FROM mobile_paymentsystem;",
      "SELECT payment_id, user_id, amount FROM mobile_paymentsystem;",
      "SELECT user_id, amount, payment_date FROM mobile_paymentsystem;",
      "SELECT * FROM mobile_paymentsystem WHERE user_id = 123;",
      "SELECT * FROM mobile_paymentsystem WHERE amount > 100;",
      "SELECT * FROM mobile_paymentsystem WHERE payment_date >= '2022-01-01';",
      "SELECT user_id, SUM(amount) FROM mobile_paymentsystem GROUP BY user_id;",
      "SELECT COUNT(*) FROM mobile_paymentsystem;",
      "SELECT AVG(amount) FROM mobile_paymentsystem;",
      "SELECT MAX(amount) FROM mobile_paymentsystem;",
      "SELECT payment_id, user_id, amount, payment_date FROM mobile_paymentsystem ORDER BY payment_date DESC;",
      "SELECT * FROM mobile_paymentsystem LIMIT 5;",
      "SELECT * FROM mobile_paymentsystem OFFSET 3;",
      "SELECT * FROM mobile_paymentsystem WHERE user_id = 456 AND amount > 50;",
      "SELECT * FROM mobile_paymentsystem WHERE user_id IN (101, 102, 103);",
      "SELECT * FROM mobile_paymentsystem WHERE payment_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT COUNT(DISTINCT user_id) FROM mobile_paymentsystem;",
      "SELECT user_id, ROUND(amount, 2) FROM mobile_paymentsystem;",
      "SELECT * FROM mobile_paymentsystem WHERE user_id = 789 OR user_id = 890;",
      "SELECT * FROM mobile_paymentsystem WHERE amount = (SELECT MAX(amount) FROM mobile_paymentsystem);"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users WHERE user_id = 1",
      "SELECT username, email FROM users WHERE user_id = 2",
      "SELECT * FROM users WHERE email = 'test@example.com'",
      "SELECT user_id, phone_number FROM users WHERE username = 'john.doe'",
      "SELECT * FROM users WHERE phone_number = '1234567890'",
      "SELECT username FROM users WHERE email LIKE '%@example.com'",
      "SELECT * FROM users ORDER BY username ASC",
      "SELECT * FROM users WHERE username LIKE 'J%'",
      "SELECT user_id, email FROM users WHERE phone_number IS NOT NULL",
      "SELECT * FROM users WHERE email LIKE '%@gmail.com' AND phone_number IS NOT NULL",
      "SELECT * FROM users WHERE user_id IN (1,2,3)",
      "SELECT COUNT(*) FROM users",
      "SELECT DISTINCT email FROM users",
      "SELECT * FROM users WHERE phone_number LIKE '1%'",
      "SELECT user_id, username FROM users WHERE username = 'alice' OR username = 'bob'",
      "SELECT * FROM users WHERE username IN ('alice','bob')",
      "SELECT user_id, email FROM users WHERE email LIKE '%@example.com'",
      "SELECT * FROM users WHERE user_id = (SELECT MAX(user_id) FROM users)",
      "SELECT * FROM users WHERE email NOT LIKE '%@yahoo.com'",
      "SELECT COUNT(DISTINCT phone_number) FROM users"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users;",
      "SELECT id, username FROM users WHERE id = 1;",
      "SELECT id, username, email FROM users WHERE balance > 1000;",
      "SELECT * FROM transactions;",
      "SELECT * FROM transactions WHERE amount > 500;",
      "SELECT id, user_id, amount FROM transactions WHERE user_id = 1;",
      "SELECT id, user_id, amount, transaction_date FROM transactions WHERE DATE(transaction_date) = '2022-01-01';",
      "SELECT * FROM payments;",
      "SELECT * FROM payments WHERE amount < 0;",
      "SELECT id, payment_method FROM payments WHERE status = 'completed';",
      "SELECT users.id, users.username, transactions.amount FROM users JOIN transactions ON users.id = transactions.user_id;",
      "SELECT users.id, users.username, transactions.amount FROM users LEFT JOIN transactions ON users.id = transactions.user_id;",
      "SELECT users.id, users.username, SUM(transactions.amount) AS total_amount FROM users JOIN transactions ON users.id = transactions.user_id GROUP BY users.id, users.username;",
      "SELECT users.id, users.username, COUNT(*) AS transaction_count FROM users JOIN transactions ON users.id = transactions.user_id GROUP BY users.id, users.username;",
      "SELECT users.id, users.username, MAX(transactions.amount) AS max_transaction FROM users JOIN transactions ON users.id = transactions.user_id GROUP BY users.id, users.username;",
      "SELECT users.id, users.username, AVG(transactions.amount) AS avg_transaction FROM users JOIN transactions ON users.id = transactions.user_id GROUP BY users.id, users.username;",
      "SELECT users.username, SUM(payments.amount) AS total_payments FROM users JOIN transactions ON users.id = transactions.user_id JOIN payments ON transactions.id = payments.transaction_id GROUP BY users.id, users.username;",
      "SELECT users.username, AVG(payments.amount) AS avg_payment FROM users JOIN transactions ON users.id = transactions.user_id JOIN payments ON transactions.id = payments.transaction_id GROUP BY users.id, users.username;",
      "SELECT users.username, payments.payment_method, COUNT(*) AS payment_count FROM users JOIN transactions ON users.id = transactions.user_id JOIN payments ON transactions.id = payments.transaction_id GROUP BY users.id, users.username, payments.payment_method;",
      "SELECT users.username, payments.payment_method, SUM(payments.amount) AS total_amount FROM users JOIN transactions ON users.id = transactions.user_id JOIN payments ON transactions.id = payments.transaction_id GROUP BY users.id, users.username, payments.payment_method;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users;",
      "SELECT user_id, username FROM users WHERE user_id = 1;",
      "SELECT username, mobile_number FROM users WHERE username LIKE 'A%';",
      "SELECT * FROM wallets;",
      "SELECT user_id, balance FROM wallets WHERE balance > 1000;",
      "SELECT transaction_id, from_wallet_id, to_wallet_id, amount FROM transactions WHERE amount BETWEEN 100 AND 500;",
      "SELECT * FROM payment_methods;",
      "SELECT user_id, method_name FROM payment_methods WHERE method_name = 'PayPal';",
      "SELECT users.username, wallets.balance FROM users INNER JOIN wallets ON users.user_id = wallets.user_id;",
      "SELECT users.username, payment_methods.method_name FROM users INNER JOIN payment_methods ON users.user_id = payment_methods.user_id;",
      "SELECT u.username, w.balance FROM users u INNER JOIN wallets w ON u.user_id = w.user_id;",
      "SELECT t.transaction_id, w.balance FROM transactions t INNER JOIN wallets w ON t.from_wallet_id = w.wallet_id;",
      "SELECT t.transaction_id, u.username, pm.method_name FROM transactions t INNER JOIN users u ON t.from_wallet_id = u.user_id INNER JOIN payment_methods pm ON u.user_id = pm.user_id;",
      "SELECT * FROM users ORDER BY username ASC;",
      "SELECT * FROM wallets ORDER BY balance DESC;",
      "SELECT user_id, COUNT(*) as wallet_count FROM wallets GROUP BY user_id;",
      "SELECT user_id, SUM(balance) as total_balance FROM wallets GROUP BY user_id;",
      "SELECT user_id, AVG(balance) as average_balance FROM wallets GROUP BY user_id;",
      "SELECT user_id, MAX(balance) as max_balance FROM wallets GROUP BY user_id;",
      "SELECT user_id, MIN(balance) as min_balance FROM wallets GROUP BY user_id;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Users;",
      "SELECT username, email FROM Users;",
      "SELECT user_id, phone_number FROM Users WHERE created_at > '2022-01-01';",
      "SELECT * FROM Wallets;",
      "SELECT user_id, balance FROM Wallets WHERE balance > 100.00;",
      "SELECT * FROM Transactions;",
      "SELECT sender_wallet_id, receiver_wallet_id, amount FROM Transactions WHERE transaction_date = '2022-02-15';",
      "SELECT * FROM Payments;",
      "SELECT transaction_id, status FROM Payments WHERE payment_date = '2022-02-28';",
      "SELECT * FROM Cards;",
      "SELECT user_id, card_number, expiry_date, card_type FROM Cards WHERE card_type = 'Credit';",
      "SELECT user_id, card_number FROM Cards WHERE expiry_date > '2022-06-01';",
      "SELECT u.username, c.card_number FROM Users u INNER JOIN Cards c ON u.user_id = c.user_id;",
      "SELECT w.user_id, t.amount FROM Wallets w INNER JOIN Transactions t ON w.wallet_id = t.sender_wallet_id;",
      "SELECT u.username, p.status FROM Users u INNER JOIN Cards c ON u.user_id = c.user_id INNER JOIN Payments p ON c.user_id = p.transaction_id;",
      "SELECT u.username, t.amount FROM Users u INNER JOIN Wallets w ON u.user_id = w.user_id INNER JOIN Transactions t ON w.wallet_id = t.receiver_wallet_id;",
      "SELECT t.transaction_id, p.status FROM Transactions t INNER JOIN Payments p ON t.transaction_id = p.transaction_id;",
      "SELECT u.username, w.balance, t.amount FROM Users u INNER JOIN Wallets w ON u.user_id = w.user_id INNER JOIN Transactions t ON w.wallet_id = t.receiver_wallet_id WHERE t.amount > 100.00;",
      "SELECT t.transaction_id, u.username, p.payment_date FROM Transactions t INNER JOIN Users u ON t.sender_wallet_id = u.user_id INNER JOIN Payments p ON t.transaction_id = p.transaction_id WHERE p.status = 'Success';",
      "SELECT u.username, w.balance, t.amount, p.status FROM Users u INNER JOIN Wallets w ON u.user_id = w.user_id INNER JOIN Transactions t ON w.wallet_id = t.receiver_wallet_id INNER JOIN Payments p ON t.transaction_id = p.transaction_id WHERE p.status = 'Success';"
    ]
  }
]