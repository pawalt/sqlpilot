[
  {
    "statements": [
      "SELECT * FROM fintech_transactions LIMIT 10",
      "SELECT transaction_id, amount, transaction_date FROM fintech_transactions WHERE amount > 1000",
      "SELECT * FROM fintech_transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-06-30'",
      "SELECT DISTINCT(description) FROM fintech_transactions",
      "SELECT AVG(amount) FROM fintech_transactions",
      "SELECT MAX(amount) FROM fintech_transactions",
      "SELECT MIN(amount) FROM fintech_transactions",
      "SELECT COUNT(*) FROM fintech_transactions",
      "SELECT transaction_id, SUM(amount) FROM fintech_transactions GROUP BY transaction_id",
      "SELECT description, COUNT(*) FROM fintech_transactions GROUP BY description",
      "SELECT * FROM fintech_transactions ORDER BY transaction_date DESC",
      "SELECT * FROM fintech_transactions WHERE amount < 500 ORDER BY amount ASC",
      "SELECT * FROM fintech_transactions WHERE description LIKE '%payment%'",
      "SELECT * FROM fintech_transactions WHERE description LIKE '%debit%'",
      "SELECT * FROM fintech_transactions WHERE transaction_date = '2022-12-31'",
      "SELECT * FROM fintech_transactions WHERE amount > 5000 AND transaction_date = '2022-06-30'",
      "SELECT * FROM fintech_transactions WHERE amount > 2000 AND description LIKE '%transfer%'",
      "SELECT * FROM fintech_transactions WHERE amount = (SELECT MAX(amount) FROM fintech_transactions)",
      "SELECT * FROM fintech_transactions WHERE (amount, transaction_date) IN (SELECT MIN(amount), '2022-01-01' FROM fintech_transactions)"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users;",
      "SELECT user_id, username FROM users WHERE user_id = 1;",
      "SELECT username, email FROM users WHERE user_id = 2;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, user_id, amount FROM transactions WHERE user_id = 3;",
      "SELECT amount, transaction_type FROM transactions WHERE user_id = 4;",
      "SELECT * FROM users JOIN transactions ON users.user_id = transactions.user_id;",
      "SELECT users.username, transactions.amount FROM users JOIN transactions ON users.user_id = transactions.user_id;",
      "SELECT * FROM users WHERE username LIKE 'A%';",
      "SELECT * FROM transactions WHERE amount > 100;",
      "SELECT * FROM users ORDER BY username ASC;",
      "SELECT * FROM transactions ORDER BY amount DESC;",
      "SELECT COUNT(*) FROM users;",
      "SELECT COUNT(*) FROM transactions;",
      "SELECT AVG(amount) FROM transactions;",
      "SELECT SUM(amount) FROM transactions;",
      "SELECT MAX(amount) FROM transactions;",
      "SELECT MIN(amount) FROM transactions;",
      "SELECT users.username, COUNT(transactions.transaction_id) FROM users LEFT JOIN transactions ON users.user_id = transactions.user_id GROUP BY users.username;",
      "SELECT username, MAX(amount) FROM users JOIN transactions ON users.user_id = transactions.user_id GROUP BY username;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users;",
      "SELECT user_id, username, email FROM users;",
      "SELECT user_id, email FROM users WHERE username = 'Alice';",
      "SELECT account_id, account_type, balance FROM accounts;",
      "SELECT user_id, account_id, account_type, balance FROM users JOIN accounts ON users.user_id = accounts.user_id;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, account_id, amount FROM transactions WHERE transaction_type = 'deposit';",
      "SELECT account_id, SUM(amount) AS total_amount FROM transactions GROUP BY account_id;",
      "SELECT user_id, username, SUM(balance) AS total_balance FROM users JOIN accounts ON users.user_id = accounts.user_id GROUP BY user_id;",
      "SELECT user_id, username, account_type, balance, transaction_type FROM users JOIN accounts ON users.user_id = accounts.user_id JOIN transactions ON accounts.account_id = transactions.account_id;",
      "SELECT user_id, username, transaction_date FROM users JOIN accounts ON users.user_id = accounts.user_id JOIN transactions ON accounts.account_id = transactions.account_id WHERE transaction_type = 'withdrawal';",
      "SELECT * FROM users WHERE user_id IN (SELECT user_id FROM accounts WHERE balance > 1000);",
      "SELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
      "SELECT username, account_type, SUM(amount) AS total_amount FROM users JOIN accounts ON users.user_id = accounts.user_id JOIN transactions ON accounts.account_id = transactions.account_id GROUP BY username, account_type;",
      "SELECT user_id, username, email FROM users WHERE email LIKE '%@gmail.com';",
      "SELECT user_id, username, account_type, balance FROM users JOIN accounts ON users.user_id = accounts.user_id WHERE balance < 0;",
      "SELECT * FROM accounts ORDER BY balance DESC;",
      "SELECT user_id, username, account_type, balance FROM users JOIN accounts ON users.user_id = accounts.user_id ORDER BY user_id ASC, balance DESC;",
      "SELECT MAX(balance) AS max_balance FROM accounts;",
      "SELECT MIN(balance) AS min_balance FROM accounts;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM users;",
      "SELECT user_id, username FROM users WHERE user_id = 1;",
      "SELECT username, email FROM users WHERE user_id = 2;",
      "SELECT * FROM accounts;",
      "SELECT account_id, user_id, account_type FROM accounts WHERE account_id = 1;",
      "SELECT account_id, balance FROM accounts WHERE user_id = 2;",
      "SELECT * FROM transactions;",
      "SELECT transaction_id, account_id, amount FROM transactions WHERE account_id = 1;",
      "SELECT transaction_id, transaction_type FROM transactions WHERE account_id = 2;",
      "SELECT * FROM investments;",
      "SELECT investment_id, account_id, investment_type FROM investments WHERE account_id = 1;",
      "SELECT investment_id, amount, investment_date FROM investments WHERE account_id = 2;",
      "SELECT users.username, accounts.balance FROM users INNER JOIN accounts ON users.user_id = accounts.user_id;",
      "SELECT accounts.account_type, transactions.amount FROM accounts INNER JOIN transactions ON accounts.account_id = transactions.account_id;",
      "SELECT transactions.transaction_id, investments.investment_type FROM transactions INNER JOIN investments ON transactions.account_id = investments.account_id;",
      "SELECT users.username, transactions.amount, investments.amount FROM users INNER JOIN transactions ON users.user_id = transactions.account_id INNER JOIN investments ON transactions.account_id = investments.account_id;",
      "SELECT * FROM users ORDER BY username ASC;",
      "SELECT * FROM accounts ORDER BY balance DESC;",
      "SELECT * FROM transactions ORDER BY transaction_date ASC;",
      "SELECT * FROM investments ORDER BY investment_date DESC;"
    ]
  },
  {
    "statements": [
      "SELECT * FROM Users;",
      "SELECT username, email FROM Users WHERE user_id = 1;",
      "SELECT * FROM Accounts;",
      "SELECT account_id, account_type, balance FROM Accounts WHERE user_id = 1;",
      "SELECT * FROM Transactions;",
      "SELECT transaction_id, amount, transaction_date FROM Transactions WHERE account_id = 1;",
      "SELECT * FROM Investments;",
      "SELECT investment_id, investment_type, amount, start_date FROM Investments WHERE account_id = 1;",
      "SELECT * FROM Loans;",
      "SELECT loan_id, user_id, loan_amount, interest_rate, loan_status FROM Loans WHERE user_id = 1;",
      "SELECT u.username, a.account_id, t.transaction_id, l.loan_id FROM Users u JOIN Accounts a ON u.user_id = a.user_id JOIN Transactions t ON a.account_id = t.account_id JOIN Loans l ON u.user_id = l.user_id;",
      "SELECT u.username, a.account_id, l.loan_amount, i.investment_type FROM Users u JOIN Accounts a ON u.user_id = a.user_id JOIN Loans l ON u.user_id = l.user_id JOIN Investments i ON a.account_id = i.account_id;",
      "SELECT user_id, COUNT(account_id) AS num_accounts FROM Accounts GROUP BY user_id HAVING COUNT(account_id) > 1;",
      "SELECT * FROM Transactions ORDER BY transaction_date DESC;",
      "SELECT AVG(amount) AS avg_amount FROM Transactions WHERE account_id = 1;",
      "SELECT u.username, SUM(l.loan_amount) AS total_loan_amount FROM Users u JOIN Loans l ON u.user_id = l.user_id GROUP BY u.username;",
      "SELECT user_id, MAX(loan_amount) AS max_loan_amount FROM Loans GROUP BY user_id;",
      "SELECT DISTINCT account_type FROM Accounts;",
      "SELECT user_id, CASE WHEN loan_amount > 1000 THEN 'High Loan' ELSE 'Low Loan' END AS loan_category FROM Loans;",
      "SELECT user_id, SUM(amount) AS total_amount FROM Transactions WHERE account_id IN (SELECT account_id FROM Accounts WHERE user_id = 1);",
      "SELECT * FROM Loans WHERE interest_rate > 5;"
    ]
  }
]