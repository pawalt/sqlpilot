<t>CREATE TABLE User (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT ON User TO public</stat><divider><t>CREATE TABLE User (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select on user to public</stat><divider><t>CREATE TABLE User (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT INSERT ON User TO staff</stat><divider><t>CREATE TABLE User (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant insert on user to staff</stat><divider><t>CREATE TABLE User (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT UPDATE(username) ON User TO admin</stat><divider><t>CREATE TABLE User (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant update(username) on user to admin</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON users TO role_name</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select on users to role_name</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON users TO role_name</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select on users to role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON users TO role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select on users to role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON users TO role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select on users to role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON users TO role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select on users to role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON users TO role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant select on users to role_name</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT INSERT, UPDATE, DELETE ON roles TO role_name</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant insert, update, delete on roles to role_name</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT INSERT, UPDATE, DELETE ON roles TO role_name</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant insert, update, delete on roles to role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT INSERT, UPDATE, DELETE ON roles TO role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant insert, update, delete on roles to role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT INSERT, UPDATE, DELETE ON roles TO role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant insert, update, delete on roles to role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT INSERT, UPDATE, DELETE ON roles TO role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant insert, update, delete on roles to role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT INSERT, UPDATE, DELETE ON roles TO role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant insert, update, delete on roles to role_name</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL ON permissions TO role_name</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all on permissions to role_name</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL ON permissions TO role_name</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all on permissions to role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL ON permissions TO role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant all on permissions to role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL ON permissions TO role_name</stat><divider><t>CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all on permissions to role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT ALL ON permissions TO role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant all on permissions to role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>GRANT ALL ON permissions TO role_name</stat><divider><t>CREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL)</t><stat>grant all on permissions to role_name</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO user_role1</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update, delete on users to user_role1</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON Roles TO user_role2</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select, insert, update on roles to user_role2</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)</t><stat>grant select on permissions to user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT ON Permissions TO user_role3</stat><divider><t>CREATE TABLE UserRoles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id))

CREATE TABLE Permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR(50) NOT NULL)

CREATE TABLE Roles (role_id INT PRIMARY KEY, role_name VARCHAR(50) NOT NULL)

CREATE TABLE Users (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select on permissions to user_role3</stat>