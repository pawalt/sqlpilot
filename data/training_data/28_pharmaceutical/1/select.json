[
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_name FROM medications WHERE expiration_date > '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE batch_number LIKE 'ABC%';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name FROM medications WHERE expiration_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name, expiration_date FROM medications WHERE id = 5;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE expiration_date BETWEEN '2023-01-01' AND '2023-12-31';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT medication_name FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications ORDER BY expiration_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(id) FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(batch_number) FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE id IN (2, 4, 6);",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(expiration_date) FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE medication_name = 'Aspirin';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name FROM medications WHERE expiration_date > '2023-06-30';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE batch_number IN ('XYZ123', 'DEF456');",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, COUNT(*) FROM medications GROUP BY id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT batch_number) FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_name, expiration_date FROM medications WHERE id = 3;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE expiration_date > CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name FROM medications WHERE expiration_date > '2023-12-31';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_name, expiration_date FROM medications WHERE batch_number LIKE '%ABC%';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name, expiration_date FROM medications WHERE expiration_date > '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name FROM medications WHERE expiration_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_medications FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_name, COUNT(*) AS total_batches FROM medications GROUP BY medication_name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications ORDER BY expiration_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE id IN (1, 5, 10);",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT medication_name FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(expiration_date) AS latest_expiration_date FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(expiration_date) AS earliest_expiration_date FROM medications WHERE medication_name = 'Paracetamol';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name, expiration_date FROM medications WHERE batch_number IN ('001', '002', '003');",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(DATEDIFF(CURDATE(), expiration_date)) AS avg_days_to_expire FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name, DATEDIFF(expiration_date, CURDATE()) AS days_to_expire FROM medications WHERE DATEDIFF(expiration_date, CURDATE()) <= 30;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_name, COUNT(*) AS total_expired_medications FROM medications WHERE expiration_date < CURDATE();",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name, expiration_date FROM medications WHERE medication_name LIKE '%in%';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name, expiration_date FROM medications WHERE medication_name = 'Aspirin' LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name, expiration_date FROM medications WHERE YEAR(expiration_date) = 2023;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name, EXTRACT(MONTH FROM expiration_date) AS expiration_month FROM medications ORDER BY expiration_month;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    medication_name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, medication_name, expiration_date FROM medications WHERE id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT * FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT name, expiration_date FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE expiration_date > '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT id, name FROM medications WHERE name LIKE 'Aspirin%';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT inventory_id, quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE quantity > 100;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT medications.name, inventory.quantity FROM medications JOIN inventory ON medications.id = inventory.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT medications.name, inventory.expiry_date FROM medications JOIN inventory ON medications.id = inventory.medication_id WHERE inventory.expiry_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT id, name, batch_number FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT * FROM medications ORDER BY expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT * FROM medications ORDER BY expiration_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT medications.name, inventory.quantity FROM medications INNER JOIN inventory ON medications.id = inventory.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE id = 5;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT medications.name, COUNT(*) AS total FROM medications JOIN inventory ON medications.id = inventory.medication_id GROUP BY medications.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT medications.name, SUM(inventory.quantity) AS total_quantity FROM medications JOIN inventory ON medications.id = inventory.medication_id GROUP BY medications.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT medications.name, MAX(inventory.quantity) AS max_quantity FROM medications JOIN inventory ON medications.id = inventory.medication_id GROUP BY medications.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT medications.name, AVG(inventory.quantity) AS avg_quantity FROM medications JOIN inventory ON medications.id = inventory.medication_id GROUP BY medications.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT name FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT * FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT id, name, expiration_date FROM medications WHERE expiration_date > CURDATE();",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE name LIKE '%aspirin%';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name AS medication_name, i.quantity AS available_quantity FROM medications m JOIN inventory i ON m.id = i.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT SUM(quantity) AS total_quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, i.quantity, i.expiry_date FROM medications m JOIN inventory i ON m.id = i.medication_id WHERE i.expiry_date < CURDATE();",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, i.quantity, i.expiry_date FROM medications m JOIN inventory i ON m.id = i.medication_id ORDER BY i.expiry_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, COUNT(i.inventory_id) AS total_entries FROM medications m JOIN inventory i ON m.id = i.medication_id GROUP BY m.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, MAX(i.quantity) AS max_quantity FROM medications m JOIN inventory i ON m.id = i.medication_id GROUP BY m.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name AS medication_name, count(*) AS total_entries FROM medications m, inventory i WHERE m.id = i.medication_id GROUP BY m.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, i.quantity FROM medications m LEFT JOIN inventory i ON m.id = i.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name AS medication_name, COUNT(*) AS total_entries FROM medications m JOIN inventory i ON m.id = i.medication_id WHERE i.expiry_date > CURDATE() GROUP BY m.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, IFNULL(i.quantity, 0) AS available_quantity FROM medications m LEFT JOIN inventory i ON m.id = i.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name AS medication_name, DATEDIFF(expiration_date, CURDATE()) AS days_until_expiration FROM medications m;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, i.quantity, DATEDIFF(i.expiry_date, CURDATE()) AS days_until_expiry FROM medications m JOIN inventory i ON m.id = i.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, i.quantity, IF(DATEDIFF(i.expiry_date, CURDATE()) < 30, 'Expires soon', 'Expires late') AS expiry_status FROM medications m JOIN inventory i ON m.id = i.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, i.quantity, i.expiry_date, TIMESTAMPDIFF(MONTH, CURDATE(), i.expiry_date) AS months_until_expiry FROM medications m JOIN inventory i ON m.id = i.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, AVG(i.quantity) AS avg_quantity FROM medications m JOIN inventory i ON m.id = i.medication_id GROUP BY m.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, COUNT(*) AS total_entries, SUM(i.quantity) AS total_quantity FROM medications m JOIN inventory i ON m.id = i.medication_id GROUP BY m.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    expiry_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\n\n### STATEMENT\n\nSELECT m.name, COUNT(*) AS total_entries, SUM(i.quantity) AS total_quantity FROM medications m LEFT JOIN inventory i ON m.id = i.medication_id GROUP BY m.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT * FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT name, expiration_date FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT batch_number FROM medications WHERE expiration_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT * FROM batches;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT production_date FROM batches WHERE quantity > 100;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT quantity FROM batches WHERE production_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT quantity FROM inventory WHERE batch_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT batch_id, quantity FROM inventory WHERE quantity > 50;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, b.quantity FROM medications m JOIN batches b ON m.id = b.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, i.quantity FROM medications m JOIN batches b ON m.id = b.medication_id JOIN inventory i ON b.batch_id = i.batch_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name AS medication_name, b.quantity AS batch_quantity FROM medications m JOIN batches b ON m.id = b.medication_id WHERE b.quantity > 50;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT i.inventory_id, m.name AS medication_name, b.quantity AS batch_quantity FROM medications m JOIN batches b ON m.id = b.medication_id JOIN inventory i ON b.batch_id = i.batch_id WHERE i.quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_medications FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT AVG(quantity) AS avg_batch_quantity FROM batches;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT MIN(quantity) AS min_batch_quantity, MAX(quantity) AS max_batch_quantity FROM batches;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT name FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT SUM(quantity) AS total_quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, COUNT(i.inventory_id) AS total_inventory FROM medications m JOIN batches b ON m.id = b.medication_id JOIN inventory i ON b.batch_id = i.batch_id GROUP BY m.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, SUM(i.quantity) AS total_quantity FROM medications m JOIN batches b ON m.id = b.medication_id JOIN inventory i ON b.batch_id = i.batch_id GROUP BY m.name HAVING SUM(i.quantity) > 100;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, DATE_FORMAT(b.production_date, '%Y-%m-%d') AS formatted_date FROM medications m JOIN batches b ON m.id = b.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT * FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT * FROM batches;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, b.quantity FROM medications m JOIN batches b ON m.id = b.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, i.quantity FROM medications m JOIN batches b ON m.id = b.medication_id JOIN inventory i ON b.batch_id = i.batch_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, b.quantity, b.production_date FROM medications m JOIN batches b ON m.id = b.medication_id WHERE b.production_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, i.quantity, b.production_date FROM medications m JOIN batches b ON m.id = b.medication_id JOIN inventory i ON b.batch_id = i.batch_id WHERE i.quantity > 100;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_medications FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT SUM(quantity) AS total_quantity FROM batches;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT MAX(production_date) AS latest_production_date FROM batches;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, SUM(i.quantity) AS total_inventory FROM medications m JOIN batches b ON m.id = b.medication_id JOIN inventory i ON b.batch_id = i.batch_id GROUP BY m.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, COUNT(*) AS total_batches FROM medications m JOIN batches b ON m.id = b.medication_id GROUP BY m.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, AVG(b.quantity) AS average_quantity FROM medications m JOIN batches b ON m.id = b.medication_id GROUP BY m.name;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, b.batch_id, b.quantity FROM medications m JOIN batches b ON m.id = b.medication_id ORDER BY b.quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, b.quantity, i.quantity FROM medications m JOIN batches b ON m.id = b.medication_id JOIN inventory i ON b.batch_id = i.batch_id WHERE i.quantity < b.quantity;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, b.quantity, b.production_date FROM medications m JOIN batches b ON m.id = b.medication_id WHERE b.production_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, b.quantity, b.production_date FROM medications m JOIN batches b ON m.id = b.medication_id WHERE b.production_date < '2022-01-01' OR b.production_date > '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, i.quantity FROM medications m LEFT JOIN inventory i ON m.id = i.batch_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, b.quantity FROM medications m JOIN batches b ON m.id = b.medication_id WHERE b.quantity < (SELECT AVG(quantity) FROM batches);",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    batch_number VARCHAR(50) NOT NULL,\n    expiration_date DATE NOT NULL\n);\nCREATE TABLE batches (\n    batch_id INT PRIMARY KEY,\n    medication_id INT NOT NULL,\n    quantity INT NOT NULL,\n    production_date DATE NOT NULL,\n    FOREIGN KEY (medication_id) REFERENCES medications(id)\n);\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    batch_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (batch_id) REFERENCES batches(batch_id)\n);\n\n### STATEMENT\n\nSELECT m.name, b.production_date FROM medications m JOIN batches b ON m.id = b.medication_id GROUP BY m.name HAVING MAX(b.production_date) > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT name, expiration_date FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM medication_inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT medication_id, quantity FROM medication_inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM medication_batches;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT medication_id, expiration_date FROM medication_batches;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM locations;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT name, address FROM locations;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT medications.name, medication_batches.batch_number FROM medications JOIN medication_batches ON medications.id = medication_batches.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT medications.name, medication_batches.expiration_date FROM medications JOIN medication_batches ON medications.id = medication_batches.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT medications.name, medication_batches.batch_number, medication_batches.expiration_date FROM medications JOIN medication_batches ON medications.id = medication_batches.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT medications.name, medication_batches.batch_number, medication_batches.expiration_date, medication_batches.quantity FROM medications JOIN medication_batches ON medications.id = medication_batches.medication_id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT medications.name, medication_batches.expiration_date, medication_batches.quantity, locations.name AS location_name FROM medications JOIN medication_batches ON medications.id = medication_batches.medication_id JOIN locations ON locations.id = medication_batches.location;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT medications.name, medication_inventory.quantity, locations.name AS location_name FROM medications JOIN medication_inventory ON medications.id = medication_inventory.medication_id JOIN locations ON locations.id = medication_inventory.location;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT medications.name, medication_inventory.quantity, medication_batches.batch_number, locations.name AS location_name FROM medications JOIN medication_inventory ON medications.id = medication_inventory.medication_id JOIN medication_batches ON medications.id = medication_batches.medication_id JOIN locations ON locations.id = medication_inventory.location;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT locations.name, COUNT(medications.id) AS total_medications FROM locations LEFT JOIN medication_inventory ON locations.id = medication_inventory.location LEFT JOIN medications ON medications.id = medication_inventory.medication_id GROUP BY locations.id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT locations.name, SUM(medication_inventory.quantity) AS total_quantity FROM locations LEFT JOIN medication_inventory ON locations.id = medication_inventory.location GROUP BY locations.id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT medications.name, COUNT(medication_inventory.id) AS total_inventory_count FROM medications LEFT JOIN medication_inventory ON medications.id = medication_inventory.medication_id GROUP BY medications.id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT medications.name, MAX(medication_inventory.quantity) AS max_quantity FROM medications LEFT JOIN medication_inventory ON medications.id = medication_inventory.medication_id GROUP BY medications.id;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM medications",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT name, expiration_date FROM medications",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM medication_inventory WHERE quantity > 0",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT id, name FROM medications WHERE expiration_date > '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT m.name, mi.quantity FROM medications m JOIN medication_inventory mi ON m.id = mi.medication_id",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT m.name, mb.expiration_date, mb.quantity FROM medications m JOIN medication_batches mb ON m.id = mb.medication_id",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT m.name, mi.location FROM medications m JOIN medication_inventory mi ON m.id = mi.medication_id WHERE mi.quantity >= 10",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT m.name AS medication_name, mb.batch_number, mb.quantity FROM medications m JOIN medication_batches mb ON m.id = mb.medication_id ORDER BY mb.quantity DESC",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT DISTINCT location FROM medication_inventory",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT m.name, mi.quantity, l.name AS location_name FROM medications m JOIN medication_inventory mi ON m.id = mi.medication_id JOIN locations l ON mi.location = l.name",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT m.name, mb.batch_number, mb.expiration_date, l.address FROM medications m JOIN medication_batches mb ON m.id = mb.medication_id JOIN locations l ON l.id = 1",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT m.name, mi.quantity, l.address FROM medications m JOIN medication_inventory mi ON m.id = mi.medication_id JOIN locations l ON mi.location = l.name WHERE l.id = 2",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_medications FROM medications",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT AVG(quantity) AS average_quantity FROM medication_inventory",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT MAX(quantity) AS max_quantity, MIN(quantity) AS min_quantity FROM medication_inventory",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT l.name, COUNT(mi.quantity) AS total_quantity FROM locations l JOIN medication_inventory mi ON l.name = mi.location GROUP BY l.name",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT m.name, SUM(quantity) AS total_quantity FROM medications m JOIN medication_inventory mi ON m.id = mi.medication_id GROUP BY m.name",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT mb.batch_number, SUM(quantity) AS total_quantity FROM medication_batches mb JOIN medication_inventory mi ON mb.medication_id = mi.medication_id GROUP BY mb.batch_number HAVING total_quantity > 100",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT m.name, mi.quantity, mb.batch_number, mb.expiration_date FROM medications m JOIN medication_inventory mi ON m.id = mi.medication_id JOIN medication_batches mb ON m.id = mb.medication_id WHERE mi.quantity > 5 AND mb.expiration_date > '2023-06-30'",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT l.name AS location_name, COUNT(mi.quantity) AS total_quantity FROM locations l LEFT JOIN medication_inventory mi ON l.name = mi.location GROUP BY l.name",
  "### TABLEDATA\n\nCREATE TABLE medications (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    batch_number VARCHAR(50),\n    expiration_date DATE\n)\n\n\nCREATE TABLE medication_inventory (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    quantity INT,\n    location VARCHAR(100)\n)\n\n\nCREATE TABLE medication_batches (\n    id INT PRIMARY KEY,\n    medication_id INT,\n    batch_number VARCHAR(50),\n    expiration_date DATE,\n    quantity INT\n)\n\n\nCREATE TABLE locations (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT m.name, mi.quantity, mb.expiration_date, l.address FROM medications m JOIN medication_inventory mi ON m.id = mi.medication_id JOIN medication_batches mb ON m.id = mb.medication_id JOIN locations l ON l.id = 3",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_id, medication_name FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_id, medication_name, expiration_date FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM manufacturers;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT manufacturer_id, manufacturer_name FROM manufacturers;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT inventory_id, medication_id, batch_number, quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT order_id, medication_id, quantity, order_date FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_id, batch_number, expiration_date FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT manufacturer_id, manufacturer_name, location FROM manufacturers;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT inventory_id, medication_id, quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT order_id, medication_id, order_date FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, role FROM users;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_name, batch_number, expiration_date FROM medications;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT manufacturer_name, location FROM manufacturers;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_id, quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT order_id, quantity FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, role FROM users;",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications WHERE expiration_date > CURRENT_DATE",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT manufacturer_name, location FROM manufacturers WHERE manufacturer_name LIKE 'P%'",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_name, quantity FROM medications JOIN inventory ON medications.medication_id = inventory.medication_id WHERE quantity > 100",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE quantity < 50 AND batch_number LIKE 'B%'",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT order_id, order_date FROM orders WHERE quantity > 10 ORDER BY order_date DESC",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_name, expiration_date FROM medications WHERE expiration_date < '2023-01-01'",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT manufacturer_name, location FROM manufacturers WHERE location = 'New York' OR location = 'California'",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE quantity <= 20 ORDER BY batch_number DESC",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_name, expiration_date FROM medications WHERE expiration_date BETWEEN '2022-01-01' AND '2023-01-01'",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM orders JOIN medications ON orders.medication_id = medications.medication_id WHERE quantity > 5",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, role FROM users WHERE role = 'Admin'",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT manufacturer_name, COUNT(*) AS total_count FROM manufacturers JOIN medications ON manufacturers.manufacturer_id = medications.medication_id GROUP BY manufacturer_name",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_id, COUNT(*) AS total_orders FROM medications JOIN orders ON medications.medication_id = orders.medication_id GROUP BY medication_id HAVING COUNT(*) > 5",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE username LIKE '%test%'",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT manufacturer_name, SUM(quantity) AS total_quantity FROM manufacturers JOIN inventory ON manufacturers.manufacturer_id = inventory.medication_id GROUP BY manufacturer_name",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM medications M1 JOIN medications M2 ON M1.medication_id = M2.medication_id WHERE M1.expiration_date < M2.expiration_date",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT manufacturer_name, COUNT(*) AS total_orders FROM manufacturers JOIN medications ON manufacturers.manufacturer_id = medications.medication_id GROUP BY manufacturer_name HAVING COUNT(*) > 10",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, role FROM users WHERE role IN ('Admin', 'Manager')",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT medication_id, SUM(quantity) AS total_quantity FROM inventory GROUP BY medication_id",
  "### TABLEDATA\n\nCREATE TABLE medications (\n  medication_id INT PRIMARY KEY,\n  medication_name VARCHAR(50) NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  expiration_date DATE NOT NULL\n);\n\nCREATE TABLE manufacturers (\n  manufacturer_id INT PRIMARY KEY,\n  manufacturer_name VARCHAR(50) NOT NULL,\n  location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE inventory (\n  inventory_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  batch_number VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  medication_id INT NOT NULL,\n  quantity INT NOT NULL,\n  order_date DATE NOT NULL\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  role VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT order_id, order_date FROM orders WHERE order_date > '2022-06-01' ORDER BY order_date ASC"
]