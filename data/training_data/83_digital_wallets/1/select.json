[
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE category = 'Shopping';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transaction_history WHERE amount < 50;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT category FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(amount) FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(amount) FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT MIN(amount) FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE transaction_date BETWEEN '2020-01-01' AND '2020-12-31';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT category, SUM(amount) FROM transaction_history GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE description LIKE '%Grocery%';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE category='Food' AND amount > 50;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT category, COUNT(*) FROM transaction_history GROUP BY category HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE amount > (SELECT AVG(amount) FROM transaction_history);",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE category IN ('Food', 'Shopping');",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE amount = (SELECT MIN(amount) FROM transaction_history);",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE transaction_date = (SELECT MAX(transaction_date) FROM transaction_history);",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE amount > 100",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transaction_history WHERE category = 'Shopping'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_id, description FROM transaction_history WHERE transaction_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_date, amount FROM transaction_history WHERE category IN ('Utilities', 'Rent')",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transaction_history",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM transaction_history",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transaction_history",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT category, SUM(amount) AS total_amount FROM transaction_history GROUP BY category",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT category, AVG(amount) AS average_amount FROM transaction_history GROUP BY category",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT category, COUNT(*) AS transaction_count FROM transaction_history GROUP BY category",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT category, MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM transaction_history GROUP BY category",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_date, amount FROM transaction_history WHERE category = 'Food' AND amount > 50",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_date, amount FROM transaction_history WHERE description LIKE '%payment%'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount, description FROM transaction_history WHERE amount BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE EXTRACT(MONTH FROM transaction_date) = 10",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_date, amount FROM transaction_history WHERE EXTRACT(YEAR FROM transaction_date) = 2022",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_date, amount FROM transaction_history WHERE EXTRACT(DOW FROM transaction_date) = 1",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transaction_history ORDER BY transaction_date DESC",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT transaction_id, description FROM transaction_history ORDER BY amount DESC",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id SERIAL PRIMARY KEY,\n  transaction_date TIMESTAMP,\n  amount NUMERIC,\n  description TEXT,\n  category TEXT\n)\n\n### STATEMENT\n\nSELECT category, COUNT(*) AS transaction_count FROM transaction_history WHERE amount > 200 GROUP BY category",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transaction_history WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE category = 'Groceries';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM financial_analysis;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(total_income) AS total_income, SUM(total_expenses) AS total_expenses, SUM(net_profit) AS net_profit FROM financial_analysis;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT analysis_date, total_income, total_expenses, net_profit FROM financial_analysis WHERE analysis_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM financial_analysis WHERE net_profit > 0;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS transaction_count FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount_per_category, category FROM transaction_history GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(amount) AS highest_amount FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(amount) AS lowest_amount FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT analysis_date, net_profit FROM financial_analysis ORDER BY net_profit DESC;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT category, SUM(amount) AS total_amount FROM transaction_history GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE category IN ('Food', 'Utilities');",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE transaction_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT analysis_date, net_profit FROM financial_analysis ORDER BY analysis_date;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(net_profit) AS average_net_profit FROM financial_analysis;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE amount > 1000 AND category = 'Groceries';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transaction_history WHERE category = 'Utilities' AND amount < 500;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT analysis_id, analysis_date, net_profit FROM financial_analysis WHERE total_expenses < total_income ORDER BY analysis_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT category FROM transaction_history WHERE amount < 100;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT analysis_id, total_income - total_expenses AS profit FROM financial_analysis;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE category = 'Shopping' AND amount BETWEEN 50 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM transaction_history WHERE category = 'Dining';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transaction_history WHERE category = 'Entertainment' ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(total_income) AS max_income FROM financial_analysis;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT analysis_date, total_income FROM financial_analysis WHERE total_income > total_expenses;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS num_transactions FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(net_profit) AS avg_profit FROM financial_analysis;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT analysis_date, total_expenses FROM financial_analysis WHERE total_expenses > total_income;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE amount > 500 AND category IN ('Dining', 'Shopping');",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_date, amount FROM transaction_history WHERE transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(total_expenses) AS min_expenses FROM financial_analysis;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT analysis_date, total_income, total_expenses, net_profit FROM financial_analysis ORDER BY analysis_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n    transaction_id UUID PRIMARY KEY,\n    transaction_date DATE NOT NULL,\n    amount DECIMAL NOT NULL,\n    category VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_date DATE NOT NULL,\n    total_income DECIMAL NOT NULL,\n    total_expenses DECIMAL NOT NULL,\n    net_profit DECIMAL NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE category LIKE '%food%';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT id, transaction_date, amount FROM transaction_history WHERE transaction_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT id, amount FROM transaction_history WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE description LIKE '%salary%';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT category_name, budget_amount FROM budget_categories;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT id, category_name FROM budget_categories WHERE budget_amount < 500;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM financial_analysis WHERE financial_metrics->'profit' > 0;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM financial_analysis WHERE financial_metrics->'revenue' > 5000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT transaction_history.id, transaction_history.transaction_date, financial_analysis.financial_metrics->'profit' AS profit FROM transaction_history JOIN financial_analysis ON transaction_history.id = financial_analysis.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT budget_categories.category_name, financial_analysis.financial_metrics FROM budget_categories JOIN financial_analysis ON budget_categories.id = financial_analysis.category_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT MAX(budget_amount) AS max_budget FROM budget_categories;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT AVG(financial_metrics->'profit') AS avg_profit FROM financial_analysis;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS num_transactions FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history ORDER BY transaction_date DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT category_name, SUM(financial_metrics->'revenue') AS total_revenue FROM budget_categories JOIN financial_analysis ON budget_categories.id = financial_analysis.category_id GROUP BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(*) AS num_transactions FROM budget_categories JOIN financial_analysis ON budget_categories.id = financial_analysis.category_id GROUP BY category_name HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT category_id, JSONB_ARRAY_LENGTH(financial_metrics->'expenses') AS num_expenses FROM financial_analysis;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE EXTRACT(YEAR FROM transaction_date) = 2022;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT id, amount FROM transaction_history WHERE EXTRACT(MONTH FROM transaction_date) = 1;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name FROM transaction_history th JOIN budget_categories bc ON th.amount >= bc.budget_amount WHERE th.transaction_date >= '2022-01-01' AND th.transaction_date <= '2022-12-31' ORDER BY th.transaction_date DESC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, fa.financial_metrics FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id WHERE th.amount > (SELECT AVG(amount) FROM transaction_history) AND fa.financial_metrics ->> 'profit' > '10000'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, bc.category_name, SUM(th.amount) AS total_amount FROM transaction_history th JOIN budget_categories bc ON th.id = bc.id GROUP BY th.transaction_date, bc.category_name HAVING SUM(th.amount) > 50000",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, fa.financial_metrics ->> 'revenue', bc.category_name FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE th.transaction_date >= '2023-01-01' AND th.transaction_date <= '2023-06-30'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name, fa.financial_metrics ->> 'expenses' FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE th.amount > 500 AND bc.budget_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, SUM(th.amount) AS total_amount, AVG(th.amount) AS average_amount, MAX(th.amount) AS max_amount FROM transaction_history th WHERE th.transaction_date >= '2022-01-01' AND th.transaction_date <= '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, fa.financial_metrics ->> 'net_income', bc.category_name FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE th.amount >= 1000 AND fa.financial_metrics ->> 'net_income' > '5000'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name, fa.financial_metrics ->> 'profit_margin' FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE th.amount < bc.budget_amount AND fa.financial_metrics ->> 'profit_margin' > '0.2'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name FROM transaction_history th LEFT JOIN budget_categories bc ON th.id = bc.id WHERE bc.id IS NULL",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name, fa.financial_metrics ->> 'revenue_growth_rate' FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE th.amount > 1000 AND th.transaction_date >= '2022-01-01' AND th.transaction_date <= '2022-06-30'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name, fa.financial_metrics ->> 'profit_margin' FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE th.amount > 500 AND bc.budget_amount > 200 AND th.transaction_date >= '2022-01-01' AND th.transaction_date <= '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name, fa.financial_metrics ->> 'expenses' FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE th.amount > 1000 AND bc.category_name LIKE 'Food%'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name, fa.financial_metrics ->> 'revenue' FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE bc.category_name = 'Utilities' AND fa.financial_metrics ->> 'revenue' > '5000'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name, fa.financial_metrics ->> 'net_income' FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE th.amount >= 500 AND th.amount <= 2000 AND bc.budget_amount >= 1500",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name, fa.financial_metrics ->> 'revenue_growth_rate' FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE th.amount >= 1000 AND th.transaction_date >= '2022-01-01' AND th.transaction_date <= '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, MAX(th.transaction_date) AS latest_transaction_date, SUM(th.amount) AS total_amount, bc.category_name FROM transaction_history th JOIN budget_categories bc ON th.id = bc.id GROUP BY bc.category_name",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name, fa.financial_metrics ->> 'expenses' FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON th.id = bc.id WHERE th.amount >= 500 AND fa.financial_metrics ->> 'expenses' > '200'",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name, fa.financial_metrics ->> 'profit' FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE th.amount >= 1000 ANd bc.budget_amount > 5000",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_date DATE NOT NULL,\n\tamount DECIMAL(10, 2) NOT NULL,\n\tdescription TEXT\n);\n\nCREATE TABLE budget_categories (\n\tid SERIAL PRIMARY KEY,\n\tcategory_name VARCHAR(50) NOT NULL,\n\tbudget_amount DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE financial_analysis (\n\tid SERIAL PRIMARY KEY,\n\ttransaction_id INT REFERENCES transaction_history(id),\n\tcategory_id INT REFERENCES budget_categories(id),\n\tfinancial_metrics JSONB\n);\n\n### STATEMENT\n\nSELECT th.id, th.transaction_date, th.amount, bc.category_name, fa.financial_metrics ->> 'profit_margin' FROM transaction_history th JOIN financial_analysis fa ON th.id = fa.transaction_id JOIN budget_categories bc ON fa.category_id = bc.id WHERE th.amount > 2000 AND bc.budget_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT transaction_id, user_id, amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, amount FROM transactions WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM users WHERE email LIKE '%@example.com%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT category_id, category_name FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT category_id, description FROM categories WHERE category_name = 'Food';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM budgets;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT budget_id, user_id, category_id, amount FROM budgets;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, start_date, end_date FROM budgets WHERE start_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT t.user_id, u.username, t.amount FROM transactions t JOIN users u ON t.user_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, c.category_name FROM users u JOIN budgets b ON u.user_id = b.user_id JOIN categories c ON b.category_id = c.category_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT t.amount, u.username, c.category_name FROM transactions t JOIN users u ON t.user_id = u.user_id JOIN budgets b ON t.user_id = b.user_id JOIN categories c ON b.category_id = c.category_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM budgets WHERE category_id IN (SELECT category_id FROM categories WHERE category_name = 'Entertainment');",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) AS total_amount FROM transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(amount) AS avg_amount FROM transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT category_id, SUM(amount) AS total_amount FROM budgets GROUP BY category_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT category_id, AVG(amount) AS avg_amount FROM budgets GROUP BY category_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) FROM transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, u.username FROM transactions t INNER JOIN users u ON t.user_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, c.category_name FROM users u, categories c, budgets b WHERE u.user_id = b.user_id AND b.category_id = c.category_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(amount) FROM transactions GROUP BY user_id HAVING AVG(amount) > 500;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, t.amount, b.start_date FROM transactions t LEFT JOIN budgets b ON t.user_id = b.user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, u.username, b.category_id FROM transactions t JOIN users u ON t.user_id = u.user_id JOIN budgets b ON t.user_id = b.user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(t.transaction_id) AS num_transactions FROM users u LEFT JOIN transactions t ON u.user_id = t.user_id GROUP BY u.username HAVING num_transactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, c.category_name FROM users u JOIN budgets b ON u.user_id = b.user_id JOIN categories c ON b.category_id = c.category_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(user_id), AVG(amount) FROM transactions WHERE transaction_date >= '2022-01-01' AND transaction_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, SUM(b.amount) AS total_budget FROM users u JOIN budgets b ON u.user_id = b.user_id GROUP BY u.username HAVING total_budget > 2000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, t.transaction_id, t.amount, b.amount AS budget_amount FROM users u JOIN transactions t ON u.user_id = t.user_id JOIN budgets b ON u.user_id = b.user_id AND t.transaction_date BETWEEN b.start_date AND b.end_date;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, t.amount, b.amount AS budget_amount FROM users u JOIN transactions t ON u.user_id = t.user_id JOIN budgets b ON u.user_id = b.user_id AND t.amount > b.amount;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(amount) FROM transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(amount) FROM transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, transaction_date FROM transactions WHERE transaction_id = (SELECT MAX(transaction_id) FROM transactions);",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(amount) FROM transactions GROUP BY user_id HAVING MAX(amount) > 500;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(amount) FROM transactions GROUP BY user_id HAVING MIN(amount) < 100;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, c.category_name, SUM(b.amount) AS total_budget FROM users u JOIN budgets b ON u.user_id = b.user_id JOIN categories c ON b.category_id = c.category_id GROUP BY u.username, c.category_name;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT,\n  amount DECIMAL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE budgets (\n  budget_id INT PRIMARY KEY,\n  user_id INT,\n  category_id INT,\n  amount DECIMAL,\n  start_date DATE,\n  end_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) FROM transactions WHERE transaction_date >= '2022-01-01' AND transaction_date < '2023-01-01' GROUP BY user_id HAVING SUM(amount) > 2000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, transaction_amount FROM transaction_history WHERE category = 'Groceries';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transaction_history WHERE transaction_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM transaction_history WHERE transaction_date BETWEEN '2023-01-01' AND '2023-01-31';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT category, COUNT(*) FROM transaction_history GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT account_name, balance FROM account WHERE balance > 5000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT account_name, account_type FROM account WHERE account_type = 'Savings';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_category;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT category_name FROM transaction_category WHERE category_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM budget WHERE start_date <= '2023-04-01' AND end_date >= '2023-04-30';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT budget_name, budget_amount FROM budget WHERE budget_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT report_name, report_date, total_transactions FROM analysis_report WHERE total_transactions < 50;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT report_name, total_amount FROM analysis_report WHERE report_date >= '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM transaction_history WHERE category IN ('Groceries', 'Utilities');",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT account_name, balance FROM account ORDER BY balance DESC;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT account_name, account_type, balance FROM account WHERE balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT category_name FROM transaction_category WHERE category_name LIKE '%entertainment%';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT budget_name, start_date, end_date FROM budget ORDER BY start_date;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT report_name, total_amount FROM analysis_report WHERE total_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transaction_history WHERE transaction_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_date, category FROM transaction_history WHERE transaction_amount < 500 AND category = 'Groceries';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM account WHERE balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT account_name, balance FROM account WHERE account_type = 'Savings';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_category WHERE category_name LIKE 'Food%';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT category_id, category_name FROM transaction_category WHERE category_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM budget WHERE end_date > '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT SUM(budget_amount) AS total_budget FROM budget;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM analysis_report WHERE total_transactions > 50;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT report_name, total_amount FROM analysis_report WHERE report_date BETWEEN '2022-01-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history JOIN account ON transaction_history.transaction_id = account.account_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT account.account_id, transaction_history.transaction_date FROM transaction_history JOIN account ON transaction_history.transaction_id = account.account_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT account_name, SUM(transaction_amount) AS total_spent FROM transaction_history JOIN account ON transaction_history.transaction_id = account.account_id GROUP BY account_name;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM budget LEFT JOIN transaction_history ON budget.budget_id = transaction_history.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT budget.budget_name, COUNT(transaction_id) AS transaction_count FROM budget LEFT JOIN transaction_history ON budget.budget_id = transaction_history.transaction_id GROUP BY budget.budget_name;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM account RIGHT JOIN transaction_history ON account.account_id = transaction_history.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT account.account_name, AVG(transaction_amount) AS avg_transaction FROM account RIGHT JOIN transaction_history ON account.account_id = transaction_history.transaction_id GROUP BY account.account_name;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history INNER JOIN analysis_report ON transaction_history.transaction_id = analysis_report.report_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_history (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  transaction_amount DECIMAL(10, 2),\n  category VARCHAR(50),\n  notes TEXT\n);\n\n\nCREATE TABLE account (\n  account_id INT PRIMARY KEY,\n  account_name VARCHAR(50),\n  account_type VARCHAR(50),\n  balance DECIMAL(12, 2)\n);\n\n\nCREATE TABLE transaction_category (\n  category_id INT PRIMARY KEY,\n  category_name VARCHAR(50)\n);\n\n\nCREATE TABLE budget (\n  budget_id INT PRIMARY KEY,\n  budget_name VARCHAR(50),\n  budget_amount DECIMAL(12, 2),\n  start_date DATE,\n  end_date DATE\n);\n\n\nCREATE TABLE analysis_report (\n  report_id INT PRIMARY KEY,\n  report_name VARCHAR(50),\n  report_date DATE,\n  total_transactions INT,\n  total_amount DECIMAL(12, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_history.transaction_id, analysis_report.report_name FROM transaction_history INNER JOIN analysis_report ON transaction_history.transaction_id = analysis_report.report_id;"
]