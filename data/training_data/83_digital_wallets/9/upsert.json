[
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (1, 100.00, 'Monthly', '2022-01-31');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (2, 50.00, 'Weekly', '2022-02-05');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (3, 75.00, 'Bi-weekly', '2022-02-10');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (4, 120.00, 'Monthly', '2022-02-28');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (5, 90.00, 'Monthly', '2022-03-31');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (6, 60.00, 'Weekly', '2022-03-05');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (7, 80.00, 'Monthly', '2022-03-31');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (8, 100.00, 'Bi-weekly', '2022-03-10');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (9, 150.00, 'Monthly', '2022-04-30');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (10, 70.00, 'Weekly', '2022-04-09');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (11, 110.00, 'Monthly', '2022-05-31');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (12, 90.00, 'Bi-weekly', '2022-05-05');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (13, 130.00, 'Monthly', '2022-06-30');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (14, 80.00, 'Weekly', '2022-06-11');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (15, 100.00, 'Monthly', '2022-07-31');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (16, 120.00, 'Monthly', '2022-08-31');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (17, 90.00, 'Weekly', '2022-09-17');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (18, 110.00, 'Monthly', '2022-10-31');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (19, 70.00, 'Bi-weekly', '2022-11-10');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (20, 120.00, 'Monthly', '2022-12-31');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (1, 100.50, 'Monthly', '2023-01-01') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (2, 75.25, 'Quarterly', '2023-02-15') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (3, 120.75, 'Monthly', '2023-03-10') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (4, 50.00, 'Yearly', '2023-04-20') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (5, 90.60, 'Monthly', '2023-05-05') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (6, 65.40, 'Quarterly', '2023-06-12') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (7, 110.25, 'Yearly', '2023-07-25') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (8, 80.30, 'Monthly', '2023-08-03') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (9, 95.75, 'Quarterly', '2023-09-17') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (10, 70.20, 'Monthly', '2023-10-22') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (11, 120.90, 'Yearly', '2023-11-30') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (12, 45.60, 'Monthly', '2023-12-08') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (13, 85.35, 'Quarterly', '2024-01-13') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (14, 60.70, 'Monthly', '2024-02-01') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (15, 100.25, 'Quarterly', '2024-03-29') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (16, 75.90, 'Yearly', '2024-04-14') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (17, 55.40, 'Monthly', '2024-05-06') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (18, 90.20, 'Quarterly', '2024-06-18') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (19, 65.15, 'Monthly', '2024-07-30') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (user_id, amount, frequency, next_payment_date) VALUES (20, 110.60, 'Yearly', '2024-08-15') ON CONFLICT (user_id) DO UPDATE SET amount = EXCLUDED.amount, frequency = EXCLUDED.frequency, next_payment_date = EXCLUDED.next_payment_date",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (1, 101, 50.00, '2022-01-10') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (2, 102, 75.00, '2022-01-15') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (3, 103, 100.00, '2022-01-20') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (4, 104, 125.00, '2022-01-25') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (5, 105, 150.00, '2022-01-30') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (6, 106, 175.00, '2022-02-05') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (7, 107, 200.00, '2022-02-10') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (8, 108, 225.00, '2022-02-15') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (9, 109, 250.00, '2022-02-20') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (10, 110, 275.00, '2022-02-25') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (1, 101, 50.00, '2022-01-10', 'Success') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (2, 102, 75.00, '2022-01-15', 'Success') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (3, 103, 100.00, '2022-01-20', 'Failed') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (4, 104, 125.00, '2022-01-25', 'Success') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (5, 105, 150.00, '2022-01-30', 'Pending') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (6, 106, 175.00, '2022-02-05', 'Success') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (7, 107, 200.00, '2022-02-10', 'Failed') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (8, 108, 225.00, '2022-02-15', 'Success') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (9, 109, 250.00, '2022-02-20', 'Pending') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (10, 110, 275.00, '2022-02-25', 'Failed') ON CONFLICT (payment_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (1, 101, 100.00, '2022-01-01') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (2, 102, 150.00, '2022-01-02') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (3, 103, 200.00, '2022-01-03') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (4, 104, 250.00, '2022-01-04') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (5, 105, 300.00, '2022-01-05') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (6, 106, 350.00, '2022-01-06') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (7, 107, 400.00, '2022-01-07') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (8, 108, 450.00, '2022-01-08') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (9, 109, 500.00, '2022-01-09') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (10, 110, 550.00, '2022-01-10') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (1, 101, 100.00, '2022-01-01', 'Success') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (2, 102, 150.00, '2022-01-02', 'Failed') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (3, 103, 200.00, '2022-01-03', 'Pending') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (4, 104, 250.00, '2022-01-04', 'Success') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (5, 105, 300.00, '2022-01-05', 'Failed') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (6, 106, 350.00, '2022-01-06', 'Failed') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (7, 107, 400.00, '2022-01-07', 'Success') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (8, 108, 450.00, '2022-01-08', 'Pending') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (9, 109, 500.00, '2022-01-09', 'Success') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (payment_id, customer_id, payment_amount, payment_date, payment_status) VALUES (10, 110, 550.00, '2022-01-10', 'Failed') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_date = EXCLUDED.payment_date, payment_status = EXCLUDED.payment_status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments(payment_id, customer_id, payment_amount, payment_date) VALUES (1, 101, 100.00, '2022-01-01') ON DUPLICATE KEY UPDATE customer_id = 101, payment_amount = 100.00, payment_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods(method_id, customer_id, method_name, card_number, expiration_date) VALUES (1, 101, 'Credit Card', '1234567890123456', '2022-12-31') ON DUPLICATE KEY UPDATE customer_id = 101, method_name = 'Credit Card', card_number = '1234567890123456', expiration_date = '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history(history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (1, 1, 'Successful', '2022-01-01', '2022-02-01') ON DUPLICATE KEY UPDATE payment_id = 1, payment_status = 'Successful', payment_date = '2022-01-01', next_payment_date = '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments(payment_id, customer_id, payment_amount, payment_date) VALUES (2, 102, 150.00, '2022-01-05') ON DUPLICATE KEY UPDATE customer_id = 102, payment_amount = 150.00, payment_date = '2022-01-05';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods(method_id, customer_id, method_name, card_number, expiration_date) VALUES (2, 102, 'Debit Card', '9876543210987654', '2023-01-31') ON DUPLICATE KEY UPDATE customer_id = 102, method_name = 'Debit Card', card_number = '9876543210987654', expiration_date = '2023-01-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history(history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (2, 2, 'Failed', '2022-01-05', '2022-02-05') ON DUPLICATE KEY UPDATE payment_id = 2, payment_status = 'Failed', payment_date = '2022-01-05', next_payment_date = '2022-02-05';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments(payment_id, customer_id, payment_amount, payment_date) VALUES (3, 103, 75.50, '2022-01-10') ON DUPLICATE KEY UPDATE customer_id = 103, payment_amount = 75.50, payment_date = '2022-01-10';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods(method_id, customer_id, method_name, card_number, expiration_date) VALUES (3, 103, 'PayPal', 'abcdef1234567890', '2024-03-31') ON DUPLICATE KEY UPDATE customer_id = 103, method_name = 'PayPal', card_number = 'abcdef1234567890', expiration_date = '2024-03-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history(history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (3, 3, 'Pending', '2022-01-10', '2022-02-10') ON DUPLICATE KEY UPDATE payment_id = 3, payment_status = 'Pending', payment_date = '2022-01-10', next_payment_date = '2022-02-10';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments(payment_id, customer_id, payment_amount, payment_date) VALUES (4, 104, 200.25, '2022-01-15') ON DUPLICATE KEY UPDATE customer_id = 104, payment_amount = 200.25, payment_date = '2022-01-15';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods(method_id, customer_id, method_name, card_number, expiration_date) VALUES (4, 104, 'Bank Transfer', '0000111122223333', '2025-06-30') ON DUPLICATE KEY UPDATE customer_id = 104, method_name = 'Bank Transfer', card_number = '0000111122223333', expiration_date = '2025-06-30';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history(history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (4, 4, 'Successful', '2022-01-15', '2022-02-15') ON DUPLICATE KEY UPDATE payment_id = 4, payment_status = 'Successful', payment_date = '2022-01-15', next_payment_date = '2022-02-15';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments(payment_id, customer_id, payment_amount, payment_date) VALUES (5, 105, 125.75, '2022-01-20') ON DUPLICATE KEY UPDATE customer_id = 105, payment_amount = 125.75, payment_date = '2022-01-20';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods(method_id, customer_id, method_name, card_number, expiration_date) VALUES (5, 105, 'Cash', '0000000000000000', 'N/A') ON DUPLICATE KEY UPDATE customer_id = 105, method_name = 'Cash', card_number = '0000000000000000', expiration_date = 'N/A';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history(history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (5, 5, 'Pending', '2022-01-20', '2022-02-20') ON DUPLICATE KEY UPDATE payment_id = 5, payment_status = 'Pending', payment_date = '2022-01-20', next_payment_date = '2022-02-20';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments(payment_id, customer_id, payment_amount, payment_date) VALUES (6, 106, 180.50, '2022-01-25') ON DUPLICATE KEY UPDATE customer_id = 106, payment_amount = 180.50, payment_date = '2022-01-25';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods(method_id, customer_id, method_name, card_number, expiration_date) VALUES (6, 106, 'Crypto', '0x123456789abcdef0', 'N/A') ON DUPLICATE KEY UPDATE customer_id = 106, method_name = 'Crypto', card_number = '0x123456789abcdef0', expiration_date = 'N/A';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history(history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (6, 6, 'Successful', '2022-01-25', '2022-02-25') ON DUPLICATE KEY UPDATE payment_id = 6, payment_status = 'Successful', payment_date = '2022-01-25', next_payment_date = '2022-02-25';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments(payment_id, customer_id, payment_amount, payment_date) VALUES (7, 107, 90.25, '2022-01-30') ON DUPLICATE KEY UPDATE customer_id = 107, payment_amount = 90.25, payment_date = '2022-01-30';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods(method_id, customer_id, method_name, card_number, expiration_date) VALUES (7, 107, 'Gift Card', 'ABCD1234EFGH5678', '2023-12-31') ON DUPLICATE KEY UPDATE customer_id = 107, method_name = 'Gift Card', card_number = 'ABCD1234EFGH5678', expiration_date = '2023-12-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history(history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (7, 7, 'Failed', '2022-01-30', '2022-02-30') ON DUPLICATE KEY UPDATE payment_id = 7, payment_status = 'Failed', payment_date = '2022-01-30', next_payment_date = '2022-02-30';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments(payment_id, customer_id, payment_amount, payment_date) VALUES (8, 108, 150.75, '2022-02-05') ON DUPLICATE KEY UPDATE customer_id = 108, payment_amount = 150.75, payment_date = '2022-02-05';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods(method_id, customer_id, method_name, card_number, expiration_date) VALUES (8, 108, 'Wallet', 'user1234@wallet.com', 'N/A') ON DUPLICATE KEY UPDATE customer_id = 108, method_name = 'Wallet', card_number = 'user1234@wallet.com', expiration_date = 'N/A';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history(history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (8, 8, 'Pending', '2022-02-05', '2022-03-05') ON DUPLICATE KEY UPDATE payment_id = 8, payment_status = 'Pending', payment_date = '2022-02-05', next_payment_date = '2022-03-05';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (1, 1001, 50.00, '2022-10-01') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = 50.00, payment_date = '2022-10-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods (method_id, customer_id, method_name, card_number, expiration_date) VALUES (1, 1001, 'Credit Card', '1234567890123456', '2025-12-31') ON CONFLICT (method_id) DO UPDATE SET method_name = 'Credit Card', card_number = '1234567890123456', expiration_date = '2025-12-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (1, 1, 'Success', '2022-10-01', '2022-11-01') ON CONFLICT (history_id) DO UPDATE SET payment_status = 'Success', payment_date = '2022-10-01', next_payment_date = '2022-11-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (2, 1002, 75.50, '2022-09-15') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = 75.50, payment_date = '2022-09-15';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods (method_id, customer_id, method_name, card_number, expiration_date) VALUES (2, 1002, 'Debit Card', '9876543210987654', '2024-08-31') ON CONFLICT (method_id) DO UPDATE SET method_name = 'Debit Card', card_number = '9876543210987654', expiration_date = '2024-08-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (2, 2, 'Pending', '2022-09-15', '2022-10-15') ON CONFLICT (history_id) DO UPDATE SET payment_status = 'Pending', payment_date = '2022-09-15', next_payment_date = '2022-10-15';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (3, 1003, 100.25, '2022-10-05') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = 100.25, payment_date = '2022-10-05';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods (method_id, customer_id, method_name, card_number, expiration_date) VALUES (3, 1003, 'Paypal', '1111222233334444', '2023-06-30') ON CONFLICT (method_id) DO UPDATE SET method_name = 'Paypal', card_number = '1111222233334444', expiration_date = '2023-06-30';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (3, 3, 'Failed', '2022-10-05', '2022-11-05') ON CONFLICT (history_id) DO UPDATE SET payment_status = 'Failed', payment_date = '2022-10-05', next_payment_date = '2022-11-05';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (4, 1004, 45.75, '2022-10-10') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = 45.75, payment_date = '2022-10-10';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods (method_id, customer_id, method_name, card_number, expiration_date) VALUES (4, 1004, 'Bank Transfer', '5555666677778888', '2025-03-31') ON CONFLICT (method_id) DO UPDATE SET method_name = 'Bank Transfer', card_number = '5555666677778888', expiration_date = '2025-03-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (4, 4, 'Success', '2022-10-10', '2022-11-10') ON CONFLICT (history_id) DO UPDATE SET payment_status = 'Success', payment_date = '2022-10-10', next_payment_date = '2022-11-10';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (5, 1005, 60.30, '2022-09-20') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = 60.30, payment_date = '2022-09-20';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods (method_id, customer_id, method_name, card_number, expiration_date) VALUES (5, 1005, 'Venmo', '9999888877776666', '2024-12-31') ON CONFLICT (method_id) DO UPDATE SET method_name = 'Venmo', card_number = '9999888877776666', expiration_date = '2024-12-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (5, 5, 'Pending', '2022-09-20', '2022-10-20') ON CONFLICT (history_id) DO UPDATE SET payment_status = 'Pending', payment_date = '2022-09-20', next_payment_date = '2022-10-20';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (6, 1006, 80.50, '2022-10-15') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = 80.50, payment_date = '2022-10-15';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods (method_id, customer_id, method_name, card_number, expiration_date) VALUES (6, 1006, 'Gift Card', '1122334455667788', '2023-11-30') ON CONFLICT (method_id) DO UPDATE SET method_name = 'Gift Card', card_number = '1122334455667788', expiration_date = '2023-11-30';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (6, 6, 'Failed', '2022-10-15', '2022-11-15') ON CONFLICT (history_id) DO UPDATE SET payment_status = 'Failed', payment_date = '2022-10-15', next_payment_date = '2022-11-15';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (7, 1007, 70.25, '2022-09-25') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = 70.25, payment_date = '2022-09-25';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods (method_id, customer_id, method_name, card_number, expiration_date) VALUES (7, 1007, 'Apple Pay', '8888777766665555', '2024-05-31') ON CONFLICT (method_id) DO UPDATE SET method_name = 'Apple Pay', card_number = '8888777766665555', expiration_date = '2024-05-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (7, 7, 'Success', '2022-09-25', '2022-10-25') ON CONFLICT (history_id) DO UPDATE SET payment_status = 'Success', payment_date = '2022-09-25', next_payment_date = '2022-10-25';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (payment_id, customer_id, payment_amount, payment_date) VALUES (8, 1008, 55.75, '2022-10-20') ON CONFLICT (payment_id) DO UPDATE SET payment_amount = 55.75, payment_date = '2022-10-20';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods (method_id, customer_id, method_name, card_number, expiration_date) VALUES (8, 1008, 'Google Pay', '3344556677889900', '2023-10-31') ON CONFLICT (method_id) DO UPDATE SET method_name = 'Google Pay', card_number = '3344556677889900', expiration_date = '2023-10-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO payment_history (history_id, payment_id, payment_status, payment_date, next_payment_date) VALUES (8, 8, 'Pending', '2022-10-20', '2022-11-20') ON CONFLICT (history_id) DO UPDATE SET payment_status = 'Pending', payment_date = '2022-10-20', next_payment_date = '2022-11-20';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (1, 1001, 50.50, 'Monthly') ON CONFLICT (id) DO UPDATE SET user_id = 1001, payment_amount = 50.50, payment_frequency = 'Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (2, 1002, 75.25, 'Weekly') ON CONFLICT (id) DO UPDATE SET user_id = 1002, payment_amount = 75.25, payment_frequency = 'Weekly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (3, 1003, 100.00, 'Monthly') ON CONFLICT (id) DO UPDATE SET user_id = 1003, payment_amount = 100.00, payment_frequency = 'Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (4, 1004, 120.75, 'Bi-Monthly') ON CONFLICT (id) DO UPDATE SET user_id = 1004, payment_amount = 120.75, payment_frequency = 'Bi-Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (5, 1005, 80.25, 'Quarterly') ON CONFLICT (id) DO UPDATE SET user_id = 1005, payment_amount = 80.25, payment_frequency = 'Quarterly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (6, 1006, 60.75, 'Monthly') ON CONFLICT (id) DO UPDATE SET user_id = 1006, payment_amount = 60.75, payment_frequency = 'Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (7, 1007, 95.00, 'Weekly') ON CONFLICT (id) DO UPDATE SET user_id = 1007, payment_amount = 95.00, payment_frequency = 'Weekly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (8, 1008, 110.50, 'Monthly') ON CONFLICT (id) DO UPDATE SET user_id = 1008, payment_amount = 110.50, payment_frequency = 'Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (9, 1009, 70.25, 'Weekly') ON CONFLICT (id) DO UPDATE SET user_id = 1009, payment_amount = 70.25, payment_frequency = 'Weekly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (10, 1010, 150.00, 'Monthly') ON CONFLICT (id) DO UPDATE SET user_id = 1010, payment_amount = 150.00, payment_frequency = 'Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (11, 1011, 55.75, 'Bi-Monthly') ON CONFLICT (id) DO UPDATE SET user_id = 1011, payment_amount = 55.75, payment_frequency = 'Bi-Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (12, 1012, 85.25, 'Quarterly') ON CONFLICT (id) DO UPDATE SET user_id = 1012, payment_amount = 85.25, payment_frequency = 'Quarterly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (13, 1013, 65.75, 'Monthly') ON CONFLICT (id) DO UPDATE SET user_id = 1013, payment_amount = 65.75, payment_frequency = 'Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (14, 1014, 90.00, 'Weekly') ON CONFLICT (id) DO UPDATE SET user_id = 1014, payment_amount = 90.00, payment_frequency = 'Weekly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (15, 1015, 125.50, 'Monthly') ON CONFLICT (id) DO UPDATE SET user_id = 1015, payment_amount = 125.50, payment_frequency = 'Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (16, 1016, 73.25, 'Weekly') ON CONFLICT (id) DO UPDATE SET user_id = 1016, payment_amount = 73.25, payment_frequency = 'Weekly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (17, 1017, 95.75, 'Bi-Monthly') ON CONFLICT (id) DO UPDATE SET user_id = 1017, payment_amount = 95.75, payment_frequency = 'Bi-Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (18, 1018, 82.00, 'Quarterly') ON CONFLICT (id) DO UPDATE SET user_id = 1018, payment_amount = 82.00, payment_frequency = 'Quarterly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (19, 1019, 67.50, 'Monthly') ON CONFLICT (id) DO UPDATE SET user_id = 1019, payment_amount = 67.50, payment_frequency = 'Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (20, 1020, 88.25, 'Weekly') ON CONFLICT (id) DO UPDATE SET user_id = 1020, payment_amount = 88.25, payment_frequency = 'Weekly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (1, 1001, 100.50, 'monthly') ON CONFLICT (id) DO UPDATE SET payment_amount = 120.75, payment_frequency = 'weekly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (2, 1002, 75.25, 'bi-weekly') ON CONFLICT (id) DO UPDATE SET payment_amount = 90.00, payment_frequency = 'monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (3, 1003, 50.00, 'monthly') ON CONFLICT (id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (4, 1004, 200.75, 'weekly') ON CONFLICT (id) DO UPDATE SET payment_amount = 250.00, payment_frequency = 'bi-weekly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (5, 1005, 150.25, 'monthly') ON CONFLICT (id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (6, 1006, 85.50, 'weekly') ON CONFLICT (id) DO UPDATE SET payment_amount = 100.00, payment_frequency = 'monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (7, 1007, 120.00, 'bi-weekly') ON CONFLICT (id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (8, 1008, 95.75, 'monthly') ON CONFLICT (id) DO UPDATE SET payment_amount = 110.25, payment_frequency = 'weekly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (9, 1009, 175.50, 'weekly') ON CONFLICT (id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO recurring_payments (id, user_id, payment_amount, payment_frequency) VALUES (10, 1010, 60.25, 'monthly') ON CONFLICT (id) DO UPDATE SET payment_amount = 75.00, payment_frequency = 'bi-weekly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, name, email, phone_number) VALUES (1001, 'John Doe', 'john.doe@example.com', '123-456-7890') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, name, email, phone_number) VALUES (1002, 'Jane Smith', 'jane.smith@example.com', '987-654-3210') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, name, email, phone_number) VALUES (1003, 'Alice Johnson', 'alice.johnson@example.com', '555-123-4567') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, name, email, phone_number) VALUES (1004, 'Bob Brown', 'bob.brown@example.com', '777-888-9999') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, name, email, phone_number) VALUES (1005, 'Karen Clark', 'karen.clark@example.com', '222-333-4444') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO payment_history (history_id, payment_date, amount_paid, user_id) VALUES (1, '2022-10-15', 100.50, 1001) ON CONFLICT (history_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO payment_history (history_id, payment_date, amount_paid, user_id) VALUES (2, '2022-10-16', 75.25, 1002) ON CONFLICT (history_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO payment_history (history_id, payment_date, amount_paid, user_id) VALUES (3, '2022-10-17', 50.00, 1003) ON CONFLICT (history_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO payment_history (history_id, payment_date, amount_paid, user_id) VALUES (4, '2022-10-18', 200.75, 1004) ON CONFLICT (history_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO payment_history (history_id, payment_date, amount_paid, user_id) VALUES (5, '2022-10-19', 150.25, 1005) ON CONFLICT (history_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO payment_methods (method_id, method_name, user_id) VALUES (1, 'Credit Card', 1001) ON CONFLICT (method_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO payment_methods (method_id, method_name, user_id) VALUES (2, 'PayPal', 1002) ON CONFLICT (method_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO payment_methods (method_id, method_name, user_id) VALUES (3, 'Bank Transfer', 1003) ON CONFLICT (method_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO payment_methods (method_id, method_name, user_id) VALUES (4, 'Venmo', 1004) ON CONFLICT (method_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nUPSERT INTO payment_methods (method_id, method_name, user_id) VALUES (5, 'CashApp', 1005) ON CONFLICT (method_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, customer_id, payment_amount, payment_frequency, next_payment_date) VALUES ('c7a38043-04a5-44a8-8d5e-cfc3b308f3de', '72e615f2-87fd-4b35-bb07-affdbec2eacc', 100, 'Monthly', '2022-06-30') ON CONFLICT (id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_frequency = EXCLUDED.payment_frequency, next_payment_date = EXCLUDED.next_payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO customers (id, name, email, phone_number, address) VALUES ('72e615f2-87fd-4b35-bb07-affdbec2eacc', 'John Doe', 'john.doe@example.com', '1234567890', '123 Main St, City') ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number, address = EXCLUDED.address;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO payments_history (id, payment_id, payment_date, status, failure_reason) VALUES ('d4f5ff0b-3919-4b33-8d68-55d3a70b8c54', 'c7a38043-04a5-44a8-8d5e-cfc3b308f3de', '2022-06-30', 'Success', NULL) ON CONFLICT (id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods (id, customer_id, payment_type, card_number, expiration_date) VALUES ('3e2b2f3b-fc70-4d83-9f38-3825790617ae', '72e615f2-87fd-4b35-bb07-affdbec2eacc', 'Credit Card', '1234567890123456', '2025-12-31') ON CONFLICT (id) DO UPDATE SET payment_type = EXCLUDED.payment_type, card_number = EXCLUDED.card_number, expiration_date = EXCLUDED.expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO notifications (id, customer_id, notification_type, message, sent_date) VALUES ('40718e49-04c5-470b-afdd-4ce361d8c2f2', '72e615f2-87fd-4b35-bb07-affdbec2eacc', 'Payment Reminder', 'Don't forget to make your payment!', '2022-06-25 08:00:00') ON CONFLICT (id) DO UPDATE SET notification_type = EXCLUDED.notification_type, message = EXCLUDED.message, sent_date = EXCLUDED.sent_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, customer_id, payment_amount, payment_frequency, next_payment_date) VALUES ('f595f859-3057-4d51-a869-69db0eb88217', 'b48854ea-78ab-480e-8967-14c7fb02d547', 150, 'Weekly', '2022-07-07') ON CONFLICT (id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_frequency = EXCLUDED.payment_frequency, next_payment_date = EXCLUDED.next_payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO customers (id, name, email, phone_number, address) VALUES ('b48854ea-78ab-480e-8967-14c7fb02d547', 'Alice Smith', 'alice.smith@example.com', NULL, '456 Elm St, Town') ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number, address = EXCLUDED.address;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO payments_history (id, payment_id, payment_date, status, failure_reason) VALUES ('dcc5e64d-16e7-48c7-b8a7-3b6e94ed1a7e', 'f595f859-3057-4d51-a869-69db0eb88217', '2022-07-07', 'Success', NULL) ON CONFLICT (id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods (id, customer_id, payment_type, card_number, expiration_date) VALUES ('a6b54dc6-1642-4bb4-ba54-3dd5ff0e0c33', 'b48854ea-78ab-480e-8967-14c7fb02d547', 'PayPal', 'paypal@example.com', NULL) ON CONFLICT (id) DO UPDATE SET payment_type = EXCLUDED.payment_type, card_number = EXCLUDED.card_number, expiration_date = EXCLUDED.expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO notifications (id, customer_id, notification_type, message, sent_date) VALUES ('2f3c3b1a-ac8d-4f62-afd9-9dc2547d23f9', 'b48854ea-78ab-480e-8967-14c7fb02d547', 'Payment Confirmation', 'Your payment was successful.', '2022-07-07 10:00:00') ON CONFLICT (id) DO UPDATE SET notification_type = EXCLUDED.notification_type, message = EXCLUDED.message, sent_date = EXCLUDED.sent_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO recurring_payments (id, customer_id, payment_amount, payment_frequency, next_payment_date) VALUES ('1f822bbc-e07d-4aaa-b511-7c5b77e32c56', '003eed40-824d-11eb-8dcd-0242ac130003', 100, 'monthly', '2022-12-31') ON CONFLICT (id) DO UPDATE SET payment_amount = EXCLUDED.payment_amount, payment_frequency = EXCLUDED.payment_frequency, next_payment_date = EXCLUDED.next_payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO customers (id, name, email, phone_number, address) VALUES ('003eed40-824d-11eb-8dcd-0242ac130003', 'John Doe', 'johndoe@example.com', '1234567890', '123 Main St, City, State') ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number, address = EXCLUDED.address;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO payments_history (id, payment_id, payment_date, status, failure_reason) VALUES ('003eed40-824d-11eb-8dcd-0242ac130003', '1f822bbc-e07d-4aaa-b511-7c5b77e32c56', '2022-01-01', 'success', NULL) ON CONFLICT (id) DO UPDATE SET payment_id = EXCLUDED.payment_id, payment_date = EXCLUDED.payment_date, status = EXCLUDED.status, failure_reason = EXCLUDED.failure_reason;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO payment_methods (id, customer_id, payment_type, card_number, expiration_date) VALUES ('003eed40-824d-11eb-8dcd-0242ac130003', '1f822bbc-e07d-4aaa-b511-7c5b77e32c56', 'credit_card', '1234567890123456', '2024-12-31') ON CONFLICT (id) DO UPDATE SET customer_id = EXCLUDED.customer_id, payment_type = EXCLUDED.payment_type, card_number = EXCLUDED.card_number, expiration_date = EXCLUDED.expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO notifications (id, customer_id, notification_type, message, sent_date) VALUES ('003eed40-824d-11eb-8dcd-0242ac130003', '1f822bbc-e07d-4aaa-b511-7c5b77e32c56', 'payment_reminder', 'Your next payment is due soon.', '2022-12-15 08:00:00') ON CONFLICT (id) DO UPDATE SET customer_id = EXCLUDED.customer_id, notification_type = EXCLUDED.notification_type, message = EXCLUDED.message, sent_date = EXCLUDED.sent_date;"
]