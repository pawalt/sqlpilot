[
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, user_id FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT amount, frequency FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, next_payment_date FROM recurring_payments WHERE frequency = 'monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE amount >= 100;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, user_id, amount FROM recurring_payments WHERE user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, frequency FROM recurring_payments WHERE next_payment_date < '2022-05-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments ORDER BY next_payment_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) AS total_amount FROM recurring_payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_payments FROM recurring_payments GROUP BY user_id HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_id, frequency FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE user_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE amount BETWEEN 50 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE frequency LIKE 'qu%';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE next_payment_date >= '2022-06-01' AND next_payment_date <= '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(amount) AS max_amount FROM recurring_payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE user_id = 10 AND frequency = 'weekly' ORDER BY next_payment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE next_payment_date = (SELECT MAX(next_payment_date) FROM recurring_payments);",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(amount) AS avg_amount FROM recurring_payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE amount > 100 AND frequency = 'Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) AS total_amount FROM recurring_payments GROUP BY user_id HAVING total_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS num_payments FROM recurring_payments GROUP BY user_id ORDER BY num_payments DESC;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE next_payment_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(amount) AS max_amount FROM recurring_payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT frequency FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS num_payments FROM recurring_payments WHERE frequency = 'Weekly' GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE amount BETWEEN 50 AND 200 AND frequency = 'Monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(amount) AS min_amount FROM recurring_payments GROUP BY user_id HAVING min_amount > 50;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments ORDER BY next_payment_date ASC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(amount) AS avg_amount FROM recurring_payments GROUP BY user_id HAVING avg_amount < 150;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE user_id = 123 AND frequency = 'Yearly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(next_payment_date) AS next_due_date FROM recurring_payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) AS total_amount, AVG(amount) AS avg_amount FROM recurring_payments GROUP BY user_id HAVING avg_amount > 75;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE amount < 50 OR amount > 200;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(DISTINCT frequency) AS num_frequencies FROM recurring_payments GROUP BY user_id ORDER BY num_frequencies DESC;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE next_payment_date BETWEEN '2022-12-01' AND '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(amount) AS avg_amount FROM recurring_payments WHERE frequency = 'Monthly' GROUP BY user_id HAVING avg_amount < 100;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE frequency IN ('Monthly', 'Quarterly');",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  amount DECIMAL NOT NULL,\n  frequency VARCHAR(50) NOT NULL,\n  next_payment_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(next_payment_date) AS latest_payment_date FROM recurring_payments GROUP BY user_id HAVING latest_payment_date < '2022-12-15';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, customer_id FROM payment_history;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_amount FROM recurring_payments WHERE customer_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE customer_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_date FROM recurring_payments WHERE payment_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE payment_amount < 500;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM recurring_payments WHERE payment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE payment_status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, customer_id FROM recurring_payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE payment_amount BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, customer_id FROM recurring_payments WHERE payment_amount = 2000;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE payment_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM recurring_payments WHERE customer_id = 789;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE payment_status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, customer_id FROM recurring_payments WHERE payment_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE customer_id = 123 AND payment_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_date FROM recurring_payments WHERE payment_amount < 1000;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE payment_status = 'failed';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, customer_id FROM recurring_payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE payment_amount >= 1000;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, customer_id, payment_amount FROM recurring_payments WHERE payment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(payment_amount) AS total_payments FROM recurring_payments GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, customer_id, payment_amount, payment_date FROM payment_history WHERE payment_status = 'successful';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(payment_id) AS total_payments FROM payment_history GROUP BY customer_id HAVING total_payments > 5;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT r.payment_id, r.customer_id, r.payment_amount, h.payment_status FROM recurring_payments r INNER JOIN payment_history h ON r.payment_id = h.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT r.customer_id, MAX(r.payment_amount) AS highest_payment FROM recurring_payments r GROUP BY r.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT r.customer_id, AVG(r.payment_amount) AS avg_payment FROM recurring_payments r GROUP BY r.customer_id HAVING avg_payment > 100;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_date, SUM(payment_amount) AS total_amount FROM (SELECT * FROM recurring_payments UNION ALL SELECT * FROM payment_history) AS combined_payments GROUP BY customer_id, payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT r.customer_id, r.payment_amount, h.payment_status FROM recurring_payments r LEFT JOIN payment_history h ON r.payment_id = h.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(payment_amount) AS highest_payment FROM (SELECT * FROM recurring_payments UNION ALL SELECT * FROM payment_history) AS combined_payments GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_date, AVG(payment_amount) AS avg_amount FROM payment_history WHERE payment_status = 'successful' GROUP BY customer_id, payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT r.customer_id, COUNT(h.payment_id) AS total_payments FROM recurring_payments r LEFT JOIN payment_history h ON r.payment_id = h.payment_id GROUP BY r.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT r.customer_id, MIN(r.payment_amount) AS lowest_payment FROM recurring_payments r GROUP BY r.customer_id HAVING lowest_payment < 50;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT r.payment_id, r.customer_id, h.payment_status FROM recurring_payments r RIGHT JOIN payment_history h ON r.payment_id = h.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_date, AVG(payment_amount) AS avg_amount FROM (SELECT * FROM recurring_payments UNION ALL SELECT * FROM payment_history) AS combined_payments GROUP BY customer_id, payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT r.customer_id, SUM(r.payment_amount) AS total_amount, COUNT(h.payment_id) AS total_payments FROM recurring_payments r LEFT JOIN payment_history h ON r.payment_id = h.payment_id GROUP BY r.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_date, MAX(payment_amount) AS highest_amount FROM payment_history WHERE payment_status = 'failed' GROUP BY customer_id, payment_date;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT r.payment_id, r.customer_id, r.payment_amount, h.payment_status FROM recurring_payments r LEFT JOIN payment_history h ON r.payment_id = h.payment_id WHERE h.payment_status = 'failed';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(DISTINCT payment_date) AS unique_payment_dates FROM payment_history GROUP BY customer_id HAVING unique_payment_dates > 1;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM recurring_payments WHERE customer_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT SUM(payment_amount) AS total_payments FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT method_name, card_number FROM payment_methods WHERE customer_id = 200;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_methods FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_status FROM payment_history WHERE payment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_payments FROM payment_history WHERE payment_status = 'Successful';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT payment_id, next_payment_date FROM payment_history WHERE payment_status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments INNER JOIN payment_history ON recurring_payments.payment_id = payment_history.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT rp.payment_id, pm.method_name FROM recurring_payments rp JOIN payment_methods pm ON rp.customer_id = pm.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT ph.history_id, rp.payment_amount FROM payment_history ph LEFT JOIN recurring_payments rp ON ph.payment_id = rp.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE method_name LIKE 'Visa%';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history ORDER BY payment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_records FROM recurring_payments UNION SELECT COUNT(*) AS total_records FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_payments FROM recurring_payments GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT ph.history_id, COUNT(*) AS total_payments FROM payment_history ph JOIN recurring_payments rp ON ph.payment_id = rp.payment_id GROUP BY ph.history_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(payment_amount) AS avg_payment_amount FROM recurring_payments GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE payment_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE method_name LIKE '%Visa%'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT payment_amount FROM recurring_payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT method_name, card_number FROM payment_methods WHERE customer_id = 123",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM recurring_payments WHERE payment_date < '2022-10-01'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE payment_status = 'Success'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_date FROM recurring_payments JOIN payment_history ON recurring_payments.payment_id = payment_history.payment_id",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_date, next_payment_date FROM payment_history WHERE payment_status = 'Pending'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, card_number FROM payment_methods WHERE expiration_date < '2023-01-01'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount, payment_date FROM recurring_payments WHERE payment_amount BETWEEN 500 AND 1000",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE method_name NOT LIKE '%PayPal%'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM recurring_payments WHERE customer_id = 456",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_status FROM payment_history ORDER BY payment_date DESC",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE customer_id = 789 AND payment_date < '2022-11-01'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, card_number FROM payment_methods WHERE method_name = 'MasterCard'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE payment_date BETWEEN '2022-01-01' AND '2022-06-30'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_status FROM payment_history WHERE payment_date = '2022-08-15'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_date, next_payment_date FROM recurring_payments JOIN payment_history ON recurring_payments.payment_id = payment_history.payment_id",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE customer_id IN (123, 456, 789) AND expiration_date > '2023-01-01'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n\tpayment_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tpayment_amount DECIMAL(10, 2),\n\tpayment_date DATE\n);\n\n\nCREATE TABLE payment_methods (\n\tmethod_id INT PRIMARY KEY,\n\tcustomer_id INT,\n\tmethod_name VARCHAR(50),\n\tcard_number VARCHAR(16),\n\texpiration_date DATE\n);\n\n\nCREATE TABLE payment_history (\n\thistory_id INT PRIMARY KEY,\n\tpayment_id INT,\n\tpayment_status VARCHAR(20),\n\tpayment_date DATE,\n\tnext_payment_date DATE\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM recurring_payments WHERE payment_amount > (SELECT AVG(payment_amount) FROM recurring_payments)",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT id, user_id, payment_amount, payment_frequency FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT user_id, name, email, phone_number FROM users;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT history_id, payment_date, amount_paid, user_id FROM payment_history;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT method_id, method_name, user_id FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT user_id, payment_amount FROM recurring_payments WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT user_id, name FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT user_id, payment_date FROM payment_history WHERE payment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT user_id, method_name FROM payment_methods WHERE method_name = 'Credit Card';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT user_id, name, amount_paid FROM users JOIN payment_history ON users.user_id = payment_history.user_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT r.user_id, r.payment_amount, p.payment_date FROM recurring_payments r JOIN payment_history p ON r.user_id = p.user_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT u.name, ph.amount_paid, pm.method_name FROM users u JOIN payment_history ph ON u.user_id = ph.user_id JOIN payment_methods pm ON u.user_id = pm.user_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT u.name, r.payment_amount, p.payment_date, pm.method_name FROM users u JOIN recurring_payments r ON u.user_id = r.user_id JOIN payment_history p ON r.user_id = p.user_id JOIN payment_methods pm ON u.user_id = pm.user_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT u.name AS customer_name, r.payment_amount AS recurring_payment_amount, p.amount_paid AS payment_amount FROM users u JOIN recurring_payments r ON u.user_id = r.user_id JOIN payment_history p ON u.user_id = p.user_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS recurring_payments_count FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT MAX(payment_amount) AS max_payment_amount FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT u.name, SUM(p.amount_paid) AS total_paid_amount FROM users u JOIN payment_history p ON u.user_id = p.user_id GROUP BY u.name;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT p.method_name, AVG(r.payment_amount) AS avg_payment_amount FROM payment_methods p JOIN recurring_payments r ON p.user_id = r.user_id GROUP BY p.method_name;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE payment_amount > 100",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT user_id, name FROM users WHERE email LIKE '%example.com'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE amount_paid BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE user_id = 1003",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.user_id, users.name, payment_history.amount_paid FROM users JOIN payment_history ON users.user_id = payment_history.user_id",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_amount FROM users JOIN recurring_payments ON users.user_id = recurring_payments.user_id WHERE payment_amount >= 200",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_amount FROM users JOIN recurring_payments ON users.user_id = recurring_payments.user_id WHERE payment_frequency = 'monthly'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, method_name FROM users JOIN payment_methods ON users.user_id = payment_methods.user_id WHERE method_name = 'Credit Card'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_amount FROM users JOIN recurring_payments ON users.user_id = recurring_payments.user_id WHERE payment_amount > 100 AND payment_frequency = 'weekly'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_date, amount_paid FROM users JOIN payment_history ON users.user_id = payment_history.user_id WHERE payment_date BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT payment_history.amount_paid, payment_date FROM payment_history JOIN users ON users.user_id = payment_history.user_id WHERE users.name = 'Alice'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_history.amount_paid FROM users JOIN payment_history ON users.user_id = payment_history.user_id WHERE users.name LIKE 'J%'",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_amount FROM users JOIN recurring_payments ON users.user_id = recurring_payments.user_id WHERE payment_amount > 150 ORDER BY payment_amount DESC",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_date, payment_amount FROM users JOIN payment_history ON users.user_id = payment_history.user_id WHERE payment_amount < 50 OR payment_amount > 200",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_date, method_name FROM users JOIN payment_history ON users.user_id = payment_history.user_id JOIN payment_methods ON users.user_id = payment_methods.user_id",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_amount, payment_frequency FROM users JOIN recurring_payments ON users.user_id = recurring_payments.user_id WHERE payment_frequency IN ('monthly', 'quarterly')",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_amount, payment_frequency FROM users LEFT JOIN recurring_payments ON users.user_id = recurring_payments.user_id",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_amount, payment_date FROM users RIGHT JOIN payment_history ON users.user_id = payment_history.user_id",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, payment_amount, payment_date FROM users FULL JOIN payment_history ON users.user_id = payment_history.user_id",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id INT PRIMARY KEY,\n    user_id INT,\n    payment_amount DECIMAL,\n    payment_frequency VARCHAR(50)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE payment_history (\n    history_id INT PRIMARY KEY,\n    payment_date DATE,\n    amount_paid DECIMAL,\n    user_id INT\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR(50),\n    user_id INT\n);\n\n### STATEMENT\n\nSELECT users.name, COUNT(payment_amount) AS payments_count FROM users JOIN recurring_payments ON users.user_id = recurring_payments.user_id GROUP BY users.name HAVING payments_count > 2",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, customer_id, payment_amount FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_frequency FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT email, phone_number FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments_history;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, payment_id, payment_date FROM payments_history;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT status, failure_reason FROM payments_history;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_type FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT card_number, expiration_date FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, notification_type FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT message, sent_date FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT rp.id, c.name, pm.payment_type FROM recurring_payments rp JOIN customers c ON rp.customer_id = c.id JOIN payment_methods pm ON c.id = pm.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ch.id, ch.payment_date, ch.status, cn.card_number FROM payments_history ch JOIN payment_methods pm ON ch.payment_id = pm.id JOIN customers c ON pm.customer_id = c.id JOIN payment_methods cn ON c.id = cn.customer_id AND pm.card_number = cn.card_number;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE email LIKE 'john_doe%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments_history WHERE status = 'failed';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE expiration_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM recurring_payments WHERE payment_amount > 100 AND payment_frequency = 'monthly';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customers.name, payments_history.payment_date FROM customers JOIN payments_history ON customers.id = payments_history.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, COUNT(*) as TotalPayments FROM payments_history GROUP BY payment_id HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT recurring_payments.id, notifications.notification_type FROM recurring_payments LEFT JOIN notifications ON recurring_payments.customer_id = notifications.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customers.name, payments_history.payment_date FROM customers INNER JOIN payments_history ON customers.id = payments_history.payment_id WHERE payments_history.status = 'successful';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customers.name, payment_methods.payment_type FROM customers INNER JOIN payment_methods ON customers.id = payment_methods.customer_id WHERE payment_methods.expiration_date > NOW();",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payments_history.payment_date, payments_history.status, payments_history.failure_reason FROM payments_history WHERE payments_history.status = 'failed' AND payments_history.failure_reason IS NOT NULL ORDER BY payments_history.payment_date DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customers.name, notifications.notification_type, notifications.sent_date FROM customers JOIN notifications ON customers.id = notifications.customer_id WHERE notifications.sent_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customers.name, payment_methods.card_number FROM customers JOIN payment_methods ON customers.id = payment_methods.customer_id ORDER BY customers.name ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT payment_type FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(payment_amount) as max_payment_amount FROM recurring_payments GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(payment_amount) as avg_payment_amount FROM recurring_payments GROUP BY customer_id HAVING AVG(payment_amount) > 50;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT customer_id) as total_customers FROM recurring_payments;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) as total_notifications FROM notifications GROUP BY customer_id HAVING total_notifications > 2;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) as total_failed_payments FROM payments_history WHERE status = 'failed' GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(payment_amount) as min_payment_amount FROM recurring_payments GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payments_history.status, COUNT(*) as total_payments FROM payments_history GROUP BY payments_history.status;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customers.name, payments_history.payment_date, payments_history.status FROM customers INNER JOIN payments_history ON customers.id = payments_history.payment_id WHERE payments_history.payment_date < NOW();",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount, SUM(payment_amount) as total_amount_paid FROM recurring_payments GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE recurring_payments (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_amount INT NOT NULL,\n    payment_frequency VARCHAR(50) NOT NULL,\n    next_payment_date DATE NOT NULL\n);\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\nCREATE TABLE payments_history (\n    id UUID PRIMARY KEY,\n    payment_id UUID NOT NULL,\n    payment_date DATE NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    failure_reason TEXT\n);\n\nCREATE TABLE payment_methods (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    payment_type VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) UNIQUE,\n    expiration_date DATE\n);\n\nCREATE TABLE notifications (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL,\n    notification_type VARCHAR(50) NOT NULL,\n    message TEXT NOT NULL,\n    sent_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_type, COUNT(*) as total_cards FROM payment_methods GROUP BY customer_id HAVING total_cards > 1;"
]