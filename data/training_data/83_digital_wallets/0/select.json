[
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, payment_method FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT card_number, expiry_date FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE user_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT payment_method FROM User_Payment_Information WHERE card_number = '1234567890123456';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE expiry_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, cvv FROM User_Payment_Information WHERE payment_method = 'Credit Card';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT billing_address FROM User_Payment_Information WHERE user_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE billing_address LIKE '%California%';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT payment_method FROM User_Payment_Information WHERE cvv = 123;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE card_number LIKE '1234%';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE payment_method = 'PayPal' AND expiry_date > '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, billing_address FROM User_Payment_Information WHERE payment_method = 'Debit Card';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE cvv = 456 AND billing_address LIKE '%New York%';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT DISTINCT payment_method FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT AVG(cvv) FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT MAX(cvv) FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT MIN(cvv) FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) FROM User_Payment_Information GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE user_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, payment_method FROM User_Payment_Information WHERE card_number LIKE '%1234%';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE expiry_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT payment_method, COUNT(*) AS num_users FROM User_Payment_Information GROUP BY payment_method HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE cvv = 1234 AND billing_address LIKE '%Street%';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT DISTINCT payment_method FROM User_Payment_Information ORDER BY payment_method DESC;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, payment_method, card_number FROM User_Payment_Information WHERE card_number IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE LENGTH(billing_address) > 50;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, MAX(cvv) AS max_cvv FROM User_Payment_Information GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS num_entries FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE payment_method IN ('Credit Card', 'PayPal');",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT AVG(cvv) AS avg_cvv FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS num_payments FROM User_Payment_Information GROUP BY user_id HAVING COUNT(*) >= 2;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information ORDER BY user_id, payment_method DESC;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT DISTINCT payment_method, billing_address FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, card_number, DATE_FORMAT(expiry_date, '%Y-%m') AS expiry_month FROM User_Payment_Information;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE payment_method LIKE 'Visa%' OR payment_method LIKE 'Master%';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, payment_method, billing_address FROM User_Payment_Information WHERE card_number LIKE '5%' OR card_number LIKE '6%';",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT DISTINCT payment_method, COUNT(*) AS num_entries FROM User_Payment_Information GROUP BY payment_method;",
  "### TABLEDATA\n\nCREATE TABLE User_Payment_Information (\n  user_id INT,\n  payment_method VARCHAR(50),\n  card_number VARCHAR(16),\n  expiry_date DATE,\n  cvv INT,\n  billing_address VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM User_Payment_Information WHERE user_id IN (SELECT user_id FROM Users WHERE age >= 18);",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM user_payment_information;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_method FROM user_payment_information WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM user_payment_information WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(payment_amount) AS total_payment FROM user_payment_information GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM user_payment_information ORDER BY payment_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM user_payment_information LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT transaction_date, transaction_amount FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(transaction_id) AS transaction_count FROM transaction_history GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE status = 'success';",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(transaction_amount) AS max_transaction_amount FROM transaction_history GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT t.*, u.payment_method FROM transaction_history t JOIN user_payment_information u ON t.user_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT SUM(payment_amount) AS total_payment_amount FROM user_payment_information;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(transaction_amount) AS avg_transaction_amount FROM transaction_history GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(transaction_amount) AS min_transaction_amount FROM transaction_history GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM user_payment_information WHERE card_number LIKE '****1234%';",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(payment_amount) AS avg_payment_amount FROM user_payment_information GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, transaction_amount FROM transaction_history WHERE transaction_amount BETWEEN 100 AND 500;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_method, transaction_amount FROM user_payment_information JOIN transaction_history ON user_payment_information.user_id = transaction_history.user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transaction_history;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(payment_amount) AS avg_payment_amount FROM user_payment_information WHERE payment_method = 'credit card' GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_method FROM user_payment_information WHERE payment_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(payment_amount) AS total_payment FROM user_payment_information GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(transaction_id) AS total_transactions FROM transaction_history GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(payment_amount) AS max_payment FROM user_payment_information GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(payment_amount) AS avg_payment FROM user_payment_information GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_method, payment_amount FROM user_payment_information WHERE payment_amount > 500 AND payment_method = 'Credit Card'",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_method, payment_amount FROM user_payment_information WHERE payment_amount BETWEEN 100 AND 500",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(payment_amount) AS total_payment FROM user_payment_information WHERE payment_method = 'PayPal' GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_method FROM user_payment_information WHERE payment_method LIKE 'Visa%'",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(transaction_id) AS total_transactions FROM transaction_history WHERE status = 'Success' GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_amount FROM user_payment_information WHERE payment_amount = (SELECT MAX(payment_amount) FROM user_payment_information)",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_amount FROM user_payment_information WHERE user_id IN (SELECT user_id FROM transaction_history WHERE status = 'Pending')",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_amount FROM user_payment_information WHERE user_id NOT IN (SELECT user_id FROM transaction_history)",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_method, transaction_date FROM user_payment_information JOIN transaction_history ON user_payment_information.user_id = transaction_history.user_id",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_amount FROM user_payment_information WHERE user_id IN (SELECT user_id FROM user_payment_information GROUP BY user_id HAVING COUNT(user_id) > 1)",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_amount FROM user_payment_information WHERE user_id = 1001",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, transaction_amount FROM transaction_history WHERE user_id = 1001",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, payment_amount FROM user_payment_information ORDER BY payment_amount DESC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(payment_amount) AS total_payment FROM user_payment_information WHERE payment_amount > 0 GROUP BY user_id HAVING total_payment > 2000",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(payment_amount) AS min_payment FROM user_payment_information GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE user_payment_information (\n    user_id INT,\n    payment_method VARCHAR(50),\n    card_number VARCHAR(16),\n    payment_amount DECIMAL(10,2)\n);\n\nCREATE TABLE transaction_history (\n    transaction_id INT,\n    user_id INT,\n    transaction_date TIMESTAMP,\n    transaction_amount DECIMAL(10,2),\n    status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(transaction_amount) AS avg_transaction_amount FROM transaction_history WHERE status = 'Success' GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT payment_id, amount FROM payments WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT transaction_id, status, transaction_date FROM transactions WHERE payment_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT user_id, MAX(amount) FROM payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT payment_id, COUNT(*) FROM transactions GROUP BY payment_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT user_id, AVG(amount) FROM payments GROUP BY user_id HAVING AVG(amount) > 100;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT MAX(amount) AS max_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT MIN(amount) AS min_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) AS total_amount FROM payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT user_id, COUNT(DISTINCT payment_id) AS total_payments FROM payments GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT username, payment_date FROM users INNER JOIN payments ON users.user_id = payments.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT u.username, p.amount, t.status FROM users u INNER JOIN payments p ON u.user_id = p.user_id INNER JOIN transactions t ON p.payment_id = t.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM payments WHERE amount > 50;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM payments ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT users.username, payments.amount FROM users JOIN payments ON users.user_id = payments.user_id WHERE payments.amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT users.username, payments.amount, transactions.status FROM users JOIN payments ON users.user_id = payments.user_id JOIN transactions ON payments.payment_id = transactions.payment_id WHERE transactions.status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT users.username, COUNT(payments.payment_id) AS num_payments FROM users JOIN payments ON users.user_id = payments.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT users.username, SUM(payments.amount) AS total_amount FROM users JOIN payments ON users.user_id = payments.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT users.username FROM users JOIN payments ON users.user_id = payments.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users (user_id),\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n)\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID REFERENCES payments (payment_id),\n    status VARCHAR(20) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT users.username, payments.amount, transactions...",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT method_id, user_id FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT transaction_id, user_id FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM payment_history;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT history_id, user_id, transaction_id FROM payment_history;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT card_number, expiration_date FROM payment_methods WHERE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT amount FROM transactions WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT amount, timestamp FROM transactions WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT transaction_id, timestamp FROM payment_history WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT u.username, p.card_number FROM users u JOIN payment_methods p ON u.user_id = p.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT u.username, t.amount FROM users u JOIN transactions t ON u.user_id = t.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT u.username, ph.timestamp FROM users u JOIN payment_history ph ON u.user_id = ph.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE user_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE card_number LIKE '%1234';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT user_id, method_id, card_number FROM payment_methods WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT user_id, transaction_id, amount FROM transactions WHERE user_id = 1 AND amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE user_id = 1 ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT users.username, transactions.amount FROM users INNER JOIN transactions ON users.user_id = transactions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT users.username, payment_history.history_id FROM users LEFT JOIN payment_history ON users.user_id = payment_history.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_transaction_amount FROM transactions WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT users.username, payment_methods.card_number FROM users JOIN payment_methods ON users.user_id = payment_methods.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT users.username, payment_methods.card_number, transactions.amount FROM users, payment_methods, transactions WHERE users.user_id = payment_methods.user_id AND users.user_id = transactions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE email LIKE '%@domain.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount IN (50.00, 75.00, 100.00);",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT user_id) AS unique_users FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT username, SUM(amount) AS total_amount FROM users JOIN transactions ON users.user_id = transactions.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT user_id, MAX(timestamp) AS last_transaction FROM transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE payment_methods (\n  method_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  card_number VARCHAR(16) NOT NULL,\n  expiration_date DATE NOT NULL,\n  cvv VARCHAR(3) NOT NULL\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  amount DECIMAL(10,2) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE payment_history (\n  history_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  transaction_id INT REFERENCES transactions(transaction_id),\n  timestamp TIMESTAMP NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_payments FROM (SELECT DISTINCT transaction_id FROM payment_history) AS unique_payments;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE username = 'JohnDoe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM credit_cards;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT card_number, expiration_date FROM credit_cards;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT amount, transaction_date FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT method_type, account_number FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM billing_addresses;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT street_address, city, state, zip_code FROM billing_addresses;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email, password FROM users WHERE email = 'example@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT card_number, expiration_date FROM credit_cards WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT amount FROM transactions WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT method_type, account_number FROM payment_methods WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT street_address, city, state, zip_code FROM billing_addresses WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users JOIN credit_cards ON users.user_id = credit_cards.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users JOIN transactions ON users.user_id = transactions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users JOIN payment_methods ON users.user_id = payment_methods.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users JOIN billing_addresses ON users.user_id = billing_addresses.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT card_id, card_number, expiration_date FROM credit_cards WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transactions WHERE user_id = '123e4567-e89b-12d3-a456-426614174000' ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT method_id, method_type FROM payment_methods WHERE account_number IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM billing_addresses WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, transactions.amount FROM users JOIN transactions ON users.user_id = transactions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, payment_methods.method_type FROM users JOIN payment_methods ON users.user_id = payment_methods.user_id WHERE payment_methods.method_type = 'credit card';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, billing_addresses.city FROM users JOIN billing_addresses ON users.user_id = billing_addresses.user_id WHERE billing_addresses.state = 'California';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, credit_cards.card_number, credit_cards.expiration_date FROM users JOIN credit_cards ON users.user_id = credit_cards.user_id ORDER BY credit_cards.expiration_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, payment_methods.method_type, billing_addresses.zip_code FROM users JOIN payment_methods ON users.user_id = payment_methods.user_id JOIN billing_addresses ON users.user_id = billing_addresses.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(amount) AS max_transaction_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(amount) AS min_transaction_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_transaction_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT city FROM billing_addresses;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, SUM(transactions.amount) AS total_spent FROM users JOIN transactions ON users.user_id = transactions.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT billing_addresses.city, COUNT(*) AS total_users FROM billing_addresses GROUP BY billing_addresses.city HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE credit_cards (\n    card_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    amount DECIMAL(10,2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    method_type VARCHAR(20) NOT NULL,\n    account_number VARCHAR(20)\n);\n\nCREATE TABLE billing_addresses (\n    address_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(20) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, credit_cards.card_number, payment_methods.method_type FROM users JOIN credit_cards ON users.user_id = credit_cards.user_id JOIN payment_methods ON users.user_id = payment_methods.user_id WHERE payment_methods.method_type = 'debit card';"
]