[
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM currencies WHERE currency_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, exchange_rate FROM currencies WHERE country_code = 'USD';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_id, currency_name FROM currencies WHERE exchange_rate > 1.5;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM currencies WHERE exchange_rate < 1.0;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(exchange_rate) FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM currencies WHERE country_code = 'EUR';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT MAX(exchange_rate) FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT MIN(exchange_rate) FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name FROM currencies WHERE currency_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT country_code FROM currencies WHERE currency_name = 'Euro';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM currencies WHERE exchange_rate BETWEEN 1.0 AND 2.0;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_id, country_code FROM currencies WHERE currency_name LIKE 'Dollar%';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, exchange_rate FROM currencies ORDER BY exchange_rate DESC;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT country_code FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM currencies WHERE country_code IN ('USD', 'EUR', 'GBP');",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, exchange_rate FROM currencies WHERE country_code = 'JPY' OR country_code = 'CNY';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM currencies WHERE currency_id = 5 OR currency_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name FROM currencies WHERE exchange_rate BETWEEN 1.0 AND 2.0 ORDER BY exchange_rate DESC;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(exchange_rate) AS average_rate FROM currencies GROUP BY country_code HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, exchange_rate FROM currencies WHERE currency_name <> 'Pound';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, country_code FROM currencies WHERE exchange_rate > 1.5",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM currencies WHERE currency_id = 5",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, exchange_rate FROM currencies WHERE currency_id BETWEEN 10 AND 20",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(currency_id) AS total_currencies FROM currencies",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, exchange_rate FROM currencies WHERE country_code = 'USD' AND exchange_rate < 1.0",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT MAX(exchange_rate) AS highest_exchange_rate FROM currencies",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(exchange_rate) AS average_exchange_rate FROM currencies",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, country_code, exchange_rate FROM currencies WHERE currency_name LIKE '%Dollar%'",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT country_code FROM currencies",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, currency_id FROM currencies WHERE currency_name IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_id, currency_name FROM currencies WHERE exchange_rate IN (1.2, 1.5, 1.8)",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_id, country_code FROM currencies WHERE exchange_rate < 1.0 ORDER BY exchange_rate DESC",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM currencies WHERE country_code IN ('EUR', 'GBP', 'JPY')",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, exchange_rate FROM currencies ORDER BY exchange_rate ASC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT country_code) AS unique_countries FROM currencies",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, exchange_rate FROM currencies WHERE currency_name = 'Euro' AND country_code = 'EUR'",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(exchange_rate) AS avg_rate_per_country, country_code FROM currencies GROUP BY country_code",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, exchange_rate FROM currencies WHERE exchange_rate BETWEEN 1.0 AND 2.0",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_id, country_code FROM currencies WHERE currency_name LIKE 'US%'",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  currency_id INT PRIMARY KEY,\n  currency_name VARCHAR(50) NOT NULL,\n  country_code VARCHAR(3) NOT NULL,\n  exchange_rate DECIMAL(10,2) NOT NULL\n)\n\n### STATEMENT\n\nSELECT currency_name, exchange_rate FROM currencies WHERE country_code = 'EUR' AND currency_id < 10",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT currency_code, country_name FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT currency_code, exchange_rate FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT country_name FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT transaction_date, amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT currency_code FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, currency_code FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT c.currency_code, c.country_name, t.amount FROM currencies c INNER JOIN transactions t ON c.currency_code = t.currency_code;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT c.country_name, t.transaction_date, t.amount FROM currencies c INNER JOIN transactions t ON c.currency_code = t.currency_code;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT c.currency_code, AVG(t.amount) as avg_amount FROM currencies c INNER JOIN transactions t ON c.currency_code = t.currency_code GROUP BY c.currency_code;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT c.currency_code, SUM(t.amount) as total_amount FROM currencies c INNER JOIN transactions t ON c.currency_code = t.currency_code GROUP BY c.currency_code;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT c.country_name, COUNT(t.transaction_id) as total_transactions FROM currencies c INNER JOIN transactions t ON c.currency_code = t.currency_code GROUP BY c.country_name;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT c.currency_code, t.amount FROM currencies c LEFT JOIN transactions t ON c.currency_code = t.currency_code;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT c.country_name, t.transaction_date, t.amount FROM currencies c LEFT JOIN transactions t ON c.currency_code = t.currency_code;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM currencies WHERE currency_code = 'USD';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT currency_code, country_name FROM currencies WHERE exchange_rate > 1",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT country_name, AVG(exchange_rate) FROM currencies GROUP BY country_name HAVING AVG(exchange_rate) < 2",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT currency_code, SUM(amount) FROM transactions GROUP BY currency_code HAVING SUM(amount) > 1000",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT currency_code, COUNT(transaction_id) FROM transactions GROUP BY currency_code HAVING COUNT(transaction_id) > 5",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM currencies JOIN transactions ON currencies.currency_code = transactions.currency_code",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT currency_code, country_name, exchange_rate FROM currencies WHERE currency_code IN ('USD', 'EUR', 'GBP')",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transactions WHERE amount > 500",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT DISTINCT currency_code FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT country_name, MAX(exchange_rate) FROM currencies GROUP BY country_name",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT currency_code, AVG(amount) FROM transactions GROUP BY currency_code HAVING AVG(amount) < 500",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT transaction_date, SUM(amount) FROM transactions WHERE currency_code = 'JPY' GROUP BY transaction_date ORDER BY transaction_date DESC",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT currency_code, COUNT(DISTINCT country_name) FROM currencies GROUP BY currency_code",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT AVG(amount), MIN(amount), MAX(amount) FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT country_name, SUM(amount*exchange_rate) AS total_amount FROM currencies JOIN transactions ON currencies.currency_code = transactions.currency_code GROUP BY country_name",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT currency_code, COUNT(*) FROM transactions GROUP BY currency_code HAVING COUNT(*) > 2",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE EXTRACT(MONTH FROM transaction_date) = 10",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount, country_name FROM transactions JOIN currencies ON transactions.currency_code = currencies.currency_code",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT currency_code, country_name, AVG(exchange_rate) FROM currencies GROUP BY currency_code ORDER BY AVG(exchange_rate) DESC",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_code VARCHAR(3),\n    country_name VARCHAR(50),\n    exchange_rate DECIMAL(10, 2)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    currency_code VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT COUNT(transaction_id), AVG(amount), SUM(amount) FROM transactions GROUP BY currency_code HAVING AVG(amount) > 500",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM international_transactions;",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT sender_name, receiver_name, amount FROM international_transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT user_name, country FROM users ORDER BY country ASC;",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, currency_code FROM international_transactions WHERE currency_code = 'USD';",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT sender_name, receiver_name FROM international_transactions WHERE sender_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM currency_rates WHERE exchange_rate > 1.5;",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT user_name FROM users WHERE country = 'USA';",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT sender_name, receiver_name, amount, currency_code FROM international_transactions ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT user_name, preferred_currency FROM users WHERE preferred_currency = 'EUR';",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT transaction_id, sender_name, amount, currency_code FROM international_transactions WHERE amount < 500;",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT sender_name, receiver_name, amount, currency_code FROM international_transactions WHERE currency_code = 'EUR';",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM currency_rates WHERE exchange_rate < 0.9;",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT user_name, country, preferred_currency FROM users WHERE country = 'UK';",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT sender_name, amount, currency_code FROM international_transactions WHERE sender_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM international_transactions WHERE amount BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT user_name FROM users WHERE country IN ('USA', 'Canada');",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT sender_name, receiver_name, amount FROM international_transactions WHERE currency_code = 'GBP';",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT sender_name, receiver_name FROM international_transactions WHERE sender_name = 'Bob';",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE preferred_currency IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM international_transactions WHERE amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT sender_name, receiver_name, amount FROM international_transactions WHERE currency_code = 'USD'",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT user_name, country, preferred_currency FROM users WHERE country = 'USA'",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM international_transactions WHERE amount > 5000 ORDER BY amount DESC",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT sender_name, receiver_name, amount FROM international_transactions WHERE currency_code = 'EUR' AND amount BETWEEN 1000 AND 5000",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT user_name, preferred_currency, exchange_rate FROM users JOIN currency_rates ON users.preferred_currency = currency_rates.currency_code",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM international_transactions WHERE currency_code = 'GBP' AND amount < 500 ORDER BY amount ASC",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT sender_name, receiver_name, amount FROM international_transactions WHERE amount > 1000 AND (sender_name = 'Alice' OR receiver_name = 'Bob')",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT user_name, country, exchange_rate FROM users JOIN currency_rates ON users.preferred_currency = currency_rates.currency_code WHERE country = 'Germany'",
  "### TABLEDATA\n\nCREATE TABLE international_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_name VARCHAR(50),\n  receiver_name VARCHAR(50),\n  amount DECIMAL(10, 2),\n  currency_code VARCHAR(3)\n);\n\nCREATE TABLE currency_rates (\n  currency_code VARCHAR(3) PRIMARY KEY,\n  exchange_rate DECIMAL(10, 6)\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  country VARCHAR(50),\n  preferred_currency VARCHAR(3)\n);\n\n### STATEMENT\n\nSELECT * FROM international_transactions WHERE amount < 100 ORDER BY transaction_id ASC",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT currency_code, currency_name FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT currency_code, currency_name FROM currencies WHERE currency_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT currency_code, currency_name FROM currencies WHERE currency_name = 'USD';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM exchange_rates;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT from_currency_id, to_currency_id, exchange_rate FROM exchange_rates;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT from_currency_id, to_currency_id, exchange_rate FROM exchange_rates WHERE exchange_rate > 1;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT amount, from_currency_id, to_currency_id FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT amount, from_currency_id, to_currency_id FROM transactions WHERE transaction_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM currencies JOIN exchange_rates ON currencies.currency_id = exchange_rates.from_currency_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT currencies.currency_code, exchange_rates.exchange_rate FROM currencies JOIN exchange_rates ON currencies.currency_id = exchange_rates.from_currency_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions JOIN currencies ON transactions.from_currency_id = currencies.currency_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transactions.amount, currencies.currency_name FROM transactions JOIN currencies ON transactions.from_currency_id = currencies.currency_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions JOIN users ON transactions.from_currency_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transactions.amount, users.username FROM transactions JOIN users ON transactions.from_currency_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions JOIN users ON transactions.from_currency_id = users.user_id WHERE users.username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM currencies WHERE currency_code = 'USD';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT currency_name FROM currencies WHERE currency_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM currencies WHERE currency_name LIKE '%Dollar%';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM exchange_rates WHERE exchange_rate > 1.5;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM exchange_rates WHERE from_currency_id = 1 AND to_currency_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM exchange_rates WHERE exchange_rate < 1.0 ORDER BY exchange_rate DESC;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transactions.transaction_id, transactions.amount, currencies.currency_name FROM transactions INNER JOIN currencies ON transactions.from_currency_id = currencies.currency_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transactions.amount, currencies.currency_name, users.username FROM transactions INNER JOIN currencies ON transactions.from_currency_id = currencies.currency_id INNER JOIN users ON transactions.from_currency_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, COUNT(transactions.transaction_id) AS transaction_count FROM users LEFT JOIN transactions ON users.user_id = transactions.from_currency_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT currencies.currency_code, AVG(exchange_rate) AS avg_exchange_rate FROM exchange_rates INNER JOIN currencies ON exchange_rates.from_currency_id = currencies.currency_id GROUP BY currencies.currency_code;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, SUM(transactions.amount) AS total_amount FROM users LEFT JOIN transactions ON users.user_id = transactions.from_currency_id GROUP BY users.username HAVING SUM(transactions.amount) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM exchange_rates WHERE rate_id IN (SELECT MAX(rate_id) FROM exchange_rates);",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT currencies.currency_name, COUNT(transactions.transaction_id) AS transaction_count FROM currencies LEFT JOIN transactions ON currencies.currency_id = transactions.from_currency_id GROUP BY currencies.currency_name ORDER BY transaction_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, SUM(transactions.amount) AS total_amount FROM users LEFT JOIN transactions ON users.user_id = transactions.from_currency_id WHERE transactions.transaction_date >= '2022-03-01' GROUP BY users.username HAVING SUM(transactions.amount) > 5000;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM currencies WHERE currency_id IN (SELECT from_currency_id FROM exchange_rates WHERE exchange_rate < 1.0);",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, MAX(transactions.amount) AS max_amount FROM users LEFT JOIN transactions ON users.user_id = transactions.from_currency_id GROUP BY users.username ORDER BY max_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount = (SELECT MAX(amount) FROM transactions);",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT from_currency_id, SUM(amount) AS total_amount FROM transactions GROUP BY from_currency_id HAVING SUM(amount) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n    currency_id INT PRIMARY KEY,\n    currency_code VARCHAR(3) NOT NULL,\n    currency_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE exchange_rates (\n    rate_id INT PRIMARY KEY,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    exchange_rate DECIMAL(10, 4) NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL(15, 2) NOT NULL,\n    from_currency_id INT NOT NULL,\n    to_currency_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    FOREIGN KEY (from_currency_id) REFERENCES currencies(currency_id),\n    FOREIGN KEY (to_currency_id) REFERENCES currencies(currency_id)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, AVG(transactions.amount) AS avg_amount FROM users LEFT JOIN transactions ON users.user_id = transactions.from_currency_id GROUP BY users.username ORDER BY avg_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT country FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT currency_code, country FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT amount, transaction_date FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM exchange_rates;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT rate FROM exchange_rates;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT from_currency_id, to_currency_id, rate FROM exchange_rates;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT balance FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, balance FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, amount, balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id INNER JOIN transactions ON accounts.account_id = transactions.currency_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.country, t.amount, e.rate FROM currencies c INNER JOIN transactions t ON c.id = t.currency_id INNER JOIN exchange_rates e ON t.currency_id = e.from_currency_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.country, t.amount, e.rate FROM currencies c INNER JOIN transactions t ON c.id = t.currency_id INNER JOIN exchange_rates e ON t.from_currency_id = e.from_currency_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM currencies;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT currency_code, country FROM currencies WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT currency_code, country FROM currencies WHERE country LIKE 'U%';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, currency_id, transaction_date FROM transactions WHERE currency_id IN (SELECT id FROM currencies WHERE country = 'USA');",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM exchange_rates WHERE rate > 1.5;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT from_currency_id, to_currency_id, rate FROM exchange_rates WHERE from_currency_id = 1 AND rate < 1.0;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers WHERE email IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE customer_name LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM accounts WHERE balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, customer_id, balance FROM accounts WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_name = 'Alice');",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM currencies INNER JOIN transactions ON currencies.id = transactions.currency_id;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions INNER JOIN currencies ON transactions.currency_id = currencies.id WHERE transactions.amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM exchange_rates INNER JOIN currencies AS from_currency ON exchange_rates.from_currency_id = from_currency.id INNER JOIN currencies AS to_currency ON exchange_rates.to_currency_id = to_currency.id WHERE from_currency.country = 'USA' AND to_currency.country = 'UK';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, balance FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE balance IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, balance FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE balance > 10000;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, balance FROM customers RIGHT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE email IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, balance FROM customers RIGHT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE email = 'john@example.com';",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(balance) AS total_balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_name HAVING SUM(balance) > 50000;",
  "### TABLEDATA\n\nCREATE TABLE currencies (\n  id SERIAL PRIMARY KEY,\n  currency_code VARCHAR(3) NOT NULL,\n  country VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  amount DECIMAL(10,2) NOT NULL,\n  currency_id INT REFERENCES currencies(id) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE exchange_rates (\n  from_currency_id INT REFERENCES currencies(id) NOT NULL,\n  to_currency_id INT REFERENCES currencies(id) NOT NULL,\n  rate DECIMAL(10,5) NOT NULL,\n  PRIMARY KEY (from_currency_id, to_currency_id)\n);\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name VARCHAR(100) NOT NULL,\n  email VARCHAR(100)\n);\n\nCREATE TABLE accounts (\n  account_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id) NOT NULL,\n  balance DECIMAL(15,2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, AVG(balance) AS avg_balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_id HAVING AVG(balance) < 0;"
]