<t>CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor_name VARCHAR(255) NOT NULL, start_date DATE, end_date DATE)</t><stat>UPSERT INTO Courses (course_id, course_name, instructor_name, start_date, end_date) VALUES (1, 'Mathematics', 'John Doe', '2022-01-10', '2022-05-10')</stat><divider><t>CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor_name VARCHAR(255) NOT NULL, start_date DATE, end_date DATE)</t><stat>upsert into courses (course_id, course_name, instructor_name, start_date, end_date) values (1, 'mathematics', 'john doe', '2022-01-10', '2022-05-10')</stat><divider><t>CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor_name VARCHAR(255) NOT NULL, start_date DATE, end_date DATE)</t><stat>UPSERT INTO Courses (course_id, course_name, instructor_name, start_date, end_date) VALUES (2, 'Science', 'Jane Smith', '2022-02-15', '2022-06-15')</stat><divider><t>CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor_name VARCHAR(255) NOT NULL, start_date DATE, end_date DATE)</t><stat>upsert into courses (course_id, course_name, instructor_name, start_date, end_date) values (2, 'science', 'jane smith', '2022-02-15', '2022-06-15')</stat><divider><t>CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor_name VARCHAR(255) NOT NULL, start_date DATE, end_date DATE)</t><stat>UPSERT INTO Courses (course_id, course_name, instructor_name, start_date, end_date) VALUES (3, 'History', 'Michael Johnson', '2022-03-20', '2022-07-20')</stat><divider><t>CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor_name VARCHAR(255) NOT NULL, start_date DATE, end_date DATE)</t><stat>upsert into courses (course_id, course_name, instructor_name, start_date, end_date) values (3, 'history', 'michael johnson', '2022-03-20', '2022-07-20')</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);</t><stat>UPSERT INTO courses (course_id, course_name, instructor_id, start_date, end_date) VALUES (1, 'Mathematics', 101, '2022-01-01', '2022-06-30') ON CONFLICT (course_id) DO UPDATE SET course_name = 'Mathematics', instructor_id = 101, start_date = '2022-01-01', end_date = '2022-06-30';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);</t><stat>upsert into courses (course_id, course_name, instructor_id, start_date, end_date) values (1, 'mathematics', 101, '2022-01-01', '2022-06-30') on conflict (course_id) do update set course_name = 'mathematics', instructor_id = 101, start_date = '2022-01-01', end_date = '2022-06-30';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);</t><stat>UPSERT INTO courses (course_id, course_name, instructor_id, start_date, end_date) VALUES (1, 'Mathematics', 101, '2022-01-01', '2022-06-30') ON CONFLICT (course_id) DO UPDATE SET course_name = 'Mathematics', instructor_id = 101, start_date = '2022-01-01', end_date = '2022-06-30';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);</t><stat>upsert into courses (course_id, course_name, instructor_id, start_date, end_date) values (1, 'mathematics', 101, '2022-01-01', '2022-06-30') on conflict (course_id) do update set course_name = 'mathematics', instructor_id = 101, start_date = '2022-01-01', end_date = '2022-06-30';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);</t><stat>UPSERT INTO students (student_id, student_name, email, enrolled_courses) VALUES (101, 'Alice Smith', 'alice@example.com', {'mathematics': true, 'physics': false}) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice Smith', email = 'alice@example.com', enrolled_courses = {'mathematics': true, 'physics': false};</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);</t><stat>upsert into students (student_id, student_name, email, enrolled_courses) values (101, 'alice smith', 'alice@example.com', {'mathematics': true, 'physics': false}) on conflict (student_id) do update set student_name = 'alice smith', email = 'alice@example.com', enrolled_courses = {'mathematics': true, 'physics': false};</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);</t><stat>UPSERT INTO students (student_id, student_name, email, enrolled_courses) VALUES (101, 'Alice Smith', 'alice@example.com', {'mathematics': true, 'physics': false}) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice Smith', email = 'alice@example.com', enrolled_courses = {'mathematics': true, 'physics': false};</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);</t><stat>upsert into students (student_id, student_name, email, enrolled_courses) values (101, 'alice smith', 'alice@example.com', {'mathematics': true, 'physics': false}) on conflict (student_id) do update set student_name = 'alice smith', email = 'alice@example.com', enrolled_courses = {'mathematics': true, 'physics': false};</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);</t><stat>UPSERT INTO courses (course_id, course_name, instructor_id, start_date, end_date) VALUES (2, 'Physics', 102, '2022-02-01', '2022-07-31') ON CONFLICT (course_id) DO UPDATE SET course_name = 'Physics', instructor_id = 102, start_date = '2022-02-01', end_date = '2022-07-31';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);</t><stat>upsert into courses (course_id, course_name, instructor_id, start_date, end_date) values (2, 'physics', 102, '2022-02-01', '2022-07-31') on conflict (course_id) do update set course_name = 'physics', instructor_id = 102, start_date = '2022-02-01', end_date = '2022-07-31';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);</t><stat>UPSERT INTO courses (course_id, course_name, instructor_id, start_date, end_date) VALUES (2, 'Physics', 102, '2022-02-01', '2022-07-31') ON CONFLICT (course_id) DO UPDATE SET course_name = 'Physics', instructor_id = 102, start_date = '2022-02-01', end_date = '2022-07-31';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), email VARCHAR(255), enrolled_courses JSONB);

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE);</t><stat>upsert into courses (course_id, course_name, instructor_id, start_date, end_date) values (2, 'physics', 102, '2022-02-01', '2022-07-31') on conflict (course_id) do update set course_name = 'physics', instructor_id = 102, start_date = '2022-02-01', end_date = '2022-07-31';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE, end_date DATE, description TEXT)</t><stat>UPSERT INTO courses (course_id, course_name, instructor, start_date, end_date, description) VALUES (1, 'Mathematics', 'Professor Smith', '2022-01-10', '2022-05-10', 'Advanced calculus course')</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE, end_date DATE, description TEXT)</t><stat>upsert into courses (course_id, course_name, instructor, start_date, end_date, description) values (1, 'mathematics', 'professor smith', '2022-01-10', '2022-05-10', 'advanced calculus course')</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE, end_date DATE, description TEXT)</t><stat>UPSERT INTO courses (course_id, course_name, instructor, start_date, end_date, description) VALUES (2, 'History', 'Professor Johnson', '2022-02-15', '2022-06-15', 'World History course')</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE, end_date DATE, description TEXT)</t><stat>upsert into courses (course_id, course_name, instructor, start_date, end_date, description) values (2, 'history', 'professor johnson', '2022-02-15', '2022-06-15', 'world history course')</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE, end_date DATE, description TEXT)</t><stat>UPSERT INTO courses (course_id, course_name, instructor, start_date, end_date, description) VALUES (3, 'Computer Science', 'Professor Williams', '2022-03-20', '2022-07-20', 'Introduction to programming course')</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE, end_date DATE, description TEXT)</t><stat>upsert into courses (course_id, course_name, instructor, start_date, end_date, description) values (3, 'computer science', 'professor williams', '2022-03-20', '2022-07-20', 'introduction to programming course')</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO courses(id, course_name, instructor, start_date, end_date) VALUES ('1', 'Mathematics 101', 'Prof. Smith', '2022-01-01', '2022-05-30') ON CONFLICT (id) DO UPDATE SET course_name = EXCLUDED.course_name, instructor = EXCLUDED.instructor, start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into courses(id, course_name, instructor, start_date, end_date) values ('1', 'mathematics 101', 'prof. smith', '2022-01-01', '2022-05-30') on conflict (id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO students(id, student_name, email, enrollment_date) VALUES ('1', 'John Doe', 'john.doe@example.com', '2022-01-15') ON CONFLICT (id) DO UPDATE SET student_name = EXCLUDED.student_name, email = EXCLUDED.email, enrollment_date = EXCLUDED.enrollment_date;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into students(id, student_name, email, enrollment_date) values ('1', 'john doe', 'john.doe@example.com', '2022-01-15') on conflict (id) do update set student_name = excluded.student_name, email = excluded.email, enrollment_date = excluded.enrollment_date;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>UPSERT INTO lessons(id, lesson_name, course_id, lesson_content) VALUES ('1', 'Introduction to Algebra', '1', 'Basic algebra concepts') ON CONFLICT (id) DO UPDATE SET lesson_name = EXCLUDED.lesson_name, course_id = EXCLUDED.course_id, lesson_content = EXCLUDED.lesson_content;</stat><divider><t>CREATE TABLE assignments(id UUID PRIMARY KEY, assignment_name STRING, student_id UUID REFERENCES students(id), lesson_id UUID REFERENCES lessons(id), submission_date DATE);

CREATE TABLE lessons(id UUID PRIMARY KEY, lesson_name STRING, course_id UUID REFERENCES courses(id), lesson_content TEXT);

CREATE TABLE students(id UUID PRIMARY KEY, student_name STRING, email STRING, enrollment_date DATE);

CREATE TABLE courses(id UUID PRIMARY KEY, course_name STRING, instructor STRING, start_date DATE, end_date DATE);</t><stat>upsert into lessons(id, lesson_name, course_id, lesson_content) values ('1', 'introduction to algebra', '1', 'basic algebra concepts') on conflict (id) do update set lesson_name = excluded.lesson_name, course_id = excluded.course_id, lesson_content = excluded.lesson_content;</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE NOT NULL, end_date DATE NOT NULL)</t><stat>INSERT INTO courses (course_id, course_name, instructor, start_date, end_date) VALUES (101, 'Mathematics', 'John Doe', '2022-01-01', '2022-06-30') ON CONFLICT(course_id) DO UPDATE SET course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE NOT NULL, end_date DATE NOT NULL)</t><stat>insert into courses (course_id, course_name, instructor, start_date, end_date) values (101, 'mathematics', 'john doe', '2022-01-01', '2022-06-30') on conflict(course_id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE NOT NULL, end_date DATE NOT NULL)</t><stat>INSERT INTO courses (course_id, course_name, instructor, start_date, end_date) VALUES (102, 'Science', 'Jane Smith', '2022-02-15', '2022-08-15') ON CONFLICT(course_id) DO UPDATE SET course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE NOT NULL, end_date DATE NOT NULL)</t><stat>insert into courses (course_id, course_name, instructor, start_date, end_date) values (102, 'science', 'jane smith', '2022-02-15', '2022-08-15') on conflict(course_id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE NOT NULL, end_date DATE NOT NULL)</t><stat>INSERT INTO courses (course_id, course_name, instructor, start_date, end_date) VALUES (103, 'History', 'Michael Johnson', '2022-03-10', '2022-09-10') ON CONFLICT(course_id) DO UPDATE SET course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor VARCHAR(255) NOT NULL, start_date DATE NOT NULL, end_date DATE NOT NULL)</t><stat>insert into courses (course_id, course_name, instructor, start_date, end_date) values (103, 'history', 'michael johnson', '2022-03-10', '2022-09-10') on conflict(course_id) do update set course_name = excluded.course_name, instructor = excluded.instructor, start_date = excluded.start_date, end_date = excluded.end_date;</stat>