[
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, first_name, last_name FROM students WHERE enrollment_status = 'Inactive';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE first_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE last_name = 'Smith';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, email FROM students WHERE enrollment_status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE first_name = 'John' AND last_name = 'Doe';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_status <> 'Inactive';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, first_name, last_name, email FROM students WHERE enrollment_status = 'Graduated';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE id = 5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM students WHERE enrollment_status = 'Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE last_name LIKE '%son%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_status = 'Dropped' AND last_name = 'Johnson';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, first_name, last_name, email FROM students WHERE enrollment_status = 'Suspended';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE first_name = 'Sarah' OR first_name = 'Emily';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_status = 'Active' OR enrollment_status = 'Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, first_name, last_name FROM students WHERE enrollment_status IN ('Active', 'Enrolled');",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, first_name, last_name, email FROM students WHERE last_name <> 'Garcia';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_status = 'Active' OR enrollment_status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, first_name, last_name, email FROM students WHERE first_name = 'Alex' AND enrollment_status = 'Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM students WHERE enrollment_status = 'Inactive';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, first_name, last_name, email FROM students WHERE enrollment_status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE first_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, first_name, last_name, email FROM students WHERE id > 100 AND enrollment_status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE last_name = 'Smith' OR last_name = 'Johnson';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM students WHERE enrollment_status = 'Active' OR enrollment_status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE first_name = 'John' AND last_name = 'Doe';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, first_name, last_name, email FROM students WHERE enrollment_status != 'Inactive';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_status = 'Active' AND first_name LIKE '%son%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE first_name <> 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_status IN ('Active', 'Pending');",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM students WHERE id BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE last_name LIKE '%son%' AND enrollment_status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, first_name, last_name, email FROM students WHERE first_name = 'Emma' OR first_name = 'Olivia';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE first_name NOT LIKE '%a%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_status = 'Active' ORDER BY last_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_status = 'Pending' ORDER BY id DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE first_name LIKE 'J%' ORDER BY last_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(20) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE email = 'test@example.com';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT name, email FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, name, email, enrollment_status FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Course;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, instructor FROM Course;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_id, course_name, instructor FROM Course;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT name, email, course_name FROM Student, Course;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT Student.name, Course.course_name FROM Student, Course;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT Student.name AS student_name, Course.course_name AS course_name FROM Student, Course;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Student WHERE enrollment_status = 'Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, name, email FROM Student WHERE enrollment_status = 'Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT name, email FROM Student WHERE enrollment_status = 'Not Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Course WHERE instructor = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_id, course_name FROM Course WHERE instructor = 'Jane Smith';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT name, email, course_name FROM Student, Course WHERE Student.name = 'Alice' AND Course.course_name = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT Student.name AS student_name, Course.course_name AS course_name FROM Student, Course WHERE Student.student_id = 1 AND Course.course_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Student ORDER BY name ASC;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Course ORDER BY instructor DESC;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(student_id) AS average_student_id FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(course_id) AS total_courses FROM Course;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Student WHERE enrollment_status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT name, email FROM Student WHERE enrollment_status = 'Inactive';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Student WHERE name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Course WHERE course_name = 'Mathematics';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, enrollment_status FROM Student WHERE email = 'john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_id, course_name FROM Course WHERE instructor = 'Professor Smith';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Student WHERE enrollment_status = 'Active' AND name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Course WHERE course_name LIKE '%Science%';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Student INNER JOIN Course ON Student.student_id = Course.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Student LEFT JOIN Course ON Student.student_id = Course.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Student RIGHT JOIN Course ON Student.student_id = Course.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Student JOIN Course ON Student.student_id = Course.course_id WHERE Student.enrollment_status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT enrollment_status FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Student WHERE enrollment_status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(student_id) FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(student_id) FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(student_id) FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(student_id) FROM Student;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(course_id) FROM Course;",
  "### TABLEDATA\n\nCREATE TABLE Student (\n    student_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enrollment_status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Course (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(100) NOT NULL,\n    instructor VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT instructor, COUNT(*) FROM Course GROUP BY instructor;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, name, email FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT name, enrollment_status FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_name, department FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, enrollment_date FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, e.enrollment_date FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT s.name AS student_name, c.course_name AS course_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT s.name AS student_name, c.course_name AS course_name, e.enrollment_date FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Students WHERE enrollment_status = 'Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Courses WHERE department = 'Computer Science';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Enrollments WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id WHERE s.name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id WHERE c.department = 'Mathematics';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS Total_Enrollments FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(course_id) AS Avg_Course_ID FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(enrollment_date) AS Latest_Enrollment FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT name, email FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, name, email FROM Students WHERE enrollment_status = 'Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_name, department FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_id, course_name, department FROM Courses WHERE course_name LIKE '%Science%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, enrollment_date FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT Students.name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id WHERE Students.enrollment_status = 'Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT Courses.course_name, COUNT(Enrollments.student_id) AS num_students FROM Courses LEFT JOIN Enrollments ON Courses.course_id = Enrollments.course_id GROUP BY Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students, Courses, Enrollments WHERE Students.student_id = Enrollments.student_id AND Courses.course_id = Enrollments.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Students WHERE student_id IN (SELECT student_id FROM Enrollments WHERE course_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Courses WHERE department = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE Students.enrollment_status = 'Enrolled' AND Courses.department = 'Science';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(DATEDIFF(NOW(), enrollment_date)) AS avg_days_enrolled FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT Courses.course_name, COUNT(DISTINCT Enrollments.student_id) AS num_students_enrolled FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id GROUP BY Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT Students.name AS student_name, Courses.course_name AS course_name, DATEDIFF(NOW(), Enrollments.enrollment_date) AS days_enrolled FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, SUM(DATEDIFF(NOW(), enrollment_date)) AS total_days_enrolled FROM Enrollments GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  enrollment_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(100) NOT NULL,\n  department VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT REFERENCES Students(student_id),\n  course_id INT REFERENCES Courses(course_id),\n  enrollment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, COUNT(Enrollments.enrollment_id) AS num_enrollments FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id GROUP BY Students.name, Courses.course_name HAVING COUNT(Enrollments.enrollment_id) >= 2;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT name, email FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT enrollment_status FROM students WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT * FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT course_name, instructor FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT * FROM enrollments;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT student_id, course_id FROM enrollments WHERE enrollment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT * FROM grades;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT student_id, course_id FROM grades WHERE grade_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT name, enrollment_date FROM students JOIN enrollments ON students.id = enrollments.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT course_name, instructor FROM courses JOIN enrollments ON courses.course_id = enrollments.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT name, grade FROM students JOIN grades ON students.id = grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT course_name, grade FROM courses JOIN grades ON courses.course_id = grades.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, e.enrollment_date FROM students s JOIN enrollments e ON s.id = e.student_id JOIN courses c ON e.course_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, g.grade FROM students s JOIN grades g ON s.id = g.student_id JOIN courses c ON g.course_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name AS student_name, e.enrollment_date FROM students s JOIN enrollments e ON s.id = e.student_id WHERE s.enrollment_status = 'Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT c.course_name AS course, g.grade FROM courses c JOIN grades g ON c.course_id = g.course_id WHERE g.grade >= 'B';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name AS student_name, c.course_name AS course, g.grade FROM students s JOIN grades g ON s.id = g.student_id JOIN courses c ON g.course_id = c.course_id WHERE g.grade IN ('A', 'A-', 'B+');",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name AS student_name, COUNT(g.grade) AS total_grades FROM students s JOIN grades g ON s.id = g.student_id GROUP BY s.id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT c.course_name AS course, AVG(g.grade) AS average_grade FROM courses c JOIN grades g ON c.course_id = g.course_id GROUP BY c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT name, email FROM students WHERE enrollment_status = 'Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name FROM students s INNER JOIN enrollments e ON s.id = e.student_id INNER JOIN courses c ON e.course_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, g.grade FROM students s INNER JOIN enrollments e ON s.id = e.student_id INNER JOIN courses c ON e.course_id = c.course_id INNER JOIN grades g ON s.id = g.student_id AND c.course_id = g.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, AVG(grade) AS average_grade FROM students s INNER JOIN grades g ON s.id = g.student_id GROUP BY s.id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT instructor, COUNT(*) AS num_courses FROM courses GROUP BY instructor;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, e.enrollment_date FROM students s INNER JOIN enrollments e ON s.id = e.student_id WHERE e.enrollment_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, g.grade FROM students s LEFT JOIN enrollments e ON s.id = e.student_id LEFT JOIN courses c ON e.course_id = c.course_id LEFT JOIN grades g ON s.id = g.student_id AND c.course_id = g.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT MAX(grade) AS highest_grade FROM grades;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, COUNT(*) AS num_courses FROM students s INNER JOIN enrollments e ON s.id = e.student_id GROUP BY s.id HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, e.enrollment_date FROM students s INNER JOIN enrollments e ON s.id = e.student_id INNER JOIN courses c ON e.course_id = c.course_id ORDER BY e.enrollment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT DISTINCT e.course_id FROM enrollments e;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, CASE WHEN e.enrollment_status = 'Enrolled' THEN 'Active' ELSE 'Inactive' END AS status FROM students s INNER JOIN enrollments e ON s.id = e.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, g.grade FROM students s INNER JOIN enrollments e ON s.id = e.student_id INNER JOIN courses c ON e.course_id = c.course_id LEFT JOIN grades g ON s.id = g.student_id AND c.course_id = g.course_id WHERE g.grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.id, s.name, c.course_id, c.course_name, e.enrollment_date, g.grade FROM students s INNER JOIN courses c INNER JOIN enrollments e ON s.id = e.student_id AND e.course_id = c.course_id LEFT JOIN grades g ON s.id = g.student_id AND c.course_id = g.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, COUNT(g.grade) AS num_grades FROM students s INNER JOIN courses c INNER JOIN enrollments e ON s.id = e.student_id AND e.course_id = c.course_id LEFT JOIN grades g ON s.id = g.student_id AND c.course_id = g.course_id GROUP BY s.name, c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, MAX(g.grade) AS highest_grade FROM students s INNER JOIN courses c INNER JOIN enrollments e ON s.id = e.student_id AND e.course_id = c.course_id LEFT JOIN grades g ON s.id = g.student_id AND c.course_id = g.course_id GROUP BY s.name, c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, SUM(CAST(g.grade AS INT)) AS total_grade FROM students s INNER JOIN courses c INNER JOIN enrollments e ON s.id = e.student_id AND e.course_id = c.course_id LEFT JOIN grades g ON s.id = g.student_id AND c.course_id = g.course_id GROUP BY s.name, c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, AVG(CAST(g.grade AS INT)) AS average_grade FROM students s INNER JOIN courses c INNER JOIN enrollments e ON s.id = e.student_id AND e.course_id = c.course_id LEFT JOIN grades g ON s.id = g.student_id AND c.course_id = g.course_id GROUP BY s.name, c.course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(50),\n    enrollment_status VARCHAR(20)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    instructor VARCHAR(50)\n);\n\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n);\n\n### STATEMENT\n\nSELECT s.name, COUNT(e.course_id) AS num_courses FROM students s LEFT JOIN enrollments e ON s.id = e.student_id GROUP BY s.name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT name, email FROM Students WHERE enrollment_status='Enrolled';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT course_name, course_description FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT enrollment_id, enrollment_date FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT id, name, email, enrollment_status FROM Students WHERE enrollment_status='Pending';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT course_id, course_name FROM Courses WHERE course_id > 5;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT student_id, course_id, enrollment_date FROM Enrollments WHERE enrollment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT department_id, department_name FROM Departments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT course_id, course_name, course_description FROM Courses WHERE course_id < 10;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Enrollments WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT id, name, enrollment_status FROM Students WHERE id = 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT course_id, course_name FROM Courses WHERE course_name LIKE 'Intro%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT enrollment_id, student_id, course_id, enrollment_date FROM Enrollments WHERE student_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Grades WHERE student_id = 2 AND grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT id, name, email, enrollment_status FROM Students WHERE enrollment_status IN ('Enrolled', 'Pending');",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT department_id, department_name, department_head FROM Departments WHERE department_name = 'Science';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT course_id, AVG(grade) AS avg_grade FROM Grades GROUP BY course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT DISTINCT course_id FROM Enrollments WHERE student_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT id, name, email, enrollment_status FROM Students WHERE id BETWEEN 2 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Students",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Courses",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Enrollments JOIN Students ON Enrollments.student_id = Students.id JOIN Courses ON Enrollments.course_id = Courses.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date, Grades.grade FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Grades ON Enrollments.student_id = Grades.student_id AND Enrollments.course_id = Grades.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date, Grades.grade, Departments.department_name FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Grades ON Enrollments.student_id = Grades.student_id AND Enrollments.course_id = Grades.course_id JOIN Departments ON Students.enrollment_status = 'Enrolled' AND Departments.department_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Students.name, COUNT(Enrollments.enrollment_id) as enrollment_count FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id GROUP BY Students.name ORDER BY enrollment_count DESC",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Courses.course_name, AVG(Grades.grade) as avg_grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id GROUP BY Courses.course_name ORDER BY avg_grade DESC",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Departments.department_name, COUNT(DISTINCT Students.id) as student_count FROM Departments JOIN Students ON Departments.department_id = 1 GROUP BY Departments.department_name",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Courses.course_name, COUNT(DISTINCT Students.id) as student_count FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id JOIN Students ON Grades.student_id = Students.id GROUP BY Courses.course_name ORDER BY student_count DESC",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE Students.enrollment_status = 'Enrolled'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Students.name, Departments.department_name FROM Students JOIN Departments ON Students.enrollment_status = 'Enrolled' AND Departments.department_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE Enrollments.enrollment_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Courses.course_name, Departments.department_name, COUNT(DISTINCT Students.id) as student_count FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id JOIN Students ON Grades.student_id = Students.id JOIN Departments ON Students.enrollment_status = 'Enrolled' AND Departments.department_id = 1 GROUP BY Courses.course_name, Departments.department_name ORDER BY student_count DESC",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Departments.department_name, AVG(Grades.grade) as avg_grade FROM Departments JOIN Students ON Departments.department_id = 1 JOIN Grades ON Students.id = Grades.student_id GROUP BY Departments.department_name ORDER BY avg_grade DESC",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Students.name, AVG(CAST(Grades.grade as INTEGER)) as avg_grade FROM Students JOIN Grades ON Students.id = Grades.student_id GROUP BY Students.name ORDER BY avg_grade DESC",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Grades.grade FROM Students JOIN Grades ON Students.id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id WHERE Grades.grade >= 'B'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Courses.course_name, COUNT(Grades.grade) as grade_count FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id WHERE Grades.grade >= 'A' GROUP BY Courses.course_name ORDER BY grade_count DESC",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE Enrollments.enrollment_date >= '2022-01-01' AND Students.enrollment_status = 'Enrolled'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    enrollment_status VARCHAR(50)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    course_description TEXT\n)\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE,\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    FOREIGN KEY (student_id) REFERENCES Students(id),\n    FOREIGN KEY (course_id) REFERENCES Courses(course_id)\n)\n\nCREATE TABLE Departments (\n    department_id INT PRIMARY KEY,\n    department_name VARCHAR(255),\n    department_head VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Departments.department_name, Students.name, Courses.course_name FROM Departments JOIN Students ON Departments.department_id = 1 JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE Students.enrollment_status = 'Enrolled' ORDER BY Departments.department_name, Students.name"
]