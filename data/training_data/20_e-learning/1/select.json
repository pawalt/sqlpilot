[
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_name FROM students WHERE grade_level = 10;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT grade_level FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_id FROM students WHERE grade_level > 8;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_name FROM students WHERE student_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students ORDER BY student_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT MAX(grade_level) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT MIN(grade_level) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT AVG(grade_level) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT SUM(grade_level) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_id, grade_level FROM students WHERE student_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE grade_level IN (9, 10, 11);",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE student_name LIKE '%ll%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name = 'Bob' OR student_name = 'Charlie';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_id NOT IN (2, 4, 6);",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_name, grade_level FROM students WHERE grade_level > 10;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE student_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name LIKE 'S%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE grade_level < 5 ORDER BY student_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE grade_level >= 10 ORDER BY grade_level DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE student_name = 'Alice' OR student_name = 'Bob';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT AVG(grade_level) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT SUM(grade_level) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_name, SUM(grade_level) AS total_grade FROM students GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(*) AS total_students FROM students GROUP BY student_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(*) AS total_students FROM students GROUP BY student_name HAVING COUNT(*) < 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_name, MAX(grade_level) AS highest_grade FROM students GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_name, MIN(grade_level) AS lowest_grade FROM students GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(grade_level) AS average_grade FROM students GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE grade_level < (SELECT AVG(grade_level) FROM students);",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_name, grade_level, (SELECT MAX(grade_level) FROM students) AS max_grade FROM students ORDER BY grade_level DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_name, grade_level, ROW_NUMBER() OVER (ORDER BY grade_level DESC) AS rank FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    grade_level INT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, grade_level, CASE WHEN grade_level >= 10 THEN 'Pass' ELSE 'Fail' END AS result FROM students;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM completed_assignments;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, assignment_id, grade FROM completed_assignments;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT name FROM students;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name FROM students;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT assignment_id, grade FROM completed_assignments;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, assignment_id FROM completed_assignments;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM completed_assignments WHERE grade > 80;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM completed_assignments WHERE grade < 50;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_date = '2022-01-15';",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(grade) AS average_grade FROM completed_assignments GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(grade) AS highest_grade FROM completed_assignments GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, MIN(grade) AS lowest_grade FROM completed_assignments GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT student_id) AS num_students FROM students;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(assignment_id) AS num_assignments FROM completed_assignments GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM students JOIN completed_assignments ON students.student_id = completed_assignments.student_id;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT students.name, completed_assignments.grade FROM students INNER JOIN completed_assignments ON students.student_id = completed_assignments.student_id;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT students.name, completed_assignments.grade FROM students LEFT JOIN completed_assignments ON students.student_id = completed_assignments.student_id;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT students.name, completed_assignments.grade FROM students RIGHT JOIN completed_assignments ON students.student_id = completed_assignments.student_id;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT students.name, completed_assignments.grade FROM students FULL OUTER JOIN completed_assignments ON students.student_id = completed_assignments.student_id;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM completed_assignments JOIN students ON completed_assignments.student_id = students.student_id WHERE completed_assignments.grade > 80;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, grade FROM completed_assignments JOIN students ON completed_assignments.student_id = students.student_id WHERE students.name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, enrollment_date FROM students WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31' ORDER BY student_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT AVG(grade) AS avg_grade FROM completed_assignments GROUP BY student_id HAVING avg_grade > 70;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(assignment_id) AS total_assignments FROM completed_assignments GROUP BY student_id ORDER BY total_assignments DESC;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(grade) AS highest_grade FROM completed_assignments GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, enrollment_date FROM students WHERE student_id = 1 OR student_id = 2 OR student_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, MAX(grade) AS highest_grade FROM completed_assignments JOIN students ON completed_assignments.student_id = students.student_id GROUP BY student_id ORDER BY highest_grade DESC;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(grade) AS avg_grade FROM completed_assignments GROUP BY student_id HAVING avg_grade < 60;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, grade FROM completed_assignments JOIN students ON completed_assignments.student_id = students.student_id WHERE completed_assignments.grade = 100;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT student_id) AS total_students FROM students;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, enrollment_date FROM students WHERE name LIKE '%son%' OR name LIKE '%sen%';",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, enrollment_date FROM students WHERE enrollment_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, grade FROM completed_assignments JOIN students ON completed_assignments.student_id = students.student_id WHERE completed_assignments.grade <= 70;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, AVG(grade) AS avg_grade FROM completed_assignments JOIN students ON completed_assignments.student_id = students.student_id GROUP BY student_id HAVING avg_grade > 80;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, enrollment_date FROM students WHERE student_id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, enrollment_date FROM students WHERE student_id IN (1, 2, 3, 4);",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, enrollment_date FROM students ORDER BY enrollment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, name, AVG(grade) AS avg_grade FROM completed_assignments JOIN students ON completed_assignments.student_id = students.student_id GROUP BY student_id HAVING avg_grade < 90;",
  "### TABLEDATA\n\nCREATE TABLE completed_assignments (\n  student_id INT PRIMARY KEY,\n  assignment_id INT PRIMARY KEY,\n  grade INT\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  enrollment_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS total_assignments FROM completed_assignments GROUP BY student_id HAVING total_assignments >= 5;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM assignments;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT assignment_id, assignment_name FROM assignments;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, assignment_name, due_date FROM assignments;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_date FROM students;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM grades;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, assignment_id, grade FROM grades;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, assignments.assignment_name, grades.grade FROM students JOIN assignments ON students.student_id = assignments.student_id JOIN grades ON students.student_id = grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, grade FROM students JOIN assignments ON students.student_id = assignments.student_id JOIN grades ON students.student_id = grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, grade FROM students JOIN grades ON students.student_id = grades.student_id JOIN assignments ON assignments.assignment_id = grades.assignment_id;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, grade, due_date FROM students JOIN grades ON students.student_id = grades.student_id JOIN assignments ON assignments.assignment_id = grades.assignment_id;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM assignments WHERE completed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM assignments WHERE due_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM grades WHERE grade >= 90;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(grade) AS average_grade FROM grades GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(*) AS num_assignments FROM students JOIN grades ON students.student_id = grades.student_id GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, MAX(grade) AS max_grade FROM students JOIN grades ON students.student_id = grades.student_id JOIN assignments ON assignments.assignment_id = grades.assignment_id GROUP BY student_name, assignment_name;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, AVG(grade) AS avg_grade FROM students JOIN grades ON students.student_id = grades.student_id JOIN assignments ON assignments.assignment_id = grades.assignment_id GROUP BY student_name, assignment_name;",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM assignments WHERE due_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE enrollment_date < '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT assignment_id, assignment_name, completed FROM assignments WHERE completed = TRUE",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, assignment_id, grade FROM grades WHERE grade >= 90",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, assignment_id, grade FROM grades WHERE grade BETWEEN 80 AND 90",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_id, assignment_name FROM students JOIN assignments ON students.student_id = assignments.student_id",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, grade FROM students JOIN assignments ON students.student_id = assignments.student_id JOIN grades ON students.student_id = grades.student_id AND assignments.assignment_id = grades.assignment_id",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT students.student_id, students.student_name, AVG(grades.grade) AS average_grade FROM students LEFT JOIN grades ON students.student_id = grades.student_id GROUP BY students.student_id, students.student_name",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT assignments.assignment_id, assignments.assignment_name, COUNT(grades.student_id) AS num_students FROM assignments LEFT JOIN grades ON assignments.assignment_id = grades.assignment_id GROUP BY assignments.assignment_id, assignments.assignment_name",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT students.student_name, COUNT(grades.assignment_id) AS num_assignments FROM students LEFT JOIN grades ON students.student_id = grades.student_id GROUP BY students.student_name",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT students.student_name, AVG(grades.grade) AS average_grade FROM students LEFT JOIN grades ON students.student_id = grades.student_id GROUP BY students.student_name",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT assignments.assignment_name, MAX(grades.grade) AS highest_grade FROM assignments LEFT JOIN grades ON assignments.assignment_id = grades.assignment_id GROUP BY assignments.assignment_name",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT assignments.assignment_name, MIN(grades.grade) AS lowest_grade FROM assignments LEFT JOIN grades ON assignments.assignment_id = grades.assignment_id GROUP BY assignments.assignment_name",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT students.student_name, assignments.assignment_name, grades.grade FROM students CROSS JOIN assignments LEFT JOIN grades ON students.student_id = grades.student_id AND assignments.assignment_id = grades.assignment_id",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT students.student_name, assignments.assignment_name, grades.grade FROM students CROSS JOIN assignments LEFT JOIN grades ON students.student_id = grades.student_id AND assignments.assignment_id = grades.assignment_id WHERE grades.grade IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, grade FROM students FULL OUTER JOIN grades ON students.student_id = grades.student_id",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, grade FROM students FULL OUTER JOIN grades ON students.student_id = grades.student_id WHERE grade IS NULL",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, grade FROM students FULL OUTER JOIN grades ON students.student_id = grades.student_id WHERE grade IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, grade FROM students INNER JOIN grades ON students.student_id = grades.student_id",
  "### TABLEDATA\n\nCREATE TABLE assignments (\n  assignment_id INT PRIMARY KEY,\n  student_id INT,\n  assignment_name TEXT,\n  due_date DATE,\n  completed BOOLEAN\n);\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name TEXT,\n  enrollment_date DATE\n);\n\nCREATE TABLE grades (\n  student_id INT,\n  assignment_id INT,\n  grade FLOAT,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, grade FROM students INNER JOIN grades ON students.student_id = grades.student_id WHERE grade < 70",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM student;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM assignment;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT assignment_id, assignment_name FROM assignment;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM grade;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT grade_id, student_id, assignment_id, obtained_marks FROM grade;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM course;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_id, course_name FROM course;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM student, course;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, obtained_marks FROM student, assignment, grade WHERE student.student_id = grade.student_id AND assignment.assignment_id = grade.assignment_id;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM assignment WHERE total_marks > 50;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM grade WHERE obtained_marks >= 80;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM course WHERE course_name LIKE 'Math%';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM student WHERE student_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM student;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(obtained_marks) FROM grade;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(obtained_marks) FROM grade;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(obtained_marks) AS avg_marks, COUNT(*) AS num_students FROM grade;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student ORDER BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student JOIN grade ON student.student_id = grade.student_id",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, obtained_marks FROM student JOIN grade ON student.student_id = grade.student_id",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT grade_id, student_name, obtained_marks FROM grade JOIN student ON grade.student_id = student.student_id",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, total_marks FROM course JOIN assignment ON course.course_id = assignment.assignment_id",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student WHERE student_id = 1",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, obtained_marks FROM grade WHERE obtained_marks > 80",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM grade WHERE student_id = 3 AND assignment_id = 2",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT assignment_name, obtained_marks FROM assignment JOIN grade ON assignment.assignment_id = grade.assignment_id WHERE student_id = 3",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM course ORDER BY course_id DESC",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, obtained_marks FROM student JOIN grade ON student.student_id = grade.student_id WHERE student_name LIKE '%John%'",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(obtained_marks) AS average_marks FROM grade GROUP BY assignment_id HAVING AVG(obtained_marks) > 70",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, obtained_marks FROM student JOIN grade ON student.student_id = grade.student_id JOIN assignment ON grade.assignment_id = assignment.assignment_id",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT course_name FROM course",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, obtained_marks FROM grade WHERE student_id IN (1, 2, 3)",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM assignment WHERE total_marks < 50",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, SUM(obtained_marks) AS total_marks FROM student JOIN grade ON student.student_id = grade.student_id GROUP BY student_name",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(obtained_marks) AS average_marks FROM grade GROUP BY student_id HAVING AVG(obtained_marks) < 60",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT course_id, course_name FROM course JOIN assignment ON course.course_id = assignment.assignment_id",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student JOIN grade ON student.student_id = grade.student_id GROUP BY student_name HAVING COUNT(grade_id) > 3",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE assignment (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    total_marks INT\n);\n\n\nCREATE TABLE grade (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    obtained_marks INT,\n    FOREIGN KEY (student_id) REFERENCES student(student_id),\n    FOREIGN KEY (assignment_id) REFERENCES assignment(assignment_id)\n);\n\n\nCREATE TABLE course (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, AVG(total_marks) AS average_marks FROM course JOIN assignment ON course.course_id = assignment.assignment_id GROUP BY course_name HAVING AVG(total_marks) > 70",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Assignments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT assignment_name FROM Assignments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT assignment_id, assignment_name FROM Assignments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_id, assignment_id FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT grade FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT course_name FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT course_id, course_name FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Enrollment;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_id, course_id FROM Enrollment;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Students INNER JOIN Grades ON Students.student_id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Students LEFT JOIN Grades ON Students.student_id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Assignments INNER JOIN Grades ON Assignments.assignment_id = Grades.assignment_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Assignments LEFT JOIN Grades ON Assignments.assignment_id = Grades.assignment_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Students INNER JOIN Enrollment ON Students.student_id = Enrollment.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Students LEFT JOIN Enrollment ON Students.student_id = Enrollment.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Students JOIN Enrollment ON Students.student_id = Enrollment.student_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT Students.student_name, Courses.course_name FROM Students JOIN Enrollment ON Students.student_id = Enrollment.student_id JOIN Courses ON Enrollment.course_id = Courses.course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT Students.student_name, Assignments.assignment_name, Grades.grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Assignments ON Grades.assignment_id = Assignments.assignment_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, SUM(grade) AS total_grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id GROUP BY student_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT course_name, COUNT(student_id) AS total_students FROM Courses JOIN Enrollment ON Courses.course_id = Enrollment.course_id GROUP BY course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT assignment_name, AVG(grade) AS avg_grade FROM Assignments JOIN Grades ON Assignments.assignment_id = Grades.assignment_id GROUP BY assignment_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Enrollment ON Students.student_id = Enrollment.student_id JOIN Courses ON Enrollment.course_id = Courses.course_id JOIN Grades ON Students.student_id = Grades.student_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT student_name FROM Students",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Enrollment WHERE student_id = 1)",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name FROM Students WHERE student_id = (SELECT student_id FROM Enrollment WHERE course_id = 1)",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(grade) AS avg_grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id GROUP BY student_id HAVING AVG(grade) > 80",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Students WHERE enrollment_date < '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id WHERE grade LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students JOIN Enrollment ON Students.student_id = Enrollment.student_id JOIN Courses ON Enrollment.course_id = Courses.course_id WHERE course_name LIKE '%Math%'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name FROM Students WHERE student_id NOT IN (SELECT student_id FROM Enrollment)",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT course_name, MAX(grade) AS max_grade FROM Courses JOIN Enrollment ON Courses.course_id = Enrollment.course_id JOIN Grades ON Enrollment.student_id = Grades.student_id GROUP BY course_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT course_name, COUNT(student_id) AS total_students FROM Courses JOIN Enrollment ON Courses.course_id = Enrollment.course_id GROUP BY course_id HAVING COUNT(student_id) > 5",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students JOIN Enrollment ON Students.student_id = Enrollment.student_id JOIN Courses ON Enrollment.course_id = Courses.course_id WHERE student_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students JOIN Enrollment ON Students.student_id = Enrollment.student_id JOIN Courses ON Enrollment.course_id = Courses.course_id ORDER BY student_name ASC",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students JOIN Enrollment ON Students.student_id = Enrollment.student_id JOIN Courses ON Enrollment.course_id = Courses.course_id ORDER BY course_name DESC",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    assignment_name VARCHAR(50) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    assignment_id INT,\n    grade VARCHAR(2)\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(assignment_id) REFERENCES Assignments(assignment_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Enrollment (\n    student_id INT,\n    course_id INT\n    FOREIGN KEY(student_id) REFERENCES Students(student_id),\n    FOREIGN KEY(course_id) REFERENCES Courses(course_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students JOIN Enrollment ON Students.student_id = Enrollment.student_id JOIN Courses ON Enrollment.course_id = Courses.course_id LIMIT 10"
]