[
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE age > 30;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE education_level='Bachelor';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM users WHERE gender='Male';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users WHERE age BETWEEN 25 AND 35;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE education_level IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, gender FROM users WHERE age >= 18;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY age DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT username, email FROM users ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, age FROM users WHERE gender='Female' ORDER BY age ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT DISTINCT gender FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE education_level='Master' AND age > 25;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE gender='Non-Binary';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT DISTINCT education_level FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT email FROM users WHERE username='example_username';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE age = 30 AND gender='Female';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM users WHERE age < 25 AND education_level='High School';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE age > 40 OR education_level='Doctorate';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE age > 30 LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, username, age FROM users WHERE education_level='Bachelor'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE gender='Female' ORDER BY age ASC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT DISTINCT education_level FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, age FROM users WHERE age IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE education_level IN ('Bachelor', 'Masters')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE age BETWEEN 25 AND 40",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE gender='Male' AND education_level='PhD'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE email LIKE '%@gmail.com'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, gender FROM users WHERE age < 25",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE education_level IS NULL",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY age DESC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, username, email, gender FROM users WHERE age >= 25",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE education_level='High School' AND gender='Female'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, username, age FROM users WHERE education_level='PhD'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT SUM(age) AS total_age FROM users WHERE gender='Male'",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE age > 40",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT user_id, username, education_level FROM users WHERE age < 30",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    age INT,\n    education_level VARCHAR(50),\n    gender VARCHAR(10)\n)\n\n### STATEMENT\n\nSELECT AVG(age) AS avg_age FROM users WHERE gender='Female'",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM personalized_learning_paths;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT id, student_id, course_id FROM personalized_learning_paths WHERE completion_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT student_id, completion_status FROM personalized_learning_paths WHERE course_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM personalized_learning_paths WHERE student_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT id, student_id FROM personalized_learning_paths WHERE course_id = 5 AND completion_status = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM student_preferences;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT student_id, preferred_course_id FROM student_preferences;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM student_preferences WHERE preferred_learning_style = 'Visual';",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT id, student_id, preferred_course_id FROM student_preferences WHERE student_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT student_id, preferred_learning_style FROM student_preferences WHERE preferred_course_id = 7;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM personalized_learning_paths INNER JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT personalized_learning_paths.id, student_id, preferred_course_id FROM personalized_learning_paths INNER JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM personalized_learning_paths LEFT JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT id, student_id, preferred_course_id FROM personalized_learning_paths LEFT JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id WHERE personalized_learning_paths.student_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM personalized_learning_paths RIGHT JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT id, student_id, preferred_course_id FROM personalized_learning_paths RIGHT JOIN student_preferences ON personalized_learning_paths.student_id = student_preferences.student_id WHERE student_preferences.student_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT id, preferred_course_id FROM personalized_learning_paths WHERE id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT student_id, preferred_course_id FROM student_preferences WHERE student_id BETWEEN 100 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM personalized_learning_paths WHERE course_id IN (2, 4, 6);",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT student_id, preferred_course_id FROM student_preferences WHERE preferred_course_id NOT IN (7, 9);",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM personalized_learning_paths WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT course_id, completion_status FROM personalized_learning_paths WHERE completion_status = true;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT student_id, course_id FROM personalized_learning_paths WHERE student_id = 1 AND completion_status = false;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.id, plp.student_id, plp.course_id, sp.prefeered_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp LEFT JOIN student_preferences sp ON plp.student_id = sp.student_id;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id WHERE plp.completion_status = true;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, sp.preferred_course_id FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id WHERE sp.preferred_learning_style = 'Visual';",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, COUNT(*) AS num_courses_completed FROM personalized_learning_paths plp WHERE plp.completion_status = true GROUP BY plp.student_id;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, AVG(plp.course_id) AS avg_course_completion FROM personalized_learning_paths plp WHERE plp.completion_status = true GROUP BY plp.student_id;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, MAX(plp.course_id) AS max_completed_course FROM personalized_learning_paths plp WHERE plp.completion_status = true GROUP BY plp.student_id;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, CASE WHEN plp.completion_status = true THEN 'Completed' ELSE 'Not Completed' END AS completion_status_text FROM personalized_learning_paths plp;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, sp.preferred_course_id, CASE WHEN plp.course_id = sp.preferred_course_id THEN 'Preferred' ELSE 'Not Preferred' END AS preference_status FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp FULL OUTER JOIN student_preferences sp ON plp.student_id = sp.student_id;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp CROSS JOIN student_preferences sp WHERE plp.completion_status = true;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id WHERE sp.preferred_learning_style LIKE '%Visual%';",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id ORDER BY sp.preferred_course_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id ORDER BY plp.course_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT plp.student_id, plp.course_id, sp.preferred_course_id, sp.preferred_learning_style FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE personalized_learning_paths (\n    id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN\n);\n\n\nCREATE TABLE student_preferences (\n    id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT,\n    preferred_learning_style VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT DISTINCT plp.student_id, plp.course_id FROM personalized_learning_paths plp INNER JOIN student_preferences sp ON plp.student_id = sp.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT name, age FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT student_id, name, age FROM students WHERE grade_level = '10th';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT course_id, course_name, instructor FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM student_progress;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, completion_status FROM student_progress WHERE score >= 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, sp.completion_status FROM students s INNER JOIN student_progress sp ON s.student_id = sp.student_id INNER JOIN courses c ON sp.course_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, sp.completion_status FROM students s INNER JOIN student_progress sp ON s.student_id = sp.student_id INNER JOIN courses c ON sp.course_id = c.course_id WHERE sp.completion_status = true;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT s.name, c.course_name, sp.score FROM students s INNER JOIN student_progress sp ON s.student_id = sp.student_id INNER JOIN courses c ON sp.course_id = c.course_id WHERE sp.score > 90;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT s.name AS student_name, c.course_name AS course, sp.completion_status AS status FROM students s INNER JOIN student_progress sp ON s.student_id = sp.student_id INNER JOIN courses c ON sp.course_id = c.course_id WHERE sp.completion_status = false ORDER BY s.name ASC, c.course_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_students FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(age) AS average_age FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT MIN(age) AS min_age, MAX(age) AS max_age FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT department, COUNT(*) AS course_count FROM courses GROUP BY department;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT instructor, AVG(score) AS average_score FROM courses c INNER JOIN student_progress sp ON c.course_id = sp.course_id GROUP BY instructor;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT grade_level, COUNT(*) AS total_students FROM students GROUP BY grade_level;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT department, AVG(score) AS average_score FROM courses c INNER JOIN student_progress sp ON c.course_id = sp.course_id GROUP BY department HAVING AVG(score) > 85;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM students LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM courses LIMIT 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM student_progress LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE age > 18 AND grade_level = 'Senior';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT name, age FROM students WHERE age BETWEEN 20 AND 25;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT student_id, name, instructor FROM students JOIN courses ON students.student_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT course_name, instructor, department FROM courses WHERE department = 'Science';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT name, grade_level, completion_status FROM students s JOIN student_progress sp ON s.student_id = sp.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT course_name, completion_status, score FROM courses c JOIN student_progress sp ON c.course_id = sp.course_id WHERE completion_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(score) FROM student_progress GROUP BY student_id HAVING COUNT(student_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT MAX(score) FROM student_progress WHERE course_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT DISTINCT department FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT name, MAX(score), AVG(score) FROM students s JOIN student_progress sp ON s.student_id = sp.student_id GROUP BY s.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM students WHERE age < 20;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT SUM(score) FROM student_progress WHERE completion_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT course_name, AVG(score) AS average_score FROM courses c JOIN student_progress sp ON c.course_id = sp.course_id WHERE department = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT instructor, COUNT(*) AS student_count FROM courses GROUP BY instructor HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(course_id) AS course_count FROM student_progress GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT name, department, score FROM students s JOIN student_progress sp ON s.student_id = sp.student_id JOIN courses c ON sp.course_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT course_name, department, AVG(score) AS average_score FROM courses c JOIN student_progress sp ON c.course_id = sp.course_id GROUP BY c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT instructor, MAX(score) AS highest_score FROM courses c JOIN student_progress sp ON c.course_id = sp.course_id GROUP BY instructor;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT student_id, MIN(score) AS lowest_score FROM student_progress GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    grade_level VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(255),\n    instructor VARCHAR(255),\n    department VARCHAR(100)\n);\n\n\nCREATE TABLE student_progress (\n    progress_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    completion_status BOOLEAN,\n    score FLOAT\n);\n\n### STATEMENT\n\nSELECT name, age, course_name, completion_status FROM students s JOIN student_progress sp ON s.student_id = sp.student_id JOIN courses c ON sp.course_id = c.course_id WHERE completion_status = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, age FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, age, grade_level FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT course_id, course_name FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT course_name, course_level FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT course_id, course_level, course_description FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, performance_score FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT course_id, performance_score FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, performance_score FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM preferences;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, preference_1 FROM preferences;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT preference_1, preference_2 FROM preferences;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, preference_1, preference_3 FROM preferences;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, performance_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN courses ON student_performance.course_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, age, course_name, performance_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN courses ON student_performance.course_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, preference_1, preference_2, preference_3 FROM students JOIN preferences ON students.student_id = preferences.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, age FROM students WHERE grade_level='High School';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN courses ON courses.course_id = student_performance.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(performance_score) AS average_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, preference_1, preference_2, preference_3 FROM students JOIN preferences ON students.student_id = preferences.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, performance_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN courses ON courses.course_id = student_performance.course_id WHERE grade_level='Middle School';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, performance_score FROM students JOIN student_performance ON students.student_id = student_performance.student_id JOIN courses ON courses.course_id = student_performance.course_id WHERE performance_score > 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    age INT,\n    grade_level VARCHAR(10)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_level VARCHAR(10),\n    course_description TEXT\n);\n\nCREATE TABLE student_performance (\n    student_id INT,\n    course_id INT,\n    performance_score INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE preferences (\n    student_id INT,\n    preference_1 VARCHAR(50),\n    preference_2 VARCHAR(50),\n    preference_3 VARCHAR(50),\n    FOREIGN KEY (student_id) REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, preference_1 FROM students JOIN preferences ON students.student_id...",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT course_id, course_name FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name FROM Students WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT enrollment_id, student_id, course_id FROM Enrollments ORDER BY enrollment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT assessment_name, assessment_score FROM Assessments WHERE course_id = 1 AND assessment_score > 80;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Preferences WHERE student_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id WHERE course_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT course_id, COUNT(*) AS total_enrollments FROM Enrollments GROUP BY course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(assessment_score) AS average_score FROM Assessments GROUP BY student_id HAVING average_score > 70;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_id, course_id FROM Enrollments UNION SELECT student_id, preferred_course_id FROM Preferences;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Students LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT course_name, course_description FROM Courses WHERE course_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT MAX(assessment_score) AS highest_score FROM Assessments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(course_id) AS total_courses_enrolled FROM Enrollments WHERE student_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT course_id, COUNT(student_id) AS total_students_enrolled FROM Enrollments GROUP BY course_id HAVING total_students_enrolled > 5;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT preferred_course_id FROM Preferences;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(assessment_score) AS highest_score FROM Assessments GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, enrollment_date FROM Enrollments WHERE enrollment_id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Assessments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Preferences;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT course_name, assessment_name, assessment_score FROM Courses JOIN Assessments ON Courses.course_id = Assessments.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id WHERE enrollment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id WHERE assessment_score >= 80.0;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id WHERE assessment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id WHERE course_name LIKE 'M%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id WHERE course_id IN (SELECT course_id FROM Courses WHERE course_name = 'Math');",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id WHERE student_id IN (SELECT student_id FROM Preferences WHERE preferred_course_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, assessment_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id WHERE student_id IN (SELECT student_id FROM Preferences WHERE preferred_course_id IN (SELECT course_id FROM Courses WHERE course_name = 'Science'));",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT COUNT(student_id) AS total_students FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT AVG(assessment_score) AS average_score FROM Assessments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT course_name, COUNT(student_id) AS total_students FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT student_name, MAX(assessment_score) AS highest_score FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name STRING\n);\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name STRING,\n    course_description STRING\n);\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE Assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name STRING,\n    course_id INT,\n    assessment_date DATE,\n    assessment_score FLOAT\n);\n\nCREATE TABLE Preferences (\n    preference_id INT PRIMARY KEY,\n    student_id INT,\n    preferred_course_id INT\n);\n\n### STATEMENT\n\nSELECT course_name, AVG(assessment_score) AS average_score FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id JOIN Assessments ON Enrollments.course_id = Assessments.course_id GROUP BY course_name HAVING AVG(assessment_score) >= 70.0;"
]