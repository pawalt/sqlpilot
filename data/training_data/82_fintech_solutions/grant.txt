<t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE ON fintech_solutions TO user1</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>grant select, insert, update on fintech_solutions to user1</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>GRANT INSERT, UPDATE, DELETE ON fintech_solutions TO user2</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>grant insert, update, delete on fintech_solutions to user2</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>GRANT SELECT, INSERT, DELETE ON fintech_solutions TO user3</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>grant select, insert, delete on fintech_solutions to user3</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT SELECT ON users TO user1</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant select on users to user1</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT INSERT, UPDATE, DELETE ON users TO user2</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant insert, update, delete on users to user2</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON users TO admin</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>grant all privileges on users to admin</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>GRANT SELECT ON users TO analysts</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>grant select on users to analysts</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>GRANT SELECT ON users TO analysts</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>grant select on users to analysts</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>GRANT INSERT, UPDATE, DELETE ON transactions TO administrators</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>grant insert, update, delete on transactions to administrators</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>GRANT INSERT, UPDATE, DELETE ON transactions TO administrators</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>grant insert, update, delete on transactions to administrators</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO managers</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>grant select, insert, update, delete on users to managers</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON users TO managers</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>grant select, insert, update, delete on users to managers</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT ON Customers TO user1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert on customers to user1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE ON Accounts TO user2;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update on accounts to user2;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON Transactions TO user3;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>grant select, insert, update, delete on transactions to user3;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>GRANT SELECT ON user_info TO marketing_group</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>grant select on user_info to marketing_group</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>GRANT INSERT, UPDATE ON user_info TO admin_group</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>grant insert, update on user_info to admin_group</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>GRANT DELETE ON user_info TO support_group</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>grant delete on user_info to support_group</stat>