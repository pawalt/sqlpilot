[
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT * FROM LoanCreditData LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, borrower_name FROM LoanCreditData WHERE loan_amount > 10000",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT borrower_name, credit_score FROM LoanCreditData WHERE credit_score >= 700",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, loan_date FROM LoanCreditData WHERE loan_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT * FROM LoanCreditData WHERE credit_score BETWEEN 600 AND 800",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, loan_amount FROM LoanCreditData WHERE borrower_name LIKE 'John%'",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, loan_amount, loan_date FROM LoanCreditData WHERE loan_amount < 5000",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT borrower_name, credit_score FROM LoanCreditData WHERE borrower_name IN ('Alice', 'Bob', 'Charlie')",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_loans FROM LoanCreditData",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT MAX(loan_amount) AS max_loan_amount FROM LoanCreditData",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT AVG(credit_score) AS avg_credit_score FROM LoanCreditData",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT DISTINCT borrower_name FROM LoanCreditData",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, borrower_name, loan_amount FROM LoanCreditData ORDER BY loan_amount DESC",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, loan_amount FROM LoanCreditData WHERE loan_date < '2022-07-01'",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT AVG(loan_amount) AS avg_loan_amount FROM LoanCreditData WHERE credit_score >= 700",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT borrower_name, credit_score FROM LoanCreditData WHERE loan_amount > 15000",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, credit_score FROM LoanCreditData WHERE loan_id <= 100",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT * FROM LoanCreditData WHERE loan_amount = (SELECT MAX(loan_amount) FROM LoanCreditData)",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, loan_date FROM LoanCreditData WHERE loan_date BETWEEN '2022-05-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT * FROM LoanCreditData WHERE loan_amount > 10000 AND credit_score >= 700",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT borrower_name, loan_amount FROM LoanCreditData WHERE loan_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT * FROM LoanCreditData WHERE credit_score < 600 ORDER BY loan_date DESC",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT DISTINCT borrower_name FROM LoanCreditData",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT AVG(loan_amount) AS average_loan_amount FROM LoanCreditData",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT borrower_name, loan_amount FROM LoanCreditData WHERE credit_score >= 700 AND loan_amount < 15000",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, borrower_name, loan_date FROM LoanCreditData WHERE loan_amount BETWEEN 5000 AND 10000",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_loans FROM LoanCreditData",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT * FROM LoanCreditData WHERE borrower_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT MAX(loan_amount) AS max_loan_amount FROM LoanCreditData",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT borrower_name, credit_score FROM LoanCreditData WHERE loan_date < '2022-06-30'",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, loan_amount FROM LoanCreditData WHERE borrower_name = 'Alice'",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT MIN(loan_amount) AS min_loan_amount FROM LoanCreditData",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, borrower_name, loan_amount FROM LoanCreditData WHERE credit_score BETWEEN 600 AND 700",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT * FROM LoanCreditData WHERE credit_score NOT IN (650, 675, 700)",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT borrower_name) AS unique_borrowers FROM LoanCreditData",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT AVG(loan_amount) AS average_loan_amount_by_credit_score, credit_score FROM LoanCreditData GROUP BY credit_score",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT SUM(loan_amount) AS total_loan_amount FROM LoanCreditData",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, borrower_name, loan_amount, loan_date FROM LoanCreditData WHERE loan_amount > 20000",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT * FROM LoanCreditData WHERE loan_date = CURDATE()",
  "### TABLEDATA\n\nCREATE TABLE LoanCreditData (\n  loan_id INT PRIMARY KEY,\n  borrower_name TEXT,\n  loan_amount DECIMAL,\n  loan_date DATE,\n  credit_score INT\n)\n\n### STATEMENT\n\nSELECT loan_id, borrower_name FROM LoanCreditData WHERE credit_score >= 650 AND loan_date < '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loan_id, customer_id FROM loans WHERE loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loan_id, loan_amount FROM loans WHERE interest_rate < 5.0;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM credit_scores;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, credit_score FROM credit_scores WHERE risk_level = 'low';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, risk_level FROM credit_scores WHERE credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loans.loan_id, loans.loan_amount, credit_scores.credit_score FROM loans JOIN credit_scores ON loans.customer_id = credit_scores.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loans.loan_id, loans.loan_amount, credit_scores.credit_score FROM loans INNER JOIN credit_scores ON loans.customer_id = credit_scores.customer_id WHERE loans.loan_amount > 20000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loans.loan_id, loans.customer_id, loans.interest_rate, credit_scores.credit_score FROM loans LEFT JOIN credit_scores ON loans.customer_id = credit_scores.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loans.customer_id, credit_scores.credit_score FROM loans RIGHT JOIN credit_scores ON loans.customer_id = credit_scores.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loans.loan_id, credit_scores.risk_level FROM loans FULL JOIN credit_scores ON loans.customer_id = credit_scores.customer_id WHERE loans.loan_amount < 15000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(loan_amount) AS avg_loan_amount FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(customer_id) AS total_customers FROM credit_scores;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(loan_amount) AS max_loan FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(interest_rate) AS min_interest_rate FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(loan_amount) AS total_loan_amount FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(loan_id) AS num_loans FROM loans GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT risk_level, AVG(credit_score) AS avg_credit_score FROM credit_scores GROUP BY risk_level;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(loan_amount) AS max_loan_amount FROM loans GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(interest_rate) AS min_interest_rate FROM loans GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_amount > 5000 AND interest_rate < 0.1;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loan_id, customer_id, loan_amount FROM loans JOIN credit_scores ON loans.customer_id = credit_scores.customer_id WHERE credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(loan_amount) AS max_loan_amount FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(interest_rate) AS avg_interest_rate FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_loans FROM loans WHERE loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_id, risk_level FROM loans JOIN credit_scores ON loans.customer_id = credit_scores.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE customer_id IN (SELECT customer_id FROM credit_scores WHERE credit_score < 600);",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loan_id, customer_id, loan_amount FROM loans WHERE customer_id NOT IN (SELECT customer_id FROM credit_scores WHERE risk_level = 'High');",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(loan_amount) AS avg_loan_amount FROM loans GROUP BY customer_id HAVING AVG(loan_amount) > 5000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(customer_id) AS total_customers, SUM(loan_amount) AS total_loan_amount FROM loans GROUP BY customer_id HAVING total_loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loan_id, customer_id, loan_amount, interest_rate FROM loans WHERE customer_id = 1001;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(credit_score) AS max_credit_score FROM credit_scores;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, credit_score, risk_level FROM credit_scores WHERE credit_score > 650 AND risk_level = 'Medium';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, loan_amount, interest_rate FROM loans WHERE loan_amount BETWEEN 5000 AND 10000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, loan_amount FROM loans ORDER BY loan_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE interest_rate = (SELECT MIN(interest_rate) FROM loans);",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loan_id, customer_id, loan_amount FROM loans INNER JOIN credit_scores ON loans.customer_id = credit_scores.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_loans FROM loans GROUP BY customer_id HAVING total_loans > 1;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(interest_rate) AS avg_interest_rate FROM loans GROUP BY customer_id HAVING avg_interest_rate < 0.05;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL NOT NULL,\n    interest_rate DECIMAL NOT NULL\n);\n\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT NOT NULL,\n    risk_level VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, loan_amount FROM loans UNION SELECT customer_id, loan_amount FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email FROM customers WHERE customer_phone LIKE '%555%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT loan_id, loan_amount FROM loans WHERE loan_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM credit_reports;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT report_id, credit_score FROM credit_reports WHERE credit_score >= 700;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_phone FROM customers WHERE customer_email IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT loan_id, loan_amount FROM loans WHERE loan_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(loan_amount) FROM loans GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(credit_score) FROM credit_reports GROUP BY customer_name HAVING AVG(credit_score) > 600;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_id IN (SELECT loan_id FROM loans WHERE loan_amount > 5000);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, loan_amount FROM customers INNER JOIN loans ON customers.customer_id = loans.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, loans.loan_amount FROM customers LEFT JOIN loans ON customers.customer_id = loans.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_customers FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT AVG(loan_amount) AS average_loan_amount FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT SUM(credit_score) AS total_credit_score FROM credit_reports;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_phone LIKE '%123%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, loan_amount FROM loans WHERE loan_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, loans.loan_amount FROM customers INNER JOIN loans ON customers.customer_id = loans.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, loans.loan_amount, credit_reports.credit_score FROM customers INNER JOIN loans ON customers.customer_id = loans.customer_id INNER JOIN credit_reports ON customers.customer_id = credit_reports.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, count(loans.loan_id) as loan_count FROM customers LEFT JOIN loans ON customers.customer_id = loans.customer_id GROUP BY customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, SUM(loans.loan_amount) as total_loan_amount FROM customers LEFT JOIN loans ON customers.customer_id = loans.customer_id GROUP BY customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, AVG(credit_reports.credit_score) as avg_credit_score FROM customers LEFT JOIN credit_reports ON customers.customer_id = credit_reports.customer_id GROUP BY customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM loans WHERE loan_amount > 20000);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_name LIKE 'A%' AND customer_email NOT LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, loans.loan_amount FROM customers INNER JOIN loans ON customers.customer_id = loans.customer_id WHERE loans.loan_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, credit_reports.credit_score FROM customers INNER JOIN credit_reports ON customers.customer_id = credit_reports.customer_id WHERE credit_reports.report_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, loans.loan_amount FROM customers LEFT JOIN loans ON customers.customer_id = loans.customer_id WHERE loans.customer_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, loans.loan_amount FROM customers RIGHT JOIN loans ON customers.customer_id = loans.customer_id WHERE customers.customer_name LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, loans.loan_amount FROM customers FULL JOIN loans ON customers.customer_id = loans.customer_id WHERE loans.loan_amount > 50000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, loans.loan_amount, credit_reports.credit_score FROM customers FULL JOIN loans ON customers.customer_id = loans.customer_id FULL JOIN credit_reports ON customers.customer_id = credit_reports.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT AVG(loan_amount) as avg_loan_amount FROM loans WHERE loan_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(loan_amount) as total_loan_amount FROM customers INNER JOIN loans ON customers.customer_id = loans.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    customer_email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE loans (\n    loan_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_reports (\n    report_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    credit_score INT NOT NULL,\n    report_date DATE NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, MAX(credit_score) as max_credit_score FROM customers INNER JOIN credit_reports ON customers.customer_id = credit_reports.customer_id GROUP BY customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT loan_id, loan_amount, loan_status FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM credit_scores;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customer_id, credit_score FROM credit_scores;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount, payment_status FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT loans.loan_id, loans.loan_amount, payments.payment_amount FROM loans INNER JOIN payments ON loans.loan_id = payments.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customers.first_name, loans.loan_amount, payments.payment_amount FROM customers INNER JOIN loans ON customers.customer_id = loans.customer_id INNER JOIN payments ON loans.loan_id = payments.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE first_name = 'John';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM credit_scores WHERE credit_rating = 'good';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customers.first_name, customers.last_name, loans.loan_amount, payments.payment_amount FROM customers INNER JOIN loans ON customers.customer_id = loans.customer_id INNER JOIN payments ON loans.loan_id = payments.loan_id WHERE payments.payment_status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customers.first_name, customers.last_name, credit_scores.credit_score FROM customers INNER JOIN credit_scores ON customers.customer_id = credit_scores.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customers.first_name, customers.last_name, payments.payment_amount FROM customers INNER JOIN loans ON customers.customer_id = loans.customer_id INNER JOIN payments ON loans.loan_id = payments.loan_id WHERE payments.payment_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customers.first_name, loans.loan_date FROM customers INNER JOIN loans ON customers.customer_id = loans.customer_id WHERE loans.loan_amount < 5000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customers.first_name, credit_scores.credit_rating FROM customers INNER JOIN credit_scores ON customers.customer_id = credit_scores.customer_id WHERE credit_scores.credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name FROM customers WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM credit_scores WHERE credit_rating = 'Good' AND credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT loan_id, loan_amount, loan_date FROM loans WHERE loan_status = 'Approved';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customers.first_name, customers.last_name, loans.loan_amount FROM customers JOIN loans ON customers.customer_id = loans.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT payments.payment_id, payments.payment_amount, loans.loan_amount FROM payments LEFT JOIN loans ON payments.loan_id = loans.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customers.first_name, customers.last_name, credit_scores.credit_rating FROM customers INNER JOIN credit_scores ON customers.customer_id = credit_scores.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT loan_id, SUM(payment_amount) AS total_payments FROM payments GROUP BY loan_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, COUNT(loan_id) AS num_loans FROM customers LEFT JOIN loans ON customers.customer_id = loans.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, loan_amount FROM customers, loans WHERE customers.customer_id = loans.customer_id AND loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, payment_amount FROM customers JOIN payments ON customers.customer_id = payments.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(credit_score) AS average_credit_score FROM credit_scores GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT loan_id, payment_amount FROM payments WHERE payment_date > '2022-06-30' AND payment_status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customers.first_name, customers.last_name, payments.payment_amount FROM customers JOIN payments ON customers.customer_id = payments.customer_id WHERE payment_status = 'Completed';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, email, phone_number FROM customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM credit_scores WHERE credit_score < 600);",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, SUM(payment_amount) AS total_payments FROM customers LEFT JOIN payments ON customers.customer_id = payments.customer_id GROUP BY customer_id HAVING total_payments > 5000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, loan_amount, payment_amount FROM customers JOIN loans ON customers.customer_id = loans.customer_id LEFT JOIN payments ON loans.loan_id = payments.loan_id WHERE loan_status = 'Approved' AND payment_date < '2022-09-30';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, credit_score, credit_rating FROM customers JOIN credit_scores ON customers.customer_id = credit_scores.customer_id WHERE credit_score BETWEEN 600 AND 800;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    loan_date DATE,\n    loan_status VARCHAR(10)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE credit_scores (\n    customer_id INT PRIMARY KEY,\n    credit_score INT,\n    credit_rating VARCHAR(10)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_amount DECIMAL,\n    payment_date DATE,\n    payment_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, payment_amount FROM customers LEFT JOIN payments ON customers.customer_id = payments.customer_id WHERE payment_amount IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loan_id, loan_amount FROM loans WHERE loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loan_id, customer_id, loan_date FROM loans WHERE customer_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, age FROM customers WHERE age > 30;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, address FROM customers WHERE address LIKE '%Street%';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM credit_scores;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, credit_score, credit_rating FROM credit_scores WHERE credit_rating = 'Good';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, credit_score, credit_limit FROM credit_scores WHERE credit_limit >= 50000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, loan_id, payment_date FROM payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, customer_id, payment_amount FROM payments WHERE payment_amount < 500;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM risks;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loan_id, risk_factor FROM risks WHERE risk_factor = 'High';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loan_id, risk_description FROM risks WHERE risk_description LIKE '%default%';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loans.loan_id, loans.customer_id, customers.customer_name FROM loans INNER JOIN customers ON loans.customer_id = customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loans.loan_id, loans.loan_amount, payments.payment_amount FROM loans LEFT JOIN payments ON loans.loan_id = payments.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loans.loan_id, loans.loan_date, risks.risk_description FROM loans RIGHT JOIN risks ON loans.loan_id = risks.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loans.loan_id, loans.customer_id, payments.payment_id FROM loans FULL JOIN payments ON loans.loan_id = payments.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loans.loan_amount, payments.payment_amount, risks.risk_factor FROM loans INNER JOIN payments ON loans.loan_id = payments.loan_id INNER JOIN risks ON loans.loan_id = risks.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM loans JOIN customers ON loans.customer_id = customers.customer_id WHERE loan_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, age, address FROM customers JOIN credit_scores ON customers.customer_id = credit_scores.customer_id WHERE credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loan_amount, payment_amount FROM loans JOIN payments ON loans.loan_id = payments.loan_id WHERE payment_amount > loan_amount;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, credit_rating, credit_limit FROM customers JOIN credit_scores ON customers.customer_id = credit_scores.customer_id WHERE credit_rating = 'Excellent';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM loans JOIN risks ON loans.loan_id = risks.loan_id WHERE risk_factor LIKE '%High%';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_date, payment_amount FROM payments JOIN customers ON payments.customer_id = customers.customer_id WHERE payment_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, age, address FROM customers WHERE age < 30;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers JOIN loans ON customers.customer_id = loans.customer_id WHERE loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_amount IN (SELECT MAX(loan_amount) FROM loans);",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, credit_rating, credit_limit FROM customers JOIN credit_scores ON customers.customer_id = credit_scores.customer_id WHERE credit_limit > 5000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, age, loan_amount FROM customers JOIN loans ON customers.customer_id = loans.customer_id WHERE loan_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_date, payment_amount FROM payments WHERE payment_date > '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loan_id, risk_factor, risk_description FROM risks WHERE risk_factor = 'High';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, age, address FROM customers WHERE address LIKE '%Street%';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_date < '2022-10-15';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, credit_rating, credit_limit FROM customers JOIN credit_scores ON customers.customer_id = credit_scores.customer_id WHERE credit_rating = 'Good' AND credit_limit < 10000;",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT loan_id, loan_amount, loan_date FROM loans WHERE loan_amount > (SELECT AVG(loan_amount) FROM loans);",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_date >= '2022-01-01' AND loan_date <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  loan_date DATE\n);\n\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  age INT,\n  address VARCHAR(100)\n);\n\n\nCREATE TABLE credit_scores (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  credit_rating VARCHAR(10),\n  credit_limit DECIMAL\n);\n\n\nCREATE TABLE payments (\n  payment_id INT PRIMARY KEY,\n  loan_id INT,\n  customer_id INT,\n  payment_date DATE,\n  payment_amount DECIMAL\n);\n\n\nCREATE TABLE risks (\n  loan_id INT PRIMARY KEY,\n  risk_factor VARCHAR(50),\n  risk_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, credit_rating FROM customers JOIN credit_scores ON customers.customer_id = credit_scores.customer_id WHERE credit_rating = 'Fair';"
]