[
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, timestamp FROM payment_processing_data;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_method, status FROM payment_processing_data WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE payment_method = 'Credit Card';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE status = 'Failed';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(amount) FROM payment_processing_data;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM payment_processing_data;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(amount) FROM payment_processing_data;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(amount) FROM payment_processing_data;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM payment_processing_data;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT payment_method FROM payment_processing_data;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT status, COUNT(*) FROM payment_processing_data GROUP BY status;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_method, AVG(amount) FROM payment_processing_data GROUP BY payment_method;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE timestamp > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE status='Success' ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE status = 'Pending' AND amount < 50;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE timestamp BETWEEN '2021-01-01' AND '2021-01-31';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE amount > 100 AND payment_method = 'Credit Card';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM payment_processing_data WHERE status = 'Success' ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM payment_processing_data WHERE status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_method, AVG(amount) as avg_amount FROM payment_processing_data GROUP BY payment_method;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE status = 'Failed' AND EXTRACT(MONTH FROM timestamp) = 10;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(amount) as min_amount, MAX(amount) as max_amount FROM payment_processing_data;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT payment_method FROM payment_processing_data;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE status = 'Success' LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) as avg_amount FROM payment_processing_data WHERE payment_method = 'PayPal';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE amount >= 500 OR status = 'Canceled';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM payment_processing_data WHERE EXTRACT(YEAR FROM timestamp) = 2021;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE amount > 1000 AND status = 'Success';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_method, SUM(amount) as total_amount FROM payment_processing_data GROUP BY payment_method HAVING SUM(amount) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE payment_method IN ('Credit Card', 'PayPal');",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT status, COUNT(*) as count FROM payment_processing_data GROUP BY status ORDER BY count DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE amount = (SELECT MAX(amount) FROM payment_processing_data);",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE timestamp >= CURRENT_TIMESTAMP - INTERVAL '1 week';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(amount) as max_amount FROM payment_processing_data WHERE status = 'Success';",
  "### TABLEDATA\n\nCREATE TABLE payment_processing_data (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    status VARCHAR,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_processing_data WHERE payment_method = 'Cash' AND timestamp::date = CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_date FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, transaction_status FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_status FROM payments WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_amount < 50;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM payments WHERE payment_status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_status FROM transactions WHERE transaction_status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM payments WHERE payment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_status FROM transactions WHERE transaction_date <= '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_status FROM payments WHERE payment_amount >= 500 AND payment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_amount > 1000 AND transaction_status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM payments ORDER BY payment_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transactions ORDER BY transaction_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_status FROM payments WHERE payment_amount BETWEEN 200 AND 500;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_status FROM transactions WHERE transaction_amount NOT BETWEEN 100 AND 500;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT AVG(payment_amount) FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT MAX(transaction_amount) FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT MIN(payment_date) FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT SUM(payment_amount) FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount, payment_date FROM payments WHERE payment_status = 'completed'",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, SUM(payment_amount) AS total_amount FROM payments GROUP BY payment_id",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM payments p JOIN transactions t ON p.payment_id = t.payment_id",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM payments p LEFT JOIN transactions t ON p.payment_id = t.payment_id",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, COUNT(*) AS transaction_count FROM transactions GROUP BY payment_id",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT MAX(payment_amount) AS max_payment_amount FROM payments",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT transaction_id, AVG(transaction_amount) AS average_amount FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount, payment_date FROM payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-06-30'",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount, payment_status FROM payments WHERE payment_amount > 500 AND payment_status = 'pending'",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE EXTRACT(MONTH FROM payment_date) = 10",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM payments WHERE payment_amount IN (100, 200, 300)",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT DISTINCT payment_status FROM payments",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM payments p JOIN transactions t ON p.payment_id = t.payment_id WHERE t.transaction_status = 'completed'",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, MAX(payment_amount) AS max_payment_amount FROM payments GROUP BY payment_id",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount, payment_date FROM payments ORDER BY payment_date DESC",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT SUM(payment_amount) AS total_amount FROM payments",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount, payment_status FROM payments WHERE payment_status LIKE '%success%'",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount, payment_date FROM payments WHERE payment_status NOT LIKE '%failed%'",
  "### TABLEDATA\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    payment_amount DECIMAL,\n    payment_date TIMESTAMPTZ,\n    payment_status VARCHAR\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    payment_id UUID,\n    transaction_date TIMESTAMPTZ,\n    transaction_amount DECIMAL,\n    transaction_status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, COUNT(*) AS transaction_count FROM transactions WHERE transaction_date >= '2022-07-01'",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_transactions;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT amount, currency FROM payment_transactions WHERE status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE is_active = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_name FROM payment_methods WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM users;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE email = 'example@example.com';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT timestamp FROM payment_transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_transactions WHERE timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_name, is_active FROM payment_methods WHERE user_id IN ('123e4567-e89b-12d3-a456-426614174000', '223e4567-e89b-12d3-a456-426614174001');",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM users WHERE created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE method_name LIKE '%card%';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(amount), AVG(amount) FROM payment_transactions WHERE status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT currency FROM payment_transactions;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM users WHERE user_id = '323e4567-e89b-12d3-a456-426614174002';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(amount), MAX(amount) FROM payment_transactions WHERE currency = 'USD';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) FROM payment_transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) FROM payment_transactions GROUP BY user_id HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_name, COUNT(*) FROM payment_methods GROUP BY method_name ORDER BY COUNT(*) DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, timestamp FROM users JOIN payment_transactions ON users.user_id = payment_transactions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_transactions WHERE amount > 1000 AND currency='USD';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, amount FROM payment_transactions INNER JOIN users ON payment_transactions.user_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_name, is_active FROM payment_methods WHERE method_name LIKE 'Credit%';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM users WHERE created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_transactions WHERE status='pending' ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) AS total_amount FROM payment_transactions GROUP BY user_id ORDER BY total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_transactions WHERE amount BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(transaction_id) AS total_transactions FROM payment_transactions GROUP BY user_id HAVING total_transactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_name, COUNT(method_id) AS total_methods FROM payment_methods GROUP BY method_name HAVING total_methods > 3;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.first_name, p.amount FROM users u INNER JOIN payment_transactions p ON u.user_id = p.user_id WHERE p.amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.first_name, u.email FROM users u LEFT JOIN payment_transactions p ON u.user_id = p.user_id WHERE p.transaction_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.first_name, p.amount FROM users u LEFT JOIN payment_transactions p ON u.user_id = p.user_id AND p.amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email, COUNT(*) AS total_transactions FROM users u JOIN payment_transactions p ON u.user_id = p.user_id GROUP BY u.user_id HAVING total_transactions > 2;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.first_name, SUM(p.amount) AS total_spent FROM users u JOIN payment_transactions p ON u.user_id = p.user_id GROUP BY u.user_id ORDER BY total_spent DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_name, AVG(amount) AS avg_amount FROM payment_transactions p JOIN payment_methods m ON p.user_id = m.user_id GROUP BY method_name HAVING avg_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.first_name, p.amount FROM payment_transactions p JOIN users u ON p.user_id = u.user_id WHERE p.timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_name, COUNT(*) AS total_transactions FROM payment_transactions p JOIN payment_methods m ON p.user_id = m.user_id GROUP BY method_name HAVING total_transactions > 10;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM users WHERE user_id IN (SELECT user_id FROM payment_transactions WHERE amount > 1000);",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.first_name, COUNT(*) AS total_methods FROM users u JOIN payment_methods m ON u.user_id = m.user_id GROUP BY u.user_id HAVING total_methods > 1;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    currency VARCHAR,\n    timestamp TIMESTAMP,\n    status VARCHAR,\n    user_id UUID\n);\n\nCREATE TABLE payment_methods (\n    method_id UUID PRIMARY KEY,\n    method_name VARCHAR,\n    is_active BOOLEAN,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    first_name VARCHAR,\n    last_name VARCHAR,\n    email VARCHAR UNIQUE,\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM users WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_transactions;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM payment_transactions;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_id, method_name FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_logs;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT log_id, transaction_id FROM transaction_logs;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, log_message FROM transaction_logs;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_transactions WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers WHERE country = 'USA';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_id, method_name FROM payment_methods WHERE method_type = 'Credit Card';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_logs WHERE log_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_transactions ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_name, method_type FROM payment_methods ORDER BY method_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT log_message, log_timestamp FROM transaction_logs ORDER BY log_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_transactions LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers LIMIT 5 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE email LIKE '%@example.com%';",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_transactions",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, payment_method, timestamp FROM payment_transactions WHERE amount > 100",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, country, email FROM customers",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_name, method_type FROM payment_methods WHERE method_type = 'credit'",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, log_message, log_timestamp FROM transaction_logs",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_transactions.transaction_id, payment_transactions.amount, payment_methods.method_name, transaction_logs.log_message FROM payment_transactions JOIN payment_methods ON payment_transactions.payment_method = payment_methods.method_id JOIN transaction_logs ON payment_transactions.transaction_id = transaction_logs.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, country, payment_transactions.amount, payment_methods.method_name FROM customers JOIN payment_transactions ON customers.customer_id = payment_transactions.transaction_id JOIN payment_methods ON payment_transactions.payment_method = payment_methods.method_id",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, payment_method, timestamp FROM payment_transactions WHERE payment_method != 'credit'",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, country, email FROM customers WHERE country = 'USA'",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, payment_method, timestamp FROM payment_transactions WHERE timestamp >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM payment_transactions WHERE amount > 500)",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payment_transactions WHERE amount BETWEEN 100 AND 500",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, country, payment_transactions.amount, payment_methods.method_name FROM customers LEFT JOIN payment_transactions ON customers.customer_id = payment_transactions.transaction_id LEFT JOIN payment_methods ON payment_transactions.payment_method = payment_methods.method_id",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, country, payment_transactions.amount, payment_methods.method_name FROM customers RIGHT JOIN payment_transactions ON customers.customer_id = payment_transactions.transaction_id RIGHT JOIN payment_methods ON payment_transactions.payment_method = payment_methods.method_id",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, country, payment_transactions.amount, payment_methods.method_name FROM customers LEFT JOIN payment_transactions ON customers.customer_id = payment_transactions.transaction_id RIGHT JOIN payment_methods ON payment_transactions.payment_method = payment_methods.method_id",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, country, payment_transactions.amount, payment_methods.method_name FROM customers RIGHT JOIN payment_transactions ON customers.customer_id = payment_transactions.transaction_id LEFT JOIN payment_methods ON payment_transactions.payment_method = payment_methods.method_id",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(amount) AS total_amount FROM customers JOIN payment_transactions ON customers.customer_id = payment_transactions.transaction_id GROUP BY customer_id, customer_name",
  "### TABLEDATA\n\nCREATE TABLE payment_transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    payment_method VARCHAR,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR,\n    country VARCHAR,\n    email VARCHAR\n);\n\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name VARCHAR,\n    method_type VARCHAR\n);\n\n\nCREATE TABLE transaction_logs (\n    log_id INT PRIMARY KEY,\n    transaction_id INT,\n    log_message TEXT,\n    log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT method_name, COUNT(*) AS total_transactions FROM payment_transactions JOIN payment_methods ON payment_transactions.payment_method = payment_methods.method_id GROUP BY method_name ORDER BY total_transactions DESC",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, method_name FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM invoices;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT invoice_id, amount_due FROM invoices;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, transaction_id FROM payment_history;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, method_name, is_active FROM payment_methods WHERE is_active = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email_address FROM customers WHERE email_address LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM transactions WHERE transaction_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT invoice_id, due_date FROM invoices WHERE due_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM payment_history WHERE payment_amount >= 50;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods ORDER BY method_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM invoices ORDER BY amount_due DESC;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history ORDER BY payment_date ASC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT method_name, is_active FROM payment_methods WHERE is_active = TRUE",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_methods.method_name, transactions.transaction_amount FROM payment_methods JOIN transactions ON payment_methods.id = transactions.payment_method_id",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, invoices.amount_due FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_methods.method_name, payment_history.payment_amount FROM payment_methods JOIN transactions ON payment_methods.id = transactions.payment_method_id JOIN payment_history ON transactions.transaction_id = payment_history.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, transactions.transaction_amount, payment_history.payment_amount FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id JOIN transactions ON customers.customer_id = transactions.payment_method_id JOIN payment_history ON transactions.transaction_id = payment_history.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM invoices WHERE amount_due > 1000",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE EXTRACT(MONTH FROM transaction_date) = 10",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, email_address FROM customers WHERE customer_id IN (SELECT customer_id FROM invoices WHERE due_date <= now())",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_methods.method_name, customers.customer_name FROM payment_methods JOIN transactions ON payment_methods.id = transactions.payment_method_id JOIN customers ON transactions.customer_id = customers.customer_id",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(transaction_amount) AS total_transactions FROM customers JOIN transactions ON customers.customer_id = transactions.payment_method_id GROUP BY customer_name ORDER BY total_transactions DESC",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, SUM(invoices.amount_due) AS total_due FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id GROUP BY customers.customer_name HAVING total_due > 5000",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_methods.method_name, AVG(transactions.transaction_amount) AS avg_amount FROM payment_methods JOIN transactions ON payment_methods.id = transactions.payment_method_id GROUP BY payment_methods.method_name",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_history WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, email_address FROM customers WHERE email_address LIKE '%gmail.com'",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id > 100",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, COUNT(invoices.invoice_id) AS num_invoices FROM customers JOIN invoices ON customers.customer_id = invoices.customer_id GROUP BY customers.customer_name HAVING num_invoices > 5",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT transaction_amount FROM transactions ORDER BY transaction_amount DESC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE id = (SELECT MAX(id) FROM payment_methods)",
  "### TABLEDATA\n\nCREATE TABLE payment_methods (\n    id INT PRIMARY KEY,\n    method_name VARCHAR(50) NOT NULL,\n    is_active BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    payment_method_id INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    customer_id INT,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    due_date DATE\n);\n\nCREATE TABLE payment_history (\n    payment_id INT PRIMARY KEY,\n    transaction_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(amount_due) AS max_due FROM invoices GROUP BY customer_id HAVING max_due > 5000"
]