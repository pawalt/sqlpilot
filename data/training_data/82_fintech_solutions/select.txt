<t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT * FROM fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select * from fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT id, account_number, balance FROM fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select id, account_number, balance from fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT * FROM fintech_solutions WHERE id = 1;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select * from fintech_solutions where id = 1;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT id, balance FROM fintech_solutions WHERE account_number = 123456;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select id, balance from fintech_solutions where account_number = 123456;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT * FROM fintech_solutions WHERE balance > 1000;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select * from fintech_solutions where balance > 1000;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT account_number, balance FROM fintech_solutions WHERE user_id = 100;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select account_number, balance from fintech_solutions where user_id = 100;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT * FROM fintech_solutions ORDER BY created_at DESC;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select * from fintech_solutions order by created_at desc;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT id, account_number, balance FROM fintech_solutions ORDER BY balance ASC;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select id, account_number, balance from fintech_solutions order by balance asc;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT AVG(balance) FROM fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select avg(balance) from fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT COUNT(*) FROM fintech_solutions WHERE user_id = 200;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select count(*) from fintech_solutions where user_id = 200;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT MAX(balance) FROM fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select max(balance) from fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT MIN(balance) FROM fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select min(balance) from fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT id, account_number, user_id FROM fintech_solutions WHERE balance BETWEEN 500 AND 1000;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select id, account_number, user_id from fintech_solutions where balance between 500 and 1000;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT * FROM fintech_solutions WHERE balance <= 500 AND user_id = 300;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select * from fintech_solutions where balance <= 500 and user_id = 300;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT id, account_number, balance FROM fintech_solutions WHERE user_id = 400 AND account_number = 654321;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select id, account_number, balance from fintech_solutions where user_id = 400 and account_number = 654321;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT SUM(balance) FROM fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select sum(balance) from fintech_solutions;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT * FROM fintech_solutions WHERE account_number IN (123456, 654321);</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select * from fintech_solutions where account_number in (123456, 654321);</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT id, account_number, balance, user_id FROM fintech_solutions WHERE created_at > '2022-01-01';</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select id, account_number, balance, user_id from fintech_solutions where created_at > '2022-01-01';</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT id, account_number, balance FROM fintech_solutions LIMIT 5;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select id, account_number, balance from fintech_solutions limit 5;</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>SELECT * FROM fintech_solutions WHERE user_id NOT IN (100, 200);</stat><divider><t>CREATE TABLE fintech_solutions (id INT PRIMARY KEY, account_number INT, balance DECIMAL(10, 2), user_id INT, created_at TIMESTAMP)</t><stat>select * from fintech_solutions where user_id not in (100, 200);</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users WHERE id = 1;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users where id = 1;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT username, email FROM users WHERE id = 1;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select username, email from users where id = 1;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users WHERE username = 'john_doe';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users where username = 'john_doe';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT id, email FROM users WHERE username = 'jane_smith';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select id, email from users where username = 'jane_smith';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users WHERE email = 'test@example.com';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users where email = 'test@example.com';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT id, email FROM users WHERE username = 'test_user' AND email = 'test@example.com';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select id, email from users where username = 'test_user' and email = 'test@example.com';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users WHERE id IN (1, 2, 3);</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users where id in (1, 2, 3);</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT id, username FROM users WHERE id BETWEEN 1 AND 10;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select id, username from users where id between 1 and 10;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users ORDER BY username ASC;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users order by username asc;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users WHERE username LIKE 'j%';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users where username like 'j%';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users WHERE email LIKE '%@example.com';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users where email like '%@example.com';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users WHERE password = 'hashed_password';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users where password = 'hashed_password';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT COUNT(*) FROM users;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select count(*) from users;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT AVG(id) FROM users;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select avg(id) from users;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT MIN(id) FROM users;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select min(id) from users;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT MAX(id) FROM users;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select max(id) from users;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT DISTINCT email FROM users;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select distinct email from users;</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users WHERE username = 'admin' OR username = 'root';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users where username = 'admin' or username = 'root';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users WHERE email = 'test1@example.com' OR email = 'test2@example.com';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users where email = 'test1@example.com' or email = 'test2@example.com';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users WHERE id = 1 AND username = 'john_doe';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users where id = 1 and username = 'john_doe';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>SELECT * FROM users WHERE id = 1 OR username = 'john_doe';</stat><divider><t>CREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, password VARCHAR(100) NOT NULL)</t><stat>select * from users where id = 1 or username = 'john_doe';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT * FROM users;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select * from users;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT * FROM users;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select * from users;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT user_id, username FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select user_id, username from users where user_id = 1;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT user_id, username FROM users WHERE user_id = 1;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select user_id, username from users where user_id = 1;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT username, email FROM users WHERE email LIKE '%gmail.com%';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select username, email from users where email like '%gmail.com%';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT username, email FROM users WHERE email LIKE '%gmail.com%';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select username, email from users where email like '%gmail.com%';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT * FROM transactions;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT * FROM transactions;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT transaction_id, user_id FROM transactions WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select transaction_id, user_id from transactions where user_id = 1;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT transaction_id, user_id FROM transactions WHERE user_id = 1;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select transaction_id, user_id from transactions where user_id = 1;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT user_id, SUM(amount) FROM transactions GROUP BY user_id;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select user_id, sum(amount) from transactions group by user_id;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT user_id, SUM(amount) FROM transactions GROUP BY user_id;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select user_id, sum(amount) from transactions group by user_id;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT * FROM users INNER JOIN transactions ON users.user_id = transactions.user_id;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select * from users inner join transactions on users.user_id = transactions.user_id;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT * FROM users INNER JOIN transactions ON users.user_id = transactions.user_id;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select * from users inner join transactions on users.user_id = transactions.user_id;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT u.username, t.amount FROM users u INNER JOIN transactions t ON u.user_id = t.user_id;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select u.username, t.amount from users u inner join transactions t on u.user_id = t.user_id;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT u.username, t.amount FROM users u INNER JOIN transactions t ON u.user_id = t.user_id;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select u.username, t.amount from users u inner join transactions t on u.user_id = t.user_id;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT * FROM users WHERE user_id IN (SELECT user_id FROM transactions);</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select * from users where user_id in (select user_id from transactions);</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT * FROM users WHERE user_id IN (SELECT user_id FROM transactions);</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select * from users where user_id in (select user_id from transactions);</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT MAX(amount) FROM transactions;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select max(amount) from transactions;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT MAX(amount) FROM transactions;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select max(amount) from transactions;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT user_id, MIN(amount) FROM transactions GROUP BY user_id;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select user_id, min(amount) from transactions group by user_id;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT user_id, MIN(amount) FROM transactions GROUP BY user_id;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select user_id, min(amount) from transactions group by user_id;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT u.username, SUM(t.amount) FROM users u INNER JOIN transactions t ON u.user_id = t.user_id GROUP BY u.username;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select u.username, sum(t.amount) from users u inner join transactions t on u.user_id = t.user_id group by u.username;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT u.username, SUM(t.amount) FROM users u INNER JOIN transactions t ON u.user_id = t.user_id GROUP BY u.username;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select u.username, sum(t.amount) from users u inner join transactions t on u.user_id = t.user_id group by u.username;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT * FROM users ORDER BY user_id ASC;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select * from users order by user_id asc;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT * FROM users ORDER BY user_id ASC;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select * from users order by user_id asc;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT * FROM users ORDER BY username DESC;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select * from users order by username desc;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT * FROM users ORDER BY username DESC;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select * from users order by username desc;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT * FROM transactions WHERE DATE(transaction_date) = CURDATE();</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select * from transactions where date(transaction_date) = curdate();</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT * FROM transactions WHERE DATE(transaction_date) = CURDATE();</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select * from transactions where date(transaction_date) = curdate();</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT user_id, AVG(amount) FROM transactions GROUP BY user_id HAVING AVG(amount) > 100;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select user_id, avg(amount) from transactions group by user_id having avg(amount) > 100;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT user_id, AVG(amount) FROM transactions GROUP BY user_id HAVING AVG(amount) > 100;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select user_id, avg(amount) from transactions group by user_id having avg(amount) > 100;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT COUNT(*) FROM users;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select count(*) from users;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT COUNT(*) FROM users;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select count(*) from users;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT username, COUNT(*) FROM transactions GROUP BY username;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select username, count(*) from transactions group by username;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT username, COUNT(*) FROM transactions GROUP BY username;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select username, count(*) from transactions group by username;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT AVG(amount) FROM transactions WHERE user_id = 1;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select avg(amount) from transactions where user_id = 1;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT AVG(amount) FROM transactions WHERE user_id = 1;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select avg(amount) from transactions where user_id = 1;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT * FROM transactions WHERE amount BETWEEN 100 AND 200;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select * from transactions where amount between 100 and 200;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT * FROM transactions WHERE amount BETWEEN 100 AND 200;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select * from transactions where amount between 100 and 200;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>SELECT user_id, COUNT(*) FROM transactions GROUP BY user_id HAVING COUNT(*) > 5;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)</t><stat>select user_id, count(*) from transactions group by user_id having count(*) > 5;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>SELECT user_id, COUNT(*) FROM transactions GROUP BY user_id HAVING COUNT(*) > 5;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, user_id INT, amount DECIMAL(10,2), transaction_date TIMESTAMP)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100))</t><stat>select user_id, count(*) from transactions group by user_id having count(*) > 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers where customer_id = 1;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, account_type, balance FROM Accounts WHERE account_type = 'Savings';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, account_type, balance from accounts where account_type = 'savings';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Transactions;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from transactions;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT transaction_id, transaction_type, amount FROM Transactions WHERE amount > 1000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select transaction_id, transaction_type, amount from transactions where amount > 1000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Loans;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from loans;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, customer_id, loan_amount FROM Loans WHERE loan_amount < 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, customer_id, loan_amount from loans where loan_amount < 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT Customers.first_name, Accounts.balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customers.first_name, accounts.balance from customers inner join accounts on customers.customer_id = accounts.customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, SUM(balance) AS total_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, sum(balance) as total_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, loan_amount FROM Loans WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = 'John');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, loan_amount from loans where customer_id in (select customer_id from customers where first_name = 'john');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, customer_id, balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Alice');</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, customer_id, balance from accounts where customer_id = (select customer_id from customers where first_name = 'alice');</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, sum(amount) as total_amount from transactions group by customer_id;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Customers WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from customers where email like '%gmail.com';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT loan_id, loan_type, start_date FROM Loans WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30';</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select loan_id, loan_type, start_date from loans where start_date between '2022-01-01' and '2022-06-30';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT * FROM Accounts ORDER BY balance DESC;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select * from accounts order by balance desc;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT account_id, AVG(balance) AS average_balance FROM Accounts GROUP BY account_id HAVING AVG(balance) > 5000;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select account_id, avg(balance) as average_balance from accounts group by account_id having avg(balance) > 5000;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT first_name, MAX(balance) AS max_balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY first_name;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select first_name, max(balance) as max_balance from customers inner join accounts on customers.customer_id = accounts.customer_id group by first_name;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT count(*) AS total_customers FROM Customers;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select count(*) as total_customers from customers;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>SELECT customer_id, first_name, last_name FROM Customers LIMIT 10 OFFSET 5;</stat><divider><t>CREATE TABLE Loans (loan_id INT PRIMARY KEY, customer_id INT, loan_amount DECIMAL(10, 2), loan_type VARCHAR(50), start_date DATE, payment_due_date DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10, 2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

CREATE TABLE Accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10, 2), date_opened DATE, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));

CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(20));</t><stat>select customer_id, first_name, last_name from customers limit 10 offset 5;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT user_id, username, email, registration_date FROM user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select user_id, username, email, registration_date from user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT * FROM user_info WHERE user_id = 1;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select * from user_info where user_id = 1;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT * FROM user_info WHERE username = 'john_doe';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select * from user_info where username = 'john_doe';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT user_id, email FROM user_info WHERE registration_date > '2022-01-01';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select user_id, email from user_info where registration_date > '2022-01-01';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT COUNT(*) FROM user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select count(*) from user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT AVG(user_id) FROM user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select avg(user_id) from user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT MAX(user_id) FROM user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select max(user_id) from user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT MIN(user_id) FROM user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select min(user_id) from user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT DISTINCT username FROM user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select distinct username from user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT * FROM user_info ORDER BY registration_date DESC;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select * from user_info order by registration_date desc;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT user_id, email FROM user_info WHERE username LIKE '%doe%';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select user_id, email from user_info where username like '%doe%';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT * FROM user_info WHERE user_id IN (1, 2, 3);</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select * from user_info where user_id in (1, 2, 3);</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT * FROM user_info WHERE registration_date BETWEEN '2022-01-01' AND '2022-03-31';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select * from user_info where registration_date between '2022-01-01' and '2022-03-31';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT COUNT(DISTINCT username) FROM user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select count(distinct username) from user_info;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT * FROM user_info WHERE email IS NOT NULL;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select * from user_info where email is not null;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT * FROM user_info WHERE email LIKE '%gmail.com';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select * from user_info where email like '%gmail.com';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT * FROM user_info WHERE username = 'jane_doe' OR username = 'john_doe';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select * from user_info where username = 'jane_doe' or username = 'john_doe';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT * FROM user_info LIMIT 10;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select * from user_info limit 10;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT * FROM user_info OFFSET 5;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select * from user_info offset 5;</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>SELECT * FROM user_info WHERE user_id > 10 AND username != 'admin';</stat><divider><t>CREATE TABLE user_info (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, registration_date DATE)</t><stat>select * from user_info where user_id > 10 and username != 'admin';</stat>