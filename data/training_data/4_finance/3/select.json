[
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_phone FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, customer_address FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_email FROM customer_information WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM customer_information WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_address FROM customer_information WHERE customer_phone IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name FROM customer_information WHERE customer_name = 'John Smith';",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_email FROM customer_information WHERE customer_address LIKE '%Street';",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customer_information WHERE customer_address IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, customer_phone FROM customer_information ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_email, customer_phone FROM customer_information ORDER BY customer_email DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customer_information LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT MAX(customer_id) FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT MIN(customer_id) FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT AVG(customer_id) FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT SUM(customer_id) FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, LENGTH(customer_address) AS address_length FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customer_information WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, customer_phone FROM customer_information WHERE customer_id > 5 AND customer_id < 10;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM customer_information WHERE customer_phone LIKE '%555%';",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email FROM customer_information WHERE customer_address LIKE '%California%';",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, customer_phone FROM customer_information WHERE customer_id IN (2, 4, 6, 8);",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, customer_email, customer_phone FROM customer_information WHERE customer_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customer_information WHERE LENGTH(customer_name) > 10;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customer_information WHERE LENGTH(customer_name) <= 20;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email, customer_address FROM customer_information WHERE customer_email LIKE '%gmail.com' ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, LENGTH(customer_address) AS address_length FROM customer_information WHERE customer_address IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT DISTINCT customer_phone FROM customer_information;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email FROM customer_information WHERE customer_phone IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_email FROM customer_information WHERE customer_email IS NOT NULL AND LENGTH(customer_email) > 15;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_address FROM customer_information WHERE customer_id BETWEEN 3 AND 7;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, customer_email, customer_phone FROM customer_information WHERE customer_name LIKE '%son' AND customer_name NOT LIKE 'John%';",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email FROM customer_information WHERE customer_id < 5 OR customer_id > 15;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_name, UPPER(customer_address) AS uppercase_address FROM customer_information WHERE customer_address IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT DISTINCT customer_email, customer_phone FROM customer_information WHERE customer_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE customer_information (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    customer_email VARCHAR(100) UNIQUE,\n    customer_phone VARCHAR(15),\n    customer_address VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_phone FROM customer_information WHERE customer_address LIKE '%Street' AND customer_email LIKE '%example.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_phone FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date, amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date, amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transactions WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transactions WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(amount) FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(amount) FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_phone, COUNT(*) AS total_transactions FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_transactions FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(amount) AS highest_transaction FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, transaction_date, amount FROM customers FULL OUTER JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, transaction_date, amount FROM customers LEFT OUTER JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, transaction_date, amount FROM customers RIGHT OUTER JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(amount) FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transaction_type = 'purchase' GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(amount) FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transaction_type = 'refund' GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_type = 'purchase' ORDER BY t.transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(amount) AS total_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY customer_name HAVING total_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(transaction_id) AS total_transactions FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY customer_name HAVING total_transactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(amount) AS avg_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY customer_name HAVING avg_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(amount) AS min_amount, MAX(amount) AS max_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(transaction_id) AS total_transactions FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE YEAR(t.transaction_date) = 2022 GROUP BY customer_name HAVING total_transactions > 3;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE MONTH(t.transaction_date) = 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(amount) AS avg_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE YEAR(t.transaction_date) = 2022 GROUP BY customer_name HAVING avg_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_type = 'refund' ORDER BY t.transaction_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(amount) AS total_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE YEAR(t.transaction_date) = 2022 GROUP BY customer_name HAVING total_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(amount) AS max_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_type = 'purchase' GROUP BY customer_name HAVING max_amount > 2000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_type, AVG(amount) AS avg_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY customer_name, transaction_type;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount > 500 AND t.transaction_type = 'purchase' ORDER BY t.transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, SUM(t.amount) AS total_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_type = 'purchase' GROUP BY c.customer_name HAVING total_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255),\n  customer_phone VARCHAR(20)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date TIMESTAMP,\n  amount FLOAT,\n  transaction_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, COUNT(t.transaction_id) AS total_transactions FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_type = 'purchase' GROUP BY c.customer_name HAVING total_transactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM Customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT account_id, balance FROM Accounts WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Accounts WHERE account_type = 'Savings';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT transaction_id, amount, transaction_date FROM Transactions WHERE account_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT first_name, last_name, email, phone_number FROM Customers WHERE last_name = 'Smith';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT account_id, balance FROM Accounts WHERE balance > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE first_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_type FROM Transactions WHERE amount < 0;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT account_id, SUM(amount) AS total_amount FROM Transactions GROUP BY account_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM Customers ORDER BY last_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(account_id) AS num_accounts FROM Accounts GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT account_id, AVG(amount) AS avg_amount FROM Transactions GROUP BY account_id HAVING AVG(amount) > 500;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, account_type, MAX(balance) AS max_balance FROM Accounts GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT first_name, last_name, email, account_type, balance FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT account_id, SUM(amount) AS total_amount FROM Transactions WHERE transaction_date >= '2022-01-01' GROUP BY account_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, account_type, COUNT(transaction_id) AS num_transactions FROM Accounts LEFT JOIN Transactions ON Accounts.account_id = Transactions.account_id GROUP BY customer_id, account_type;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT customer_id) AS num_customers FROM Accounts;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT avg(balance) AS avg_balance FROM Accounts WHERE account_type = 'Checking';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Accounts;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT first_name, last_name FROM Customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT account_id, account_type FROM Accounts WHERE customer_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM Transactions WHERE account_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE email LIKE '%gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Accounts WHERE balance > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT * FROM Transactions WHERE amount < 0;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT first_name, last_name, account_type FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT first_name, last_name, transaction_type FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id JOIN Transactions ON Accounts.account_id = Transactions.account_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT c.first_name, a.account_type, t.amount FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT c.first_name, a.account_type, t.amount FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id WHERE t.amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT c.first_name, c.email, a.balance FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT c.first_name, a.account_type, SUM(t.amount) AS total_amount FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id GROUP BY c.first_name, a.account_type;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT c.first_name, COUNT(a.account_id) AS num_accounts FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.first_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT c.first_name, MAX(t.amount) AS max_transaction_amount FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id GROUP BY c.first_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT c.first_name, AVG(a.balance) AS avg_balance FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.first_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT c.first_name, a.account_type, MIN(t.transaction_date) AS earliest_transaction_date FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id GROUP BY c.first_name, a.account_type;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(15)\n)\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    customer_id INT,\n    account_type VARCHAR(50),\n    balance DECIMAL(10,2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    account_id INT,\n    transaction_type VARCHAR(50),\n    amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n)\n\n### STATEMENT\n\nSELECT c.first_name, a.account_type, MAX(t.transaction_date) AS latest_transaction_date FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id JOIN Transactions t ON a.account_id = t.account_id GROUP BY c.first_name, a.account_type;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, account_type FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM investments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT investment_id, investment_type FROM investments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM accounts WHERE balance > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount < 0;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM investments WHERE investment_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers ORDER BY last_name, first_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE first_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM accounts WHERE account_type = 'Savings';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date = '2022-01-15';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM investments WHERE investment_type IN ('Stocks', 'Bonds');",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(balance) FROM accounts GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(amount) FROM transactions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE first_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name FROM customers WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM accounts WHERE balance > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, account_type FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, email FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 5000 AND transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM investments WHERE investment_type = 'Stocks' ORDER BY investment_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, SUM(balance) AS total_balance FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_transactions FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE accounts (\n    account_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    account_type VARCHAR(50) NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    amount DECIMAL(15, 2) NOT NULL,\n    transaction_date DATE NOT NULL\n);\n\nCREATE TABLE investments (\n    investment_id SERIAL PRIMARY KEY,\n    account_id INT REFERENCES accounts(account_id),\n    investment_type VARCHAR(50) NOT NULL,\n    investment_amount DECIMAL(15, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name,...",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, address FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_id, customer_name, phone_number FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT account_id, account_type, balance FROM accounts WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT account_id, account_type, balance FROM accounts WHERE balance > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT transaction_id, transaction_type, amount FROM transactions WHERE account_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT transaction_id, transaction_type, amount, transaction_date FROM transactions WHERE transaction_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM investments;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_id, investment_amount FROM investments;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT investment_id, investment_type FROM investments WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT employee_name, position FROM employees;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT employee_id, department FROM employees WHERE position = 'Manager';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM customers JOIN transactions ON customers.customer_id = transactions.account_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM accounts JOIN investments ON accounts.customer_id = investments.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM employees JOIN customers ON employees.employee_id = customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts);",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_id, customer_name, address, phone_number FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT * FROM accounts WHERE balance > 10000;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customers.customer_name, accounts.account_type, accounts.balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, account_type, balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id WHERE balance < 5000;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, transaction_type, amount, transaction_date FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id WHERE transaction_type='deposit';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, SUM(amount) AS total_transactions FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, investment_type, investment_amount FROM customers JOIN investments ON customers.customer_id = investments.customer_id WHERE investment_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, employee_name, position, department FROM customers JOIN employees ON customers.customer_id = employees.employee_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, COUNT(account_id) AS total_accounts FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT employee_name, department, COUNT(customer_id) AS total_customers FROM employees JOIN customers ON employees.employee_id = customers.customer_id GROUP BY employees.employee_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, MAX(balance) AS max_balance FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT account_type, AVG(balance) AS avg_balance FROM accounts GROUP BY account_type;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, SUM(investment_amount) AS total_investments FROM customers JOIN investments ON customers.customer_id = investments.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, address FROM customers WHERE LENGTH(address) > 20;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, account_type, investment_type, AVG(balance) AS avg_balance, SUM(investment_amount) AS total_investments FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN investments ON customers.customer_id = investments.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, employee_name, position, department, COUNT(transaction_id) AS total_transactions FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id JOIN employees ON customers.customer_id = employees.employee_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, address, phone_number FROM customers WHERE phone_number LIKE '%555%';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT employee_name, department, COUNT(DISTINCT customer_id) AS unique_customers FROM employees JOIN customers ON employees.employee_id = customers.customer_id GROUP BY employees.employee_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, account_type, transaction_type, amount, transaction_date FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN transactions ON accounts.account_id = transactions.account_id WHERE amount > 1000 AND transaction_type = 'withdrawal';",
  "### TABLEDATA\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), address VARCHAR(100), phone_number VARCHAR(15));\n\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_type VARCHAR(50), amount DECIMAL(10,2), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id));\n\nCREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT, investment_type VARCHAR(50), investment_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), position VARCHAR(50), department VARCHAR(50));\n\n### STATEMENT\n\nSELECT customer_name, employee_name, position, department FROM customers JOIN employees ON customers.customer_id = employees.employee_id WHERE department = 'Finance';"
]