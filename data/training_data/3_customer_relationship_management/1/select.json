[
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_id, customer_id, interaction_type FROM CustomerInteractions;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_date, interaction_notes FROM CustomerInteractions;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE customer_id = '123e4567-e89b-12d3-a456-426655440000';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE interaction_type = 'purchase';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_id, interaction_date FROM CustomerInteractions WHERE customer_id = '123e4567-e89b-12d3-a456-426655440001';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT customer_id, interaction_notes FROM CustomerInteractions WHERE interaction_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE customer_id = '123e4567-e89b-12d3-a456-426655440002' AND interaction_type = 'query';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT interaction_type FROM CustomerInteractions;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM CustomerInteractions;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions ORDER BY interaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS interaction_count FROM CustomerInteractions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_type, COUNT(*) AS interaction_count FROM CustomerInteractions GROUP BY interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(EXTRACT(EPOCH FROM interaction_date)) AS average_interaction_time FROM CustomerInteractions;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE interaction_notes LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE interaction_type IN ('purchase', 'query');",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE interaction_type='purchase' OR interaction_type='complaint' ORDER BY interaction_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE EXTRACT(MONTH FROM interaction_date) = 12;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT customer_id, MAX(interaction_date) AS last_interaction_date FROM CustomerInteractions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, COUNT(*) AS interaction_count FROM CustomerInteractions WHERE interaction_type!='complaint' GROUP BY customer_id, interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000'",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_id, interaction_type FROM CustomerInteractions WHERE interaction_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE interaction_type = 'Purchase' ORDER BY interaction_date DESC",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM CustomerInteractions WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000'",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(interaction_notes) FROM CustomerInteractions GROUP BY interaction_type",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_id, interaction_notes FROM CustomerInteractions WHERE interaction_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(interaction_date), MIN(interaction_date) FROM CustomerInteractions",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE interaction_notes LIKE '%important%'",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_id, interaction_type FROM CustomerInteractions WHERE interaction_notes NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE interaction_type IN ('Purchase', 'Support')",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(interaction_date) FROM CustomerInteractions GROUP BY customer_id HAVING COUNT(*) > 1",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT interaction_type FROM CustomerInteractions",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE interaction_date >= '2022-01-01' AND interaction_date < '2022-02-01'",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_id, interaction_notes FROM CustomerInteractions WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000' AND interaction_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT MIN(interaction_date) FROM CustomerInteractions WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000'",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_id, interaction_date FROM CustomerInteractions WHERE interaction_notes LIKE '%great%'",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_id, interaction_type FROM CustomerInteractions WHERE interaction_date <= '2022-01-31' AND interaction_notes IS NULL",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_id, interaction_type FROM CustomerInteractions WHERE interaction_date BETWEEN '2022-01-01' AND '2022-12-31' AND interaction_notes LIKE '%positive%'",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE interaction_date >= '2022-01-01' ORDER BY interaction_date LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  interaction_notes TEXT\n)\n\n### STATEMENT\n\nSELECT interaction_id, interaction_type FROM CustomerInteractions WHERE interaction_date BETWEEN '2022-01-01' AND '2022-12-31' ORDER BY interaction_date",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Interactions;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_id, customer_id, interaction_date FROM Customer_Interactions;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_description FROM Customer_Interactions;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Interactions WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Interactions WHERE interaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_id, customer_id FROM Customer_Interactions WHERE interaction_type = 'Meeting';",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Communications;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT communication_id, customer_id, communication_date FROM Customer_Communications;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, communication_type, communication_content FROM Customer_Communications;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Communications WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Communications WHERE communication_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT communication_id, customer_id FROM Customer_Communications WHERE communication_type = 'Email';",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Interactions INNER JOIN Customer_Communications ON Customer_Interactions.customer_id = Customer_Communications.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT ci.customer_id, cc.communication_content FROM Customer_Interactions ci INNER JOIN Customer_Communications cc ON ci.customer_id = cc.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT ci.customer_id, COUNT(cc.communication_id) AS total_communications FROM Customer_Interactions ci INNER JOIN Customer_Communications cc ON ci.customer_id = cc.customer_id GROUP BY ci.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT ci.customer_id, MAX(cc.communication_date) AS last_communication_date FROM Customer_Interactions ci INNER JOIN Customer_Communications cc ON ci.customer_id = cc.customer_id GROUP BY ci.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(DATE_PART('day', NOW()::DATE - interaction_date::DATE)) AS avg_days_between_interactions FROM Customer_Interactions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT CAST(AVG(DATE_PART('day', NOW()::DATE - interaction_date::DATE)) AS INTEGER) AS avg_days_between_interactions FROM Customer_Interactions;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_interactions FROM Customer_Interactions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT communication_type, COUNT(*) AS total_communications FROM Customer_Communications GROUP BY communication_type;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Interactions WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_id, interaction_date FROM Customer_Interactions WHERE interaction_type = 'Phone Call';",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Interactions WHERE interaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_id, customer_id FROM Customer_Interactions WHERE interaction_description LIKE '%complaint%';",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Communications WHERE communication_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT communication_content FROM Customer_Communications WHERE communication_type = 'Email';",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Communications WHERE customer_id = 5 AND communication_date > '2021-06-30';",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT communication_id, customer_id FROM Customer_Communications WHERE communication_content LIKE '%urgent%';",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Interactions INNER JOIN Customer_Communications ON Customer_Interactions.customer_id = Customer_Communications.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Interactions LEFT JOIN Customer_Communications ON Customer_Interactions.customer_id = Customer_Communications.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Communications RIGHT JOIN Customer_Interactions ON Customer_Communications.customer_id = Customer_Interactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_type, COUNT(*) AS interactions_count FROM Customer_Interactions GROUP BY interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT communication_type, AVG(LENGTH(communication_content)) AS avg_content_length FROM Customer_Communications GROUP BY communication_type;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS interactions_count FROM Customer_Interactions WHERE customer_id IN (SELECT customer_id FROM Customer_Communications);",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_id FROM Customer_Interactions WHERE interaction_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Communications WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Interactions);",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Interactions WHERE customer_id = (SELECT customer_id FROM Customer_Communications WHERE communication_type = 'SMS' LIMIT 1);",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM Customer_Interactions ORDER BY interaction_date DESC, interaction_type ASC;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT communication_id, communication_date, communication_type FROM Customer_Communications ORDER BY communication_date DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE Customer_Interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    interaction_date DATE,\n    interaction_type VARCHAR(100),\n    interaction_description TEXT\n);\n\nCREATE TABLE Customer_Communications (\n    communication_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    communication_date DATE,\n    communication_type VARCHAR(100),\n    communication_content TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(interaction_date) AS latest_interaction_date FROM Customer_Interactions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_date, interaction_type FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM communications;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT communication_date, communication_type FROM communications;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_date, interaction_type FROM interactions WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT communication_date, communication_type FROM communications WHERE interaction_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM interactions WHERE interaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_date, interaction_type FROM interactions ORDER BY interaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT communication_date, communication_type FROM communications ORDER BY communication_type ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM interactions LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM communications LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_date, interaction_type FROM interactions OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT communication_date, communication_type FROM communications OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE phone_number LIKE '%123%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT A.customer_name, B.interaction_date FROM customers A JOIN interactions B ON A.customer_id = B.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT A.customer_name, C.communication_date FROM customers A JOIN interactions B ON A.customer_id = B.customer_id JOIN communications C ON B.interaction_id = C.interaction_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM interactions WHERE interaction_type = 'Meeting');",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS interaction_count FROM customers A JOIN interactions B ON A.customer_id = B.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(interaction_date) AS last_interaction FROM customers A JOIN interactions B ON A.customer_id = B.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, interaction_type, COUNT(*) AS count FROM customers A JOIN interactions B ON A.customer_id = B.customer_id GROUP BY customer_name, interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM customers A JOIN interactions B ON A.customer_id = B.customer_id WHERE interaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, interaction_type, interaction_date FROM customers A JOIN interactions B ON A.customer_id = B.customer_id WHERE interaction_type IN ('Call', 'Email') ORDER BY interaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, interaction_type, COUNT(*) AS count FROM customers A JOIN interactions B ON A.customer_id = B.customer_id WHERE interaction_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_name, interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(interaction_date) - MIN(interaction_date) AS interaction_duration FROM customers A JOIN interactions B ON A.customer_id = B.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT A.customer_name, B.interaction_date FROM customers A JOIN interactions B ON A.customer_id = B.customer_id WHERE MONTH(B.interaction_date) = 4;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS communication_count FROM customers A JOIN interactions B ON A.customer_id = B.customer_id JOIN communications C ON B.interaction_id = C.interaction_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, communication_type, AVG(DATEDIFF(C.communication_date, B.interaction_date)) AS communication_response_time FROM customers A JOIN interactions B ON A.customer_id = B.customer_id JOIN communications C ON B.interaction_id = C.interaction_id GROUP BY customer_name, communication_type;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, interaction_type, COUNT(*) AS count FROM customers A JOIN interactions B ON A.customer_id = B.customer_id WHERE interaction_details LIKE '%positive%' GROUP BY customer_name, interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, communication_type, MIN(DATEDIFF(C.communication_date, B.interaction_date)) AS min_response_time FROM customers A JOIN interactions B ON A.customer_id = B.customer_id JOIN communications C ON B.interaction_id = C.interaction_id GROUP BY customer_name, communication_type;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, interaction_type, AVG(DATEDIFF(B.interaction_date, (SELECT MAX(interaction_date) FROM interactions WHERE customer_id = A.customer_id))) AS days_since_last_interaction FROM customers A JOIN interactions B ON A.customer_id = B.customer_id GROUP BY customer_name, interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(DATEDIFF(COALESCE((SELECT MIN(communication_date) FROM communications WHERE communication_type = 'Email' AND interaction_id = B.interaction_id), B.interaction_date), B.interaction_date)) AS avg_email_response_time FROM customers A JOIN interactions B ON A.customer_id = B.customer_id JOIN communications C ON B.interaction_id = C.interaction_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    customer_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(20),\n    interaction_details TEXT\n);\n\nCREATE TABLE communications (\n    communication_id INT PRIMARY KEY,\n    interaction_id INT,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(20),\n    communication_details TEXT\n);\n\n### STATEMENT\n\nSELECT A.customer_name, B.interaction_type, COUNT(*) AS count FROM customers A JOIN interactions B ON A.customer_id = B.customer_id GROUP BY A.customer_name, B.interaction_type HAVING count > 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM Customers",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT customer_id, address FROM Customers",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM Interactions",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT interaction_type, interaction_date FROM Interactions",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM Communications",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT communication_type, communication_date FROM Communications",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM Queries",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT query_date, user_id FROM Queries",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM Users",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT user_name, user_role FROM Users",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT customer_name, phone_number, email, address FROM Customers",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT interaction_type, notes FROM Interactions",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT communication_type, content FROM Communications",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT query_text, query_result FROM Queries",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT user_name, user_role FROM Users",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT customer_name, address FROM Customers",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT customer_name, email, address FROM Customers",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT interaction_type, notes FROM Interactions",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT communication_type, content FROM Communications",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT customer_name, phone_number FROM Customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, i.interaction_type, i.interaction_date FROM Customers c INNER JOIN Interactions i ON c.customer_id = i.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, com.communication_type, com.communication_date FROM Customers c INNER JOIN Communications com ON c.customer_id = com.customer_id WHERE com.customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT u.user_name, u.user_role, q.query_text FROM Users u INNER JOIN Queries q ON u.user_id = q.user_id WHERE q.user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, i.interaction_type, i.notes FROM Customers c LEFT JOIN Interactions i ON c.customer_id = i.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, com.communication_type, com.content FROM Customers c LEFT JOIN Communications com ON c.customer_id = com.customer_id WHERE com.customer_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, com.communication_type, com.content FROM Customers c RIGHT JOIN Communications com ON c.customer_id = com.customer_id WHERE c.customer_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, i.interaction_type, i.interaction_date FROM Customers c LEFT JOIN Interactions i ON c.customer_id = i.customer_id WHERE i.interaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, i.interaction_type, i.notes FROM Customers c LEFT JOIN Interactions i ON c.customer_id = i.customer_id GROUP BY c.customer_name HAVING COUNT(i.interaction_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, com.communication_type, com.content FROM Customers c LEFT JOIN Communications com ON c.customer_id = com.customer_id ORDER BY com.communication_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, i.interaction_type, i.interaction_date FROM Customers c INNER JOIN Interactions i ON c.customer_id = i.customer_id ORDER BY i.interaction_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, com.communication_type, com.content FROM Customers c INNER JOIN Communications com ON c.customer_id = com.customer_id LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, i.interaction_type, i.interaction_date FROM Customers c INNER JOIN Interactions i ON c.customer_id = i.customer_id OFFSET 2;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, com.communication_type, com.content FROM Customers c INNER JOIN Communications com ON c.customer_id = com.customer_id WHERE c.customer_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, i.interaction_type, i.notes FROM Customers c INNER JOIN Interactions i ON c.customer_id = i.customer_id WHERE i.interaction_type = 'Call';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, com.communication_type, com.content FROM Customers c INNER JOIN Communications com ON c.customer_id = com.customer_id WHERE com.communication_type IN ('Email', 'SMS');",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, i.interaction_type, i.interaction_date FROM Customers c INNER JOIN Interactions i ON c.customer_id = i.customer_id WHERE c.customer_name LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT c.customer_name, i.interaction_type, i.notes FROM Customers c INNER JOIN Interactions i ON c.customer_id = i.customer_id WHERE i.notes LIKE '%urgent%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  phone_number VARCHAR(15),\n  email VARCHAR(255),\n  address TEXT\n)\n\nCREATE TABLE Interactions (\n  interaction_id INT PRIMARY KEY,\n  customer_id INT,\n  interaction_type VARCHAR(50),\n  interaction_date TIMESTAMP,\n  notes TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Communications (\n  communication_id INT PRIMARY KEY,\n  customer_id INT,\n  communication_type VARCHAR(50),\n  communication_date TIMESTAMP,\n  content TEXT,\n  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n)\n\nCREATE TABLE Queries (\n  query_id INT PRIMARY KEY,\n  query_text TEXT,\n  query_result TEXT,\n  query_date TIMESTAMP,\n  user_id INT\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50),\n  user_role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT u.user_name, u.user_id, COUNT(q.query_id) AS total_queries FROM Users u LEFT JOIN Queries q ON u.user_id = q.user_id GROUP BY u.user_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE phone_number IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT interaction_id, interaction_type FROM interactions WHERE interaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM communications WHERE communication_type = 'Email';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT communication_date, communication_details FROM communications WHERE communication_date < '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_price > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, product_id FROM orders WHERE order_quantity >= 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM interactions JOIN customers ON interactions.customer_id = customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM products JOIN orders ON products.product_id = orders.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM interactions JOIN communications ON interactions.interaction_id = communications.interaction_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM communications JOIN orders ON communications.communication_id = orders.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, SUM(product_price * order_quantity) AS total_order_value FROM customers JOIN orders USING (customer_id) JOIN products USING (product_id) GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_interactions FROM customers JOIN interactions USING (customer_id) GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT product_category, AVG(product_price) AS avg_price FROM products GROUP BY product_category;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email, communication_details FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN communications ON orders.order_id = communications.communication_id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, phone_number FROM customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(order_quantity) AS total_quantity_ordered FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.product_id = products.product_id WHERE order_quantity > 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(DISTINCT product_id) AS distinct_products_ordered FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING COUNT(DISTINCT product_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(order_date) AS last_order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(order_quantity) AS avg_order_quantity FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, interaction_date, interaction_type, interaction_notes FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, communication_date, communication_type, communication_details FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id JOIN communications ON interactions.interaction_id = communications.interaction_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, interaction_date, communication_type, communication_details FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id JOIN communications ON interactions.interaction_id = communications.interaction_id WHERE communication_type = 'Email';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, interaction_date, interaction_type, interaction_notes FROM customers LEFT JOIN interactions ON customers.customer_id = interactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, interaction_date, communication_date, communication_type FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id LEFT JOIN communications ON interactions.interaction_id = communications.interaction_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(product_price * order_quantity) AS total_order_value FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.product_id = products.product_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, product_category, AVG(product_price) AS avg_price_per_category FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.product_id = products.product_id GROUP BY customer_name, product_category;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, interaction_date, COUNT(communication_id) AS total_communications FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id JOIN communications ON interactions.interaction_id = communications.interaction_id GROUP BY customer_name, interaction_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(product_price) AS most_expensive_product FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.product_id = products.product_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(15)\n);\n\n\nCREATE TABLE interactions (\n    interaction_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\n\nCREATE TABLE communications (\n    communication_id SERIAL PRIMARY KEY,\n    interaction_id INT NOT NULL,\n    communication_date TIMESTAMP,\n    communication_type VARCHAR(50),\n    communication_details TEXT\n);\n\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(50) NOT NULL,\n    product_category VARCHAR(50),\n    product_price DECIMAL(10, 2)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    order_date DATE,\n    order_quantity INT\n);\n\n### STATEMENT\n\nSELECT customer_name, interaction_date, AVG(order_quantity) AS avg_order_quantity FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name, interaction_date;"
]