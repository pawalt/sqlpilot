[
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT order_id, stock_symbol, quantity, price FROM trade_orders WHERE client_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE stock_symbol = 'AAPL';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT order_id, client_id, order_date FROM trade_orders WHERE order_type = 'buy';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT stock_symbol, price FROM trade_orders WHERE quantity > 1000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_type = 'sell' AND price < 50.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT order_id, quantity, price FROM trade_orders WHERE order_date = '2022-08-15';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE client_id = 200 AND stock_symbol = 'GOOGL';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT order_id, stock_symbol, order_type FROM trade_orders WHERE quantity <= 500;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_type = 'buy' OR order_type = 'sell';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, stock_symbol, order_date FROM trade_orders WHERE price > 100.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_date BETWEEN '2022-09-01' AND '2022-09-30';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT order_id, price FROM trade_orders WHERE order_type = 'buy' AND quantity >= 1000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE client_id = 300 AND quantity > 500;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT stock_symbol, quantity, price FROM trade_orders WHERE order_date < '2022-10-15';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT order_id, order_date FROM trade_orders WHERE price = 75.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_type = 'sell' OR price < 20.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT stock_symbol, quantity, order_date FROM trade_orders WHERE order_type = 'sell' AND price <= 40.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE client_id = 400 AND order_type = 'buy';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT order_id, client_id, stock_symbol, order_date FROM trade_orders WHERE quantity < 100;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE client_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT stock_symbol, quantity, price FROM trade_orders WHERE order_type = 'buy';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, SUM(quantity * price) AS total_value FROM trade_orders GROUP BY client_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_date >= '2022-01-01' AND order_date <= '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, stock_symbol, SUM(quantity) AS total_quantity FROM trade_orders GROUP BY client_id, stock_symbol;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT order_id, client_id, stock_symbol, quantity, price FROM trade_orders WHERE price > 100.00 ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, order_type, COUNT(*) AS order_count FROM trade_orders GROUP BY client_id, order_type;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT MAX(price) AS max_price, MIN(price) AS min_price, AVG(price) AS avg_price FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, stock_symbol, SUM(CASE WHEN order_type = 'buy' THEN quantity ELSE 0 END) AS total_buy_quantity, SUM(CASE WHEN order_type = 'sell' THEN quantity ELSE 0 END) AS total_sell_quantity FROM trade_orders GROUP BY client_id, stock_symbol;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, order_date, SUM(price * quantity) AS total_transaction_value FROM trade_orders GROUP BY client_id, order_date;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, COUNT(DISTINCT stock_symbol) AS unique_stock_count FROM trade_orders GROUP BY client_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_type = 'sell' AND price >= 500.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, AVG(quantity) AS avg_quantity, AVG(price) AS avg_price FROM trade_orders GROUP BY client_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, stock_symbol, MAX(price) AS max_price, MIN(price) AS min_price FROM trade_orders WHERE order_type = 'buy' GROUP BY client_id, stock_symbol;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, SUM(quantity * price) AS total_value FROM trade_orders WHERE stock_symbol LIKE 'AAPL%' GROUP BY client_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT DISTINCT client_id FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT stock_symbol, SUM(quantity) AS total_quantity FROM trade_orders GROUP BY stock_symbol HAVING total_quantity > 10000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE client_id IN (SELECT client_id FROM trade_orders WHERE order_type = 'buy');",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, AVG(price) AS avg_price, MAX(price) AS max_price, MIN(price) AS min_price FROM trade_orders GROUP BY client_id HAVING AVG(price) > 200.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n    order_id INT PRIMARY KEY,\n    client_id INT,\n    stock_symbol VARCHAR(50),\n    quantity INT,\n    price DECIMAL(10,2),\n    order_type ENUM('buy', 'sell'),\n    order_date DATE\n)\n\n### STATEMENT\n\nSELECT client_id, COUNT(*) AS order_count FROM trade_orders WHERE order_date = '2022-02-15' GROUP BY client_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, order_type FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date, quantity FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT transaction_id, order_id FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, order_type FROM trade_orders WHERE quantity > 100;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date FROM trade_orders WHERE price < 50.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 500.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_type = 'BUY';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date, quantity FROM trade_orders WHERE price < 100.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_type = 'SELL';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, order_type FROM trade_orders ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, quantity, price FROM trade_orders ORDER BY order_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, transaction_date FROM transactions ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE quantity > 50 AND price < 100.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount < 1000.00 AND transaction_type = 'BUY';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_type = 'SELL' OR order_type = 'BUY';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date, quantity FROM trade_orders WHERE order_type = 'BUY' AND price < 100.00;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2023-01-01' AND '2023-01-31';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, order_type, quantity FROM trade_orders WHERE order_date >= '2022-01-01' AND price > 100;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders INNER JOIN transactions ON trade_orders.order_id = transactions.order_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT SUM(price) AS total_price FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT AVG(quantity) AS avg_quantity FROM trade_orders WHERE order_type IN ('BUY', 'SELL');",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, COUNT(transaction_id) AS num_transactions FROM transactions GROUP BY order_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_date BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, MAX(amount) AS max_amount FROM transactions GROUP BY order_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE price BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS avg_price FROM trade_orders WHERE order_type = 'BUY';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, order_type, SUM(quantity) AS total_quantity FROM trade_orders GROUP BY order_id, order_type;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_type LIKE '%SELL%';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, SUM(quantity * price) AS total_value FROM trade_orders GROUP BY order_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE price > (SELECT AVG(price) FROM trade_orders);",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT transaction_type, SUM(amount) AS total_amount FROM transactions GROUP BY transaction_type;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_id IN (SELECT order_id FROM transactions WHERE amount > 1000);",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS num_orders FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT AVG(quantity) AS avg_quantity, AVG(price) AS avg_price FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n\torder_id INT PRIMARY KEY,\n\torder_type VARCHAR(255),\n\torder_date TIMESTAMP,\n\tquantity INT,\n\tprice DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n\ttransaction_id INT PRIMARY KEY,\n\torder_id INT,\n\ttransaction_date TIMESTAMP,\n\tamount DECIMAL(10, 2),\n\ttransaction_type VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT order_id, order_type, quantity, price, transaction_date, amount, transaction_type FROM trade_orders INNER JOIN transactions ON trade_orders.order_id = transactions.order_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT product_name, order_quantity, unit_price FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT order_id, order_date, total_price FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transaction_date, amount, transaction_type FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transaction_id, status FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transaction_id, amount, comment FROM accounting;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transaction_type, comment FROM accounting;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT account_id, amount FROM accounting;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE unit_price > 50;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT order_id, total_price FROM trade_orders WHERE order_quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transaction_date, amount, transaction_type FROM transactions WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM accounting WHERE transaction_type = 'credit';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT account_id, amount FROM accounting WHERE amount < 0;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT product_name, order_quantity, unit_price FROM trade_orders WHERE order_quantity > 5 AND unit_price < 100;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transaction_date, amount, transaction_type FROM transactions WHERE transaction_type = 'sale';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT transaction_id, status FROM transactions WHERE transaction_date > '2022-02-15';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM accounting WHERE transaction_id IN (SELECT transaction_id FROM transactions WHERE amount > 500);",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_quantity > 100 AND total_price < 5000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT order_id, order_date, product_name FROM trade_orders WHERE unit_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT order_id, product_name, order_quantity, total_price FROM trade_orders WHERE order_quantity BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM accounting WHERE transaction_type = 'credit' AND amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT account_id, amount, comment FROM accounting WHERE amount < 0;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders JOIN transactions ON trade_orders.order_id = transactions.order_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT t.transaction_id, t.transaction_date, a.account_id, a.amount FROM transactions t JOIN accounting a ON t.transaction_id = a.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE product_name LIKE '%shoes%';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE status = 'completed' AND (amount > 1000 OR transaction_type = 'refund');",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM accounting WHERE amount < 0 AND transaction_type = 'debit' AND comment LIKE '%late fee%';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, t.transaction_type, a.account_id, a.comment FROM transactions t JOIN accounting a ON t.transaction_id = a.transaction_id WHERE a.amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_date < '2021-06-01' OR total_price > 10000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date > '2021-09-01' AND (transaction_type = 'purchase' OR status = 'pending');",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM accounting WHERE account_id IN (SELECT account_id FROM transactions WHERE transaction_date = '2021-11-15');",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, t.transaction_type, a.account_id, a.comment FROM transactions t JOIN accounting a ON t.transaction_id = a.transaction_id WHERE t.amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_quantity IN (SELECT order_quantity FROM trade_orders GROUP BY order_quantity HAVING COUNT(*) > 1);",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_type = 'purchase' AND (amount > 500 AND amount < 1000) AND status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM accounting WHERE transaction_type = 'credit' AND comment IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT t.transaction_id, t.transaction_date, a.account_id, a.amount FROM transactions t JOIN accounting a ON t.transaction_id = a.transaction_id WHERE t.transaction_type = 'refund';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_date DATE,\n  product_name VARCHAR(255),\n  order_quantity INT,\n  unit_price DECIMAL(10, 2),\n  total_price DECIMAL(10, 2)\n)},{\"table_schema\":\"CREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_date DATE,\n  order_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  status VARCHAR(20)\n)\"},{\"table_schema\":\"CREATE TABLE accounting (\n  transaction_id INT,\n  account_id INT,\n  amount DECIMAL(10, 2),\n  transaction_type VARCHAR(20),\n  comment TEXT,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)\n)\n\n### STATEMENT\n\nSELECT * FROM trade_orders JOIN transactions ON trade_orders.order_id = transactions.order_id JOIN accounting ON transactions.transaction_id = accounting.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, order_type FROM trade_orders WHERE order_status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM executed_transactions;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, execution_timestamp, executed_by FROM executed_transactions WHERE transaction_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM account_balances;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT account_id, balance FROM account_balances WHERE account_owner = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_logs;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, log_description FROM transaction_logs WHERE log_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, order_timestamp, order_type FROM trade_orders WHERE order_status = 'Completed';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT account_id, balance FROM account_balances WHERE balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM executed_transactions WHERE executed_by LIKE '%Alice%';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_logs WHERE log_description LIKE '%error%';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, order_type FROM trade_orders WHERE order_type = 'Buy';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM account_balances WHERE balance BETWEEN 1000 AND 5000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT account_id, account_owner FROM account_balances WHERE balance >= 5000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, execution_timestamp, executed_by FROM executed_transactions WHERE transaction_id = 200;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_logs WHERE log_timestamp >= '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, order_type, order_status FROM trade_orders WHERE order_status = 'Cancelled';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, order_type, order_status FROM trade_orders WHERE order_type = 'BUY';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT account_owner, balance FROM account_balances WHERE balance > 1000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM executed_transactions WHERE execution_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders JOIN executed_transactions ON trade_orders.order_id = executed_transactions.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT account_owner, balance FROM account_balances INNER JOIN executed_transactions ON account_balances.account_id = executed_transactions.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders JOIN executed_transactions ON trade_orders.order_id = executed_transactions.transaction_id WHERE order_timestamp < execution_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, order_status, balance FROM trade_orders JOIN account_balances ON trade_orders.order_id = account_balances.account_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT account_owner, transaction_amount FROM executed_transactions INNER JOIN account_balances ON executed_transactions.transaction_id = account_balances.account_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_timestamp > (SELECT MIN(execution_timestamp) FROM executed_transactions);",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(balance) FROM account_balances;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(transaction_amount) FROM executed_transactions;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM transaction_logs WHERE log_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT account_owner, SUM(transaction_amount) FROM account_balances INNER JOIN executed_transactions ON account_balances.account_id = executed_transactions.transaction_id GROUP BY account_owner;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_orders, AVG(balance) AS avg_balance FROM trade_orders JOIN account_balances ON trade_orders.order_id = account_balances.account_id;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT(order_type) FROM trade_orders;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT account_owner, SUM(transaction_amount) FROM account_balances INNER JOIN executed_transactions ON account_balances.account_id = executed_transactions.transaction_id GROUP BY account_owner HAVING SUM(transaction_amount) > 5000;",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM trade_orders WHERE order_id IN (SELECT transaction_id FROM executed_transactions WHERE transaction_amount > 1000);",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT order_id, order_timestamp, order_status FROM trade_orders WHERE order_type = 'SELL' AND order_status = 'PENDING';",
  "### TABLEDATA\n\nCREATE TABLE trade_orders (\n  order_id INT PRIMARY KEY,\n  order_timestamp TIMESTAMP,\n  order_type VARCHAR(50),\n  order_status VARCHAR(50)\n);\n\nCREATE TABLE executed_transactions (\n  transaction_id INT PRIMARY KEY,\n  execution_timestamp TIMESTAMP,\n  executed_by VARCHAR(100),\n  transaction_amount DECIMAL\n);\n\nCREATE TABLE account_balances (\n  account_id INT PRIMARY KEY,\n  account_owner VARCHAR(100),\n  balance DECIMAL\n);\n\nCREATE TABLE transaction_logs (\n  log_id INT PRIMARY KEY,\n  transaction_id INT,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT account_owner, balance FROM account_balances WHERE account_id NOT IN (SELECT transaction_id FROM executed_transactions WHERE execution_timestamp < '2022-01-01');",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM TradeOrders;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT order_id, order_type, order_date FROM TradeOrders WHERE order_quantity > 100;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT order_id, order_date FROM TradeOrders WHERE order_type = 'BUY';",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_type, transaction_amount FROM Transactions WHERE transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM Transactions WHERE transaction_type IN ('DEPOSIT', 'WITHDRAW');",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Accounts;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, account_name FROM Accounts WHERE account_balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM AccountTransactions;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, account_id, transaction_type FROM AccountTransactions WHERE transaction_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM AuditLog;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT log_id, log_timestamp FROM AuditLog WHERE log_timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM TradeOrders JOIN Transactions ON TradeOrders.order_id = Transactions.order_id;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions JOIN Accounts ON Transactions.transaction_amount = Accounts.account_balance;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Accounts LEFT JOIN AccountTransactions ON Accounts.account_id = AccountTransactions.account_id;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM AccountTransactions RIGHT JOIN Transactions ON AccountTransactions.transaction_id = Transactions.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM TradeOrders UNION SELECT * FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM TradeOrders EXCEPT SELECT * FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, SUM(transaction_amount) AS total_amount FROM AccountTransactions GROUP BY account_id;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(transaction_amount) AS avg_amount FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(account_balance) AS max_balance FROM Accounts;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM TradeOrders WHERE order_quantity > 100;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT order_id, order_type, order_date FROM TradeOrders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT account_name FROM Accounts WHERE account_balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions WHERE transaction_amount < 0;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, SUM(transaction_amount) AS total_amount FROM AccountTransactions GROUP BY account_id;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM TradeOrders WHERE order_type LIKE 'BUY%';",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(transaction_amount) AS max_amount FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_name, account_balance FROM Accounts ORDER BY account_balance DESC;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM AccountTransactions WHERE transaction_date >= '2022-06-01' AND transaction_date < '2022-07-01';",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(transaction_amount) AS avg_amount FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT order_id, COUNT(*) AS num_transactions FROM Transactions GROUP BY order_id HAVING num_transactions > 2;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, SUM(transaction_amount) AS total_amount FROM AccountTransactions WHERE transaction_type = 'DEPOSIT' GROUP BY account_id;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, COUNT(*) AS num_transactions FROM AccountTransactions GROUP BY account_id HAVING num_transactions < 5;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM AuditLog WHERE log_timestamp >= '2022-01-01' AND log_timestamp < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_name, SUM(transaction_amount) AS total_amount FROM Accounts JOIN AccountTransactions ON Accounts.account_id = AccountTransactions.account_id GROUP BY account_name;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT order_id, MIN(transaction_amount) AS min_amount FROM Transactions GROUP BY order_id;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, AVG(transaction_amount) AS avg_amount FROM AccountTransactions GROUP BY account_id HAVING avg_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT order_id) AS num_orders FROM TradeOrders;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT account_id, SUM(transaction_amount) AS total_amount FROM AccountTransactions WHERE transaction_date >= '2022-01-01' AND transaction_date < '2023-01-01' GROUP BY account_id;",
  "### TABLEDATA\n\nCREATE TABLE TradeOrders (\n    order_id INT PRIMARY KEY,\n    order_type VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP NOT NULL,\n    order_quantity INT NOT NULL\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT REFERENCES TradeOrders(order_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_name VARCHAR(100) NOT NULL,\n    account_balance DECIMAL(12, 2) NOT NULL\n);\n\nCREATE TABLE AccountTransactions (\n    transaction_id INT REFERENCES Transactions(transaction_id),\n    account_id INT REFERENCES Accounts(account_id),\n    transaction_type VARCHAR(50) NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE AuditLog (\n    log_id INT PRIMARY KEY,\n    log_timestamp TIMESTAMP NOT NULL,\n    log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT transaction_type FROM Transactions WHERE transaction_amount > 1000;"
]