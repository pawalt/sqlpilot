[
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE symbol = 'AAPL';",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT date, close_price FROM stock_prices WHERE symbol = 'AAPL';",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT MAX(close_price) FROM stock_prices;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT MIN(close_price) FROM stock_prices;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT AVG(close_price) FROM stock_prices;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, COUNT(*) FROM stock_prices GROUP BY symbol;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, MAX(date) FROM stock_prices GROUP BY symbol;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, MIN(date) FROM stock_prices GROUP BY symbol;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, SUM(close_price) FROM stock_prices GROUP BY symbol;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, AVG(close_price) FROM stock_prices GROUP BY symbol;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT DISTINCT symbol FROM stock_prices;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE date = '2022-01-01';",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE close_price > 100;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE close_price BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT * FROM stock_prices ORDER BY date DESC;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT * FROM stock_prices ORDER BY close_price ASC;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT * FROM stock_prices LIMIT 10;",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE symbol LIKE 'AAPL%';",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE symbol IN ('AAPL', 'GOOGL');",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE symbol='AAPL' AND date>'2021-01-01' ORDER BY date DESC LIMIT 10",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, MAX(price) AS max_price FROM stock_prices GROUP BY symbol HAVING max_price>100",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, AVG(price) AS avg_price FROM stock_prices WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY symbol HAVING avg_price<50",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, date, price FROM stock_prices WHERE symbol IN ('AAPL', 'GOOGL', 'MSFT') AND price>100 ORDER BY date",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, COUNT(*) AS num_records FROM stock_prices GROUP BY symbol HAVING num_records>50",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, MIN(price) AS min_price, MAX(price) AS max_price FROM stock_prices WHERE date>='2021-06-01' AND date<='2021-06-30' GROUP BY symbol",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, COUNT(*) AS num_records FROM stock_prices WHERE price<50 GROUP BY symbol HAVING num_records>=10",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, AVG(price) AS avg_price FROM stock_prices WHERE date='2021-12-31' GROUP BY symbol HAVING avg_price<50",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, date, price FROM stock_prices WHERE symbol='AMZN' AND date BETWEEN '2021-01-01' AND '2021-12-31' ORDER BY date DESC",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT DISTINCT symbol FROM stock_prices",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT symbol) AS num_symbols FROM stock_prices",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, MAX(price) AS max_price FROM stock_prices WHERE date='2021-01-01' GROUP BY symbol HAVING max_price>500",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, MIN(price) AS min_price, MAX(price) AS max_price FROM stock_prices WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY symbol",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, AVG(price) AS avg_price FROM stock_prices WHERE date>='2021-01-01' AND date<='2021-12-31' GROUP BY symbol HAVING avg_price<50",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, date, price FROM stock_prices WHERE symbol='AAPL' AND date='2021-12-31'",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, COUNT(DISTINCT date) AS num_dates FROM stock_prices GROUP BY symbol HAVING num_dates>100",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT SUM(price) AS total_price FROM stock_prices WHERE date BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, AVG(price) AS avg_price FROM stock_prices WHERE date BETWEEN '2021-06-01' AND '2021-06-30' GROUP BY symbol HAVING avg_price>200",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, COUNT(*) AS num_records FROM stock_prices WHERE date='2021-12-31' GROUP BY symbol HAVING num_records>50",
  "### TABLEDATA\n\nstock_prices\n\n### STATEMENT\n\nSELECT symbol, date, price FROM stock_prices WHERE symbol='GOOGL' AND price>500 ORDER BY date",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM historical_stock_data WHERE symbol = 'AAPL';",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, date, close_price FROM historical_stock_data WHERE volume > 1000000;",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT id, symbol, open_price, close_price FROM historical_stock_data WHERE date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM historical_stock_data WHERE open_price < close_price;",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT strategy_name, description FROM trading_strategies WHERE start_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trading_strategies WHERE end_date < '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, date, open_price, volume FROM historical_stock_data WHERE symbol = 'MSFT' AND date BETWEEN '2022-01-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT id, symbol, date FROM historical_stock_data WHERE close_price > 100 AND volume > 500000;",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM historical_stock_data WHERE close_price < 50 ORDER BY date DESC;",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trading_strategies WHERE description ILIKE '%trend%';",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, date, volume FROM historical_stock_data WHERE close_price > 100 OR volume < 500000;",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, close_price FROM historical_stock_data WHERE date BETWEEN '2022-01-01' AND '2022-06-30' AND volume < 1000000;",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT strategy_name, start_date, end_date FROM trading_strategies WHERE strategy_name IN ('Moving Average', 'RSI');",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM historical_stock_data WHERE date = CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT id, symbol, date FROM historical_stock_data WHERE open_price > 100 AND close_price < 80;",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM historical_stock_data WHERE symbol = 'GOOGL' AND date < '2022-07-01';",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trading_strategies WHERE start_date < '2022-01-01' AND end_date > '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, open_price, close_price FROM historical_stock_data WHERE symbol IN ('AAPL', 'TSLA', 'AMZN');",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM trading_strategies WHERE description NOT ILIKE '%high frequency%';",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM historical_stock_data WHERE volume > 500000 ORDER BY volume DESC;",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM historical_stock_data WHERE symbol = 'AAPL' AND date >= '2021-01-01'",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, open_price, close_price FROM historical_stock_data WHERE symbol = 'GOOGL' AND date BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, MAX(close_price) AS max_close_price FROM historical_stock_data GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, AVG(volume) AS avg_volume FROM historical_stock_data WHERE date >= '2021-01-01' GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM historical_stock_data WHERE date = (SELECT MAX(date) FROM historical_stock_data)",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT s.strategy_name, s.description, h.symbol, h.open_price FROM trading_strategies s INNER JOIN historical_stock_data h ON s.start_date <= h.date AND s.end_date >= h.date",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, close_price, volume FROM historical_stock_data WHERE symbol IN ('AAPL', 'GOOGL', 'MSFT') AND close_price > 100",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM historical_stock_data WHERE date BETWEEN '2021-07-01' AND '2021-09-30' ORDER BY date DESC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, SUM(volume) AS total_volume FROM historical_stock_data WHERE symbol = 'IBM' AND date >= '2021-01-01' GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM historical_stock_data WHERE date = '2021-12-15' AND close_price > (SELECT AVG(close_price) FROM historical_stock_data)",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT strategy_name, COUNT(*) AS num_trades FROM trading_strategies s INNER JOIN historical_stock_data h ON s.start_date <= h.date AND s.end_date >= h.date GROUP BY strategy_name",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, date, close_price, LAG(close_price) OVER (PARTITION BY symbol ORDER BY date) AS prev_close_price FROM historical_stock_data WHERE symbol = 'TSLA'",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, AVG(close_price) AS avg_close_price FROM historical_stock_data WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY symbol HAVING AVG(close_price) > 500",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, MAX(open_price) AS max_open_price, MIN(open_price) AS min_open_price FROM historical_stock_data WHERE date >= '2021-01-01' GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT s.strategy_name, h.symbol, h.date, h.close_price FROM trading_strategies s LEFT JOIN historical_stock_data h ON s.start_date <= h.date AND s.end_date >= h.date WHERE h.close_price < 100",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, date, close_price, RANK() OVER (PARTITION BY symbol ORDER BY date) AS rank_by_date FROM historical_stock_data WHERE symbol = 'AAPL'",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT strategy_name, AVG(close_price) AS avg_close_price FROM trading_strategies s INNER JOIN historical_stock_data h ON s.start_date <= h.date AND s.end_date >= h.date GROUP BY strategy_name HAVING AVG(close_price) > 200",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, date, close_price, open_price, LAG(close_price, 1) OVER (ORDER BY date) AS prev_close_price FROM historical_stock_data WHERE symbol = 'AAPL'",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, close_price, volume, CASE WHEN close_price > open_price THEN 'Positive' ELSE 'Negative' END AS price_movement FROM historical_stock_data WHERE date = '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE historical_stock_data (\n    id UUID PRIMARY KEY,\n    symbol STRING,\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n)\n\nCREATE TABLE trading_strategies (\n    strategy_id UUID PRIMARY KEY,\n    strategy_name STRING,\n    description STRING,\n    start_date DATE,\n    end_date DATE\n)\n\n### STATEMENT\n\nSELECT symbol, date, close_price, LEAD(close_price, 1) OVER (ORDER BY date) AS next_close_price FROM historical_stock_data WHERE symbol = 'GOOGL'",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, open_price, close_price FROM stock_prices WHERE symbol = 'AAPL';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM trading_strategies;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT strategy_name, description FROM trading_strategies WHERE strategy_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM historical_data;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, high_price, low_price FROM historical_data WHERE symbol = 'GOOGL';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, high_price FROM historical_data WHERE date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT DISTINCT symbol FROM stock_prices;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT AVG(open_price) AS avg_open_price FROM stock_prices;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT MAX(close_price) AS max_close_price FROM stock_prices;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT MIN(low_price) AS min_low_price FROM historical_data;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_records FROM historical_data;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, MAX(high_price) AS max_high_price FROM historical_data GROUP BY symbol;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, AVG(high_price) AS avg_high_price FROM historical_data GROUP BY symbol HAVING avg_high_price > 500;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, open_price, close_price FROM stock_prices ORDER BY date DESC;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, open_price, close_price FROM stock_prices WHERE date BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, open_price, close_price FROM stock_prices WHERE date < '2022-03-01' AND close_price > open_price;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, high_price, low_price FROM historical_data WHERE symbol IN ('AAPL', 'GOOGL');",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, high_price, low_price FROM historical_data WHERE symbol = 'AAPL' UNION SELECT symbol, date, high_price, low_price FROM historical_data WHERE symbol = 'GOOGL';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, extract(year from date) AS year, AVG(high_price) AS avg_high_price FROM historical_data GROUP BY symbol, year;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, open_price, close_price, volume FROM stock_prices WHERE symbol = 'AAPL';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE date >= '2022-01-01' AND date <= '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, AVG(open_price) AS avg_open_price, AVG(close_price) AS avg_close_price FROM stock_prices GROUP BY symbol;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, open_price, close_price FROM stock_prices WHERE volume > 1000000 ORDER BY date DESC;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT trading_strategies.strategy_name, historical_data.date, historical_data.high_price FROM trading_strategies INNER JOIN historical_data ON trading_strategies.strategy_id = historical_data.record_id WHERE trading_strategies.strategy_name = 'Mean Reversion';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT distinct symbol FROM stock_prices WHERE date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, high_price, low_price FROM historical_data WHERE symbol IN ('AAPL', 'GOOGL', 'MSFT');",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, AVG(close_price) AS avg_close_price FROM stock_prices WHERE volume > 5000000 GROUP BY symbol HAVING AVG(close_price) > 100;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, open_price, close_price FROM stock_prices WHERE date >= '2022-03-01' AND date <= '2022-03-31' AND (open_price < close_price OR volume > 2000000);",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT trading_strategies.strategy_name, historical_data.date, historical_data.low_price FROM trading_strategies INNER JOIN historical_data ON trading_strategies.strategy_id = historical_data.record_id WHERE trading_strategies.strategy_name = 'Trend Following' ORDER BY historical_data.date;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, high_price, low_price FROM historical_data WHERE date = '2022-06-15';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, MAX(high_price) AS max_high_price, MIN(low_price) AS min_low_price FROM historical_data GROUP BY symbol;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, close_price, volume FROM stock_prices WHERE symbol = 'GOOGL' AND (close_price < open_price OR volume > 3000000);",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT DISTINCT strategy_name FROM trading_strategies;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, DATE_PART('month', date) AS month, AVG(close_price) AS avg_close_price FROM stock_prices GROUP BY symbol, month HAVING COUNT(*) > 10;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, open_price, close_price FROM stock_prices WHERE symbol LIKE 'A%' AND date >= '2022-04-01' AND date <= '2022-04-30';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, volume, (close_price - open_price) AS price_diff FROM stock_prices WHERE volume > 5000000 AND date >= '2022-05-01';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, COUNT(*) AS num_records FROM stock_prices GROUP BY symbol HAVING COUNT(*) > 50;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT trading_strategies.strategy_name, COUNT(*) AS num_records FROM trading_strategies INNER JOIN historical_data ON trading_strategies.strategy_id = historical_data.record_id GROUP BY trading_strategies.strategy_name HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR(10),\n    date DATE,\n    open_price DECIMAL,\n    close_price DECIMAL,\n    volume INT\n);\n\n\nCREATE TABLE trading_strategies (\n    strategy_id SERIAL PRIMARY KEY,\n    strategy_name VARCHAR(50),\n    description TEXT\n);\n\n\nCREATE TABLE historical_data (\n    record_id SERIAL PRIMARY KEY,\n    symbol VARCHAR(10),\n    date DATE,\n    high_price DECIMAL,\n    low_price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, date, close_price, volume FROM stock_prices WHERE date = (SELECT MAX(date) FROM stock_prices);",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, price FROM stock_prices WHERE date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, volume FROM stock_prices ORDER BY volume DESC;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_splits;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, split_ratio FROM stock_splits WHERE split_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_dividends;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, dividend FROM stock_dividends WHERE ex_dividend_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM trading_strategies;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT strategy_name, description FROM trading_strategies WHERE strategy_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE symbol = 'AAPL';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, price FROM stock_prices WHERE symbol = 'AAPL' AND date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_splits WHERE symbol = 'GOOGL';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, split_ratio, split_date FROM stock_splits WHERE symbol = 'GOOGL' AND split_ratio > 2.0;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_dividends WHERE symbol = 'MSFT';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, dividend, ex_dividend_date FROM stock_dividends WHERE symbol = 'MSFT' AND dividend > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM trading_strategies WHERE strategy_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT strategy_name, description FROM trading_strategies WHERE strategy_id IN (1, 3);",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, price FROM stock_prices WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_splits WHERE split_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE symbol = 'AAPL' AND price > 100",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, date, price FROM stock_prices WHERE date BETWEEN '2022-01-01' AND '2022-01-31'",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, MAX(price) AS max_price FROM stock_prices GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, AVG(price) AS avg_price FROM stock_prices WHERE volume > 100000 GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, COUNT(*) AS total_records FROM stock_prices WHERE price < 50",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT sp.symbol, sd.split_date, sd.split_ratio FROM stock_splits sd JOIN stock_prices sp ON sd.symbol = sp.symbol",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT sd.symbol, sd.split_date, sp.price FROM stock_splits sd JOIN stock_prices sp ON sd.symbol = sp.symbol AND sp.date = sd.split_date",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, SUM(volume) AS total_volume FROM stock_prices GROUP BY symbol HAVING total_volume > 500000",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, date, price, volume FROM stock_prices WHERE symbol = 'GOOGL' ORDER BY price DESC",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_dividends WHERE dividend > 0.5",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, MAX(dividend) AS max_dividend FROM stock_dividends GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices sp LEFT JOIN stock_splits ss ON sp.symbol = ss.symbol AND sp.date = ss.split_date",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, ex_dividend_date, dividend FROM stock_dividends UNION SELECT symbol, split_date, split_ratio FROM stock_splits",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT sp.symbol, sd.split_date, sd.split_ratio FROM stock_splits sd LEFT JOIN stock_prices sp ON sd.symbol = sp.symbol",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, dividend FROM stock_dividends WHERE symbol IN ('AAPL', 'MSFT')",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM trading_strategies WHERE strategy_name LIKE '%Trend%'",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_strategies FROM trading_strategies",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices sp WHERE EXISTS (SELECT * FROM stock_splits ss WHERE sp.symbol = ss.symbol)",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, date, price FROM stock_prices WHERE symbol = 'AMZN' AND price > (SELECT AVG(price) FROM stock_prices)",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT symbol, date, price FROM stock_prices WHERE symbol = 'AAPL' AND EXISTS (SELECT * FROM stock_dividends WHERE symbol = 'AAPL' AND ex_dividend_date = date)",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n    symbol VARCHAR,\n    date DATE,\n    price DECIMAL,\n    volume INT,\n    PRIMARY KEY (symbol, date)\n);\n\nCREATE TABLE stock_splits (\n    symbol VARCHAR,\n    split_date DATE,\n    split_ratio DECIMAL,\n    PRIMARY KEY (symbol, split_date)\n);\n\nCREATE TABLE stock_dividends (\n    symbol VARCHAR,\n    ex_dividend_date DATE,\n    dividend DECIMAL,\n    PRIMARY KEY (symbol, ex_dividend_date)\n);\n\nCREATE TABLE trading_strategies (\n    strategy_id INT,\n    strategy_name VARCHAR,\n    description TEXT,\n    PRIMARY KEY (strategy_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT symbol FROM stock_prices",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, open_price, close_price FROM stock_prices;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, high_price, low_price FROM stock_prices WHERE date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT company_name, sector FROM stock_info;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM stock_info WHERE sector = 'Technology';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM trading_strategies;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT strategy_name, description FROM trading_strategies;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT date, cumulative_return FROM strategy_results WHERE strategy_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM strategy_trades;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, action, quantity, price FROM strategy_trades WHERE strategy_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, action, price FROM strategy_trades WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices JOIN stock_info ON stock_prices.symbol = stock_info.symbol;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT trading_strategies.strategy_name, strategy_trades.symbol, strategy_trades.action, strategy_trades.quantity, strategy_trades.price FROM trading_strategies INNER JOIN strategy_trades ON trading_strategies.strategy_id = strategy_trades.strategy_id;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, close_price FROM stock_prices ORDER BY close_price DESC;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT strategy_name, description FROM trading_strategies ORDER BY strategy_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, open_price, close_price, high_price, low_price FROM stock_prices WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT company_name, sector, industry FROM stock_info WHERE sector = 'Finance' AND industry = 'Banking';",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT MAX(high_price) AS max_high_price FROM stock_prices;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT AVG(close_price) AS avg_close_price FROM stock_prices;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT strategy_id, COUNT(*) AS trade_count FROM strategy_trades GROUP BY strategy_id HAVING COUNT(*) > 10;",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE date = '2022-01-01' AND symbol = 'AAPL'",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, open_price, close_price FROM stock_prices WHERE close_price > open_price",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, COUNT(*) AS total_trades FROM strategy_trades GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT strategy_name, description FROM trading_strategies WHERE strategy_name LIKE 'Trend%'",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT company_name, sector, industry FROM stock_info WHERE sector = 'Technology'",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, MAX(high_price) AS max_high_price FROM stock_prices GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM strategy_results ORDER BY date DESC",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM trading_strategies WHERE CHAR_LENGTH(description) > 100",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, SUM(quantity) AS total_quantity FROM strategy_trades GROUP BY symbol HAVING total_quantity > 1000",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE DATE_PART('month', date) = 1 AND DATE_PART('year', date) = 2022",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM strategy_trades WHERE action = 'BUY' AND price > 100",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT company_name, sector, industry FROM stock_info ORDER BY company_name ASC",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, AVG(close_price) AS avg_close_price FROM stock_prices GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM trading_strategies WHERE strategy_id IN (1, 3, 5)",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, COUNT(*) AS total_trades FROM strategy_trades WHERE quantity > 100 GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM strategy_results WHERE cumulative_return > 0.1",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE high_price = (SELECT MAX(high_price) FROM stock_prices)",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM stock_prices WHERE close_price BETWEEN 100 AND 200",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT symbol, MIN(low_price) AS min_low_price FROM stock_prices GROUP BY symbol",
  "### TABLEDATA\n\nCREATE TABLE stock_prices (\n  date DATE,\n  symbol VARCHAR(10),\n  open_price DECIMAL,\n  close_price DECIMAL,\n  high_price DECIMAL,\n  low_price DECIMAL\n);\n\nCREATE TABLE stock_info (\n  symbol VARCHAR(10),\n  company_name VARCHAR(100),\n  sector VARCHAR(50),\n  industry VARCHAR(50)\n);\n\nCREATE TABLE trading_strategies (\n  strategy_id SERIAL PRIMARY KEY,\n  strategy_name VARCHAR(50),\n  description TEXT\n);\n\nCREATE TABLE strategy_results (\n  result_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  cumulative_return DECIMAL\n);\n\nCREATE TABLE strategy_trades (\n  trade_id SERIAL PRIMARY KEY,\n  strategy_id INT,\n  date DATE,\n  symbol VARCHAR(10),\n  action VARCHAR(5),\n  quantity INT,\n  price DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM trading_strategies WHERE LOWER(strategy_name) LIKE '%momentum%'"
]