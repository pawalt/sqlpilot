[
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM TicketSales;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, ticket_price FROM TicketSales;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM TicketSales WHERE event_date > '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, seat_section FROM TicketSales WHERE event_date = '2022-12-25';",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM TicketSales WHERE seat_section = 'VIP';",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, seat_number FROM TicketSales WHERE ticket_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM TicketSales WHERE seat_section = 'General Admission' AND event_date >= '2022-09-01';",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT event_name FROM TicketSales;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM TicketSales;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(ticket_price) FROM TicketSales;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT MAX(seat_number) FROM TicketSales;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT MIN(ticket_price) FROM TicketSales;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) FROM TicketSales GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, AVG(ticket_price) FROM TicketSales GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT seat_section, COUNT(*) FROM TicketSales GROUP BY seat_section;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT seat_section, MAX(ticket_price) FROM TicketSales GROUP BY seat_section;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, MAX(ticket_price) FROM TicketSales WHERE seat_section = 'VIP';",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM TicketSales ORDER BY event_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM TicketSales ORDER BY ticket_price ASC;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, seat_number FROM TicketSales WHERE seat_section = 'Front Row' ORDER BY seat_number ASC;",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM TicketSales WHERE event_name='Concert' AND ticket_price > 50",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT ticket_id, event_name, seat_section FROM TicketSales WHERE event_date >= '2022-10-10'",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM TicketSales WHERE seat_section='VIP' AND seat_number BETWEEN 1 AND 10",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT SUM(ticket_price) AS total_revenue FROM TicketSales WHERE event_name='Sports Game'",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(ticket_price) AS avg_price, MAX(ticket_price) AS max_price FROM TicketSales WHERE event_name='Theater Play'",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(ticket_id) AS total_tickets FROM TicketSales WHERE event_date='2022-12-25'",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, COUNT(ticket_id) AS total_tickets FROM TicketSales GROUP BY event_name HAVING COUNT(ticket_id) > 100",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, MIN(ticket_price) AS min_price, MAX(ticket_price) AS max_price FROM TicketSales GROUP BY event_name",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, seat_section, COUNT(*) AS total_tickets FROM TicketSales GROUP BY event_name, seat_section",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT event_name FROM TicketSales",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, AVG(ticket_price) AS avg_price FROM TicketSales GROUP BY event_name ORDER BY avg_price DESC",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, seat_section, AVG(ticket_price) AS avg_price FROM TicketSales GROUP BY event_name, seat_section ORDER BY avg_price DESC",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, event_date, seat_section, seat_number FROM TicketSales WHERE event_name LIKE '%Movie%'",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, event_date, seat_section FROM TicketSales WHERE event_date < '2023-01-01' AND event_name NOT LIKE '%Festival%' ORDER BY event_date",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, COUNT(DISTINCT seat_section) AS total_sections FROM TicketSales GROUP BY event_name",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, COUNT(DISTINCT seat_number) AS total_seats FROM TicketSales GROUP BY event_name",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, AVG(ticket_price) AS avg_price_per_seat FROM TicketSales GROUP BY event_name",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, AVG(ticket_price) AS avg_price, COUNT(*) AS total_sales FROM TicketSales GROUP BY event_name HAVING COUNT(*) > 50",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, seat_section, COUNT(*) AS total_tickets FROM TicketSales WHERE ticket_price >= 100 GROUP BY event_name, seat_section HAVING COUNT(*) > 10",
  "### TABLEDATA\n\nCREATE TABLE TicketSales (\n  ticket_id SERIAL PRIMARY KEY,\n  event_name VARCHAR(255) NOT NULL,\n  event_date DATE NOT NULL,\n  ticket_price DECIMAL(10, 2) NOT NULL,\n  seat_section VARCHAR(50) NOT NULL,\n  seat_number INTEGER NOT NULL\n)\n\n### STATEMENT\n\nSELECT event_name, MIN(ticket_price) AS min_price, MAX(ticket_price) AS max_price FROM TicketSales WHERE event_date BETWEEN '2023-04-01' AND '2023-04-30' GROUP BY event_name",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM EventTickets;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, ticket_price FROM EventTickets;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, seat_number FROM EventTickets WHERE ticket_price > 50;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM SeatingArrangements;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT seat_section, seat_status FROM SeatingArrangements;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT seat_number FROM SeatingArrangements WHERE seat_status = 'available';",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT seat_id, seat_number FROM SeatingArrangements ORDER BY seat_number ASC;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, ticket_price, seat_number FROM EventTickets INNER JOIN SeatingArrangements ON EventTickets.seat_number = SeatingArrangements.seat_number;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, ticket_price, seat_section FROM EventTickets INNER JOIN SeatingArrangements ON EventTickets.seat_number = SeatingArrangements.seat_number WHERE seat_status = 'available';",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM EventTickets WHERE event_name LIKE '%Concert%';",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM EventTickets WHERE ticket_price BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, seat_number FROM EventTickets WHERE ticket_price = (SELECT MAX(ticket_price) FROM EventTickets);",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM EventTickets;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_tickets FROM EventTickets;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT AVG(ticket_price) AS average_price FROM EventTickets;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT DISTINCT event_name FROM EventTickets;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS total_tickets FROM EventTickets GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT seat_section, COUNT(*) AS total_seats FROM SeatingArrangements GROUP BY seat_section;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT seat_section, AVG(seat_number) AS average_seat_number FROM SeatingArrangements GROUP BY seat_section;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, SUM(ticket_price) AS total_revenue FROM EventTickets GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM EventTickets WHERE ticket_price > 100",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, ticket_price FROM EventTickets WHERE event_name LIKE 'Concert%'",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT COUNT(ticket_id) FROM EventTickets",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, ticket_price, seat_number FROM EventTickets LEFT JOIN SeatingArrangements ON EventTickets.seat_number = SeatingArrangements.seat_number",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT AVG(ticket_price) FROM EventTickets",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, seat_section FROM EventTickets INNER JOIN SeatingArrangements ON EventTickets.seat_number = SeatingArrangements.seat_number WHERE SeatingArrangements.seat_status = 'Available'",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS total_tickets FROM EventTickets GROUP BY event_name HAVING total_tickets > 50",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, MAX(ticket_price) FROM EventTickets GROUP BY event_name",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, MIN(ticket_price) FROM EventTickets WHERE seat_number IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE EventTickets (\n    ticket_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    ticket_price DECIMAL,\n    seat_number INT\n);\n\n\nCREATE TABLE SeatingArrangements (\n    seat_id INT PRIMARY KEY,\n    seat_number INT UNIQUE,\n    seat_section VARCHAR(50),\n    seat_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT event_name, SUM(ticket_price) FROM EventTickets GROUP BY event_name",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM event;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM event;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM ticket;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT seat_number, price FROM ticket;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customer;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customer;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event_id, event_name, event_date FROM event WHERE event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT ticket_id, seat_number, price FROM ticket WHERE event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customer WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM event WHERE event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM event WHERE event_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event.event_name, ticket.seat_number, ticket.price FROM event JOIN ticket ON event.event_id = ticket.event_id;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer.customer_name, event.event_name FROM customer JOIN ticket ON ticket.event_id = event.event_id JOIN customer ON ticket.customer_id = customer.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS total_tickets FROM ticket WHERE price > 50 GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customer WHERE customer_id IN (SELECT customer_id FROM ticket GROUP BY customer_id HAVING COUNT(*) > 1);",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event_name, AVG(price) AS average_price FROM event JOIN ticket ON event.event_id = ticket.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event_name, MAX(price) AS highest_price FROM event JOIN ticket ON event.event_id = ticket.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event_name, MIN(price) AS lowest_price FROM event JOIN ticket ON event.event_id = ticket.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event.event_name, COUNT(ticket.ticket_id) AS total_tickets FROM event LEFT JOIN ticket ON event.event_id = ticket.event_id GROUP BY event.event_name;",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM event WHERE event_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM event WHERE event_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM event INNER JOIN ticket ON event.event_id = ticket.event_id",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event.event_name, ticket.seat_number FROM event LEFT JOIN ticket ON event.event_id = ticket.event_id",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customer WHERE phone_number LIKE '%555%'",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event.event_name, ticket.price FROM event JOIN ticket ON event.event_id = ticket.event_id WHERE ticket.price <= 50.00",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, event.event_name, ticket.seat_number FROM customer JOIN ticket ON customer.customer_id = ticket.ticket_id JOIN event ON ticket.event_id = event.event_id",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event.event_name, COUNT(ticket.ticket_id) AS total_tickets FROM event LEFT JOIN ticket ON event.event_id = ticket.event_id GROUP BY event.event_name",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event.event_name, AVG(ticket.price) AS avg_price FROM event JOIN ticket ON event.event_id = ticket.event_id GROUP BY event.event_name",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(ticket.price) AS total_spent FROM customer JOIN ticket ON customer.customer_id = ticket.ticket_id GROUP BY customer_name",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT DISTINCT event.event_name, customer.customer_name FROM event JOIN ticket ON event.event_id = ticket.event_id JOIN customer ON ticket.ticket_id = customer.customer_id",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event.event_name AS Event, customer.customer_name AS Customer, ticket.price AS Price FROM event JOIN ticket ON event.event_id = ticket.event_id JOIN customer ON ticket.ticket_id = customer.customer_id WHERE ticket.price > 100.00",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event.event_name, MAX(ticket.price) AS max_price FROM event JOIN ticket ON event.event_id = ticket.event_id GROUP BY event.event_name",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer.customer_name, MIN(ticket.price) AS min_price FROM customer JOIN ticket ON customer.customer_id = ticket.ticket_id GROUP BY customer.customer_name",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event.event_name, ticket.seat_number, customer.email FROM event JOIN ticket ON event.event_id = ticket.event_id JOIN customer ON ticket.ticket_id = customer.customer_id",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer.customer_name AS Customer, event.event_name AS Event, ticket.seat_number AS Seat, ticket.price AS Price  FROM customer JOIN ticket ON customer.customer_id = ticket.ticket_id JOIN event ON ticket.event_id = event.event_id",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event.event_name, COUNT(ticket.ticket_id) AS total_tickets, MAX(ticket.price) AS max_price, MIN(ticket.price) AS min_price, AVG(ticket.price) AS avg_price FROM event LEFT JOIN ticket ON event.event_id = ticket.event_id GROUP BY event.event_name",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer.customer_name, SUM(ticket.price) AS total_spent, AVG(ticket.price) AS avg_price FROM customer JOIN ticket ON customer.customer_id = ticket.ticket_id GROUP BY customer.customer_name",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer.customer_name, event.event_name, ticket.seat_number, ticket.price FROM customer JOIN ticket ON customer.customer_id = ticket.ticket_id JOIN event ON ticket.event_id = event.event_id WHERE event.event_date >= '2022-06-01'",
  "### TABLEDATA\n\nCREATE TABLE event (\n  event_id INT PRIMARY KEY,\n  event_name VARCHAR(255),\n  event_date DATE\n);\n\nCREATE TABLE ticket (\n  ticket_id INT PRIMARY KEY,\n  event_id INT,\n  seat_number VARCHAR(10),\n  price DECIMAL(10, 2),\n  FOREIGN KEY (event_id) REFERENCES event(event_id)\n);\n\nCREATE TABLE customer (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT event.event_name, customer.customer_name, ticket.seat_number, ticket.price FROM event JOIN ticket ON event.event_id = ticket.event_id JOIN customer ON ticket.ticket_id = customer.customer_id WHERE customer.email LIKE '%@domain.com'",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_price FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_id, seat_number FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, event_id, seat_number, ticket_price FROM tickets WHERE ticket_price > 50;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM events;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_id, event_name, event_date FROM events;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_id, total_seats FROM events;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, email, phone_number FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM bookings;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT booking_id, event_id, customer_id FROM bookings;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT booking_id, num_tickets, booking_date FROM bookings;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT booking_id, event_id, num_tickets, booking_date FROM bookings WHERE booking_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, t.event_id, e.event_name FROM tickets t JOIN events e ON t.event_id = e.event_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.customer_name, b.booking_id FROM customers c JOIN bookings b ON c.customer_id = b.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT e.event_id, e.event_name, b.booking_id, b.num_tickets FROM events e JOIN bookings b ON e.event_id = b.event_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, t.ticket_price, e.event_name, b.num_tickets FROM tickets t JOIN events e ON t.event_id = e.event_id JOIN bookings b ON t.event_id = b.event_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, t.ticket_price, c.customer_name, b.booking_date FROM tickets t JOIN bookings b ON t.event_id = b.event_id JOIN customers c ON b.customer_id = c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT e.event_name, c.customer_name, b.booking_date, b.num_tickets FROM events e JOIN bookings b ON e.event_id = b.event_id JOIN customers c ON b.customer_id = c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE ticket_price > 100",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM events WHERE event_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers WHERE customer_id = 1",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_id, customer_id, num_tickets FROM bookings WHERE booking_date > '2022-06-01'",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_name, total_seats FROM events WHERE total_seats < 100",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets INNER JOIN events ON tickets.event_id = events.event_id",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers WHERE email LIKE '%gmail.com'",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM bookings WHERE num_tickets > 5",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_name, event_date, total_seats FROM events ORDER BY event_date DESC",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(ticket_price) AS total_sales FROM tickets",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_name, AVG(ticket_price) AS avg_ticket_price FROM events INNER JOIN tickets ON events.event_id = tickets.event_id GROUP BY event_name",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM bookings WHERE booking_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS total_bookings FROM events INNER JOIN bookings ON events.event_id = bookings.event_id GROUP BY event_name",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, SUM(num_tickets) AS total_tickets FROM bookings GROUP BY customer_id, customer_name",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_name, AVG(num_tickets) AS avg_tickets_per_booking FROM events INNER JOIN bookings ON events.event_id = bookings.event_id GROUP BY event_name",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT event_name FROM events",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(ticket_price) AS avg_ticket_price FROM customers INNER JOIN bookings ON customers.customer_id = bookings.customer_id INNER JOIN tickets ON bookings.event_id = tickets.event_id GROUP BY customer_name",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE ticket_price >= (SELECT AVG(ticket_price) FROM tickets)",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_date, COUNT(*) AS total_tickets_sold FROM events INNER JOIN bookings ON events.event_id = bookings.event_id GROUP BY event_date",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    event_id INT,\n    seat_number INT,\n    ticket_price DECIMAL(10, 2)\n);\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(50),\n    event_date DATE,\n    total_seats INT\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE bookings (\n    booking_id INT PRIMARY KEY,\n    event_id INT,\n    customer_id INT,\n    num_tickets INT,\n    booking_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_bookings FROM customers INNER JOIN bookings ON customers.customer_id = bookings.customer_id GROUP BY customer_name",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Event;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM Event;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT venue_name, capacity FROM Venue;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Ticket;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT seat_number, price FROM Ticket;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM Customer;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Booking;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT booking_date FROM Booking;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, venue_name, capacity FROM Event JOIN Venue ON Event.event_id = Venue.venue_id;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, seat_number, price FROM Event JOIN Ticket ON Event.event_id = Ticket.event_id;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, event_name FROM Customer JOIN Booking ON Customer.customer_id = Booking.customer_id JOIN Event ON Booking.event_id = Event.event_id;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, booking_date FROM Event JOIN Booking ON Event.event_id = Booking.event_id;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT venue_name, event_date FROM Venue JOIN Event ON Venue.venue_id = Event.event_id;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM Event WHERE event_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM Event WHERE event_name LIKE 'Concert%';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM Customer WHERE email = 'example@email.com';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, price FROM Event JOIN Ticket ON Event.event_id = Ticket.event_id WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_events FROM Event;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(capacity) AS max_capacity FROM Venue;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(price) AS min_price FROM Ticket;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Event WHERE event_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, event_date FROM Event WHERE event_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, venue_name, capacity FROM Event JOIN Venue ON Event.event_id = Venue.venue_id;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, email FROM Customer WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, seat_number, price FROM Event JOIN Ticket ON Event.event_id = Ticket.event_id;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Booking ORDER BY booking_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, booking_id FROM Customer JOIN Booking ON Customer.customer_id = Booking.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(price) AS total_spent FROM Customer JOIN Booking ON Customer.customer_id = Booking.customer_id JOIN Ticket ON Booking.ticket_id = Ticket.ticket_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(ticket_id) AS total_tickets_sold FROM Event JOIN Ticket ON Event.event_id = Ticket.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, COUNT(*) AS total_bookings FROM Event JOIN Booking ON Event.event_id = Booking.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(price) AS max_price FROM Ticket;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT venue_name, AVG(capacity) AS avg_capacity FROM Venue;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, COUNT(ticket_id) AS total_tickets_purchased FROM Customer JOIN Booking ON Customer.customer_id = Booking.customer_id GROUP BY customer_id, first_name, last_name;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, AVG(price) AS avg_ticket_price FROM Event JOIN Ticket ON Event.event_id = Ticket.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT event_name, MIN(price) AS min_ticket_price FROM Event JOIN Ticket ON Event.event_id = Ticket.event_id GROUP BY event_name;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT event_name FROM Event;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Customer WHERE customer_id IN (SELECT customer_id FROM Booking WHERE booking_date = '2021-10-15');",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, event_name, booking_date FROM Customer JOIN Booking ON Customer.customer_id = Booking.customer_id JOIN Event ON Booking.event_id = Event.event_id;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT venue_name, COUNT(ticket_id) AS total_tickets_sold FROM Venue JOIN Event ON Venue.venue_id = Event.event_id JOIN Ticket ON Event.event_id = Ticket.event_id GROUP BY venue_name;",
  "### TABLEDATA\n\nCREATE TABLE Event (\n  event_id SERIAL PRIMARY KEY,\n  event_name TEXT NOT NULL,\n  event_date DATE NOT NULL\n);\n\n\nCREATE TABLE Venue (\n  venue_id SERIAL PRIMARY KEY,\n  venue_name TEXT NOT NULL,\n  capacity INT NOT NULL\n);\n\n\nCREATE TABLE Ticket (\n  ticket_id SERIAL PRIMARY KEY,\n  event_id INT NOT NULL,\n  seat_number TEXT NOT NULL,\n  price DECIMAL NOT NULL\n);\n\n\nCREATE TABLE Customer (\n  customer_id SERIAL PRIMARY KEY,\n  first_name TEXT NOT NULL,\n  last_name TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n\nCREATE TABLE Booking (\n  booking_id SERIAL PRIMARY KEY,\n  customer_id INT NOT NULL,\n  ticket_id INT NOT NULL,\n  booking_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(price) FROM Customer JOIN Booking ON Customer.customer_id = Booking.customer_id JOIN Ticket ON Booking.ticket_id = Ticket.ticket_id GROUP BY customer_id;"
]