[
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_id, model_name FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, layers FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM DeepLearningModel WHERE model_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, optimizer FROM DeepLearningModel WHERE loss_function = 'MSE';",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT DISTINCT optimizer FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_id, model_name, optimizer FROM DeepLearningModel WHERE optimizer = 'Adam';",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM DeepLearningModel ORDER BY model_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT AVG(model_id) FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT MAX(model_id), MIN(model_id) FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, UPPER(optimizer) AS Optimizer FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_id, CONCAT(model_name, ' - ', optimizer) AS Details FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_id, model_name FROM DeepLearningModel WHERE layers LIKE '%CNN%';",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM DeepLearningModel WHERE optimizer IN ('SGD', 'Adagrad', 'Adam');",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_id, AVG(model_id) AS Average FROM DeepLearningModel GROUP BY model_id;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT COUNT(model_id) AS Model_Count, optimizer FROM DeepLearningModel GROUP BY optimizer;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT DISTINCT loss_function, COUNT(*) AS Count FROM DeepLearningModel GROUP BY loss_function;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_id, model_name, optimizer, loss_function FROM DeepLearningModel LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM DeepLearningModel WHERE layers IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_id, model_name FROM DeepLearningModel WHERE model_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM DeepLearningModel WHERE optimizer = 'adam' AND loss_function = 'mse';",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, layers FROM DeepLearningModel WHERE model_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_id, model_name, optimizer FROM DeepLearningModel WHERE layers LIKE '%convolution%';",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT * FROM DeepLearningModel WHERE optimizer IN ('sgd', 'adam');",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT COUNT(model_id) AS total_models FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT DISTINCT loss_function FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, COUNT(model_id) AS total_models FROM DeepLearningModel GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT AVG(model_id) AS avg_model_id FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT DISTINCT optimizer, COUNT(model_id) AS total_models FROM DeepLearningModel GROUP BY optimizer HAVING COUNT(model_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, CONCAT('Optimizer: ', optimizer, ' | Loss Function: ', loss_function) AS model_details FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, CHAR_LENGTH(layers) AS layers_length FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, REGEXP_REPLACE(layers, 'dense', 'fully_connected') AS updated_layers FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, CONCAT('Model ID: ', model_id, ' | Optimizer: ', optimizer) AS model_info FROM DeepLearningModel WHERE optimizer IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, UPPER(loss_function) AS capital_loss_function FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, LOWER(optimizer) AS lowercase_optimizer FROM DeepLearningModel WHERE optimizer LIKE '%sgd%';",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, TRIM(loss_function) AS trimmed_loss_function FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, CONCAT('Model ID: ', model_id, ' | Total Layers: ', LENGTH(layers)) AS model_summary FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE DeepLearningModel (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    layers TEXT,\n    optimizer VARCHAR(20),\n    loss_function VARCHAR(20)\n)\n\n### STATEMENT\n\nSELECT model_name, REPLACE(layers, 'convolution', 'conv') AS updated_layers FROM DeepLearningModel;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM deep_learning_datasets;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_description FROM deep_learning_datasets;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT id, dataset_name FROM deep_learning_datasets WHERE dataset_size > 1000;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM model_training_results;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, training_accuracy FROM model_training_results;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_id, model_name, validation_accuracy FROM model_training_results WHERE training_accuracy > 0.9;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT d.dataset_name, m.model_name FROM deep_learning_datasets d JOIN model_training_results m ON d.id = m.dataset_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT d.dataset_name, m.model_name FROM deep_learning_datasets d INNER JOIN model_training_results m ON d.id = m.dataset_id WHERE m.training_accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT d.dataset_name, m.model_name FROM deep_learning_datasets d LEFT JOIN model_training_results m ON d.id = m.dataset_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT d.dataset_name, m.model_name FROM deep_learning_datasets d RIGHT JOIN model_training_results m ON d.id = m.dataset_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT d.dataset_name, m.model_name FROM deep_learning_datasets d FULL JOIN model_training_results m ON d.id = m.dataset_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, COUNT(*) AS num_models FROM deep_learning_datasets JOIN model_training_results ON deep_learning_datasets.id = model_training_results.dataset_id GROUP BY dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, AVG(training_accuracy) AS avg_training_acc FROM deep_learning_datasets JOIN model_training_results ON deep_learning_datasets.id = model_training_results.dataset_id GROUP BY dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, model_name, MAX(validation_accuracy) AS max_val_acc FROM deep_learning_datasets JOIN model_training_results ON deep_learning_datasets.id = model_training_results.dataset_id GROUP BY dataset_name, model_name;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT d.dataset_name, m.model_name FROM deep_learning_datasets d JOIN model_training_results m ON d.id = m.dataset_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_description FROM deep_learning_datasets WHERE dataset_size BETWEEN 1000 AND 5000;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, validation_accuracy FROM model_training_results WHERE dataset_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size FROM deep_learning_datasets ORDER BY dataset_size DESC;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, training_accuracy FROM model_training_results ORDER BY training_accuracy DESC;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size FROM deep_learning_datasets WHERE dataset_description LIKE '%image%';",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_description FROM deep_learning_datasets WHERE dataset_size > 1000;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size FROM deep_learning_datasets WHERE dataset_description LIKE '%image%';",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, training_accuracy, validation_accuracy FROM model_training_results WHERE training_accuracy > 0.8 AND validation_accuracy > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dr.dataset_name, mtr.model_name, mtr.training_accuracy FROM deep_learning_datasets dr JOIN model_training_results mtr ON dr.id = mtr.dataset_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_datasets FROM deep_learning_datasets;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT AVG(training_accuracy) AS avg_training_accuracy, AVG(validation_accuracy) AS avg_validation_accuracy FROM model_training_results;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size FROM deep_learning_datasets WHERE dataset_size BETWEEN 1000 AND 5000;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, training_accuracy FROM model_training_results WHERE model_name IN ('ResNet', 'VGG', 'AlexNet');",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size FROM deep_learning_datasets ORDER BY dataset_size DESC;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, training_accuracy FROM model_training_results ORDER BY training_accuracy DESC;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT model_name FROM model_training_results;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dr.dataset_name, COUNT(mtr.result_id) AS total_results FROM deep_learning_datasets dr LEFT JOIN model_training_results mtr ON dr.id = mtr.dataset_id GROUP BY dr.dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, COUNT(mtr.result_id) AS total_results FROM deep_learning_datasets dr LEFT JOIN model_training_results mtr ON dr.id = mtr.dataset_id GROUP BY dataset_name HAVING COUNT(mtr.result_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, SUM(dataset_size) AS total_size FROM deep_learning_datasets GROUP BY dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, AVG(dataset_size) AS avg_size FROM deep_learning_datasets GROUP BY dataset_name HAVING AVG(dataset_size) > 2000;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, AVG(validation_accuracy) AS avg_validation_acc FROM model_training_results GROUP BY model_name HAVING AVG(validation_accuracy) > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size FROM deep_learning_datasets WHERE dataset_description IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, training_accuracy FROM model_training_results WHERE dataset_id IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_description, dataset_size FROM deep_learning_datasets WHERE dataset_description IS NOT NULL AND dataset_size > 500;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    dataset_description TEXT,\n    dataset_size INT\n);\n\nCREATE TABLE model_training_results (\n    result_id INT PRIMARY KEY,\n    dataset_id INT,\n    model_name VARCHAR(255) NOT NULL,\n    training_accuracy FLOAT,\n    validation_accuracy FLOAT\n    FOREIGN KEY (dataset_id) REFERENCES deep_learning_datasets(id)\n);\n\n### STATEMENT\n\nSELECT dr.dataset_name, mtr.model_name, mtr.training_accuracy, mtr.validation_accuracy FROM deep_learning_datasets dr JOIN model_training_results mtr ON dr.id = mtr.dataset_id WHERE mtr.training_accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM deep_learning_datasets;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size FROM deep_learning_datasets;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT label_name FROM data_labels;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM deep_learning_datasets WHERE dataset_size > 1000;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT label_name FROM data_labels WHERE dataset_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy FROM model_results WHERE dataset_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM deep_learning_datasets ORDER BY last_updated DESC;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT label_name FROM data_labels ORDER BY label_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy FROM model_results ORDER BY accuracy DESC;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM deep_learning_datasets WHERE dataset_name LIKE '%image%';",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT label_name FROM data_labels WHERE label_name LIKE '%cat%';",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy FROM model_results WHERE accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM deep_learning_datasets WHERE dataset_size BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT label_name FROM data_labels WHERE dataset_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy FROM model_results WHERE dataset_id NOT IN (3, 4);",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(accuracy) FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM deep_learning_datasets;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(loss) FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(dataset_size) FROM deep_learning_datasets;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT(dataset_name) FROM deep_learning_datasets;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM deep_learning_datasets WHERE dataset_size > 1000;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size, last_updated FROM deep_learning_datasets WHERE dataset_size > 1000 ORDER BY last_updated DESC;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.dataset_name, d.dataset_size, COUNT(*) AS num_labels FROM deep_learning_datasets d JOIN data_labels l ON d.id = l.dataset_id GROUP BY d.dataset_name, d.dataset_size;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.dataset_name, mr.model_name, mr.accuracy FROM deep_learning_datasets d JOIN model_results mr ON d.id = mr.dataset_id WHERE mr.accuracy > 0.9;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.dataset_name, dl.label_name, mr.model_name, mr.accuracy FROM deep_learning_datasets d JOIN data_labels dl ON d.id = dl.dataset_id JOIN model_results mr ON d.id = mr.dataset_id WHERE mr.accuracy > 0.9;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.dataset_name, dl.label_name, mr.model_name, mr.accuracy FROM deep_learning_datasets d LEFT JOIN data_labels dl ON d.id = dl.dataset_id LEFT JOIN model_results mr ON d.id = mr.dataset_id WHERE mr.accuracy IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size, AVG(accuracy) AS avg_accuracy FROM deep_learning_datasets d JOIN model_results mr ON d.id = mr.dataset_id GROUP BY dataset_name, dataset_size;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, MAX(accuracy) AS max_accuracy FROM deep_learning_datasets d JOIN model_results mr ON d.id = mr.dataset_id GROUP BY dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT model_name, AVG(accuracy) AS avg_accuracy FROM model_results GROUP BY model_name HAVING AVG(accuracy) > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.dataset_name, d.dataset_size, COUNT(*) AS num_labels FROM deep_learning_datasets d JOIN data_labels l ON d.id = l.dataset_id GROUP BY d.dataset_name, d.dataset_size HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d.dataset_name, d.dataset_size, COUNT(*) AS num_labels FROM deep_learning_datasets d JOIN data_labels l ON d.id = l.dataset_id INNER JOIN model_results mr ON d.id = mr.dataset_id GROUP BY d.dataset_name, d.dataset_size HAVING COUNT(*) > 5 AND AVG(mr.accuracy) > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT d1.dataset_name AS dataset1, d2.dataset_name AS dataset2, CORR(mr1.accuracy, mr2.accuracy) AS correlation FROM deep_learning_datasets d1 JOIN deep_learning_datasets d2 ON d1.id < d2.id JOIN model_results mr1 ON d1.id = mr1.dataset_id JOIN model_results mr2 ON d2.id = mr2.dataset_id GROUP BY d1.dataset_name, d2.dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size, SUM(CASE WHEN accuracy > 0.9 THEN 1 ELSE 0 END) AS high_accuracy_models FROM deep_learning_datasets d JOIN model_results mr ON d.id = mr.dataset_id GROUP BY dataset_name, dataset_size;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size, CASE WHEN AVG(accuracy) > 0.8 THEN 'High Accuracy' ELSE 'Low Accuracy' END AS accuracy_level FROM deep_learning_datasets d JOIN model_results mr ON d.id = mr.dataset_id GROUP BY dataset_name, dataset_size;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size, MAX(accuracy) - MIN(accuracy) AS accuracy_range FROM deep_learning_datasets d JOIN model_results mr ON d.id = mr.dataset_id GROUP BY dataset_name, dataset_size;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size, STRING_AGG(model_name, ', ') AS models_used FROM deep_learning_datasets d JOIN model_results mr ON d.id = mr.dataset_id GROUP BY dataset_name, dataset_size;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY accuracy) OVER () AS median_accuracy FROM deep_learning_datasets d JOIN model_results mr ON d.id = mr.dataset_id GROUP BY dataset_name, dataset_size;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size, NTILE(4) OVER (ORDER BY accuracy) AS accuracy_quartile FROM deep_learning_datasets d JOIN model_results mr ON d.id = mr.dataset_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size, FIRST_VALUE(model_name) OVER (PARTITION BY dataset_name ORDER BY accuracy DESC) AS best_model FROM deep_learning_datasets d JOIN model_results mr ON d.id = mr.dataset_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(100) NOT NULL,\n    dataset_size INT NOT NULL,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE data_labels (\n    label_id SERIAL PRIMARY KEY,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    label_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_results (\n    result_id SERIAL PRIMARY KEY,\n    model_name VARCHAR(100) NOT NULL,\n    dataset_id INT REFERENCES deep_learning_datasets(id),\n    accuracy FLOAT NOT NULL,\n    loss FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size, ROW_NUMBER() OVER (PARTITION BY dataset_name ORDER BY accuracy DESC) AS rank_by_accuracy FROM deep_learning_datasets d JOIN model_results mr ON d.id = mr.dataset_id ORDER BY dataset_name, rank_by_accuracy;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM dataset;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT id, dataset_name FROM dataset;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, description FROM dataset;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM model;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT model_id, model_name FROM model;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT model_name, algorithm FROM model;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM training_metric;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT metric_id, model_id FROM training_metric;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT loss, accuracy FROM training_metric;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM prediction;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT prediction_id, model_id FROM prediction;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT input_data, output_data FROM prediction;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, model_name FROM dataset, model;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT model.model_name, prediction.input_data FROM model INNER JOIN prediction ON model.model_id = prediction.model_id;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT model.model_name, training_metric.loss FROM model LEFT JOIN training_metric ON model.model_id = training_metric.model_id;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, model_name, algorithm FROM dataset JOIN model ON dataset.id = model.model_id;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM dataset WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM model WHERE algorithm = 'Logistic Regression';",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM prediction WHERE prediction_label = 'Success';",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, description FROM dataset WHERE id = 2;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy FROM model WHERE accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM dataset WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, description FROM dataset WHERE dataset_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM model WHERE accuracy > 0.9;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT model_id, model_name, algorithm FROM model WHERE algorithm = 'Random Forest';",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM training_metric WHERE loss < 0.1 AND accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT prediction_label, COUNT(*) FROM prediction GROUP BY prediction_label;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT dataset.dataset_name, model.model_name FROM dataset JOIN model ON dataset.id = model.model_id;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM dataset WHERE id = (SELECT model_id FROM model WHERE model_name = 'Logistic Regression');",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM training_metric WHERE model_id IN (SELECT model_id FROM model WHERE accuracy > 0.85);",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM dataset WHERE id IN (SELECT model_id FROM prediction WHERE prediction_label = 'Positive');",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM dataset d JOIN model m ON d.id = m.model_id WHERE d.dataset_name = 'Data1' AND m.accuracy > 0.95;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT model_name, AVG(accuracy) FROM model JOIN training_metric ON model.model_id = training_metric.model_id GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT dataset.dataset_name, AVG(accuracy) FROM dataset JOIN model ON dataset.id = model.model_id JOIN training_metric ON model.model_id = training_metric.model_id GROUP BY dataset.dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT model_id, MAX(accuracy) FROM model JOIN training_metric ON model.model_id = training_metric.model_id GROUP BY model_id;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM model m1 JOIN model m2 ON m1.accuracy > m2.accuracy AND m1.model_id <> m2.model_id;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, SUM(accuracy) FROM dataset JOIN model ON dataset.id = model.model_id JOIN training_metric ON model.model_id = training_metric.model_id GROUP BY dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_models FROM model;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT AVG(loss) AS avg_loss, AVG(accuracy) AS avg_accuracy FROM training_metric JOIN model ON training_metric.model_id = model.model_id;",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT * FROM model WHERE model_id = (SELECT model_id FROM training_metric ORDER BY accuracy DESC LIMIT 1);",
  "### TABLEDATA\n\nCREATE TABLE dataset (\n    id INT PRIMARY KEY,\n    dataset_name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE model (\n    model_id INT PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    algorithm VARCHAR(50),\n    accuracy FLOAT\n);\n\n\nCREATE TABLE training_metric (\n    metric_id INT PRIMARY KEY,\n    model_id INT,\n    loss FLOAT,\n    accuracy FLOAT,\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n\nCREATE TABLE prediction (\n    prediction_id INT PRIMARY KEY,\n    model_id INT,\n    input_data TEXT,\n    output_data TEXT,\n    prediction_label VARCHAR(50),\n    FOREIGN KEY (model_id) REFERENCES model(model_id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, COUNT(model_id) AS total_models FROM dataset JOIN model ON dataset.id = model.model_id GROUP BY dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT * FROM deep_learning_data;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT id, created_at FROM deep_learning_data;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT network_id, structure FROM neural_networks;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT result_id, result FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT log_id, log_info FROM training_logs;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT hyper_id, params FROM hyperparameters;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT d.id, d.created_at, n.structure FROM deep_learning_data d JOIN neural_networks n ON d.id = n.training_data_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT n.network_id, n.structure, m.result FROM neural_networks n JOIN model_results m ON n.network_id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT m.result_id, l.log_info FROM model_results m JOIN training_logs l ON m.model_id = l.model_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT l.log_id, h.params FROM training_logs l JOIN hyperparameters h ON l.model_id = h.model_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT d.id, n.network_id, h.hyper_id FROM deep_learning_data d JOIN neural_networks n ON d.id = n.training_data_id JOIN hyperparameters h ON n.network_id = h.model_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT n.network_id, m.result_id, l.log_id, h.hyper_id FROM neural_networks n JOIN model_results m ON n.network_id = m.model_id JOIN training_logs l ON m.model_id = l.model_id JOIN hyperparameters h ON l.model_id = h.model_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT d.id, d.created_at, n.structure, m.result, l.log_info, h.params FROM deep_learning_data d JOIN neural_networks n ON d.id = n.training_data_id JOIN model_results m ON n.network_id = m.model_id JOIN training_logs l ON m.model_id = l.model_id JOIN hyperparameters h ON l.model_id = h.model_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT d.id, n.network_id, h.hyper_id FROM deep_learning_data d JOIN neural_networks n ON d.id = n.training_data_id JOIN hyperparameters h ON n.network_id = h.model_id WHERE d.id = 1;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT n.network_id, m.result_id, l.log_id, h.hyper_id FROM neural_networks n JOIN model_results m ON n.network_id = m.model_id JOIN training_logs l ON m.model_id = l.model_id JOIN hyperparameters h ON l.model_id = h.model_id WHERE n.network_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT d.id, d.created_at, n.structure, m.result, l.log_info, h.params FROM deep_learning_data d JOIN neural_networks n ON d.id = n.training_data_id JOIN model_results m ON n.network_id = m.model_id JOIN training_logs l ON m.model_id = l.model_id JOIN hyperparameters h ON l.model_id = h.model_id WHERE d.id = 1;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT d.id, d.created_at, n.structure, m.result, l.log_info, h.params FROM deep_learning_data d JOIN neural_networks n ON d.id = n.training_data_id JOIN model_results m ON n.network_id = m.model_id JOIN training_logs l ON m.model_id = l.model_id JOIN hyperparameters h ON l.model_id = h.model_id WHERE h.hyper_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT d.id, d.created_at, n.structure, m.result, l.log_info, h.params FROM deep_learning_data d JOIN neural_networks n ON d.id = n.training_data_id JOIN model_results m ON n.network_id = m.model_id JOIN training_logs l ON m.model_id = l.model_id JOIN hyperparameters h ON l.model_id = h.model_id WHERE l.log_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT d.id, d.created_at, n.structure, m.result, l.log_info, h.params FROM deep_learning_data d JOIN neural_networks n ON d.id = n.training_data_id JOIN model_results m ON n.network_id = m.model_id JOIN training_logs l ON m.model_id = l.model_id JOIN hyperparameters h ON l.model_id = h.model_id WHERE m.result_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT d.id, d.created_at, n.structure, m.result, l.log_info, h.params FROM deep_learning_data d JOIN neural_networks n ON d.id = n.training_data_id JOIN model_results m ON n.network_id = m.model_id JOIN training_logs l ON m.model_id = l.model_id JOIN hyperparameters h ON l.model_id = h.model_id WHERE d.id = 1 OR l.log_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT d.id, d.created_at, n.structure, m.result, l.log_info, h.params FROM deep_learning_data d JOIN neural_networks n ON d.id = n.training_data_id JOIN model_results m ON n.network_id = m.model_id JOIN training_logs l ON m.model_id = l.model_id JOIN hyperparameters h ON l.model_id = h.model_id WHERE d.id = 1 AND l.log_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT * FROM deep_learning_data WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT network_id, structure FROM neural_networks WHERE training_data_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT model_id, result FROM model_results WHERE result_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT log_id, log_info FROM training_logs WHERE model_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT hyper_id, params FROM hyperparameters WHERE model_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT * FROM deep_learning_data WHERE created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT network_id, structure FROM neural_networks WHERE training_data_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT model_id, result FROM model_results WHERE model_id = 6 OR model_id = 7;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT log_id, log_info FROM training_logs WHERE model_id = 8 AND log_info LIKE '%error%';",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT hyper_id, params FROM hyperparameters WHERE model_id = 9 AND params->'$.learning_rate' > 0.001;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT network_id, COUNT(*) AS total_models FROM neural_networks GROUP BY network_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT model_id, AVG(result->>'$.accuracy') AS avg_accuracy FROM model_results GROUP BY model_id;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT log_id, COUNT(*) AS total_logs FROM training_logs GROUP BY log_id HAVING total_logs > 5;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT AVG(hyper_id) AS avg_hyper_id FROM hyperparameters;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT network_id, MAX(CAST(structure->'$.layers' AS INT)) AS max_layers FROM neural_networks;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT model_id, MIN(CAST(result->>'$.loss' AS DECIMAL)) AS min_loss FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT log_id, MAX(log_info) AS max_log_info FROM training_logs;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT hyper_id, MIN(CAST(params->'$.epochs' AS INT)) AS min_epochs FROM hyperparameters;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT network_id, AVG(CAST(structure->'$.neurons_per_layer' AS DECIMAL)) AS avg_neurons_per_layer FROM neural_networks;",
  "### TABLEDATA\n\nCREATE TABLE deep_learning_data (\n    id INT PRIMARY KEY,\n    data BLOB,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE neural_networks (\n    network_id INT PRIMARY KEY,\n    structure JSON,\n    training_data_id INT,\n    FOREIGN KEY (training_data_id) REFERENCES deep_learning_data(id)\n);\n\nCREATE TABLE model_results (\n    result_id INT PRIMARY KEY,\n    model_id INT,\n    result JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    model_id INT,\n    log_info TEXT,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\nCREATE TABLE hyperparameters (\n    hyper_id INT PRIMARY KEY,\n    model_id INT,\n    params JSON,\n    FOREIGN KEY (model_id) REFERENCES neural_networks(network_id)\n);\n\n### STATEMENT\n\nSELECT model_id, COUNT(*) AS total_results FROM model_results WHERE result->>'$.status' = 'completed';"
]