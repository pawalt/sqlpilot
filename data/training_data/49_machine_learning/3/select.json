[
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feature_name, result_value FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feature_name, algorithm_name FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, algorithm_name, result_value FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, feature_name, result_value FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE algorithm_name = 'Decision Tree';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE result_value > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE dataset_name = 'iris';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE feature_name LIKE '%length%';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE algorithm_name IN ('Logistic Regression', 'SVM');",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(result_value) FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(result_value) FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(result_value) FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(result_value) AS mean_result_value FROM feature_engineering_results WHERE algorithm_name = 'Decision Tree';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT algorithm_name FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, COUNT(*) FROM feature_engineering_results GROUP BY dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT algorithm_name, AVG(result_value) FROM feature_engineering_results GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT algorithm_name, dataset_name, AVG(result_value) FROM feature_engineering_results GROUP BY algorithm_name, dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results ORDER BY result_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feature_name, algorithm_name, dataset_name, result_value FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE result_value > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, AVG(result_value) FROM feature_engineering_results GROUP BY dataset_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(*) FROM feature_engineering_results GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feature_name, MAX(result_value) FROM feature_engineering_results GROUP BY feature_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feature_name, dataset_name, result_value FROM feature_engineering_results WHERE algorithm_name = 'Random Forest' AND result_value > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT dataset_name FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feature_name, algorithm_name, result_value FROM feature_engineering_results WHERE result_value BETWEEN 0.6 AND 0.8;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feature_name, AVG(result_value) AS avg_result FROM feature_engineering_results GROUP BY feature_name HAVING avg_result > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, COUNT(*) AS total_count FROM feature_engineering_results GROUP BY dataset_name HAVING total_count > 10;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feature_name, algorithm_name, result_value FROM feature_engineering_results ORDER BY result_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, COUNT(*) AS total_count FROM feature_engineering_results GROUP BY dataset_name ORDER BY total_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT algorithm_name, AVG(result_value) AS avg_result FROM feature_engineering_results GROUP BY algorithm_name ORDER BY avg_result DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feature_name, algorithm_name, dataset_name, result_value FROM feature_engineering_results WHERE result_value < 0.3 ORDER BY dataset_name, result_value;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(*) AS total_count FROM feature_engineering_results GROUP BY algorithm_name ORDER BY total_count ASC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE dataset_name LIKE 'dataset_%';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT algorithm_name FROM feature_engineering_results WHERE result_value < 0.4;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feature_name, AVG(result_value) AS avg_result FROM feature_engineering_results GROUP BY feature_name ORDER BY avg_result ASC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT dataset_name, MAX(result_value) AS max_result FROM feature_engineering_results GROUP BY dataset_name ORDER BY max_result DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id UUID PRIMARY KEY,\n    feature_name VARCHAR(255) NOT NULL,\n    algorithm_name VARCHAR(255) NOT NULL,\n    dataset_name VARCHAR(255) NOT NULL,\n    result_value FLOAT NOT NULL\n);\n\n### STATEMENT\n\nSELECT feature_name, algorithm_name, dataset_name, result_value FROM feature_engineering_results WHERE algorithm_name IN ('Logistic Regression', 'Decision Tree');",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT * FROM feature_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT feature_name, feature_value FROM feature_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT id, feature_name, feature_type FROM feature_results WHERE feature_type = 'numeric';",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT * FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT id, model_name, precision, recall FROM model_results WHERE accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT * FROM feature_results WHERE id = 5;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT feature_name, feature_type FROM feature_results WHERE feature_type = 'categorical';",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT * FROM model_results WHERE accuracy < 0.75;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT id, model_name, recall FROM model_results WHERE precision > 0.85;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT * FROM feature_results ORDER BY feature_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT feature_name, feature_value FROM feature_results ORDER BY feature_value ASC;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT * FROM model_results ORDER BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy FROM model_results ORDER BY accuracy DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT AVG(feature_value) FROM feature_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT MAX(accuracy) FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM feature_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT DISTINCT feature_type FROM feature_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT SUM(precision) FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT MIN(accuracy) FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT * FROM feature_results WHERE feature_type = 'numeric';",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT feature_name, feature_value FROM feature_results WHERE feature_value > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT model_name, AVG(accuracy) AS average_accuracy FROM model_results GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy, precision, recall FROM model_results WHERE precision > recall;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT * FROM feature_results INNER JOIN model_results ON feature_results.id = model_results.id;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT * FROM model_results WHERE accuracy > 0.8 ORDER BY recall DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT feature_name, COUNT(*) AS count FROM feature_results GROUP BY feature_name HAVING count > 10;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT feature_name, SUM(feature_value) AS total_value FROM feature_results GROUP BY feature_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT model_name, AVG(accuracy) AS average_accuracy, SUM(precision) AS total_precision FROM model_results GROUP BY model_name HAVING average_accuracy > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT DISTINCT model_name FROM model_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT feature_name, MAX(feature_value) AS max_value FROM feature_results GROUP BY feature_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT feature_name, AVG(feature_value) AS avg_value FROM feature_results GROUP BY feature_name HAVING avg_value < 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT count(*) AS total_results FROM feature_results WHERE feature_type = 'categorical';",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT model_name, MIN(accuracy) AS min_accuracy FROM model_results GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT feature_name, COUNT(*) AS count FROM feature_results WHERE feature_value BETWEEN 0.3 AND 0.7 GROUP BY feature_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT model_name, SUM(accuracy) AS total_accuracy FROM model_results GROUP BY model_name HAVING total_accuracy > 3;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT model_name, MAX(precision) AS max_precision, MIN(recall) AS min_recall FROM model_results GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT * FROM feature_results WHERE id IN (SELECT id FROM model_results WHERE accuracy > 0.9);",
  "### TABLEDATA\n\nCREATE TABLE feature_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(255),\n    feature_type VARCHAR(100),\n    feature_value DOUBLE\n);\n\nCREATE TABLE model_results (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(255),\n    accuracy DOUBLE,\n    precision DOUBLE,\n    recall DOUBLE\n);\n\n### STATEMENT\n\nSELECT feature_name, AVG(feature_value) AS avg_value FROM feature_results GROUP BY feature_name ORDER BY avg_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT feature_name, feature_value FROM feature_engineering_results WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, creation_date FROM feature_engineering_results WHERE feature_value > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance_metrics;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, metric_name, metric_value FROM model_performance_metrics WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT metric_name, evaluation_date FROM model_performance_metrics WHERE metric_value < 0.8;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM model_parameters;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, parameter_name, parameter_value FROM model_parameters WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT parameter_name, last_updated FROM model_parameters WHERE parameter_value > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, feature_name, feature_value, model_name, creation_date FROM feature_engineering_results WHERE model_name = 'Model1';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, feature_name, feature_value, model_name, creation_date FROM feature_engineering_results WHERE creation_date >= '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, feature_name, feature_value, model_name, creation_date FROM feature_engineering_results WHERE feature_name LIKE '%feature%';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, model_name, metric_name, metric_value, evaluation_date FROM model_performance_metrics WHERE model_name = 'Model2';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, model_name, metric_name, metric_value, evaluation_date FROM model_performance_metrics WHERE evaluation_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, model_name, parameter_name, parameter_value, last_updated FROM model_parameters WHERE model_name = 'Model3';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, model_name, parameter_name, parameter_value, last_updated FROM model_parameters WHERE last_updated >= '2020-01-01';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, feature_name, feature_value FROM feature_engineering_results WHERE feature_value BETWEEN 0.3 AND 0.7;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, metric_name, metric_value FROM model_performance_metrics WHERE metric_name IN ('accuracy', 'precision');",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT parameter_name, parameter_value FROM model_parameters WHERE parameter_name IN ('learning_rate', 'batch_size');",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, model_name, parameter_name, parameter_value FROM model_parameters WHERE parameter_name = 'learning_rate' AND parameter_value > 0.01;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE feature_name = 'feature1' AND model_name = 'Model1';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT feature_name, feature_value FROM feature_engineering_results WHERE feature_value > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, AVG(feature_value) AS avg_feature_value FROM feature_engineering_results GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, COUNT(*) AS num_records FROM feature_engineering_results GROUP BY model_name HAVING num_records > 10;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, SUM(feature_value) AS total_feature_value FROM feature_engineering_results GROUP BY model_name ORDER BY total_feature_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance_metrics WHERE metric_name = 'accuracy';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, metric_value FROM model_performance_metrics WHERE metric_name = 'accuracy' AND model_name LIKE 'model%';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, MAX(metric_value) AS max_metric_value FROM model_performance_metrics GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, metric_name, AVG(metric_value) AS avg_metric_value FROM model_performance_metrics GROUP BY model_name, metric_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, COUNT(*) AS num_metrics FROM model_performance_metrics GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance_metrics WHERE evaluation_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, parameter_value FROM model_parameters WHERE parameter_name = 'learning_rate';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, parameter_name, parameter_value FROM model_parameters WHERE model_name = 'model_A';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, MIN(parameter_value) AS min_parameter_value FROM model_parameters GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, AVG(parameter_value) AS avg_parameter_value FROM model_parameters GROUP BY model_name HAVING avg_parameter_value > 0.1;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, parameter_name, parameter_value, last_updated FROM model_parameters WHERE last_updated > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT feature_name, feature_value, model_name FROM feature_engineering_results WHERE model_name LIKE 'model%';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, MAX(parameter_value) AS max_parameter_value FROM model_parameters GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, MIN(metric_value) AS min_metric_value FROM model_performance_metrics GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, COUNT(DISTINCT metric_name) AS num_unique_metrics FROM model_performance_metrics GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id INT PRIMARY KEY,\n    feature_name VARCHAR(50),\n    feature_value FLOAT,\n    model_name VARCHAR(50),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE model_performance_metrics (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    evaluation_date DATE\n);\n\nCREATE TABLE model_parameters (\n    id INT PRIMARY KEY,\n    model_name VARCHAR(50),\n    parameter_name VARCHAR(50),\n    parameter_value FLOAT,\n    last_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT model_name, parameter_value, last_updated FROM model_parameters WHERE last_updated > '2022-01-01' AND parameter_value < 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT id, feature_name, feature_value FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT feature_name, algorithm_used FROM feature_engineering_results WHERE feature_value > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM algorithms;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT id, algorithm_name FROM algorithms WHERE complexity_level = 'High';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, optimization_type FROM algorithms WHERE id = 3;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM datasets;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size FROM datasets WHERE dataset_type = 'Image';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT id, model_name, accuracy FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy, f1_score FROM model_performance WHERE accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE algorithm_used = 'Random Forest';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT feature_name, feature_value FROM feature_engineering_results WHERE result_data->>'feature_type' = 'Categorical';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM algorithms WHERE optimization_type IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, complexity_level FROM algorithms WHERE optimization_type = 'Gradient Descent';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM datasets WHERE dataset_size > 1000;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_type FROM datasets WHERE dataset_size < 500;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance WHERE accuracy > 0.7 AND f1_score > 0.6;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, dataset_id FROM model_performance WHERE f1_score < 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE feature_value BETWEEN 0.2 AND 0.8;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT feature_name, algorithm_used FROM feature_engineering_results WHERE result_data::JSONB @> '{\"feature_importance\": 0.9}';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE feature_value > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT feature_name, feature_value FROM feature_engineering_results WHERE algorithm_used = 'Random Forest';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, optimization_type FROM algorithms WHERE complexity_level = 'High';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM datasets WHERE dataset_type = 'Image';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy, f1_score FROM model_performance WHERE accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT dataset_name, dataset_size FROM datasets WHERE dataset_size >= 1000;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM algorithms WHERE optimization_type = 'Gradient Descent';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT dataset_name FROM datasets;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT id, result_data FROM feature_engineering_results WHERE algorithm_used = 'Logistic Regression';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT AVG(accuracy) FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, complexity_level FROM algorithms WHERE complexity_level = 'Low';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT MAX(feature_value) FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT model_name, accuracy, f1_score FROM model_performance WHERE dataset_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT SUM(dataset_size) FROM datasets;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT algorithm_name) FROM algorithms;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT * FROM datasets WHERE dataset_size BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT MIN(feature_value) FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(*) FROM algorithms GROUP BY algorithm_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    id SERIAL PRIMARY KEY,\n    feature_name VARCHAR(50) NOT NULL,\n    feature_value DOUBLE PRECISION,\n    algorithm_used VARCHAR(50),\n    result_data JSONB\n);\n\nCREATE TABLE algorithms (\n    id SERIAL PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    optimization_type VARCHAR(20),\n    complexity_level VARCHAR(20)\n);\n\nCREATE TABLE datasets (\n    id SERIAL PRIMARY KEY,\n    dataset_name VARCHAR(50) NOT NULL,\n    dataset_type VARCHAR(20),\n    dataset_size INTEGER\n);\n\nCREATE TABLE model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(50) NOT NULL,\n    accuracy DOUBLE PRECISION,\n    f1_score DOUBLE PRECISION,\n    dataset_id INTEGER REFERENCES datasets(id)\n);\n\n### STATEMENT\n\nSELECT AVG(f1_score) AS average_f1_score FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT Id, Feature1, Feature3 FROM feature_engineering_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT Feature2 FROM feature_engineering_results WHERE Feature1 > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT ModelId, Accuracy FROM model_performance WHERE Precision > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM dataset_statistics;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT DatasetId, Min, Max FROM dataset_statistics WHERE Mean < 0;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM training_logs;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT LogId, Message FROM training_logs WHERE TIMESTAMP >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM prediction_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT ModelId, InputFeatures, PredictedClass FROM prediction_results WHERE ModelId = 1;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT Id, Feature1, Feature2 FROM feature_engineering_results WHERE Id < 10;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT ModelId, Accuracy FROM model_performance ORDER BY Accuracy DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT DatasetId, Mean, StdDev FROM dataset_statistics WHERE Min < 0 AND Max > 1;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT MAX(Accuracy) FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT ModelId FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT LogId, Message FROM training_logs ORDER BY Timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT ModelId, COUNT(*) FROM prediction_results GROUP BY ModelId;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT ModelId, AVG(Precision) AS AvgPrecision FROM model_performance GROUP BY ModelId;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE Feature1 > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT Feature1,Feature2 FROM feature_engineering_results WHERE Feature1 < 0.5 AND Feature2 > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM model_performance WHERE Accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT ModelId,Accuracy,Recall FROM model_performance WHERE Precision > 0.75;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM dataset_statistics WHERE Mean < 50 AND Max > 100;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT DatasetId,StdDev FROM dataset_statistics WHERE Min < 10;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM training_logs WHERE Message LIKE '%error%';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT LogId,Timestamp FROM training_logs WHERE Timestamp BETWEEN '2021-01-01' AND '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM prediction_results WHERE PredictedClass = 1;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT PredictionId,ModelId,InputFeatures FROM prediction_results WHERE ModelId = 2;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM feature_engineering_results WHERE Feature1 + Feature2 > Feature3;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT ModelId,Accuracy FROM model_performance WHERE Precision * Recall > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM dataset_statistics ORDER BY Mean DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT LogId,Message FROM training_logs ORDER BY Timestamp ASC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT ModelId FROM prediction_results;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT LogId,Message FROM training_logs LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT PredictionId,ModelId,InputFeatures FROM prediction_results ORDER BY PredictionId DESC;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance WHERE Accuracy > Precision AND Recall > Precision;",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT * FROM dataset_statistics WHERE StdDev > 5 AND (Min < 0 OR Max > 100);",
  "### TABLEDATA\n\nCREATE TABLE feature_engineering_results (\n    Id INT PRIMARY KEY,\n    Feature1 FLOAT,\n    Feature2 FLOAT,\n    Feature3 FLOAT\n);\n\nCREATE TABLE model_performance (\n    ModelId INT PRIMARY KEY,\n    Accuracy FLOAT,\n    Precision FLOAT,\n    Recall FLOAT\n);\n\nCREATE TABLE dataset_statistics (\n    DatasetId INT PRIMARY KEY,\n    Mean FLOAT,\n    StdDev FLOAT,\n    Min FLOAT,\n    Max FLOAT\n);\n\nCREATE TABLE training_logs (\n    LogId INT PRIMARY KEY,\n    Timestamp TIMESTAMP,\n    Message VARCHAR\n);\n\nCREATE TABLE prediction_results (\n    PredictionId INT PRIMARY KEY,\n    ModelId INT,\n    InputFeatures TEXT,\n    PredictedClass INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM prediction_results WHERE ModelId = 1;"
]