[
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM training_data LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, label FROM training_data WHERE feature_1 > 0.5",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT feature_1, feature_2 FROM training_data WHERE label = 'positive'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT AVG(feature_1), MAX(feature_2) FROM training_data",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_3 FROM training_data WHERE label LIKE '%class%'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM training_data WHERE feature_1 < feature_2",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, label FROM training_data ORDER BY label ASC",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE id BETWEEN 100 AND 200",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_1 FROM training_data WHERE label = 'negative'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT DISTINCT label FROM training_data",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, label, feature_2 FROM training_data WHERE feature_2 IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT AVG(feature_1), SUM(feature_2) FROM training_data WHERE label = 'positive'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT feature_1 + feature_2, feature_3 - 5 FROM training_data WHERE id = 50",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, label, feature_1 * feature_2 AS product FROM training_data WHERE label = 'positive'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, label, COUNT(*) AS count FROM training_data GROUP BY label",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, label, ROUND(feature_1) AS rounded_feature FROM training_data",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id FROM training_data WHERE feature_1 = feature_2",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, label FROM training_data WHERE label IN ('positive', 'negative')",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_1, feature_2 FROM training_data WHERE id < 50",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT MAX(feature_1), MIN(feature_2) FROM training_data",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE feature_1 > 0.5 AND feature_2 < 0.3",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_1, label FROM training_data WHERE feature_3 = 0.7",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT AVG(feature_1), MAX(feature_2) FROM training_data WHERE label='positive'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_1 FROM training_data WHERE feature_2 BETWEEN 0.2 AND 0.5",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM training_data WHERE feature_1 < feature_2",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT DISTINCT label FROM training_data",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT SUM(feature_1) FROM training_data WHERE label='negative'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM training_data ORDER BY feature_2 DESC",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_2, label FROM training_data WHERE feature_1 <> 0.0",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT MAX(feature_1), MIN(feature_3) FROM training_data WHERE label='neutral'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_1, feature_2 FROM training_data WHERE label='positive' ORDER BY feature_1 ASC",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_3 FROM training_data WHERE feature_2 >= 0.4 AND label='negative'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT AVG(feature_1), SUM(feature_2) FROM training_data WHERE label='positive'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT label) FROM training_data",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE feature_3 < 0.5 OR label='neutral'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_1, feature_2 FROM training_data WHERE feature_1 + feature_2 > 1.0",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_3 FROM training_data WHERE feature_2 IN (0.1, 0.2, 0.3)",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT DISTINCT label FROM training_data ORDER BY label DESC",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_1, feature_3 FROM training_data WHERE label='neutral' ORDER BY feature_1 DESC",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT id, feature_2, label FROM training_data WHERE feature_1 NOT BETWEEN 0.3 AND 0.6",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id INT PRIMARY KEY,\n  feature_1 FLOAT,\n  feature_2 FLOAT,\n  feature_3 FLOAT,\n  label VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT AVG(feature_2), MAX(feature_1) FROM training_data WHERE label='positive'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT feature_1, feature_2 FROM training_data WHERE label = 'positive';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(feature_1) FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM training_data WHERE label = 'negative';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_parameters;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, optimizer FROM model_parameters WHERE regularization > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(learning_rate) FROM model_parameters;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM model_parameters WHERE optimizer = 'SGD';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE label IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT feature_1, feature_2 FROM training_data WHERE label IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT DISTINCT label FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, learning_rate, optimizer FROM model_parameters WHERE regularization = 0.1;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT MAX(regularization) FROM model_parameters;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT MIN(learning_rate) FROM model_parameters;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(regularization) FROM model_parameters;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, optimizer, regularization FROM model_parameters WHERE learning_rate > 0.01;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE feature_1 > 0.5 AND feature_2 < 0.3;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM model_parameters WHERE optimizer = 'Adam';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT feature_1, feature_2, label FROM training_data WHERE feature_1 < feature_2;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, learning_rate, optimizer, regularization FROM model_parameters WHERE learning_rate < 0.1;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM training_data WHERE feature_1 > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE id = 10;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT feature_1, AVG(feature_2) FROM training_data GROUP BY feature_1;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE feature_1 > 0.5 AND feature_2 < 0.8;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM training_data WHERE label = 'positive';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, learning_rate FROM model_parameters WHERE optimizer = 'SGD';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT MAX(feature_1), MIN(feature_2) FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, regularization FROM model_parameters WHERE regularization >= 0.01;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE feature_1 < 0.3 ORDER BY feature_2 DESC;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(feature_1) AS avg_feature1, SUM(feature_2) AS sum_feature2 FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT label) FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id FROM model_parameters WHERE regularization IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT feature_1, feature_2 FROM training_data WHERE label = 'negative';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(feature_1), STDDEV(feature_2) FROM training_data WHERE feature_1 > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE id IN (1, 3, 5, 7, 9);",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, learning_rate, regularization FROM model_parameters WHERE learning_rate BETWEEN 0.01 AND 0.1;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM training_data WHERE feature_1 > 0.5 OR feature_2 < 0.2;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, AVG(learning_rate) AS avg_learning_rate FROM model_parameters GROUP BY model_id HAVING avg_learning_rate > 0.05;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT DISTINCT label FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT feature_1 + feature_2 AS feature_sum FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, COUNT(*) FROM model_parameters GROUP BY model_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id SERIAL PRIMARY KEY,\n    feature_1 FLOAT,\n    feature_2 FLOAT,\n    label VARCHAR\n);\n\nCREATE TABLE model_parameters (\n    model_id UUID PRIMARY KEY,\n    learning_rate FLOAT,\n    optimizer VARCHAR,\n    regularization FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(feature_1), SUM(feature_2), MAX(feature_1), MIN(feature_2) FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT input_data FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_parameters;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT parameter_name, parameter_value FROM model_parameters;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, accuracy FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, loss FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT input_data, target_data FROM training_data WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT parameter_value FROM model_parameters WHERE parameter_name = 'learning_rate';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance WHERE accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance WHERE model_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT input_data, target_data FROM training_data WHERE id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data ORDER BY id DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT parameter_name, parameter_value FROM model_parameters ORDER BY parameter_value ASC;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE input_data LIKE '%pattern%';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, accuracy FROM model_performance WHERE accuracy BETWEEN 0.7 AND 0.9;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_parameters WHERE parameter_name IN ('learning_rate', 'batch_size');",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(accuracy) AS avg_accuracy FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_records FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT MAX(loss) AS max_loss FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance WHERE loss = (SELECT MAX(loss) FROM model_performance);",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT input_data, target_data FROM training_data WHERE id > 10 AND id < 20;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_parameters WHERE parameter_name = 'learning_rate';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT parameter_name, parameter_value FROM model_parameters WHERE parameter_value > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, accuracy FROM model_performance WHERE model_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, loss FROM model_performance WHERE accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT t.id, t.input_data, m.parameter_name FROM training_data t JOIN model_parameters m ON t.id = m.id;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT t.id, t.input_data, p.parameter_value FROM training_data t LEFT JOIN model_parameters p ON t.id = p.id;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT t.input_data, p.parameter_name, m.accuracy FROM training_data t JOIN model_parameters p ON t.id = p.id JOIN model_performance m ON t.id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT t.input_data, p.parameter_value, m.loss FROM training_data t LEFT JOIN model_parameters p ON t.id = p.id LEFT JOIN model_performance m ON t.id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT t.id, t.input_data, p.parameter_name, m.accuracy FROM training_data t JOIN model_parameters p ON t.id = p.id LEFT JOIN model_performance m ON t.id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT t.id, t.input_data, p.parameter_value, m.loss FROM training_data t LEFT JOIN model_parameters p ON t.id = p.id JOIN model_performance m ON t.id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT t.id, t.input_data, p.parameter_name, m.accuracy, m.loss FROM training_data t JOIN model_parameters p ON t.id = p.id JOIN model_performance m ON t.id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT t.id, t.target_data, p.parameter_name, m.accuracy FROM training_data t JOIN model_parameters p ON t.id = p.id JOIN model_performance m ON m.model_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT t.input_data, p.parameter_value, m.loss FROM training_data t LEFT JOIN model_parameters p ON t.id = p.id JOIN model_performance m ON t.id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT t.id, t.input_data, p.parameter_name, m.accuracy FROM training_data t JOIN model_parameters p ON t.id = p.id LEFT JOIN model_performance m ON t.id = m.model_id WHERE m.accuracy > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT t.id, t.input_data, p.parameter_value, m.loss FROM training_data t JOIN model_parameters p ON t.id = p.id LEFT JOIN model_performance m ON t.id = m.model_id WHERE m.loss < 0.1;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(accuracy) AS average_accuracy FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT MAX(loss) AS max_loss FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(loss) AS average_loss FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  input_data TEXT,\n  target_data TEXT\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name TEXT,\n  parameter_value FLOAT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT,\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_records FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT id, feature1, label FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT id, feature1, feature2, label FROM training_data WHERE label = 'A';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_parameters;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT id, parameter_name, parameter_value FROM model_parameters;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT id, parameter_name, parameter_value FROM model_parameters WHERE parameter_name = 'learning_rate';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_logs;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT id, log_timestamp, log_message FROM training_logs;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT id, log_timestamp FROM training_logs WHERE log_timestamp > '2022-01-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT id, model_id, accuracy FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT id, model_id, accuracy, loss FROM model_performance WHERE model_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT training_data.id, feature1, feature2, label, parameter_name, parameter_value FROM training_data JOIN model_parameters ON training_data.id = model_parameters.model_id;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT training_data.id, feature1, feature2, label, accuracy, loss FROM training_data JOIN model_performance ON training_data.id = model_performance.model_id;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT training_data.id, feature1, feature2, label, parameter_name, parameter_value, accuracy, loss FROM training_data JOIN model_parameters ON training_data.id = model_parameters.model_id JOIN model_performance ON training_data.id = model_performance.model_id;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT training_data.id, feature1, feature2, label, parameter_name, parameter_value, accuracy FROM training_data JOIN model_parameters ON training_data.id = model_parameters.model_id JOIN model_performance ON training_data.id = model_performance.model_id WHERE accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT training_data.id AS training_id, model_parameters.id AS parameter_id, feature1, parameter_name, accuracy FROM training_data JOIN model_parameters ON training_data.id = model_parameters.model_id JOIN model_performance ON training_data.id = model_performance.model_id WHERE accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT avg(accuracy) FROM model_performance;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT count(*) FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT label, count(*) FROM training_data GROUP BY label;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT feature1, avg(accuracy) FROM training_data JOIN model_performance ON training_data.id = model_performance.model_id GROUP BY feature1 HAVING avg(accuracy) > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE feature1 > 0.5",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT feature1, feature2, label FROM training_data WHERE label = 'spam'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_parameters WHERE parameter_name LIKE 'learning%'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, AVG(accuracy) AS avg_accuracy FROM model_performance GROUP BY model_id HAVING AVG(accuracy) > 0.8",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT training_logs.log_timestamp, training_logs.log_message FROM training_logs INNER JOIN training_data ON training_data.id = training_logs.id",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, COUNT(*) AS total_logs FROM training_logs GROUP BY model_id",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE id = (SELECT MAX(id) FROM training_data)",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT label, COUNT(*) AS total FROM training_data WHERE label IN ('spam', 'ham') GROUP BY label",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT feature1, MIN(feature2) AS min_feature2 FROM training_data GROUP BY feature1",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance WHERE accuracy + loss < 1.0",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT feature1, feature2, COUNT(*) AS total FROM training_data GROUP BY feature1, feature2",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT id, parameter_name, parameter_value FROM model_parameters WHERE parameter_value > 0.5",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, MAX(accuracy) AS max_accuracy FROM model_performance GROUP BY model_id",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT DISTINCT label FROM training_data",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, SUM(accuracy) AS total_accuracy FROM model_performance GROUP BY model_id",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT id, parameter_name, parameter_value, model_id FROM model_parameters INNER JOIN training_data ON model_parameters.model_id = training_data.id",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM model_performance WHERE accuracy IS NULL OR loss IS NULL",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(feature1) AS avg_feature1, AVG(feature2) AS avg_feature2 FROM training_data",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT model_id, AVG(accuracy) AS avg_accuracy, AVG(loss) AS avg_loss FROM model_performance GROUP BY model_id",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n  id SERIAL PRIMARY KEY,\n  feature1 FLOAT NOT NULL,\n  feature2 FLOAT NOT NULL,\n  label VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE model_parameters (\n  id SERIAL PRIMARY KEY,\n  parameter_name VARCHAR(50) NOT NULL,\n  parameter_value FLOAT NOT NULL,\n  model_id INT REFERENCES training_data(id)\n);\n\nCREATE TABLE training_logs (\n  id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT\n);\n\nCREATE TABLE model_performance (\n  id SERIAL PRIMARY KEY,\n  model_id INT REFERENCES training_data(id),\n  accuracy FLOAT,\n  loss FLOAT\n);\n\n### STATEMENT\n\nSELECT id, parameter_name, parameter_value, model_id FROM model_parameters JOIN training_data ON model_parameters.model_id = training_data.id",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM training_data;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT id, features FROM training_data WHERE label='spam';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT model_id, learning_rate, layers FROM model_parameters WHERE model_id=1;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM training_logs WHERE accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT result_id, evaluation_date FROM evaluation_results ORDER BY evaluation_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM predictions WHERE predicted_label='positive';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT training_date, accuracy FROM training_logs WHERE training_date BETWEEN '2022-01-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT id, features, label FROM training_data WHERE id=10;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM model_parameters;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM evaluation_results WHERE precision >= 0.9;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT prediction_id, input_data FROM predictions WHERE input_data LIKE '%keyword%';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT model_id, learning_rate FROM model_parameters WHERE layers = 3;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(accuracy) FROM training_logs;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(precision) FROM evaluation_results;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT MIN(accuracy) FROM training_logs;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT id, features, label FROM training_data WHERE features IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM predictions WHERE predicted_label IN ('positive', 'negative');",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT training_date, accuracy FROM training_logs WHERE accuracy < 0.5 ORDER BY accuracy ASC;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT result_id, evaluation_date, precision FROM evaluation_results WHERE precision < 0.6;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT predicted_label FROM predictions;",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT id, label FROM training_data WHERE features LIKE '%pattern%' OR label='spam';",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM training_data WHERE label = 'A' AND features LIKE '%pattern%'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT model_id, learning_rate FROM model_parameters WHERE layers > 3",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT log_id, accuracy FROM training_logs WHERE training_date = '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT result_id, evaluation_date FROM evaluation_results WHERE precision >= 0.8",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM predictions WHERE predicted_label = 'B' AND input_data LIKE '%test%'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM training_data",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT model_id, AVG(learning_rate) FROM model_parameters GROUP BY model_id",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(accuracy) FROM training_logs WHERE accuracy > 0.9",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(precision) FROM evaluation_results",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT label FROM training_data",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM predictions ORDER BY prediction_id DESC",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM training_data LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT SUM(learning_rate) FROM model_parameters",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(accuracy) FROM training_logs WHERE training_date BETWEEN '2022-01-01' AND '2022-01-31'",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM model_parameters INNER JOIN training_data ON model_parameters.model_id = training_data.id",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT prediction_id, predicted_label FROM predictions WHERE input_data IN ('data_1', 'data_2', 'data_3')",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(layers) FROM model_parameters",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT model_id, learning_rate * 2 AS adjusted_rate FROM model_parameters",
  "### TABLEDATA\n\nCREATE TABLE training_data (\n    id INT PRIMARY KEY,\n    features TEXT,\n    label TEXT\n)\n\nCREATE TABLE model_parameters (\n    model_id INT PRIMARY KEY,\n    learning_rate FLOAT,\n    layers INT\n)\n\nCREATE TABLE training_logs (\n    log_id INT PRIMARY KEY,\n    training_date DATE,\n    accuracy FLOAT\n)\n\nCREATE TABLE evaluation_results (\n    result_id INT PRIMARY KEY,\n    evaluation_date DATE,\n    precision FLOAT\n)\n\nCREATE TABLE predictions (\n    prediction_id INT PRIMARY KEY,\n    input_data TEXT,\n    predicted_label TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(precision) FROM evaluation_results WHERE evaluation_date > '2022-01-01'"
]