<t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT * FROM hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select * from hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT employee_id, first_name, last_name FROM hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select employee_id, first_name, last_name from hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT employee_id, first_name, last_name, department FROM hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select employee_id, first_name, last_name, department from hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT * FROM hr_employees WHERE department = 'IT';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select * from hr_employees where department = 'it';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT * FROM hr_employees WHERE hire_date > '2021-01-01';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select * from hr_employees where hire_date > '2021-01-01';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT * FROM hr_employees WHERE department = 'HR' AND hire_date > '2020-01-01';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select * from hr_employees where department = 'hr' and hire_date > '2020-01-01';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT first_name, last_name FROM hr_employees WHERE department = 'Marketing';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select first_name, last_name from hr_employees where department = 'marketing';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT * FROM hr_employees WHERE first_name LIKE 'J%';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select * from hr_employees where first_name like 'j%';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT * FROM hr_employees WHERE last_name = 'Doe';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select * from hr_employees where last_name = 'doe';</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT * FROM hr_employees WHERE department IS NULL;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select * from hr_employees where department is null;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT COUNT(*) FROM hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select count(*) from hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT MAX(hire_date) FROM hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select max(hire_date) from hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT MIN(hire_date) FROM hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select min(hire_date) from hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT AVG(employee_id) FROM hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select avg(employee_id) from hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT COUNT(*) AS total_employees FROM hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select count(*) as total_employees from hr_employees;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT first_name, last_name, hire_date FROM hr_employees ORDER BY hire_date DESC;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select first_name, last_name, hire_date from hr_employees order by hire_date desc;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT department, COUNT(*) AS total_employees FROM hr_employees GROUP BY department;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select department, count(*) as total_employees from hr_employees group by department;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT department, AVG(employee_id) AS avg_employee_id FROM hr_employees GROUP BY department;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select department, avg(employee_id) as avg_employee_id from hr_employees group by department;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT department, hire_date, COUNT(*) AS num_employees FROM hr_employees GROUP BY department, hire_date;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select department, hire_date, count(*) as num_employees from hr_employees group by department, hire_date;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>SELECT department, hire_date, COUNT(*) AS num_employees FROM hr_employees GROUP BY department, hire_date HAVING COUNT(*) > 1;</stat><divider><t>CREATE TABLE hr_employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50),
    hire_date DATE
);</t><stat>select department, hire_date, count(*) as num_employees from hr_employees group by department, hire_date having count(*) > 1;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select * from employees;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select * from employees;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT name, age, position FROM employees;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select name, age, position from employees;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT name, age, position FROM employees;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select name, age, position from employees;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT * FROM employees WHERE age > 30;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select * from employees where age > 30;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT * FROM employees WHERE age > 30;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select * from employees where age > 30;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT name, salary FROM employees WHERE position = 'Manager';</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select name, salary from employees where position = 'manager';</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT name, salary FROM employees WHERE position = 'Manager';</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select name, salary from employees where position = 'manager';</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select * from departments;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select * from departments;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT name, location FROM departments;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select name, location from departments;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT name, location FROM departments;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select name, location from departments;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT * FROM departments WHERE location = 'New York';</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select * from departments where location = 'new york';</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT * FROM departments WHERE location = 'New York';</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select * from departments where location = 'new york';</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT e.name, d.name FROM employees e INNER JOIN departments d ON e.id = d.id;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select e.name, d.name from employees e inner join departments d on e.id = d.id;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT e.name, d.name FROM employees e INNER JOIN departments d ON e.id = d.id;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select e.name, d.name from employees e inner join departments d on e.id = d.id;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT e.name, e.position, d.location FROM employees e INNER JOIN departments d ON e.id = d.id;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select e.name, e.position, d.location from employees e inner join departments d on e.id = d.id;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT e.name, e.position, d.location FROM employees e INNER JOIN departments d ON e.id = d.id;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select e.name, e.position, d.location from employees e inner join departments d on e.id = d.id;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT e.name AS employee_name, d.name AS department_name FROM employees e INNER JOIN departments d ON e.id = d.id;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select e.name as employee_name, d.name as department_name from employees e inner join departments d on e.id = d.id;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT e.name AS employee_name, d.name AS department_name FROM employees e INNER JOIN departments d ON e.id = d.id;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select e.name as employee_name, d.name as department_name from employees e inner join departments d on e.id = d.id;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT e.name, SUM(e.salary) AS total_salary FROM employees e GROUP BY e.name;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select e.name, sum(e.salary) as total_salary from employees e group by e.name;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT e.name, SUM(e.salary) AS total_salary FROM employees e GROUP BY e.name;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select e.name, sum(e.salary) as total_salary from employees e group by e.name;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT d.name, COUNT(e.id) AS num_employees FROM departments d LEFT JOIN employees e ON d.id = e.id GROUP BY d.name;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select d.name, count(e.id) as num_employees from departments d left join employees e on d.id = e.id group by d.name;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT d.name, COUNT(e.id) AS num_employees FROM departments d LEFT JOIN employees e ON d.id = e.id GROUP BY d.name;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select d.name, count(e.id) as num_employees from departments d left join employees e on d.id = e.id group by d.name;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT d.name, MAX(e.salary) AS highest_salary FROM departments d LEFT JOIN employees e ON d.id = e.id GROUP BY d.name;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select d.name, max(e.salary) as highest_salary from departments d left join employees e on d.id = e.id group by d.name;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT d.name, MAX(e.salary) AS highest_salary FROM departments d LEFT JOIN employees e ON d.id = e.id GROUP BY d.name;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select d.name, max(e.salary) as highest_salary from departments d left join employees e on d.id = e.id group by d.name;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT e.name, AVG(e.salary) AS avg_salary FROM employees e GROUP BY e.name HAVING AVG(e.salary) > 50000;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select e.name, avg(e.salary) as avg_salary from employees e group by e.name having avg(e.salary) > 50000;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT e.name, AVG(e.salary) AS avg_salary FROM employees e GROUP BY e.name HAVING AVG(e.salary) > 50000;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select e.name, avg(e.salary) as avg_salary from employees e group by e.name having avg(e.salary) > 50000;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT * FROM employees ORDER BY age DESC;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select * from employees order by age desc;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT * FROM employees ORDER BY age DESC;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select * from employees order by age desc;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT * FROM employees ORDER BY salary ASC;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select * from employees order by salary asc;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT * FROM employees ORDER BY salary ASC;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select * from employees order by salary asc;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT * FROM employees LIMIT 10;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select * from employees limit 10;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT * FROM employees LIMIT 10;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select * from employees limit 10;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT * FROM employees OFFSET 5;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select * from employees offset 5;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT * FROM employees OFFSET 5;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select * from employees offset 5;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT DISTINCT position FROM employees;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select distinct position from employees;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT DISTINCT position FROM employees;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select distinct position from employees;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>SELECT MAX(age) AS max_age, MIN(age) AS min_age FROM employees;</stat><divider><t>CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))

CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))</t><stat>select max(age) as max_age, min(age) as min_age from employees;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>SELECT MAX(age) AS max_age, MIN(age) AS min_age FROM employees;</stat><divider><t>CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50))

CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, position VARCHAR(50), salary DECIMAL(10,2))</t><stat>select max(age) as max_age, min(age) as min_age from employees;</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT * FROM employee WHERE id = 1</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select * from employee where id = 1</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT * FROM employee WHERE id = 1</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select * from employee where id = 1</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT * FROM employee WHERE id = 1</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select * from employee where id = 1</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT * FROM employee WHERE id = 1</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select * from employee where id = 1</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT * FROM employee WHERE id = 1</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select * from employee where id = 1</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT * FROM employee WHERE id = 1</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select * from employee where id = 1</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT id, name FROM employee WHERE department = 'HR'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select id, name from employee where department = 'hr'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT id, name FROM employee WHERE department = 'HR'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select id, name from employee where department = 'hr'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT id, name FROM employee WHERE department = 'HR'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select id, name from employee where department = 'hr'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT id, name FROM employee WHERE department = 'HR'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select id, name from employee where department = 'hr'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT id, name FROM employee WHERE department = 'HR'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select id, name from employee where department = 'hr'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT id, name FROM employee WHERE department = 'HR'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select id, name from employee where department = 'hr'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT name, department FROM employee ORDER BY name ASC</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select name, department from employee order by name asc</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT name, department FROM employee ORDER BY name ASC</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select name, department from employee order by name asc</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT name, department FROM employee ORDER BY name ASC</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select name, department from employee order by name asc</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT name, department FROM employee ORDER BY name ASC</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select name, department from employee order by name asc</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT name, department FROM employee ORDER BY name ASC</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select name, department from employee order by name asc</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT name, department FROM employee ORDER BY name ASC</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select name, department from employee order by name asc</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT * FROM department WHERE location = 'New York'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select * from department where location = 'new york'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT * FROM department WHERE location = 'New York'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select * from department where location = 'new york'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT * FROM department WHERE location = 'New York'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select * from department where location = 'new york'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT * FROM department WHERE location = 'New York'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select * from department where location = 'new york'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT * FROM department WHERE location = 'New York'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select * from department where location = 'new york'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT * FROM department WHERE location = 'New York'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select * from department where location = 'new york'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT id, name FROM department WHERE name LIKE '%Eng%'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select id, name from department where name like '%eng%'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT id, name FROM department WHERE name LIKE '%Eng%'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select id, name from department where name like '%eng%'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT id, name FROM department WHERE name LIKE '%Eng%'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select id, name from department where name like '%eng%'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT id, name FROM department WHERE name LIKE '%Eng%'</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select id, name from department where name like '%eng%'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT id, name FROM department WHERE name LIKE '%Eng%'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select id, name from department where name like '%eng%'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT id, name FROM department WHERE name LIKE '%Eng%'</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select id, name from department where name like '%eng%'</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT employee.id, employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select employee.id, employee.name, salary.amount from employee join salary on employee.id = salary.employee_id</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT employee.id, employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select employee.id, employee.name, salary.amount from employee join salary on employee.id = salary.employee_id</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT employee.id, employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select employee.id, employee.name, salary.amount from employee join salary on employee.id = salary.employee_id</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT employee.id, employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select employee.id, employee.name, salary.amount from employee join salary on employee.id = salary.employee_id</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT employee.id, employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select employee.id, employee.name, salary.amount from employee join salary on employee.id = salary.employee_id</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT employee.id, employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select employee.id, employee.name, salary.amount from employee join salary on employee.id = salary.employee_id</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 50000</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select employee.name, salary.amount from employee join salary on employee.id = salary.employee_id where salary.amount > 50000</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 50000</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select employee.name, salary.amount from employee join salary on employee.id = salary.employee_id where salary.amount > 50000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 50000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select employee.name, salary.amount from employee join salary on employee.id = salary.employee_id where salary.amount > 50000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 50000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select employee.name, salary.amount from employee join salary on employee.id = salary.employee_id where salary.amount > 50000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 50000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select employee.name, salary.amount from employee join salary on employee.id = salary.employee_id where salary.amount > 50000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT employee.name, salary.amount FROM employee JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 50000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select employee.name, salary.amount from employee join salary on employee.id = salary.employee_id where salary.amount > 50000</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT department.name, AVG(salary.amount) FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id GROUP BY department.name</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select department.name, avg(salary.amount) from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id group by department.name</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT department.name, AVG(salary.amount) FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id GROUP BY department.name</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select department.name, avg(salary.amount) from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id group by department.name</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT department.name, AVG(salary.amount) FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id GROUP BY department.name</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select department.name, avg(salary.amount) from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id group by department.name</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT department.name, AVG(salary.amount) FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id GROUP BY department.name</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select department.name, avg(salary.amount) from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id group by department.name</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT department.name, AVG(salary.amount) FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id GROUP BY department.name</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select department.name, avg(salary.amount) from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id group by department.name</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT department.name, AVG(salary.amount) FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id GROUP BY department.name</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select department.name, avg(salary.amount) from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id group by department.name</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT DISTINCT department.name FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 60000</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select distinct department.name from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id where salary.amount > 60000</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT DISTINCT department.name FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 60000</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select distinct department.name from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id where salary.amount > 60000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT DISTINCT department.name FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 60000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select distinct department.name from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id where salary.amount > 60000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT DISTINCT department.name FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 60000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select distinct department.name from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id where salary.amount > 60000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT DISTINCT department.name FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 60000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select distinct department.name from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id where salary.amount > 60000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT DISTINCT department.name FROM department JOIN employee ON department.id = employee.id JOIN salary ON employee.id = salary.employee_id WHERE salary.amount > 60000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select distinct department.name from department join employee on department.id = employee.id join salary on employee.id = salary.employee_id where salary.amount > 60000</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT employee.name, SUM(salary.amount) FROM employee JOIN salary ON employee.id = salary.employee_id GROUP BY employee.name HAVING SUM(salary.amount) > 100000</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select employee.name, sum(salary.amount) from employee join salary on employee.id = salary.employee_id group by employee.name having sum(salary.amount) > 100000</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT employee.name, SUM(salary.amount) FROM employee JOIN salary ON employee.id = salary.employee_id GROUP BY employee.name HAVING SUM(salary.amount) > 100000</stat><divider><t>CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select employee.name, sum(salary.amount) from employee join salary on employee.id = salary.employee_id group by employee.name having sum(salary.amount) > 100000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>SELECT employee.name, SUM(salary.amount) FROM employee JOIN salary ON employee.id = salary.employee_id GROUP BY employee.name HAVING SUM(salary.amount) > 100000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))</t><stat>select employee.name, sum(salary.amount) from employee join salary on employee.id = salary.employee_id group by employee.name having sum(salary.amount) > 100000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT employee.name, SUM(salary.amount) FROM employee JOIN salary ON employee.id = salary.employee_id GROUP BY employee.name HAVING SUM(salary.amount) > 100000</stat><divider><t>CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select employee.name, sum(salary.amount) from employee join salary on employee.id = salary.employee_id group by employee.name having sum(salary.amount) > 100000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>SELECT employee.name, SUM(salary.amount) FROM employee JOIN salary ON employee.id = salary.employee_id GROUP BY employee.name HAVING SUM(salary.amount) > 100000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))</t><stat>select employee.name, sum(salary.amount) from employee join salary on employee.id = salary.employee_id group by employee.name having sum(salary.amount) > 100000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>SELECT employee.name, SUM(salary.amount) FROM employee JOIN salary ON employee.id = salary.employee_id GROUP BY employee.name HAVING SUM(salary.amount) > 100000</stat><divider><t>CREATE TABLE salary (id INT PRIMARY KEY, employee_id INT, amount DECIMAL(10,2))

CREATE TABLE department (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255))

CREATE TABLE employee (id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255))</t><stat>select employee.name, sum(salary.amount) from employee join salary on employee.id = salary.employee_id group by employee.name having sum(salary.amount) > 100000</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, first_name, last_name, department FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, first_name, last_name, department from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT first_name, last_name, salary FROM employees;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select first_name, last_name, salary from employees;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT id, name, location FROM departments;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select id, name, location from departments;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT title, description FROM positions;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select title, description from positions;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT * FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select * from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT type, description FROM benefits;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select type, description from benefits;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.type FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.type from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.title, benefits.type FROM employees JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.title, benefits.type from employees join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, benefits.type from employees join departments on employees.department = departments.id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.title FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.title from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.location FROM employees JOIN departments ON employees.department = departments.id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.location from employees join departments on employees.department = departments.id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, positions.description FROM employees JOIN positions ON employees.department = positions.department_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, positions.description from employees join positions on employees.department = positions.department_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, benefits.description FROM employees JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, benefits.description from employees join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>SELECT employees.first_name, employees.last_name, departments.name, positions.description, benefits.type FROM employees JOIN departments ON employees.department = departments.id JOIN positions ON employees.department = positions.department_id JOIN benefits ON employees.id = benefits.employee_id;</stat><divider><t>CREATE TABLE benefits (id SERIAL PRIMARY KEY, type VARCHAR(50), description VARCHAR(255), employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));

CREATE TABLE positions (id SERIAL PRIMARY KEY, title VARCHAR(50), description VARCHAR(255), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(id));

CREATE TABLE departments (id SERIAL PRIMARY KEY, name VARCHAR(50), location VARCHAR(50));

CREATE TABLE employees (id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(50), salary INT);</t><stat>select employees.first_name, employees.last_name, departments.name, positions.description, benefits.type from employees join departments on employees.department = departments.id join positions on employees.department = positions.department_id join benefits on employees.id = benefits.employee_id;</stat>