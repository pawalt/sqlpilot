[
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT transaction_id, product_name FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT price, quantity FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE price > 100",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE quantity >= 10",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT transaction_id, product_name, price FROM sales_transactions WHERE quantity < 5",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS average_price FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT SUM(quantity) AS total_quantity FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(price * quantity) AS total_sales FROM sales_transactions GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions ORDER BY price DESC",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions ORDER BY quantity ASC",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE product_name LIKE 'P%'",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE price BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE quantity IN (5, 10, 15)",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE product_name='Product A'",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE price > 50 AND quantity < 10",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS average_price, SUM(quantity) AS total_quantity FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT transaction_id, price * quantity AS total_sale FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT COUNT(transaction_id) AS total_transactions FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT MAX(price) AS max_price, MIN(quantity) AS min_quantity FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE price > 100",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(price*quantity) AS total_revenue FROM sales_transactions GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE quantity < 5 AND price BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS average_price FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions ORDER BY price DESC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT transaction_id, product_name, quantity FROM sales_transactions WHERE price = (SELECT MAX(price) FROM sales_transactions)",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT product_name, COUNT(*) AS total_transactions FROM sales_transactions GROUP BY product_name HAVING COUNT(*) > 3",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM sales_transactions GROUP BY product_name ORDER BY total_quantity DESC",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE transaction_id IN (1, 5, 10, 15)",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT AVG(quantity) AS average_quantity FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE quantity >= 10 AND (product_name LIKE '%apple%' OR product_name LIKE '%banana%')",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT product_name, AVG(price) AS average_price FROM sales_transactions GROUP BY product_name HAVING AVG(price) > 50",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM sales_transactions WHERE price < (SELECT AVG(price) FROM sales_transactions)",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT transaction_id, product_name, price FROM sales_transactions WHERE product_name LIKE 'S%'",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT transaction_id, price/quantity AS unit_price FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT product_name, price, quantity FROM sales_transactions WHERE quantity > 0 AND price*quantity > 200",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT MAX(price) AS max_price FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE sales_transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT SUM(price*quantity) AS total_sales FROM sales_transactions",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM sales;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT sale_id, product_id FROM sales;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price, quantity_sold FROM products INNER JOIN sales ON products.product_id = sales.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price, quantity_sold, sale_date FROM products INNER JOIN sales ON products.product_id = sales.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM sales WHERE quantity_sold >= 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_products FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity_sold) AS total_quantity_sold FROM products INNER JOIN sales ON products.product_id = sales.product_id GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT AVG(product_price) AS avg_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, COUNT(sale_id) AS total_sales FROM sales GROUP BY product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT MAX(product_price) AS max_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT MIN(product_price) AS min_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price, quantity_sold FROM products LEFT JOIN sales ON products.product_id = sales.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price, quantity_sold FROM products RIGHT JOIN sales ON products.product_id = sales.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price, quantity_sold FROM products FULL JOIN sales ON products.product_id = sales.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price, quantity_sold FROM products LEFT JOIN sales ON products.product_id = sales.product_id WHERE quantity_sold IS NULL OR quantity_sold = 0;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_price > 50",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, sale_date FROM products JOIN sales ON products.product_id = sales.product_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity_sold) AS total_sold FROM products JOIN sales ON products.product_id = sales.product_id GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, AVG(product_price) AS average_price FROM products GROUP BY product_name HAVING AVG(product_price) > 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, COUNT(product_id) AS total_sales FROM products JOIN sales ON products.product_id = sales.product_id GROUP BY product_name HAVING COUNT(product_id) > 5",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_id IN (SELECT product_id FROM sales WHERE quantity_sold > 10)",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, MAX(product_price) AS highest_price FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, MIN(product_price) AS lowest_price FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT sale_id, sale_date FROM sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, sale_date FROM products JOIN sales ON products.product_id = sales.product_id WHERE sale_date = '2022-06-30'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, AVG(product_price) AS average_price FROM products GROUP BY product_name ORDER BY AVG(product_price) DESC",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity_sold) AS total_sold FROM products JOIN sales ON products.product_id = sales.product_id GROUP BY product_name ORDER BY total_sold DESC",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products UNION SELECT product_name, product_price FROM products ORDER BY product_price DESC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_name LIKE '%a%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_price < (SELECT AVG(product_price) FROM products)",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_name IN ('Product A', 'Product B', 'Product C')",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT AVG(product_price) AS average_price, COUNT(DISTINCT product_id) AS total_products FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products CROSS JOIN sales",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_price DECIMAL(10, 2)\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_price = (SELECT MAX(product_price) FROM products)",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM products WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, description FROM products WHERE description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM products ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT sale_id, product_id, quantity_sold, sale_date FROM sales;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT sale_id, product_id, quantity_sold, sale_date FROM sales WHERE quantity_sold > 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT sale_id, product_id, sale_date FROM sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customers WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM products INNER JOIN sales ON products.product_id = sales.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT sale_id, product_id, quantity_sold, product_name FROM sales LEFT JOIN products ON sales.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, sale_id, quantity_sold FROM products RIGHT JOIN sales ON products.product_id = sales.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.product_id, p.product_name, s.sale_id, s.quantity_sold FROM products p INNER JOIN sales s ON p.product_id = s.product_id WHERE p.price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.customer_name, s.sale_id, s.sale_date, p.product_name FROM customers c INNER JOIN sales s ON c.customer_id = s.customer_id INNER JOIN products p ON s.product_id = p.product_id WHERE c.customer_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, description, price FROM products WHERE product_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE customer_name = 'Bob';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE customer_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, description, price FROM products WHERE price BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT sale_id, COUNT(*) AS total_sales FROM sales GROUP BY sale_id HAVING total_sales > 1;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT products.product_name, sales.quantity_sold, sales.sale_date FROM products INNER JOIN sales ON products.product_id = sales.product_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT products.product_name, products.price, sales.quantity_sold FROM products JOIN sales ON products.product_id = sales.product_id WHERE sales.quantity_sold > 10",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, customers.email, sales.quantity_sold FROM customers INNER JOIN sales ON customers.customer_id = sales.sale_id WHERE sales.quantity_sold >= 5",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT products.product_name, products.price, sales.sale_date, customers.customer_name FROM products JOIN sales ON products.product_id = sales.product_id JOIN customers ON customers.customer_id = sales.sale_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, products.product_name, products.price FROM customers INNER JOIN sales ON customers.customer_id = sales.sale_id JOIN products ON products.product_id = sales.product_id WHERE sales.quantity_sold > 5",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT products.product_name, products.price, sales.sale_date, customers.email FROM products JOIN sales ON products.product_id = sales.product_id JOIN customers ON customers.customer_id = sales.sale_id WHERE sales.quantity_sold <= 10",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, COUNT(sales.sale_id) AS total_sales FROM customers JOIN sales ON customers.customer_id = sales.sale_id GROUP BY customers.customer_name HAVING total_sales > 3",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT products.product_name, SUM(sales.quantity_sold) AS total_quantity_sold FROM products JOIN sales ON products.product_id = sales.product_id GROUP BY products.product_name ORDER BY total_quantity_sold DESC",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, AVG(sales.quantity_sold) AS average_quantity_sold FROM customers JOIN sales ON customers.customer_id = sales.sale_id GROUP BY customers.customer_name HAVING AVG(sales.quantity_sold) > 7",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\nCREATE TABLE sales (\n    sale_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_sold INT,\n    sale_date DATE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, MAX(products.price) AS max_price FROM customers JOIN sales ON customers.customer_id = sales.sale_id JOIN products ON products.product_id = sales.product_id GROUP BY customers.customer_name",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT customer_name, address FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT * FROM sales;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT sale_date FROM sales WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT * FROM sale_items;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_id, quantity_sold FROM sale_items WHERE sale_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, price, quantity_sold FROM products JOIN sale_items ON products.product_id = sale_items.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers JOIN sales ON customers.customer_id = sales.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, price, quantity_sold FROM products JOIN sale_items ON products.product_id = sale_items.product_id WHERE product_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT * FROM products WHERE price < 100 AND quantity_sold > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT customer_name, address FROM customers WHERE address LIKE '%Street%';",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity_sold) AS total_sold FROM products JOIN sale_items ON products.product_id = sale_items.product_id GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT customer_name, COUNT(sale_id) AS total_sales FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT sale_items.sale_id, products.product_id, products.product_name FROM sale_items JOIN products ON sale_items.product_id = products.product_id WHERE sale_items.sale_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT customer_name, SUM(products.price * sale_items.quantity_sold) AS total_value FROM customers JOIN sales ON customers.customer_id = sales.customer_id JOIN sale_items ON sales.sale_id = sale_items.sale_id JOIN products ON sale_items.product_id = products.product_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT customers.customer_name AS customer, products.product_name AS product, sale_items.quantity_sold, sale_items.quantity_sold * products.price AS total_price FROM customers JOIN sales ON customers.customer_id = sales.customer_id JOIN sale_items ON sales.sale_id = sale_items.sale_id JOIN products ON sale_items.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, AVG(price) AS avg_price FROM products GROUP BY product_name HAVING AVG(price) > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT MAX(price) AS max_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE quantity_sold > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT customer_name, address, email FROM customers WHERE customer_id IN (SELECT customer_id FROM sales);",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity_sold) AS total_sold FROM products p INNER JOIN sale_items s ON p.product_id = s.product_id GROUP BY product_name ORDER BY total_sold DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT s.sale_date, c.customer_name, p.product_name, si.quantity_sold FROM sales s JOIN customers c ON s.customer_id = c.customer_id JOIN sale_items si ON s.sale_id = si.sale_id JOIN products p ON si.product_id = p.product_id WHERE c.address LIKE '%Street%' AND p.price > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT c.customer_name, SUM(p.price * si.quantity_sold) AS total_amount FROM customers c JOIN sales s ON c.customer_id = s.customer_id JOIN sale_items si ON s.sale_id = si.sale_id JOIN products p ON si.product_id = p.product_id GROUP BY customer_name HAVING total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, AVG(price) AS avg_price FROM products GROUP BY product_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM customers WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE price BETWEEN 10 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE address = '123 Main Street';",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT c.customer_name, p1.product_name AS first_product, p2.product_name AS second_product FROM sale_items si JOIN products p1 ON si.product_id = p1.product_id JOIN products p2 ON si.product_id = p2.product_id JOIN sales s ON si.sale_id = s.sale_id JOIN customers c ON s.customer_id = c.customer_id WHERE p1.product_id < p2.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT customer_name, SUM(price * quantity_sold) AS total_spent FROM customers c JOIN sales s ON c.customer_id = s.customer_id JOIN sale_items si ON s.sale_id = si.sale_id JOIN products p ON si.product_id = p.product_id GROUP BY customer_name ORDER BY total_spent DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, price, quantity_sold FROM products WHERE (price * quantity_sold) > 500;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM sales);",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT p.product_name, s.sale_date, si.quantity_sold FROM products p JOIN sale_items si ON p.product_id = si.product_id JOIN sales s ON si.sale_id = s.sale_id WHERE si.quantity_sold >= 10;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_name LIKE '%John%' AND email NOT LIKE '%gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT c.customer_name, COUNT(si.item_id) AS total_items FROM customers c JOIN sales s ON c.customer_id = s.customer_id JOIN sale_items si ON s.sale_id = si.sale_id GROUP BY c.customer_name HAVING total_items > 3;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity_sold) AS total_sold FROM products p JOIN sale_items si ON p.product_id = si.product_id GROUP BY product_name HAVING total_sold < 50;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT c1.customer_name AS buyer, c2.customer_name AS seller, p.product_name, si.quantity_sold, (p.price * si.quantity_sold) AS total_amount FROM customers c1 JOIN sales s ON c1.customer_id = s.customer_id JOIN sale_items si ON s.sale_id = si.sale_id JOIN products p ON si.product_id = p.product_id JOIN sales ss ON si.sale_id = ss.sale_id JOIN customers c2 ON ss.customer_id = c2.customer_id WHERE c1.customer_id != c2.customer_id AND total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT product_name, AVG(price) AS avg_price FROM products GROUP BY product_name HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity_sold INT);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), email VARCHAR(255));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nCREATE TABLE sale_items (item_id INT PRIMARY KEY, sale_id INT, product_id INT, quantity_sold INT, FOREIGN KEY (sale_id) REFERENCES sales(sale_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\n### STATEMENT\n\nSELECT c.customer_name, p.product_name, si.quantity_sold FROM customers c JOIN sales s ON c.customer_id = s.customer_id JOIN sale_items si ON s.sale_id = si.sale_id JOIN products p ON si.product_id = p.product_id WHERE si.quantity_sold >= 5;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products WHERE quantity_in_stock > 0;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions WHERE transaction_date = '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT salesperson_name, commission_rate FROM Salespersons;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT product_name, price, quantity_in_stock FROM Products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT transaction_id, quantity_sold FROM Transactions WHERE product_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT salesperson_name, commission_rate FROM Salespersons WHERE commission_rate > 0.1;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Products WHERE product_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT transaction_id, quantity_sold FROM Transactions WHERE quantity_sold >= 10;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT salesperson_id, salesperson_name FROM Salespersons WHERE salesperson_id BETWEEN 1 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE transaction_id = 8;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products WHERE quantity_in_stock < 5;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT transaction_date FROM Transactions WHERE transaction_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT salesperson_id, salesperson_name FROM Salespersons WHERE commission_rate < 0.05;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE salesperson_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Products WHERE price > 100",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products WHERE quantity_in_stock < 10",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers WHERE customer_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT salesperson_name, commission_rate FROM Salespersons",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT transaction_id, quantity_sold FROM Transactions WHERE quantity_sold > 5",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT order_id, transaction_id FROM Orders",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Products INNER JOIN Transactions ON Products.product_id = Transactions.product_id",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT product_name, price, quantity_in_stock FROM Products WHERE price BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers WHERE email LIKE '%example.com'",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price, quantity_in_stock FROM Products WHERE product_id IN (1, 3, 5, 7)",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT salesperson_name, commission_rate FROM Salespersons WHERE commission_rate >= 0.1",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT transaction_id, quantity_sold FROM Transactions WHERE transaction_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers ORDER BY customer_name ASC",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products ORDER BY price DESC",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT salesperson_name, commission_rate FROM Salespersons LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM Products WHERE quantity_in_stock = (SELECT MAX(quantity_in_stock) FROM Products)",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT transaction_id, SUM(quantity_sold) AS total_sold FROM Transactions GROUP BY transaction_id",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity_sold INT,\n    transaction_date DATE\n);\n\nCREATE TABLE Salespersons (\n    salesperson_id INT PRIMARY KEY,\n    salesperson_name VARCHAR(255),\n    commission_rate DECIMAL(5, 2)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    transaction_id INT,\n    salesperson_id INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price, SUM(quantity_sold) AS total_sold FROM Products INNER JOIN Transactions ON Products.product_id = Transactions.product_id GROUP BY product_id HAVING total_sold > 10"
]