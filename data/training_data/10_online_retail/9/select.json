[
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT * FROM customer_data WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customer_data WHERE customer_email LIKE 'john%';",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, account_balance FROM customer_data ORDER BY account_balance DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email FROM customer_data WHERE account_balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_phone FROM customer_data WHERE customer_phone IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT * FROM customer_data WHERE expiry_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, credit_card_number, expiry_date FROM customer_data WHERE expiry_date >= '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, account_balance FROM customer_data WHERE account_balance BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_address FROM customer_data WHERE customer_address LIKE '%Street';",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customer_data WHERE cvv = 123;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email FROM customer_data WHERE credit_card_number LIKE '5555%';",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email FROM customer_data WHERE customer_name IN ('Alice', 'Bob', 'Charlie');",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, account_balance FROM customer_data WHERE account_balance > 1000 AND expiry_date > '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT DISTINCT customer_email FROM customer_data;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_phone FROM customer_data WHERE credit_card_number IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email, expiry_date FROM customer_data WHERE account_balance <= 0;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email FROM customer_data WHERE customer_address IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, account_balance FROM customer_data WHERE customer_name NOT LIKE '%Smith';",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, credit_card_number FROM customer_data WHERE CVV > 200;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_address FROM customer_data WHERE account_balance > 5000;",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT * FROM customer_data WHERE customer_id = 12345",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customer_data WHERE customer_id = 54321",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_phone, customer_address FROM customer_data WHERE credit_card_number LIKE '%1234%'",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_email, credit_card_number, expiry_date FROM customer_data WHERE account_balance > 1000",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT * FROM customer_data WHERE account_balance < 500",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_email, customer_phone FROM customer_data WHERE customer_address LIKE '%Avenue%'",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, credit_card_number, expiry_date, cvv FROM customer_data WHERE customer_name LIKE 'J%'",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT * FROM customer_data WHERE cvv = 123",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_email, credit_card_number, account_balance FROM customer_data WHERE expiry_date < '2023-01-01'",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT * FROM customer_data WHERE account_balance BETWEEN 500 AND 1000",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_phone, customer_address, account_balance FROM customer_data WHERE customer_email LIKE '%gmail.com'",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_email, customer_phone, customer_address FROM customer_data WHERE customer_id = 54321",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT * FROM customer_data WHERE customer_address LIKE '%Street%'",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_phone, account_balance FROM customer_data WHERE account_balance > 5000",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_email, expiry_date, account_balance FROM customer_data WHERE customer_id = 98765",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT * FROM customer_data WHERE customer_email = 'example@email.com'",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, credit_card_number, cvv, account_balance FROM customer_data WHERE account_balance < 100",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT customer_name, customer_email, customer_phone, customer_address FROM customer_data WHERE customer_id = 24680",
  "### TABLEDATA\n\nCREATE TABLE customer_data (   customer_id INT PRIMARY KEY,   customer_name VARCHAR(50),   customer_email VARCHAR(100) NOT NULL,   customer_phone VARCHAR(15),   customer_address TEXT,   credit_card_number VARCHAR(16) NOT NULL,   expiry_date DATE NOT NULL,   cvv INT NOT NULL,   account_balance DECIMAL(10, 2) NOT NULL );\n\n### STATEMENT\n\nSELECT * FROM customer_data WHERE expiry_date > '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT full_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE address IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers ORDER BY full_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, full_name, phone_number FROM customers WHERE phone_number LIKE '%1234%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, full_name, email FROM customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, full_name, phone_number FROM customers WHERE phone_number LIKE '555%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, transaction_date, amount FROM transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, transaction_date, amount FROM transactions WHERE transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, c.full_name FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, c.full_name, t.amount FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id WHERE t.amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name AS customer_name, t.amount AS transaction_amount FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, SUM(t.amount) AS total_amount FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id GROUP BY c.full_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, AVG(t.amount) AS avg_amount FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id GROUP BY c.full_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, COUNT(t.transaction_id) AS num_transactions FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id GROUP BY c.full_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, MAX(t.amount) AS max_amount FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id GROUP BY c.full_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, MIN(t.amount) AS min_amount FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id GROUP BY c.full_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, COUNT(*) AS total_transactions FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, DATE(t.transaction_date) AS date_only FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT full_name, email FROM customers WHERE phone_number LIKE '%123%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, full_name, address FROM customers WHERE customer_id IN (SELECT customer_id FROM transactions WHERE amount > 1000);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, c.email, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, t.amount FROM customers c INNER JOIN transactions t ON c.customer_id = t.customer_id WHERE c.address IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, t.amount FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT full_name, COUNT(transaction_id) AS transaction_count FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY full_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, SUM(t.amount) AS total_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.full_name HAVING total_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, AVG(t.amount) AS average_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.full_name HAVING average_amount < 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, MAX(t.amount) AS max_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.full_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, MIN(t.amount) AS min_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.full_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, COUNT(t.amount) AS num_transactions FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.full_name ORDER BY num_transactions DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount = (SELECT MAX(amount) FROM transactions);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date = (SELECT MAX(transaction_date) FROM transactions);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount BETWEEN 1000 AND 5000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.description LIKE '%payment%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount > (SELECT AVG(amount) FROM transactions);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE NOT EXISTS (SELECT * FROM transactions WHERE customer_id = c.customer_id);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) NOT NULL,\n    address VARCHAR(100),\n    phone_number VARCHAR(15) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    description VARCHAR(100),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.full_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE EXISTS (SELECT * FROM transactions WHERE amount < 100);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM customers",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT name, email FROM customers",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, name, email, registration_date FROM customers",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customers",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, name, email FROM customers WHERE customer_id = 1",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM customers WHERE registration_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM customers WHERE name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, amount FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT SUM(amount) FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 100",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM access_logs",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, access_timestamp, accessed_resource FROM access_logs",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT MAX(access_timestamp) FROM access_logs",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM access_logs WHERE customer_id = 1",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM access_logs WHERE access_type = 'LOGIN'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM access_logs WHERE access_timestamp >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM access_logs WHERE access_type = 'LOGIN' AND customer_id = 1",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customers.name, transactions.amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT name, email FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, MAX(amount) AS max_amount FROM transactions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customers.name, transactions.amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id WHERE customers.customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customers.name, SUM(transactions.amount) AS total_amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS num_logs FROM access_logs GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, SUM(IF(access_type = 'LOGIN', 1, 0)) AS num_logins, SUM(IF(access_type = 'LOGOUT', 1, 0)) AS num_logouts FROM access_logs GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM customers WHERE registration_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM customers ORDER BY name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM customers WHERE name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS num_transactions FROM transactions GROUP BY customer_id HAVING num_transactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > (SELECT AVG(amount) FROM transactions);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM transactions GROUP BY customer_id ORDER BY max_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT customers.name FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM transactions WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, AVG(amount) AS avg_amount FROM transactions GROUP BY customer_id HAVING avg_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password_hash VARCHAR(100),\n  registration_date DATE\n)\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  amount DECIMAL(10, 2),\n  transaction_date TIMESTAMP,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\nCREATE TABLE access_logs (\n  log_id INT PRIMARY KEY,\n  customer_id INT,\n  access_timestamp TIMESTAMP,\n  accessed_resource VARCHAR(100),\n  access_type VARCHAR(50),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n)\n\n### STATEMENT\n\nSELECT * FROM access_logs WHERE access_timestamp >= '2022-01-01' AND accessed_resource LIKE '%admin%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, transaction_date FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM Customers WHERE customer_id = 001;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, log_details FROM SecurityLogs;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM AdminUsers WHERE is_admin = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers ORDER BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, customer_id FROM Transactions WHERE amount < 500 ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM Customers WHERE email LIKE '%gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS transaction_count FROM Transactions WHERE customer_id = 002;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT SUM(amount) FROM Transactions WHERE transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, address, email FROM Customers LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM Customers OFFSET 2;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM Customers LIMIT 3 OFFSET 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM Customers WHERE customer_id IN (001, 002, 003);",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, address, email FROM Customers WHERE customer_name LIKE '%John%' ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, log_details, log_timestamp FROM SecurityLogs WHERE log_timestamp BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM Customers WHERE address LIKE '%California%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Customers.customer_id, Customers.customer_name, Transactions.amount FROM Customers JOIN Transactions ON Customers.customer_id = Transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Customers.customer_id, Customers.customer_name, Transactions.amount FROM Customers LEFT JOIN Transactions ON Customers.customer_id = Transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions WHERE amount > 1000 ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, COUNT(Transactions.transaction_id) AS transaction_count FROM Customers JOIN Transactions ON Customers.customer_id = Transactions.customer_id GROUP BY Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, Transactions.amount FROM Customers JOIN Transactions ON Customers.customer_id = Transactions.customer_id WHERE Customers.customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, SecurityLogs.log_details FROM Customers JOIN SecurityLogs ON Customers.customer_id = SecurityLogs.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE customer_id IN (SELECT customer_id FROM SecurityLogs);",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(amount) AS total_amount FROM Transactions GROUP BY customer_id HAVING total_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_id, username FROM Customers, AdminUsers WHERE customer_id = user_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(amount) AS average_amount FROM Transactions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, Transactions.amount FROM Customers JOIN Transactions ON Customers.customer_id = Transactions.customer_id WHERE Transactions.transaction_date >= NOW();",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions WHERE amount = (SELECT MAX(amount) FROM Transactions);",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, COUNT(SecurityLogs.log_id) AS log_count FROM Customers LEFT JOIN SecurityLogs ON Customers.customer_id = SecurityLogs.customer_id GROUP BY Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, username, is_admin FROM AdminUsers WHERE is_admin = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, address FROM Customers WHERE customer_name LIKE '%Smith%' AND address LIKE '%Street%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, MAX(Transactions.amount) AS max_transaction_amount FROM Customers JOIN Transactions ON Customers.customer_id = Transactions.customer_id GROUP BY Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50),\n   address VARCHAR(100),\n   email VARCHAR(50)\n);\n\n\nCREATE TABLE Transactions (\n   transaction_id INT PRIMARY KEY,\n   customer_id INT,\n   amount DECIMAL(10, 2),\n   transaction_date TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE SecurityLogs (\n   log_id INT PRIMARY KEY,\n   customer_id INT,\n   log_details TEXT,\n   log_timestamp TIMESTAMP,\n   FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n\nCREATE TABLE AdminUsers (\n   user_id INT PRIMARY KEY,\n   username VARCHAR(50) UNIQUE,\n   password VARCHAR(100),\n   is_admin BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions WHERE transaction_date >= '2022-01-01' AND transaction_date < '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_phone FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transactions WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM credit_cards;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT card_holder_name, expiry_date FROM credit_cards WHERE customer_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM login_credentials;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT username FROM login_credentials WHERE customer_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM audit_logs;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT log_date, action FROM audit_logs WHERE customer_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, transactions.transaction_amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, transactions.transaction_amount FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, transactions.transaction_amount FROM customers RIGHT JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, credit_cards.card_holder_name FROM customers INNER JOIN credit_cards ON customers.customer_id = credit_cards.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, credit_cards.card_holder_name FROM customers LEFT JOIN credit_cards ON customers.customer_id = credit_cards.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, credit_cards.card_holder_name FROM customers RIGHT JOIN credit_cards ON customers.customer_id = credit_cards.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, login_credentials.username FROM customers INNER JOIN login_credentials ON customers.customer_id = login_credentials.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, login_credentials.username FROM customers LEFT JOIN login_credentials ON customers.customer_id = login_credentials.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, login_credentials.username FROM customers RIGHT JOIN login_credentials ON customers.customer_id = login_credentials.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email, customer_phone FROM customers WHERE customer_email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, transactions.transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.transaction_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, card_holder_name FROM customers JOIN credit_cards ON customers.customer_id = credit_cards.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, login_credentials.username FROM customers JOIN login_credentials ON customers.customer_id = login_credentials.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, action FROM customers JOIN audit_logs ON customers.customer_id = audit_logs.customer_id WHERE action = 'login';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM transactions);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, action FROM customers JOIN audit_logs ON customers.customer_id = audit_logs.customer_id WHERE log_date > '2022-06-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS transaction_count FROM transactions WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT SUM(transaction_amount) AS total_amount FROM transactions WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT AVG(transaction_amount) AS average_amount FROM transactions WHERE customer_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT MAX(transaction_amount) AS max_amount FROM transactions WHERE customer_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT MIN(transaction_amount) AS min_amount FROM transactions WHERE customer_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_amount FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_amount FROM customers RIGHT JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_amount FROM customers FULL JOIN transactions ON customers.customer_id = transactions.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_phone VARCHAR(15)\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_date DATE,\n    transaction_amount DECIMAL(10,2),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE credit_cards (\n    card_number VARCHAR(16) PRIMARY KEY,\n    card_holder_name VARCHAR(50),\n    expiry_date DATE,\n    cvv VARCHAR(3),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\nCREATE TABLE login_credentials (\n    username VARCHAR(50) PRIMARY KEY,\n    password VARCHAR(50),\n    customer_id INT UNIQUE REFERENCES customers(customer_id)\n);\n\nCREATE TABLE audit_logs (\n    log_id INT PRIMARY KEY,\n    log_date TIMESTAMP,\n    action VARCHAR(50),\n    customer_id INT REFERENCES customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS transaction_count FROM transactions GROUP BY customer_id HAVING transaction_count > 5;"
]