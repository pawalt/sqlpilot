[
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name FROM customer_accounts;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM customer_accounts WHERE customer_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, phone_number FROM customer_accounts WHERE last_name = 'Smith';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customer_accounts;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM customer_accounts ORDER BY last_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customer_accounts WHERE address IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE phone_number LIKE '555%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT DISTINCT email FROM customer_accounts;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, address FROM customer_accounts WHERE last_name LIKE 'D%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT last_name) FROM customer_accounts;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE address LIKE '%Main Street%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, last_name FROM customer_accounts WHERE email NOT LIKE '%example.com%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT first_name, last_name, phone_number FROM customer_accounts WHERE address LIKE '%Avenue%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT MAX(customer_id) FROM customer_accounts;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE first_name = 'John' AND last_name = 'Doe';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customer_accounts WHERE address IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT MIN(customer_id) FROM customer_accounts;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customer_accounts WHERE phone_number = '123-456-7890';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE customer_id = 1001;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM customer_accounts WHERE address LIKE '%Street%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE email = 'john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, phone_number FROM customer_accounts WHERE first_name = 'Alice' AND last_name = 'Smith';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE last_name IN ('Johnson', 'Williams', 'Brown');",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, email FROM customer_accounts WHERE phone_number LIKE '+1%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE address LIKE '%Avenue%' AND phone_number LIKE '+44%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, email FROM customer_accounts WHERE address IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, last_name, address, phone_number FROM customer_accounts WHERE first_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE customer_id BETWEEN 2000 AND 3000;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name FROM customer_accounts WHERE email NOT LIKE '%yahoo%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE last_name = 'Lee' OR last_name = 'Kim';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customer_accounts WHERE address = '123 Main Street';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE phone_number LIKE '+61%' OR phone_number LIKE '+62%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name FROM customer_accounts ORDER BY last_name ASC, first_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE first_name = 'Bob' AND (address = '456 Oak Lane' OR phone_number = '+1-123-456-7890');",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customer_accounts WHERE last_name = 'Garcia' AND address IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT * FROM customer_accounts WHERE first_name LIKE 'A%' AND last_name LIKE 'B%';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, email FROM customer_accounts WHERE last_name = 'Jones' OR email LIKE '%@company.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT total_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_status FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers WHERE email = 'example@email.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE payment_status = true;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date FROM orders ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE phone_number IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customers WHERE phone_number IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers JOIN (SELECT customer_id, SUM(total_amount) AS total_amount FROM orders GROUP BY customer_id) AS order_totals ON customers.customer_id = order_totals.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(orders.order_id) AS total_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, order_date, total_amount, payment_status FROM customers JOIN orders ON customers.customer_id = orders.customer_id ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE payment_status = 'TRUE';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id ORDER BY total_amount DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers WHERE phone_number IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name, email HAVING SUM(total_amount) > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 1000 UNION SELECT 'New Customer', 'new@example.com', 0;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers JOIN (SELECT customer_id, SUM(total_amount) AS total_amount FROM orders WHERE payment_status = 'FALSE' GROUP BY customer_id) AS unpaid_orders ON customers.customer_id = unpaid_orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date >= '2022-06-01' AND order_date < '2022-07-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount FROM (SELECT customer_id, customer_name, email FROM customers WHERE email LIKE '%gmail.com%') AS gmail_customers JOIN orders ON gmail_customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE EXTRACT(MONTH FROM order_date) = 12;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE EXTRACT(YEAR FROM order_date) = 2022;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customer_id BETWEEN 10 AND 20;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM order_items;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_item_id, order_id, product_id FROM order_items;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT name, email FROM customers WHERE phone_number IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT name, email FROM customers WHERE phone_number IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE order_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE order_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE total_amount BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM order_items WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM order_items WHERE quantity < 10;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT oi.order_id, oi.product_id, oi.quantity FROM order_items oi JOIN orders o ON oi.order_id = o.order_id WHERE o.total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT o.order_id, o.total_amount FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE c.name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, c.email, o.order_date, o.total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, oi.order_id, oi.quantity, oi.price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name AS customer_name, o.order_id AS order_number, oi.quantity, oi.price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT name, email, phone_number FROM customers WHERE phone_number IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, name, email, phone_number FROM customers WHERE name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT o.order_id, o.order_date, o.total_amount, c.name FROM orders o JOIN customers c ON o.customer_id = c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT oi.order_id, p.product_id, p.quantity, p.price FROM order_items oi JOIN products p ON oi.product_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, COUNT(o.order_id) AS total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, COUNT(oi.order_item_id) AS total_items FROM customers c LEFT JOIN order_items oi ON c.customer_id = oi.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, AVG(o.total_amount) AS average_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, MIN(o.total_amount) AS min_order_amount, MAX(o.total_amount) AS max_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, COUNT(DISTINCT o.order_id) AS unique_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, COUNT(DISTINCT oi.product_id) AS unique_products FROM customers c JOIN order_items oi ON c.customer_id = oi.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, COUNT(*) AS total_items FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT o.order_id, SUM(oi.quantity * oi.price) AS total_price FROM orders o JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, MIN(oi.quantity) AS min_quantity, MAX(oi.quantity) AS max_quantity FROM customers c JOIN order_items oi ON c.customer_id = oi.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, AVG(oi.price) AS average_price FROM customers c JOIN order_items oi ON c.customer_id = oi.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, COUNT(*) AS total_orders, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, COUNT(*) AS total_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS average_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nSELECT c.name, COUNT(*) AS total_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS average_amount, MIN(o.total_amount) AS min_amount, MAX(o.total_amount) AS max_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_id, registration_date FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_id, order_date, total_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT * FROM order_items;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity, unit_price FROM order_items;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT product_name, category FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT product_id, unit_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date, orders.total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT orders.order_date, order_items.product_id, order_items.quantity FROM orders JOIN order_items ON orders.order_id = order_items.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT products.product_name, products.category, order_items.quantity, order_items.unit_price FROM products JOIN order_items ON products.product_id = order_items.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount, order_items.quantity, products.product_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount, order_items.quantity, products.product_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id WHERE orders.total_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT DISTINCT customers.customer_name, orders.total_amount, order_items.quantity, products.product_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, COUNT(orders.order_id) AS num_orders FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT products.category, AVG(products.unit_price) AS avg_price FROM products GROUP BY products.category;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(order_id) AS num_orders FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE registration_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT * FROM orders INNER JOIN customers ON orders.customer_id = customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT product_name, unit_price FROM products WHERE unit_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT * FROM order_items INNER JOIN products ON order_items.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id WHERE customer_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = (SELECT customer_id FROM orders ORDER BY order_date LIMIT 1);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT category, AVG(unit_price) AS avg_price FROM products GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT product_name, category, unit_price FROM products WHERE category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, quantity, unit_price FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT * FROM orders ORDER BY total_amount DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS total_orders FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING SUM(total_amount) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT product_name, category, AVG(unit_price) AS avg_price FROM products GROUP BY category HAVING AVG(unit_price) < 50;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, AVG(total_amount) AS avg_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity_sold FROM products JOIN order_items ON products.product_id = order_items.product_id GROUP BY product_name HAVING total_quantity_sold > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS order_count FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE order_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number FROM customers WHERE email LIKE '%gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_orders FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, rationale FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT order_date, SUM(total_amount) AS total_sales FROM orders GROUP BY order_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(total_amount) AS avg_total_amount FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, COUNT(*) AS total_recommendations FROM products JOIN recommendations ON products.product_id = recommendations.product_id GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(quantity) AS total_items_purchased FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_customers FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(recommendation_id) AS total_recommendations FROM customers LEFT JOIN recommendations ON customers.customer_id = recommendations.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT MAX(price) AS max_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT order_id, MAX(total_amount) AS max_total_amount FROM orders GROUP BY order_id ORDER BY max_total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(total_amount) AS min_total_amount FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customers JOIN orders ON customers.customer_id = orders.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, products.product_name FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, product_name, price FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount, product_name, price FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number, product_name, price FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number, product_name, price, rationale FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, order_date, total_amount, product_name, price, quantity FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number, order_date, total_amount, product_name, price, quantity FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT customers.customer_id, customer_name, email, phone_number, order_id, order_date, total_amount, product_id, product_name, price, quantity FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id"
]