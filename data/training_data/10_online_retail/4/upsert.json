[
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (1, 'John', 'Doe', 'john.doe@example.com', '123 Main St', '555-1234')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (2, 'Jane', 'Smith', 'jane.smith@example.com', '456 Elm St', '555-5678')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (3, 'Alice', 'Johnson', 'alice.johnson@example.com', '789 Maple St', '555-9090')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (4, 'Bob', 'Brown', 'bob.brown@example.com', '101 Oak St', '555-1212')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (5, 'Sarah', 'Williams', 'sarah.williams@example.com', '202 Pine St', '555-3434')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (6, 'Mike', 'Miller', 'mike.miller@example.com', '303 Cedar St', '555-5656')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (7, 'Emily', 'Taylor', 'emily.taylor@example.com', '404 Birch St', '555-7878')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (8, 'Chris', 'Johnson', 'chris.johnson@example.com', '505 Walnut St', '555-9090')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (9, 'Linda', 'Anderson', 'linda.anderson@example.com', '606 Pine St', '555-2323')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (10, 'Mark', 'Thomas', 'mark.thomas@example.com', '707 Elm St', '555-4545')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (11, 'Laura', 'Wilson', 'laura.wilson@example.com', '808 Oak St', '555-6767')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (12, 'Alex', 'Martinez', 'alex.martinez@example.com', '909 Maple St', '555-8989')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (13, 'Tom', 'Garcia', 'tom.garcia@example.com', '1011 Cedar St', '555-1212')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (14, 'Sara', 'Young', 'sara.young@example.com', '1112 Birch St', '555-3434')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (15, 'Peter', 'Hernandez', 'peter.hernandez@example.com', '1213 Walnut St', '555-5656')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (16, 'Leah', 'Lee', 'leah.lee@example.com', '1314 Pine St', '555-7878')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (17, 'Daniel', 'Clark', 'daniel.clark@example.com', '1415 Elm St', '555-9090')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (18, 'Elena', 'Gomez', 'elena.gomez@example.com', '1516 Oak St', '555-2323')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (19, 'Jack', 'Moore', 'jack.moore@example.com', '1617 Maple St', '555-4545')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nUPSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (20, 'Rachel', 'Perez', 'rachel.perez@example.com', '1718 Cedar St', '555-6767')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (1, 'John', 'Doe', 'john.doe@example.com', '123 Main St', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET first_name = 'Jane', last_name = 'Smith', email = 'jane.smith@example.com', address = '456 Elm St', phone_number = '987-654-3210';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (2, 'Alice', 'Johnson', 'alice.johnson@example.com', '456 Park Ave', '555-123-4567') ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (3, 'Bob', 'Smith', 'bob.smith@example.com', '789 Oak St', '777-888-9999') ON CONFLICT (customer_id) DO UPDATE SET first_name = 'Robert' WHERE customer_accounts.customer_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (4, 'Mary', 'Brown', 'mary.brown@example.com', '321 Maple Ave', '666-555-4444')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (5, 'David', 'Wilson', 'david.wilson@example.com', '987 Pine St', '555-777-3333') ON CONFLICT (customer_id) DO UPDATE SET first_name = 'Dave', phone_number = '123-789-4560';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (6, 'Sarah', 'Jones', 'sarah.jones@example.com', '654 Cherry St', '222-333-4444') ON CONFLICT (customer_id) DO UPDATE SET email = 'sarah.j@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (7, 'Michael', 'Davis', 'michael.davis@example.com', '875 Birch St', '111-222-3333') ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (8, 'Emily', 'Moore', 'emily.moore@example.com', '741 Walnut St', '444-555-6666')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (9, 'Daniel', 'Taylor', 'daniel.taylor@example.com', '369 Cedar St', '888-999-0000') ON CONFLICT (customer_id) DO UPDATE SET phone_number = '111-222-3333';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (10, 'Olivia', 'Anderson', 'olivia.anderson@example.com', '159 Mulberry St', '333-444-5555') ON CONFLICT (customer_id) DO UPDATE SET email = 'olivia.a@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (11, 'Christopher', 'Lee', 'christopher.lee@example.com', '258 Pineapple St', '999-888-7777') ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (12, 'Jessica', 'Brown', 'jessica.brown@example.com', '777 Orange St', '222-345-6789')",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (13, 'Kevin', 'Martinez', 'kevin.martinez@example.com', '456 Grape St', '888-777-6666') ON CONFLICT (customer_id) DO UPDATE SET address = '789 Banana St';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (14, 'Rachel', 'Garcia', 'rachel.garcia@example.com', '123 Lemon St', '777-666-5555') ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (15, 'Andrew', 'King', 'andrew.king@example.com', '852 Mango St', '333-222-1111') ON CONFLICT (customer_id) DO UPDATE SET last_name = 'Kennedy';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (16, 'Hannah', 'Scott', 'hannah.scott@example.com', '951 Apple St', '666-555-4444') ON CONFLICT (customer_id) DO UPDATE SET phone_number = '123-456-7890';",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSERT INTO customer_accounts (customer_id, first_name, last_name, email, address, phone_number) VALUES (17, 'Peter', 'Wright', 'peter.wright@example.com', '369 Avocado St', '555-444-3333') ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customer_accounts ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    address VARCHAR(255), \n    phone_number VARCHAR(15) \n);\n\n### STATEMENT\n\nINSER...",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_name, email, phone_number) VALUES ('John Doe', 'john.doe@example.com', '555-1234') ON CONFLICT (email) DO UPDATE SET phone_number = '555-5678';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_name, email, phone_number) VALUES ('Alice Smith', 'alice.smith@example.com', '555-4321') ON CONFLICT (email) DO UPDATE SET phone_number = '555-8765';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_name, email, phone_number) VALUES ('Bob Johnson', 'bob.johnson@example.com', '555-9876') ON CONFLICT (email) DO UPDATE SET phone_number = '555-3456';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_name, email, phone_number) VALUES ('Emma White', 'emma.white@example.com', '555-6789') ON CONFLICT (email) DO UPDATE SET phone_number = '555-2345';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_name, email, phone_number) VALUES ('Mark Brown', 'mark.brown@example.com', '555-7890') ON CONFLICT (email) DO UPDATE SET phone_number = '555-6543';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_name, email, phone_number) VALUES ('Sarah Taylor', 'sarah.taylor@example.com', '555-8901') ON CONFLICT (email) DO UPDATE SET phone_number = '555-4567';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_name, email, phone_number) VALUES ('Mike Wilson', 'mike.wilson@example.com', '555-5678') ON CONFLICT (email) DO UPDATE SET phone_number = '555-1234';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_name, email, phone_number) VALUES ('Laura Davis', 'laura.davis@example.com', '555-3456') ON CONFLICT (email) DO UPDATE SET phone_number = '555-2345';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_name, email, phone_number) VALUES ('Alex Clark', 'alex.clark@example.com', '555-8765') ON CONFLICT (email) DO UPDATE SET phone_number = '555-7890';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_name, email, phone_number) VALUES ('Mary Reed', 'mary.reed@example.com', '555-6789') ON CONFLICT (email) DO UPDATE SET phone_number = '555-4321';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (customer_id, order_date, total_amount, payment_status) VALUES (1, '2022-10-10', 100.50, TRUE) ON CONFLICT (order_id) DO UPDATE SET total_amount = 150.25, payment_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (customer_id, order_date, total_amount, payment_status) VALUES (2, '2022-10-11', 75.75, FALSE) ON CONFLICT (order_id) DO UPDATE SET total_amount = 80.00, payment_status = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (customer_id, order_date, total_amount, payment_status) VALUES (3, '2022-10-12', 200.00, TRUE) ON CONFLICT (order_id) DO UPDATE SET total_amount = 210.50, payment_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (customer_id, order_date, total_amount, payment_status) VALUES (4, '2022-10-13', 50.25, FALSE) ON CONFLICT (order_id) DO UPDATE SET total_amount = 55.75, payment_status = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (customer_id, order_date, total_amount, payment_status) VALUES (5, '2022-10-14', 300.75, TRUE) ON CONFLICT (order_id) DO UPDATE SET total_amount = 320.25, payment_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (customer_id, order_date, total_amount, payment_status) VALUES (1, '2022-10-15', 60.00, FALSE) ON CONFLICT (order_id) DO UPDATE SET total_amount = 65.50, payment_status = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (customer_id, order_date, total_amount, payment_status) VALUES (2, '2022-10-16', 150.50, TRUE) ON CONFLICT (order_id) DO UPDATE SET total_amount = 160.75, payment_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (customer_id, order_date, total_amount, payment_status) VALUES (3, '2022-10-17', 90.25, FALSE) ON CONFLICT (order_id) DO UPDATE SET total_amount = 95.75, payment_status = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (customer_id, order_date, total_amount, payment_status) VALUES (4, '2022-10-18', 180.75, TRUE) ON CONFLICT (order_id) DO UPDATE SET total_amount = 190.25, payment_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (customer_id, order_date, total_amount, payment_status) VALUES (5, '2022-10-19', 120.25, FALSE) ON CONFLICT (order_id) DO UPDATE SET total_amount = 125.50, payment_status = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (1, 'Alice', 'alice@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'Alice Updated';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (2, 'Bob', 'bob@example.com', '987-654-3210') ON CONFLICT (customer_id) DO UPDATE SET email = 'bob2@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (3, 'Charlie', 'charlie@example.com', '555-555-5555') ON CONFLICT (customer_id) DO UPDATE SET phone_number = '555-123-4567';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (4, 'David', 'david@example.com', '999-888-7777') ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_status) VALUES (1, 1, '2022-01-01', 100.50, true) ON CONFLICT (order_id) DO UPDATE SET total_amount = 120.75;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_status) VALUES (2, 2, '2022-01-02', 75.25, true) ON CONFLICT (order_id) DO UPDATE SET payment_status = false;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_status) VALUES (3, 3, '2022-01-03', 50.00, false) ON CONFLICT (order_id) DO UPDATE SET order_date = '2022-01-04';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_status) VALUES (4, 4, '2022-01-04', 200.00, true) ON CONFLICT (order_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (5, 'Eve', 'eve@example.com', '777-777-7777') ON CONFLICT (customer_id) DO UPDATE SET email = 'eve2@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (6, 'Frank', 'frank@example.com', '444-444-4444') ON CONFLICT (customer_id) DO UPDATE SET phone_number = '444-123-4567';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (7, 'Grace', 'grace@example.com', '222-222-2222') ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'Grace Updated';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (8, 'Henry', 'henry@example.com', '666-666-6666') ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_status) VALUES (5, 5, '2022-01-05', 80.00, true) ON CONFLICT (order_id) DO UPDATE SET total_amount = 90.50;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_status) VALUES (6, 6, '2022-01-06', 60.75, false) ON CONFLICT (order_id) DO UPDATE SET payment_status = true;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_status) VALUES (7, 7, '2022-01-07', 70.00, false) ON CONFLICT (order_id) DO UPDATE SET order_date = '2022-01-08';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_status) VALUES (8, 8, '2022-01-08', 180.00, true) ON CONFLICT (order_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (9, 'Ivy', 'ivy@example.com', '999-999-9999') ON CONFLICT (customer_id) DO UPDATE SET email = 'ivy2@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (10, 'Jack', 'jack@example.com', '123-123-1234') ON CONFLICT (customer_id) DO UPDATE SET phone_number = '123-456-7890';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (11, 'Kate', 'kate@example.com', '456-456-4567') ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'Kate Updated';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (12, 'Liam', 'liam@example.com', '789-789-7890') ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_status) VALUES (9, 9, '2022-01-09', 95.50, true) ON CONFLICT (order_id) DO UPDATE SET total_amount = 110.25;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\n\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    payment_status BOOLEAN\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_status) VALUES (10, 10, '2022-01-10', 65.25, true) ON CONFLICT (order_id) DO UPDATE SET payment_status = false;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c1', 'Alice', 'alice@example.com', '1234567890') ON CONFLICT (customer_id) DO UPDATE SET name = 'Alice', email = 'alice@example.com', phone_number = '1234567890';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c2', 'Bob', 'bob@example.com', '9876543210') ON CONFLICT (customer_id) DO UPDATE SET name = 'Bob', email = 'bob@example.com', phone_number = '9876543210';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c3', 'Carol', 'carol@example.com', '5555555555') ON CONFLICT (customer_id) DO UPDATE SET name = 'Carol', email = 'carol@example.com', phone_number = '5555555555';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c4', 'David', 'david@example.com', '1111111111') ON CONFLICT (customer_id) DO UPDATE SET name = 'David', email = 'david@example.com', phone_number = '1111111111';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c5', 'Eve', 'eve@example.com', NULL) ON CONFLICT (customer_id) DO UPDATE SET name = 'Eve', email = 'eve@example.com', phone_number = NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c6', 'Frank', 'frank@example.com', '2222222222') ON CONFLICT (customer_id) DO UPDATE SET name = 'Frank', email = 'frank@example.com', phone_number = '2222222222';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c7', 'Grace', 'grace@example.com', '3333333333') ON CONFLICT (customer_id) DO UPDATE SET name = 'Grace', email = 'grace@example.com', phone_number = '3333333333';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c8', 'Henry', 'henry@example.com', '4444444444') ON CONFLICT (customer_id) DO UPDATE SET name = 'Henry', email = 'henry@example.com', phone_number = '4444444444';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c9', 'Ivy', 'ivy@example.com', '9999999999') ON CONFLICT (customer_id) DO UPDATE SET name = 'Ivy', email = 'ivy@example.com', phone_number = '9999999999';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c10', 'Jack', 'jack@example.com', '7777777777') ON CONFLICT (customer_id) DO UPDATE SET name = 'Jack', email = 'jack@example.com', phone_number = '7777777777';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c11', 'Karen', 'karen@example.com', '6666666666') ON CONFLICT (customer_id) DO UPDATE SET name = 'Karen', email = 'karen@example.com', phone_number = '6666666666';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c12', 'Liam', 'liam@example.com', '5555555555') ON CONFLICT (customer_id) DO UPDATE SET name = 'Liam', email = 'liam@example.com', phone_number = '5555555555';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c13', 'Mia', 'mia@example.com', '3333333333') ON CONFLICT (customer_id) DO UPDATE SET name = 'Mia', email = 'mia@example.com', phone_number = '3333333333';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c14', 'Noah', 'noah@example.com', '1212121212') ON CONFLICT (customer_id) DO UPDATE SET name = 'Noah', email = 'noah@example.com', phone_number = '1212121212';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c15', 'Olivia', 'olivia@example.com', '9898989898') ON CONFLICT (customer_id) DO UPDATE SET name = 'Olivia', email = 'olivia@example.com', phone_number = '9898989898';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c16', 'Peter', 'peter@example.com', '8765432109') ON CONFLICT (customer_id) DO UPDATE SET name = 'Peter', email = 'peter@example.com', phone_number = '8765432109';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c17', 'Quinn', 'quinn@example.com', '9876543210') ON CONFLICT (customer_id) DO UPDATE SET name = 'Quinn', email = 'quinn@example.com', phone_number = '9876543210';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c18', 'Ryan', 'ryan@example.com', '7654321098') ON CONFLICT (customer_id) DO UPDATE SET name = 'Ryan', email = 'ryan@example.com', phone_number = '7654321098';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c19', 'Sara', 'sara@example.com', NULL) ON CONFLICT (customer_id) DO UPDATE SET name = 'Sara', email = 'sara@example.com', phone_number = NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('c20', 'Tom', 'tom@example.com', '9876543210') ON CONFLICT (customer_id) DO UPDATE SET name = 'Tom', email = 'tom@example.com', phone_number = '9876543210';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('ec7d2b78-1de1-46a7-b2dc-1b15a88d294b', 'John Doe', 'john.doe@example.com', '1234567890') ON CONFLICT (customer_id) DO UPDATE SET name = 'John Doe', email = 'john.doe@example.com', phone_number = '1234567890';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('8e99e453-5e12-4dbf-9e8e-5fcf8019f0cc', 'Jane Smith', 'jane.smith@example.com', '0987654321') ON CONFLICT (customer_id) DO UPDATE SET name = 'Jane Smith', email = 'jane.smith@example.com', phone_number = '0987654321';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('fcd71bd8-e5d5-4feb-8f7b-59b9b575da5d', 'Alice Johnson', 'alice.johnson@example.com', '9876543210') ON CONFLICT (customer_id) DO UPDATE SET name = 'Alice Johnson', email = 'alice.johnson@example.com', phone_number = '9876543210';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('15584f54-5488-42ef-97e0-4460c1f5a138', 'Bob Brown', 'bob.brown@example.com', '4567891230') ON CONFLICT (customer_id) DO UPDATE SET name = 'Bob Brown', email = 'bob.brown@example.com', phone_number = '4567891230';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('25a7c7e9-1b6d-4218-97a7-6f2eb31ef6d8', 'Mary Johnson', 'mary.johnson@example.com', '7890123456') ON CONFLICT (customer_id) DO UPDATE SET name = 'Mary Johnson', email = 'mary.johnson@example.com', phone_number = '7890123456';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('df089ba2-38c2-4150-8348-3b75966d0594', 'David Lee', 'david.lee@example.com', '6543210987') ON CONFLICT (customer_id) DO UPDATE SET name = 'David Lee', email = 'david.lee@example.com', phone_number = '6543210987';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('a5ac8ad0-d503-4ecd-832a-fc8df18007a2', 'Sarah Wilson', 'sarah.wilson@example.com', '0123456789') ON CONFLICT (customer_id) DO UPDATE SET name = 'Sarah Wilson', email = 'sarah.wilson@example.com', phone_number = '0123456789';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('bced536a-c236-4354-9c14-fea0497c5cc2', 'Chris Miller', 'chris.miller@example.com', '3456789012') ON CONFLICT (customer_id) DO UPDATE SET name = 'Chris Miller', email = 'chris.miller@example.com', phone_number = '3456789012';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('67008334-28d5-4861-8f80-1c8c612db4c4', 'Emily Clark', 'emily.clark@example.com', '6789012345') ON CONFLICT (customer_id) DO UPDATE SET name = 'Emily Clark', email = 'emily.clark@example.com', phone_number = '6789012345';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, name, email, phone_number) VALUES ('e2e88791-f5b5-4f8f-9ddd-c380487e0676', 'Peter Harris', 'peter.harris@example.com', '2345678901') ON CONFLICT (customer_id) DO UPDATE SET name = 'Peter Harris', email = 'peter.harris@example.com', phone_number = '2345678901';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES ('b30f1f41-eb7c-448e-b8d0-f8f2cf44dbc0', 'ec7d2b78-1de1-46a7-b2dc-1b15a88d294b', '2022-07-15', 100.00) ON CONFLICT (order_id) DO UPDATE SET order_date = '2022-07-15', total_amount = 100.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES ('71ea0f31-d5e2-4c1e-a68d-4f51a3a34719', '8e99e453-5e12-4dbf-9e8e-5fcf8019f0cc', '2022-07-16', 150.00) ON CONFLICT (order_id) DO UPDATE SET order_date = '2022-07-16', total_amount = 150.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES ('7a789e20-abbf-495a-b7be-28e5792f5360', 'fcd71bd8-e5d5-4feb-8f7b-59b9b575da5d', '2022-07-17', 200.00) ON CONFLICT (order_id) DO UPDATE SET order_date = '2022-07-17', total_amount = 200.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES ('763ec5a4-974b-4394-915f-cc7634649fb5', '15584f54-5488-42ef-97e0-4460c1f5a138', '2022-07-18', 120.00) ON CONFLICT (order_id) DO UPDATE SET order_date = '2022-07-18', total_amount = 120.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES ('c0984725-58cd-464a-b8aa-9135e98bb6f6', '25a7c7e9-1b6d-4218-97a7-6f2eb31ef6d8', '2022-07-19', 175.00) ON CONFLICT (order_id) DO UPDATE SET order_date = '2022-07-19', total_amount = 175.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO order_items (order_item_id, order_id, product_id, quantity, price) VALUES ('c5d1fb52-a6a8-4c89-926d-673695d58a7d', 'b30f1f41-eb7c-448e-b8d0-f8f2cf44dbc0', 'cf793abe-4c8c-4936-8b84-48e664100766', 2, 50.00) ON CONFLICT (order_item_id) DO UPDATE SET order_id = 'b30f1f41-eb7c-448e-b8d0-f8f2cf44dbc0', product_id = 'cf793abe-4c8c-4936-8b84-48e664100766', quantity = 2, price = 50.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO order_items (order_item_id, order_id, product_id, quantity, price) VALUES ('b7c89717-05cf-4228-9e19-4b3b92f81023', '71ea0f31-d5e2-4c1e-a68d-4f51a3a34719', 'fa3b8ecc-ae2e-4fd6-90f6-7ec0c33cfbab', 3, 75.00) ON CONFLICT (order_item_id) DO UPDATE SET order_id = '71ea0f31-d5e2-4c1e-a68d-4f51a3a34719', product_id = 'fa3b8ecc-ae2e-4fd6-90f6-7ec0c33cfbab', quantity = 3, price = 75.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO order_items (order_item_id, order_id, product_id, quantity, price) VALUES ('7cd7f9f4-3881-4d8f-8c0e-2c3f70ac5702', '7a789e20-abbf-495a-b7be-28e5792f5360', '19e62f0e-465c-4e28-b4c0-bdb047617c6c', 1, 20.00) ON CONFLICT (order_item_id) DO UPDATE SET order_id = '7a789e20-abbf-495a-b7be-28e5792f5360', product_id = '19e62f0e-465c-4e28-b4c0-bdb047617c6c', quantity = 1, price = 20.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO order_items (order_item_id, order_id, product_id, quantity, price) VALUES ('c2e7d262-d25b-4934-b596-1d5852c3d29a', '763ec5a4-974b-4394-915f-cc7634649fb5', '167e8b77-2cfc-4c82-af63-866628d948fb', 4, 100.00) ON CONFLICT (order_item_id) DO UPDATE SET order_id = '763ec5a4-974b-4394-915f-cc7634649fb5', product_id = '167e8b77-2cfc-4c82-af63-866628d948fb', quantity = 4, price = 100.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n\tcustomer_id UUID PRIMARY KEY,\n\tname VARCHAR(255) NOT NULL,\n\temail VARCHAR(255) UNIQUE NOT NULL,\n\tphone_number VARCHAR(15)\n);\n\n\nCREATE TABLE orders (\n\torder_id UUID PRIMARY KEY,\n\tcustomer_id UUID REFERENCES customers(customer_id),\n\torder_date DATE NOT NULL,\n\ttotal_amount DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE order_items (\n\torder_item_id UUID PRIMARY KEY,\n\torder_id UUID REFERENCES orders(order_id),\n\tproduct_id UUID NOT NULL,\n\tquantity INT NOT NULL,\n\tprice DECIMAL(8, 2) NOT NULL,\n\tFOREIGN KEY (order_id) REFERENCES orders(order_id)\n);\n\n### STATEMENT\n\nUPSERT INTO order_items (order_item_id, order_id, product_id, quantity, price) VALUES ('d0ef5348-7a48-49df-88fa-64215b175e66', 'c0984725-58cd-464a-b8aa-9135e98bb6f6', '7583612d-c47a-4640-b6b5-157fe0fec087', 2, 40.00) ON CONFLICT (order_item_id) DO UPDATE SET order_id = 'c0984725-58cd-464a-b8aa-9135e98bb6f6', product_id = '7583612d-c47a-4640-b6b5-157fe0fec087', quantity = 2, price = 40.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, registration_date) VALUES (1, 'John Doe', 'john.doe@example.com', '2021-01-15') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, registration_date = EXCLUDED.registration_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES (1, 1, '2021-01-20', 100.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, order_date = EXCLUDED.order_date, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price) VALUES (1, 1, 1, 2, 25.00) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity, unit_price = EXCLUDED.unit_price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, category, unit_price) VALUES (1, 'Product A', 'Electronics', 50.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, category = EXCLUDED.category, unit_price = EXCLUDED.unit_price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, registration_date) VALUES (2, 'Jane Smith', 'jane.smith@example.com', '2021-02-10') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, registration_date = EXCLUDED.registration_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES (2, 2, '2021-02-15', 150.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, order_date = EXCLUDED.order_date, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price) VALUES (2, 2, 2, 3, 30.00) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity, unit_price = EXCLUDED.unit_price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, category, unit_price) VALUES (2, 'Product B', 'Clothing', 40.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, category = EXCLUDED.category, unit_price = EXCLUDED.unit_price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, registration_date) VALUES (3, 'Bob Johnson', 'bob.johnson@example.com', '2021-03-05') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, registration_date = EXCLUDED.registration_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES (3, 3, '2021-03-10', 200.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, order_date = EXCLUDED.order_date, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price) VALUES (3, 3, 3, 4, 35.00) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity, unit_price = EXCLUDED.unit_price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, category, unit_price) VALUES (3, 'Product C', 'Home Goods', 60.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, category = EXCLUDED.category, unit_price = EXCLUDED.unit_price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, registration_date) VALUES (4, 'Alice Brown', 'alice.brown@example.com', '2021-04-20') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, registration_date = EXCLUDED.registration_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES (4, 4, '2021-04-25', 250.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, order_date = EXCLUDED.order_date, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price) VALUES (4, 4, 4, 5, 45.00) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity, unit_price = EXCLUDED.unit_price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, category, unit_price) VALUES (4, 'Product D', 'Sports Equipment', 70.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, category = EXCLUDED.category, unit_price = EXCLUDED.unit_price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, registration_date) VALUES (5, 'Mike Wilson', 'mike.wilson@example.com', '2021-05-15') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, registration_date = EXCLUDED.registration_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES (5, 5, '2021-05-20', 300.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, order_date = EXCLUDED.order_date, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price) VALUES (5, 5, 5, 6, 55.00) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity, unit_price = EXCLUDED.unit_price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, category, unit_price) VALUES (5, 'Product E', 'Books', 25.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, category = EXCLUDED.category, unit_price = EXCLUDED.unit_price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, registration_date) VALUES (1, 'John Doe', 'john.doe@example.com', '2022-01-01') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', email = 'john.doe@example.com', registration_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES (1, 1, '2022-01-01', 100.00) ON DUPLICATE KEY UPDATE customer_id = 1, order_date = '2022-01-01', total_amount = 100.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price) VALUES (1, 1, 1, 2, 25.00) ON DUPLICATE KEY UPDATE order_id = 1, product_id = 1, quantity = 2, unit_price = 25.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO products (product_id, product_name, category, unit_price) VALUES (1, 'Product A', 'Category A', 20.00) ON DUPLICATE KEY UPDATE product_name = 'Product A', category = 'Category A', unit_price = 20.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, registration_date) VALUES (2, 'Jane Smith', 'jane.smith@example.com', '2022-01-05') ON DUPLICATE KEY UPDATE customer_name = 'Jane Smith', email = 'jane.smith@example.com', registration_date = '2022-01-05';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES (2, 2, '2022-01-05', 150.00) ON DUPLICATE KEY UPDATE customer_id = 2, order_date = '2022-01-05', total_amount = 150.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price) VALUES (2, 2, 2, 3, 30.00) ON DUPLICATE KEY UPDATE order_id = 2, product_id = 2, quantity = 3, unit_price = 30.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO products (product_id, product_name, category, unit_price) VALUES (2, 'Product B', 'Category B', 30.00) ON DUPLICATE KEY UPDATE product_name = 'Product B', category = 'Category B', unit_price = 30.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, registration_date) VALUES (3, 'Alice Johnson', 'alice.johnson@example.com', '2022-01-10') ON DUPLICATE KEY UPDATE customer_name = 'Alice Johnson', email = 'alice.johnson@example.com', registration_date = '2022-01-10';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES (3, 3, '2022-01-10', 200.00) ON DUPLICATE KEY UPDATE customer_id = 3, order_date = '2022-01-10', total_amount = 200.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price) VALUES (3, 3, 3, 4, 40.00) ON DUPLICATE KEY UPDATE order_id = 3, product_id = 3, quantity = 4, unit_price = 40.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO products (product_id, product_name, category, unit_price) VALUES (3, 'Product C', 'Category C', 40.00) ON DUPLICATE KEY UPDATE product_name = 'Product C', category = 'Category C', unit_price = 40.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, registration_date) VALUES (4, 'Bob Williams', 'bob.williams@example.com', '2022-01-15') ON DUPLICATE KEY UPDATE customer_name = 'Bob Williams', email = 'bob.williams@example.com', registration_date = '2022-01-15';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES (4, 4, '2022-01-15', 250.00) ON DUPLICATE KEY UPDATE customer_id = 4, order_date = '2022-01-15', total_amount = 250.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price) VALUES (4, 4, 4, 5, 50.00) ON DUPLICATE KEY UPDATE order_id = 4, product_id = 4, quantity = 5, unit_price = 50.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO products (product_id, product_name, category, unit_price) VALUES (4, 'Product D', 'Category D', 50.00) ON DUPLICATE KEY UPDATE product_name = 'Product D', category = 'Category D', unit_price = 50.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO customers (customer_id, customer_name, email, registration_date) VALUES (5, 'Eva Brown', 'eva.brown@example.com', '2022-01-20') ON DUPLICATE KEY UPDATE customer_name = 'Eva Brown', email = 'eva.brown@example.com', registration_date = '2022-01-20';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES (5, 5, '2022-01-20', 300.00) ON DUPLICATE KEY UPDATE customer_id = 5, order_date = '2022-01-20', total_amount = 300.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price) VALUES (5, 5, 5, 6, 60.00) ON DUPLICATE KEY UPDATE order_id = 5, product_id = 5, quantity = 6, unit_price = 60.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    registration_date DATE\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    unit_price DECIMAL(8,2)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category VARCHAR(50),\n    unit_price DECIMAL(8,2)\n);\n\n### STATEMENT\n\nUPSERT INTO products (product_id, product_name, category, unit_price) VALUES (5, 'Product E', 'Category E', 60.00) ON DUPLICATE KEY UPDATE product_name = 'Product E', category = 'Category E', unit_price = 60.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '1234567890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, order_date, customer_id, total_amount) VALUES (1, '2022-01-01', 1, 100.00) ON CONFLICT (order_id) DO UPDATE SET order_date = EXCLUDED.order_date, customer_id = EXCLUDED.customer_id, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, price) VALUES (1, 'Product A', 50.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity) VALUES (1, 1, 1, 2) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO recommendations (recommendation_id, customer_id, product_id, rationale) VALUES (1, 1, 1, 'Highly recommended') ON CONFLICT (recommendation_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rationale = EXCLUDED.rationale;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (2, 'Jane Smith', 'jane.smith@example.com', '9876543210') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, order_date, customer_id, total_amount) VALUES (2, '2022-01-02', 2, 150.00) ON CONFLICT (order_id) DO UPDATE SET order_date = EXCLUDED.order_date, customer_id = EXCLUDED.customer_id, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, price) VALUES (2, 'Product B', 75.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity) VALUES (2, 2, 2, 3) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO recommendations (recommendation_id, customer_id, product_id, rationale) VALUES (2, 2, 2, 'Great choice') ON CONFLICT (recommendation_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rationale = EXCLUDED.rationale;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (3, 'Alice Cooper', 'alice.cooper@example.com', '2468013579') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, order_date, customer_id, total_amount) VALUES (3, '2022-01-03', 3, 200.00) ON CONFLICT (order_id) DO UPDATE SET order_date = EXCLUDED.order_date, customer_id = EXCLUDED.customer_id, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, price) VALUES (3, 'Product C', 100.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity) VALUES (3, 3, 3, 1) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO recommendations (recommendation_id, customer_id, product_id, rationale) VALUES (3, 3, 3, 'Must-have item') ON CONFLICT (recommendation_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rationale = EXCLUDED.rationale;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (4, 'Michael Jackson', 'michael.jackson@example.com', '3692581470') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, order_date, customer_id, total_amount) VALUES (4, '2022-01-04', 4, 300.00) ON CONFLICT (order_id) DO UPDATE SET order_date = EXCLUDED.order_date, customer_id = EXCLUDED.customer_id, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, price) VALUES (4, 'Product D', 120.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity) VALUES (4, 4, 4, 2) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO recommendations (recommendation_id, customer_id, product_id, rationale) VALUES (4, 4, 4, 'Top seller') ON CONFLICT (recommendation_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rationale = EXCLUDED.rationale;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, order_date, customer_id, total_amount) VALUES (1, '2021-10-10', 1, 100.00) ON CONFLICT (order_id) DO UPDATE SET order_date = EXCLUDED.order_date, customer_id = EXCLUDED.customer_id, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, price) VALUES (1, 'Product A', 50.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity) VALUES (1, 1, 1, 2) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO recommendations (recommendation_id, customer_id, product_id, rationale) VALUES (1, 1, 1, 'Highly recommended product') ON CONFLICT (recommendation_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rationale = EXCLUDED.rationale;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (2, 'Jane Smith', 'janesmith@example.com', '555-555-5555') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, order_date, customer_id, total_amount) VALUES (2, '2021-10-11', 2, 75.00) ON CONFLICT (order_id) DO UPDATE SET order_date = EXCLUDED.order_date, customer_id = EXCLUDED.customer_id, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, price) VALUES (2, 'Product B', 30.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity) VALUES (2, 2, 2, 3) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO recommendations (recommendation_id, customer_id, product_id, rationale) VALUES (2, 2, 2, 'A great choice for you') ON CONFLICT (recommendation_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rationale = EXCLUDED.rationale;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (3, 'Bob Johnson', 'bobJohnson@example.com', '777-777-7777') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, order_date, customer_id, total_amount) VALUES (3, '2021-10-12', 3, 120.00) ON CONFLICT (order_id) DO UPDATE SET order_date = EXCLUDED.order_date, customer_id = EXCLUDED.customer_id, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, price) VALUES (3, 'Product C', 20.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity) VALUES (3, 3, 3, 5) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO recommendations (recommendation_id, customer_id, product_id, rationale) VALUES (3, 3, 3, 'Must try this product') ON CONFLICT (recommendation_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rationale = EXCLUDED.rationale;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (4, 'Alice Brown', 'aliceBrown@example.com', '999-999-9999') ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, email = EXCLUDED.email, phone_number = EXCLUDED.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO orders (order_id, order_date, customer_id, total_amount) VALUES (4, '2021-10-13', 4, 90.00) ON CONFLICT (order_id) DO UPDATE SET order_date = EXCLUDED.order_date, customer_id = EXCLUDED.customer_id, total_amount = EXCLUDED.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO products (product_id, product_name, price) VALUES (4, 'Product D', 40.00) ON CONFLICT (product_id) DO UPDATE SET product_name = EXCLUDED.product_name, price = EXCLUDED.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO order_items (order_item_id, order_id, product_id, quantity) VALUES (4, 4, 4, 4) ON CONFLICT (order_item_id) DO UPDATE SET order_id = EXCLUDED.order_id, product_id = EXCLUDED.product_id, quantity = EXCLUDED.quantity;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    phone_number VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\nCREATE TABLE recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rationale TEXT,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nINSERT INTO recommendations (recommendation_id, customer_id, product_id, rationale) VALUES (4, 4, 4, 'Top rated product') ON CONFLICT (recommendation_id) DO UPDATE SET customer_id = EXCLUDED.customer_id, product_id = EXCLUDED.product_id, rationale = EXCLUDED.rationale;"
]