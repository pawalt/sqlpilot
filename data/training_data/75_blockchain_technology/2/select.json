[
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts_parameters",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name FROM smart_contracts_parameters",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT creator_address FROM smart_contracts_parameters",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts_parameters WHERE creation_date > '2021-01-01'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts_parameters WHERE creator_address = '0x1234567890'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, creation_date FROM smart_contracts_parameters WHERE contract_name LIKE '%example%'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM smart_contracts_parameters",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, JSONB_ARRAY_LENGTH(parameters) AS num_params FROM smart_contracts_parameters",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, json_typeof(parameters) AS param_type FROM smart_contracts_parameters",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT DISTINCT creator_address FROM smart_contracts_parameters",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, creation_date FROM smart_contracts_parameters ORDER BY creation_date DESC",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts_parameters WHERE contract_id IN ('uuid1', 'uuid2', 'uuid3')",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT AVG(JSONB_ARRAY_LENGTH(parameters)) FROM smart_contracts_parameters",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT SUM(JSONB_ARRAY_LENGTH(parameters)) FROM smart_contracts_parameters",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT MAX(creation_date) FROM smart_contracts_parameters",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT MIN(creation_date) FROM smart_contracts_parameters",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, creator_address FROM smart_contracts_parameters WHERE creation_date BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts_parameters WHERE creator_address IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts_parameters WHERE parameters->>'param_key' = 'param_value'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts_parameters WHERE contract_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name FROM smart_contracts_parameters WHERE creator_address = 'example_address';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts_parameters WHERE creation_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM smart_contracts_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, JSONB_ARRAY_LENGTH(parameters) AS num_parameters FROM smart_contracts_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT DISTINCT creator_address FROM smart_contracts_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, parameters->'parameter_1' AS parameter_1_value FROM smart_contracts_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, creation_date FROM smart_contracts_parameters ORDER BY creation_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT AVG(JSONB_ARRAY_LENGTH(parameters)) FROM smart_contracts_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts_parameters WHERE creator_address NOT LIKE '%admin%';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, JSONB_ARRAY_ELEMENTS_TEXT(parameters) AS parameter_value FROM smart_contracts_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT EXTRACT(YEAR FROM creation_date) AS creation_year, COUNT(*) AS num_contracts FROM smart_contracts_parameters GROUP BY EXTRACT(YEAR FROM creation_date);",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, creator_address, TO_CHAR(creation_date, 'DD/MM/YYYY') AS formatted_creation_date FROM smart_contracts_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT creator_address) FROM smart_contracts_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, creator_address, parameters->'parameter_2' AS parameter_2_value FROM smart_contracts_parameters WHERE parameters->'parameter_1' = 'value_1';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, creator_address, COUNT(*) OVER(PARTITION BY creator_address) AS num_contracts_by_creator FROM smart_contracts_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, creator_address, COUNT(*) OVER(ORDER BY creation_date) AS cumulative_count FROM smart_contracts_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts_parameters (\n    contract_id UUID PRIMARY KEY,\n    contract_name VARCHAR(100),\n    creator_address VARCHAR(50),\n    creation_date DATE,\n    parameters JSONB\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, creator_address, parameters->'parameter_1' AS parameter_1_value FROM smart_contracts_parameters WHERE parameters @> '{",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name FROM smart_contracts WHERE contract_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM contract_events;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_id, event_type FROM contract_events;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_data FROM contract_events WHERE event_id = '123e4567-e89b-12d3-a456-426614174001';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts INNER JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts LEFT JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts RIGHT JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, event_type FROM smart_contracts LEFT JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, event_data FROM smart_contracts LEFT JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id WHERE event_type = 'payment';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, event_data FROM smart_contracts RIGHT JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id WHERE event_timestamp > '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM contract_events;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, COUNT(*) FROM smart_contracts GROUP BY contract_name;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_type, COUNT(*) FROM contract_events GROUP BY event_type;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(event_timestamp) FROM contract_events;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(event_timestamp) FROM contract_events;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(event_timestamp) FROM contract_events;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, AVG(event_timestamp) FROM smart_contracts LEFT JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id GROUP BY contract_name;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, MAX(event_timestamp) FROM smart_contracts LEFT JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id GROUP BY contract_name;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts WHERE contract_id = '12345678-1234-1234-1234-123456789abc'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name FROM smart_contracts WHERE contract_name LIKE '%contract%'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_parameters->'field1' AS field1_value FROM smart_contracts",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM smart_contracts",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_type, COUNT(event_type) AS event_count FROM contract_events GROUP BY event_type",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, event_type FROM smart_contracts INNER JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, event_id FROM smart_contracts LEFT JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, event_data->'field1' AS event_field1 FROM smart_contracts JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, MAX(event_timestamp) AS latest_event FROM smart_contracts JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id GROUP BY contract_name",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(LENGTH(contract_name)) AS avg_contract_name_length FROM smart_contracts",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, event_data FROM smart_contracts CROSS JOIN contract_events",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_parameters->'field1' AS field1_value FROM smart_contracts WHERE contract_parameters @> '{\"field2\": \"value2\"}'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, event_type FROM smart_contracts WHERE contract_id IN (SELECT contract_id FROM contract_events WHERE event_type = 'stake')",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, event_type, COUNT(*) AS event_count FROM smart_contracts JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id GROUP BY contract_name, event_type",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT contract_name FROM smart_contracts",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, event_id FROM smart_contracts UNION SELECT contract_name, event_id FROM contract_events",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, event_data->'field1' AS event_field1 FROM smart_contracts JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id WHERE event_type = 'transfer'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, event_timestamp FROM smart_contracts WHERE contract_id = '87654321-4321-4321-4321-210987654321'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT event_type, MAX(event_timestamp) AS latest_timestamp FROM contract_events GROUP BY event_type",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n  contract_id UUID PRIMARY KEY,\n  contract_name VARCHAR(255),\n  contract_parameters JSON\n);\n\n\nCREATE TABLE contract_events (\n  event_id UUID PRIMARY KEY,\n  contract_id UUID,\n  event_type VARCHAR(100),\n  event_data JSON,\n  event_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT contract_name, COUNT(event_type) AS event_count FROM smart_contracts LEFT JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id GROUP BY contract_name",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address, creation_date FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM smart_contracts WHERE contract_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_name, contract_address FROM smart_contracts WHERE creation_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT DISTINCT contract_name FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_address FROM smart_contracts WHERE contract_name LIKE '%Token%';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, creation_date FROM smart_contracts WHERE creation_date BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT AVG(contract_id) AS avg_id FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT MAX(contract_id) AS max_id FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT MIN(contract_id) AS min_id FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, creation_date FROM smart_contracts ORDER BY creation_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address FROM smart_contracts ORDER BY contract_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address, creation_date FROM smart_contracts WHERE contract_id IN (1, 2, 3, 4);",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_name, contract_address, creation_date FROM smart_contracts WHERE contract_id < 10;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_name, contract_address FROM smart_contracts WHERE creation_date < '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT COUNT(contract_id) AS total_contracts FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT AVG(contract_id) AS avg_id, MAX(contract_id) AS max_id, MIN(contract_id) AS min_id FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name FROM smart_contracts WHERE contract_name IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name FROM smart_contracts WHERE contract_address IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address FROM smart_contracts WHERE contract_id = (SELECT MIN(contract_id) FROM smart_contracts);",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_name, COUNT(*) AS total_count FROM smart_contracts GROUP BY contract_name HAVING total_count > 1;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_name, contract_address FROM smart_contracts WHERE contract_id = 1",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM smart_contracts WHERE creation_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, creation_date FROM smart_contracts WHERE contract_id IN (5, 10, 15)",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address, creation_date FROM smart_contracts WHERE contract_name LIKE '%token%'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address FROM smart_contracts WHERE creation_date > '2022-06-30'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address, creation_date FROM smart_contracts ORDER BY creation_date DESC",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address FROM smart_contracts WHERE creation_date < '2022-04-15' ORDER BY contract_name ASC",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address FROM smart_contracts WHERE contract_name IN ('Token A', 'Token B', 'Token C')",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address FROM smart_contracts WHERE contract_address IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT COUNT(contract_id) AS total_contracts FROM smart_contracts",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT AVG(contract_id) AS avg_contract_id FROM smart_contracts",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT MIN(contract_id) AS min_contract_id FROM smart_contracts",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT MAX(contract_id) AS max_contract_id FROM smart_contracts",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT DISTINCT contract_name FROM smart_contracts",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address FROM smart_contracts WHERE DATE(creation_date) = '2022-09-15'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address FROM smart_contracts WHERE YEAR(creation_date) = 2022",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, DAYNAME(creation_date) AS creation_day FROM smart_contracts",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address FROM smart_contracts LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address FROM smart_contracts OFFSET 5 LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(255), contract_address VARCHAR(255), creation_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT contract_id, contract_name, contract_address FROM smart_contracts WHERE contract_name NOT LIKE '%DAO%'",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, creator FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_id, version, creation_date FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM contract_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT param_name, param_value FROM contract_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT parameter_id, param_name FROM contract_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM parameter_history;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT old_value, new_value FROM parameter_history;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT history_id, change_date FROM parameter_history;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM contract_logs;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT log_id, log_message FROM contract_logs;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_id, log_date FROM contract_logs;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT sc.contract_id, cp.param_name, cp.param_value FROM smart_contracts sc INNER JOIN contract_parameters cp ON sc.contract_id = cp.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT ch.history_id, ch.old_value, ch.new_value FROM contract_parameters cp INNER JOIN parameter_history ch ON cp.parameter_id = ch.parameter_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT sc.contract_id, cl.log_message, cl.log_date FROM smart_contracts sc INNER JOIN contract_logs cl ON sc.contract_id = cl.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT sc.contract_id, sc.contract_name, cp.param_value, ch.old_value FROM smart_contracts sc INNER JOIN contract_parameters cp ON sc.contract_id = cp.contract_id INNER JOIN parameter_history ch ON cp.parameter_id = ch.parameter_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT sc.contract_name, cl.log_message, cl.log_date FROM smart_contracts sc INNER JOIN contract_logs cl ON sc.contract_id = cl.contract_id WHERE cl.log_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT sc.contract_name, cp.param_name, ch.old_value FROM smart_contracts sc INNER JOIN contract_parameters cp ON sc.contract_id = cp.contract_id INNER JOIN parameter_history ch ON cp.parameter_id = ch.parameter_id WHERE ch.change_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT sc.contract_id, sc.creator, cp.param_name, ch.old_value, cl.log_message FROM smart_contracts sc LEFT JOIN contract_parameters cp ON sc.contract_id = cp.contract_id LEFT JOIN parameter_history ch ON cp.parameter_id = ch.parameter_id LEFT JOIN contract_logs cl ON sc.contract_id = cl.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT cp.param_name, COUNT(ch.history_id) AS num_changes FROM contract_parameters cp LEFT JOIN parameter_history ch ON cp.parameter_id = ch.parameter_id GROUP BY cp.param_name ORDER BY num_changes DESC;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT sc.contract_name, cp.param_name, ch.old_value, cl.log_message FROM smart_contracts sc INNER JOIN contract_parameters cp ON sc.contract_id = cp.contract_id INNER JOIN parameter_history ch ON cp.parameter_id = ch.parameter_id INNER JOIN contract_logs cl ON sc.contract_id = cl.contract_id WHERE ch.change_date = (SELECT MAX(change_date) FROM parameter_history WHERE parameter_id = cp.parameter_id);",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name, version FROM smart_contracts WHERE creator='Alice';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_id, creator FROM smart_contracts WHERE version > 1;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_id, creator, creation_date FROM smart_contracts WHERE creator='Bob' AND version = 2;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_id, creator, creation_date FROM smart_contracts WHERE version >= 3 OR creator='Charlie';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT c.contract_id, c.contract_name, p.param_name, p.param_value FROM smart_contracts c JOIN contract_parameters p ON c.contract_id = p.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT c.contract_name, p.param_value, h.old_value, h.new_value FROM smart_contracts c JOIN contract_parameters p ON c.contract_id = p.contract_id JOIN parameter_history h ON p.parameter_id = h.parameter_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT c.contract_name, l.log_message, l.log_date FROM smart_contracts c JOIN contract_logs l ON c.contract_id = l.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT c.contract_name, p.param_name, h.old_value, h.new_value, h.change_date FROM smart_contracts c JOIN contract_parameters p ON c.contract_id = p.contract_id JOIN parameter_history h ON p.parameter_id = h.parameter_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts ORDER BY creation_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_id, creator, MAX(version) FROM smart_contracts GROUP BY creator;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT creator, COUNT(*) AS num_contracts FROM smart_contracts GROUP BY creator HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT c.contract_name, COUNT(l.log_id) AS num_logs FROM smart_contracts c JOIN contract_logs l ON c.contract_id = l.contract_id GROUP BY c.contract_name ORDER BY num_logs DESC;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT c.contract_name, COUNT(h.history_id) AS num_history FROM smart_contracts c JOIN contract_parameters p ON c.contract_id = p.contract_id JOIN parameter_history h ON p.parameter_id = h.parameter_id GROUP BY c.contract_name ORDER BY num_history DESC;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT c.contract_name, MAX(h.change_date) AS latest_change FROM smart_contracts c JOIN contract_parameters p ON c.contract_id = p.contract_id JOIN parameter_history h ON p.parameter_id = h.parameter_id GROUP BY c.contract_name;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT creator, AVG(version) AS avg_version FROM smart_contracts GROUP BY creator;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT creator, DATE(creation_date) AS creation_day FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT c.contract_name, COUNT(DISTINCT p.param_name) AS num_params FROM smart_contracts c JOIN contract_parameters p ON c.contract_id = p.contract_id GROUP BY c.contract_name ORDER BY num_params DESC;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT c.contract_name, p.param_name, h.old_value, h.new_value FROM smart_contracts c JOIN contract_parameters p ON c.contract_id = p.contract_id JOIN parameter_history h ON p.parameter_id = h.parameter_id WHERE h.change_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    version INT,\n    creator VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    param_name VARCHAR(255),\n    param_value VARCHAR(255),\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE parameter_history (\n    history_id INT PRIMARY KEY,\n    parameter_id INT,\n    old_value VARCHAR(255),\n    new_value VARCHAR(255),\n    change_date TIMESTAMP,\n    FOREIGN KEY (parameter_id) REFERENCES contract_parameters(parameter_id)\n);\n\nCREATE TABLE contract_logs (\n    log_id INT PRIMARY KEY,\n    contract_id INT,\n    log_message TEXT,\n    log_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT creator, SUM(version) AS total_version FROM smart_contracts GROUP BY creator ORDER BY total_version DESC;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, contract_address FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, contract_owner FROM smart_contracts WHERE creation_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM contract_parameters;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT parameter_name, parameter_value FROM contract_parameters WHERE contract_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM contract_events;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT event_name, event_timestamp FROM contract_events WHERE contract_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM contract_functions;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT function_name, function_output FROM contract_functions WHERE contract_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM contract_versions;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT version_number, release_date FROM contract_versions WHERE contract_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT smart_contracts.contract_name, contract_parameters.parameter_name FROM smart_contracts INNER JOIN contract_parameters ON smart_contracts.contract_id = contract_parameters.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT smart_contracts.contract_name, contract_events.event_name FROM smart_contracts INNER JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT smart_contracts.contract_name, contract_functions.function_name FROM smart_contracts INNER JOIN contract_functions ON smart_contracts.contract_id = contract_functions.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT smart_contracts.contract_name, contract_versions.version_number FROM smart_contracts INNER JOIN contract_versions ON smart_contracts.contract_id = contract_versions.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT smart_contracts.contract_name, contract_parameters.parameter_value FROM smart_contracts LEFT JOIN contract_parameters ON smart_contracts.contract_id = contract_parameters.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT MAX(creation_date) FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT AVG(contract_id) FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts ORDER BY creation_date DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT * FROM smart_contracts WHERE contract_owner = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, creation_date FROM smart_contracts WHERE contract_address = '0x123456789';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_id, contract_name FROM smart_contracts WHERE creation_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM smart_contracts;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, COUNT(parameter_id) FROM smart_contracts JOIN contract_parameters ON smart_contracts.contract_id = contract_parameters.contract_id GROUP BY contract_name;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, event_name, event_timestamp FROM smart_contracts JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id WHERE event_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, SUM(LENGTH(parameter_value)) AS total_parameter_length FROM smart_contracts JOIN contract_parameters ON smart_contracts.contract_id = contract_parameters.contract_id GROUP BY contract_name ORDER BY total_parameter_length DESC;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, function_name FROM smart_contracts JOIN contract_functions ON smart_contracts.contract_id = contract_functions.contract_id WHERE JSON_LENGTH(function_output) > 0;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, function_name, function_params FROM smart_contracts JOIN contract_functions ON smart_contracts.contract_id = contract_functions.contract_id WHERE JSON_CONTAINS(function_params, '\"type\":\"event\"') = 1;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, version_number, release_date FROM smart_contracts JOIN contract_versions ON smart_contracts.contract_id = contract_versions.contract_id WHERE release_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, MAX(event_timestamp) AS latest_event_timestamp FROM smart_contracts JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id GROUP BY contract_name;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, AVG(UNIX_TIMESTAMP(release_date) - UNIX_TIMESTAMP(creation_date)) AS average_time_to_release FROM smart_contracts JOIN contract_versions ON smart_contracts.contract_id = contract_versions.contract_id GROUP BY contract_name;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, COUNT(DISTINCT function_name) AS unique_functions FROM smart_contracts JOIN contract_functions ON smart_contracts.contract_id = contract_functions.contract_id;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, event_name, JSON_EXTRACT(event_data, '$.amount') AS amount FROM smart_contracts JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id WHERE JSON_EXTRACT(event_data, '$.type') = 'payment';",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, version_number FROM smart_contracts JOIN contract_versions ON smart_contracts.contract_id = contract_versions.contract_id ORDER BY release_date DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, MAX(JSON_UNQUOTE(JSON_EXTRACT(event_data, '$.level'))) AS max_level_event FROM smart_contracts JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id GROUP BY contract_name;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, creation_date FROM smart_contracts WHERE YEAR(creation_date) = 2022;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, event_name, event_timestamp FROM smart_contracts JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id WHERE event_timestamp > (SELECT creation_date FROM smart_contracts WHERE contract_owner = 'Bob');",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, event_name, COUNT(*) AS total_events FROM smart_contracts JOIN contract_events ON smart_contracts.contract_id = contract_events.contract_id GROUP BY smart_contracts.contract_id HAVING total_events > 5;",
  "### TABLEDATA\n\nCREATE TABLE smart_contracts (\n    contract_id INT PRIMARY KEY,\n    contract_name VARCHAR(255),\n    contract_address VARCHAR(255),\n    contract_owner VARCHAR(255),\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE contract_parameters (\n    parameter_id INT PRIMARY KEY,\n    contract_id INT,\n    parameter_name VARCHAR(255),\n    parameter_value TEXT,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_events (\n    event_id INT PRIMARY KEY,\n    contract_id INT,\n    event_name VARCHAR(255),\n    event_data JSON,\n    event_timestamp TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_functions (\n    function_id INT PRIMARY KEY,\n    contract_id INT,\n    function_name VARCHAR(255),\n    function_params JSON,\n    function_output JSON,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\nCREATE TABLE contract_versions (\n    version_id INT PRIMARY KEY,\n    contract_id INT,\n    version_number VARCHAR(50),\n    release_date TIMESTAMP,\n    FOREIGN KEY (contract_id) REFERENCES smart_contracts(contract_id)\n);\n\n### STATEMENT\n\nSELECT contract_name, AVG(JSON_UNQUOTE(JSON_EXTRACT(function_output, '$.execution_time'))) AS avg_execution_time FROM smart_contracts JOIN contract_functions ON smart_contracts.contract_id = contract_functions.contract_id WHERE JSON_UNQUOTE(JSON_EXTRACT(function_output, '$.status')) = 'success';"
]