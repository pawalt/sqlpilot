[
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT transaction_id, sender_address, amount FROM transaction_details WHERE amount > 100",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details WHERE sender_address = '123 Main St'",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, transaction_date FROM transaction_details WHERE transaction_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details ORDER BY transaction_date DESC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transaction_details",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address FROM transaction_details WHERE blockchain_hash IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_transaction_amount FROM transaction_details",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT MAX(amount) AS max_transaction_amount FROM transaction_details",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT sender_address, SUM(amount) AS total_sent_amount FROM transaction_details WHERE sender_address = '456 Elm St'",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT receiver_address, SUM(amount) AS total_received_amount FROM transaction_details WHERE receiver_address = '789 Oak St'",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT...",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details WHERE amount > 1000 AND transaction_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT transaction_id, sender_address FROM transaction_details WHERE receiver_address LIKE '%Bitcoin%'",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transaction_details WHERE sender_address = 'Alice' AND amount >= 500",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM transaction_details WHERE amount BETWEEN 100 AND 500 ORDER BY amount DESC",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transaction_details WHERE transaction_date BETWEEN '2022-01-01' AND '2022-03-31'",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM transaction_details WHERE sender_address = 'Bob' AND receiver_address = 'Alice'",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT sender_address, COUNT(*) AS total_transactions FROM transaction_details GROUP BY sender_address",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT DISTINCT receiver_address FROM transaction_details WHERE transaction_date >= '2022-02-01'",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT transaction_id, blockchain_hash FROM transaction_details WHERE sender_address = 'Charlie' OR receiver_address = 'David'",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details WHERE timestampdiff(hour, transaction_date, NOW()) < 24",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM transaction_details WHERE transaction_date > NOW() - INTERVAL 1 WEEK",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM transaction_details WHERE amount IN (100, 250, 500)",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount, MAX(amount) AS max_amount FROM transaction_details WHERE sender_address = 'Eve'",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM transaction_details WHERE sender_address != receiver_address",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT transaction_id, receiver_address FROM transaction_details WHERE receiver_address <> sender_address",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT sender_address, COUNT(*) AS total_transactions FROM transaction_details WHERE transaction_date >= '2022-01-01' AND transaction_date < '2023-01-01' GROUP BY sender_address HAVING COUNT(*) > 10",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details WHERE amount > (SELECT AVG(amount) FROM transaction_details)",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, MAX(amount) AS highest_amount FROM transaction_details GROUP BY sender_address, receiver_address",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, blockchain_hash FROM transaction_details WHERE blockchain_hash IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT receiver_address FROM transaction_details WHERE LENGTH(sender_address) > 15",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    sender_address STRING,\n    receiver_address STRING,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    blockchain_hash STRING\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM transaction_details WHERE amount >= 1000 AND sender_address IN ('Mike', 'Nancy', 'Oliver')",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, timestamp, sender_address, receiver_address, amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE sender_address = 'abc123';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT receiver_address, amount FROM transactions WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(amount) AS max_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sender_address, SUM(amount) AS total_amount FROM transactions GROUP BY sender_address;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount = (SELECT MAX(amount) FROM transactions);",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, timestamp FROM blocks;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT block_id, previous_block_hash FROM blocks WHERE block_id > 100;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blocks ORDER BY timestamp ASC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(DATEDIFF(timestamp, previous_block_hash)) AS average_time_between_blocks FROM blocks;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blocks WHERE block_hash = 'xyz456';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(block_id) AS total_blocks FROM blocks;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(block_id) AS total_blocks, MAX(block_id) AS max_block_id FROM blocks;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash FROM blocks WHERE timestamp >= '2022-01-01' AND timestamp < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT receiver_address, COUNT(*) AS total_transactions FROM transactions GROUP BY receiver_address;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount, COUNT(*) AS total_transactions FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, timestamp, sender_address, receiver_address, amount FROM transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, timestamp, sender_address, receiver_address FROM transactions WHERE TIMESTAMP >= '2022-01-01' AND TIMESTAMP < '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE sender_address = '1234567890' AND receiver_address = '0987654321';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, previous_block_hash, timestamp FROM blocks WHERE block_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sender_address, SUM(amount) AS total_sent FROM transactions GROUP BY sender_address;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT receiver_address, COUNT(*) AS total_transactions FROM transactions GROUP BY receiver_address;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT timestamp, COUNT(*) AS total_blocks FROM blocks GROUP BY timestamp;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions INNER JOIN blocks ON transactions.timestamp = blocks.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transactions.transaction_id, blocks.block_id, transactions.amount FROM transactions LEFT JOIN blocks ON transactions.transaction_id = blocks.block_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount, MIN(amount) AS min_amount, MAX(amount) AS max_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, COUNT(*) AS total_transactions FROM transactions GROUP BY sender_address, receiver_address;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount, sender_address FROM transactions GROUP BY sender_address HAVING AVG(amount) > 500;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT block_id, timestamp FROM blocks ORDER BY timestamp DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, SUM(amount) AS total_amount FROM transactions GROUP BY sender_address, receiver_address HAVING SUM(amount) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, MAX(amount) AS max_amount FROM transactions GROUP BY sender_address, receiver_address;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sender_address, COUNT(*) AS total_transactions FROM transactions WHERE amount > 500 GROUP BY sender_address;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT receiver_address, AVG(amount) AS average_amount FROM transactions GROUP BY receiver_address HAVING AVG(amount) < 500;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL\n);\n\nCREATE TABLE blocks (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255) UNIQUE,\n    previous_block_hash VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT block_id, COUNT(*) AS total_transactions FROM blocks WHERE timestamp >= '2022-01-01' GROUP BY block_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, timestamp, sender_address, receiver_address FROM transaction_details;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, asset_type, amount FROM transaction_details WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_blocks;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, block_timestamp FROM blockchain_blocks WHERE num_transactions > 10;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT b.block_id, b.block_hash, b.block_timestamp, bt.transaction_id, t.sender_address FROM blockchain_blocks b JOIN block_transactions bt ON b.block_id = bt.block_id JOIN transaction_details t ON bt.transaction_id = t.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT b.block_id, b.block_timestamp, COUNT(bt.transaction_id) AS num_transactions FROM blockchain_blocks b LEFT JOIN block_transactions bt ON b.block_id = bt.block_id GROUP BY b.block_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT block_id, block_timestamp FROM blockchain_blocks WHERE block_timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM block_transactions WHERE block_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT bt.block_id, t.sender_address, t.receiver_address FROM block_transactions bt JOIN transaction_details t ON bt.transaction_id = t.transaction_id WHERE t.asset_type = 'Bitcoin';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transaction_details;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT MAX(amount) AS max_amount FROM transaction_details WHERE asset_type = 'Ethereum';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT asset_type FROM transaction_details;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT block_id, COUNT(transaction_id) AS num_transactions FROM block_transactions GROUP BY block_id HAVING COUNT(transaction_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT sender_address, SUM(amount) AS total_sent_amount FROM transaction_details GROUP BY sender_address;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT receiver_address, SUM(amount) AS total_received_amount FROM transaction_details GROUP BY receiver_address HAVING SUM(amount) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT AVG(num_transactions) AS avg_num_transactions FROM blockchain_blocks;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT block_id, block_timestamp, num_transactions FROM blockchain_blocks WHERE block_timestamp > '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT b.block_id, COUNT(bt.transaction_id) AS num_transactions FROM blockchain_blocks b LEFT JOIN block_transactions bt ON b.block_id = bt.block_id GROUP BY b.block_id HAVING COUNT(bt.transaction_id) < 3;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, timestamp, sender_address, receiver_address FROM transaction_details WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_blocks WHERE num_transactions < 10;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, block_timestamp FROM blockchain_blocks WHERE EXTRACT(MONTH FROM block_timestamp) = 8;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT td.transaction_id, td.sender_address, td.receiver_address, bt.block_id FROM transaction_details td INNER JOIN block_transactions bt ON td.transaction_id = bt.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT bt.block_id, COUNT(bt.transaction_id) AS num_transactions FROM block_transactions bt GROUP BY bt.block_id HAVING COUNT(bt.transaction_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details WHERE sender_address IN (SELECT sender_address FROM transaction_details GROUP BY sender_address HAVING COUNT(sender_address) > 1);",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT asset_type FROM transaction_details WHERE amount >= 500 AND amount <= 1000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT block_id, COUNT(transaction_id) FROM block_transactions GROUP BY block_id ORDER BY COUNT(transaction_id) DESC;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT bt.block_id, SUM(td.amount) AS total_amount FROM block_transactions bt INNER JOIN transaction_details td ON bt.transaction_id = td.transaction_id GROUP BY bt.block_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT td.asset_type, AVG(td.amount) AS avg_amount FROM transaction_details td GROUP BY td.asset_type ORDER BY avg_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details td1 JOIN transaction_details td2 ON td1.sender_address = td2.sender_address AND td1.timestamp < td2.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT sender_address, MAX(amount) AS max_amount FROM transaction_details GROUP BY sender_address;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT sender_address, MIN(amount) AS min_amount FROM transaction_details GROUP BY sender_address;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT block_timestamp, COUNT(block_id) AS num_blocks, SUM(num_transactions) AS total_transactions FROM blockchain_blocks GROUP BY block_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT block_id, AVG(num_transactions) AS avg_transactions FROM blockchain_blocks GROUP BY block_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM block_transactions WHERE block_id = (SELECT MAX(block_id) FROM blockchain_blocks);",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT block_id, COUNT(DISTINCT transaction_id) AS unique_transactions FROM block_transactions GROUP BY block_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_type, COUNT(*) AS num_transactions FROM transaction_details GROUP BY asset_type HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    asset_type VARCHAR(50),\n    amount DECIMAL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_id SERIAL PRIMARY KEY,\n    block_hash VARCHAR(64),\n    block_timestamp TIMESTAMP,\n    num_transactions INT\n);\n\nCREATE TABLE block_transactions (\n    block_id INT,\n    transaction_id UUID,\n    FOREIGN KEY (block_id) REFERENCES blockchain_blocks(block_id),\n    FOREIGN KEY (transaction_id) REFERENCES transaction_details(transaction_id)\n);\n\n### STATEMENT\n\nSELECT block_id, AVG(amount) AS avg_amount FROM block_transactions bt INNER JOIN transaction_details td ON bt.transaction_id = td.transaction_id GROUP BY block_id HAVING COUNT(DISTINCT td.asset_type) > 1;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, sender_address, receiver_address, timestamp FROM transaction_details WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM block_details;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, previous_block_id, transaction_count, timestamp FROM block_details WHERE timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM asset_details;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_id, asset_name, total_supply, owner_address, created_at FROM asset_details WHERE total_supply >= 1000000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_network;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT network_id, network_name, node_count, consensus_algorithm, created_at FROM blockchain_network WHERE node_count > 10;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transaction_details WHERE sender_address = '0x123456';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT block_id, timestamp FROM block_details WHERE previous_block_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM asset_details WHERE owner_address = '0xabcdef';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT network_id, network_name FROM blockchain_network WHERE consensus_algorithm = 'PoW';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, receiver_address FROM transaction_details WHERE amount > 500 AND receiver_address = '0x78910';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, timestamp FROM block_details WHERE transaction_count < 1000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_id, asset_name, total_supply FROM asset_details WHERE created_at > '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT network_id, network_name, created_at FROM blockchain_network WHERE node_count < 5;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details WHERE timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-06-30 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash FROM block_details WHERE timestamp BETWEEN '2022-01-01' AND '2022-04-01';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_id, asset_name, owner_address FROM asset_details WHERE total_supply BETWEEN 50000 AND 100000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT network_id, network_name, node_count FROM blockchain_network WHERE created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM block_details WHERE timestamp BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address FROM transaction_details WHERE timestamp >= '2021-10-01';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT network_name, node_count FROM blockchain_network WHERE node_count > 50;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, total_supply FROM asset_details WHERE total_supply < 100000;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details INNER JOIN block_details ON transaction_details.transaction_id = block_details.block_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details LEFT JOIN block_details ON transaction_details.transaction_id = block_details.block_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details RIGHT JOIN block_details ON transaction_details.transaction_id = block_details.block_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details FULL JOIN block_details ON transaction_details.transaction_id = block_details.block_id;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM transaction_details GROUP BY sender_address;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(total_supply) FROM asset_details WHERE owner_address = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(node_count) FROM blockchain_network WHERE consensus_algorithm = 'Proof of Stake';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM transaction_details WHERE receiver_address = 'Bob';",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT network_name FROM blockchain_network;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transaction_details ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transaction_details;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT timestamp, COUNT(*) AS transaction_count FROM transaction_details GROUP BY timestamp;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT network_name, COUNT(*) AS node_count FROM blockchain_network GROUP BY network_name;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, SUM(total_supply) AS total_supply FROM asset_details GROUP BY asset_name;",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM asset_details WHERE created_at = (SELECT MAX(created_at) FROM asset_details);",
  "### TABLEDATA\n\nCREATE TABLE transaction_details (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE block_details (\n    block_id UUID PRIMARY KEY,\n    block_hash VARCHAR(255),\n    previous_block_id UUID,\n    transaction_count INT,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE asset_details (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    total_supply DECIMAL,\n    owner_address VARCHAR(255),\n    created_at TIMESTAMP\n);\n\n\nCREATE TABLE blockchain_network (\n    network_id UUID PRIMARY KEY,\n    network_name VARCHAR(255),\n    node_count INT,\n    consensus_algorithm VARCHAR(50),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_id, asset_name, total_supply FROM asset_details WHERE EXISTS (SELECT * FROM transaction_details WHERE transaction_details.amount > 1000 AND transaction_details.transaction_id = asset_details.asset_id);",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transactions WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM blocks;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT block_id, block_height FROM blocks WHERE block_height < 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM addresses;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT address_id, balance FROM addresses WHERE balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM holders;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT holder_id, holder_name FROM holders WHERE holder_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM assets;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT asset_id, asset_name FROM assets WHERE asset_type = 'crypto';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, timestamp, receiver_address FROM transactions WHERE sender_address = '123abc';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT block_id, timestamp, miner_address FROM blocks WHERE miner_address = '456def';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT address_id, balance, transactions_count FROM addresses WHERE transactions_count > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT holder_id, holder_name, address_id FROM holders WHERE holder_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT asset_id, asset_name, asset_type, owner_id FROM assets WHERE asset_type = 'token';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM blocks ORDER BY block_height ASC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM addresses ORDER BY balance DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM holders ORDER BY holder_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM assets ORDER BY asset_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT MAX(balance) AS max_balance FROM addresses;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT MIN(transactions_count) AS min_transactions_count FROM addresses;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, timestamp FROM transactions WHERE sender_address = '0x1234567890';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-01-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM transactions WHERE receiver_address = '0x9876543210';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, timestamp, amount FROM transactions WHERE sender_address = '0x5555555555' AND amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM blocks WHERE block_height > 100 AND miner_address = '0xabcdef123456';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT block_id, timestamp, block_height FROM blocks WHERE timestamp >= '2022-01-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM blocks WHERE block_hash = '0xabcdef123456';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM addresses WHERE balance < 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT address_id, address, transactions_count FROM addresses WHERE address LIKE '%abc%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM holders WHERE holder_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM holders WHERE holder_name LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM assets WHERE asset_type = 'crypto' AND owner_id = '12345678-90ab-cdef-1234-567890abcdef';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT asset_id, asset_name FROM assets WHERE owner_id IN (SELECT holder_id FROM holders WHERE holder_name = 'Bob');",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT * FROM holders h INNER JOIN addresses a ON h.address_id = a.address_id WHERE a.balance > 10000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT h.holder_name, a.balance FROM holders h INNER JOIN addresses a ON h.address_id = a.address_id WHERE h.holder_name = 'Charlie';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT h.holder_name, a.balance FROM holders h INNER JOIN addresses a ON h.address_id = a.address_id WHERE h.holder_name = 'David' AND a.balance < 5000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT h.holder_name, SUM(a.balance) AS total_balance FROM holders h INNER JOIN addresses a ON h.address_id = a.address_id GROUP BY h.holder_name;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT holder_name, COUNT(asset_id) AS num_assets FROM holders h INNER JOIN assets a ON h.holder_id = a.owner_id GROUP BY holder_name;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n  transaction_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  amount DECIMAL\n);\n\n\nCREATE TABLE blocks (\n  block_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  block_hash VARCHAR(255),\n  block_height INT,\n  miner_address VARCHAR(255)\n);\n\n\nCREATE TABLE addresses (\n  address_id UUID PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL,\n  transactions_count INT\n);\n\n\nCREATE TABLE holders (\n  holder_id UUID PRIMARY KEY,\n  holder_name VARCHAR(255),\n  address_id UUID,\n  FOREIGN KEY (address_id) REFERENCES addresses(address_id)\n);\n\n\nCREATE TABLE assets (\n  asset_id UUID PRIMARY KEY,\n  asset_name VARCHAR(255),\n  asset_type VARCHAR(255),\n  owner_id UUID,\n  FOREIGN KEY (owner_id) REFERENCES holders(holder_id)\n);\n\n### STATEMENT\n\nSELECT holder_name, AVG(a.balance) AS avg_balance FROM holders h INNER JOIN addresses a ON h.address_id = a.address_id GROUP BY holder_name;"
]