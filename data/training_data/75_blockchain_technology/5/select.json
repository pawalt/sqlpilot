[
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_type FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_link FROM digital_assets WHERE asset_type='image';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM digital_assets WHERE asset_type='video';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, blockchain_transaction_id FROM digital_assets WHERE asset_id='123e4567-e89b-12d3-a456-426655440000';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT MAX(asset_id) FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT DISTINCT asset_type FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name FROM digital_assets WHERE asset_type='document';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM digital_assets WHERE blockchain_transaction_id='123e4567-e89b-12d3-a456-426655440000';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_link FROM digital_assets WHERE asset_name LIKE '%logo%';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT asset_type) FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM digital_assets WHERE asset_type='pdf' AND asset_name LIKE '%report%';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_id, asset_name, asset_link FROM digital_assets WHERE asset_type='presentation';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM digital_assets ORDER BY asset_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_type, COUNT(*) FROM digital_assets GROUP BY asset_type;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM digital_assets WHERE asset_type='audio' OR asset_type='video';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_type, blockchain_transaction_id FROM digital_assets WHERE asset_type='image' OR asset_type='video';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT AVG(asset_id) FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM digital_assets WHERE asset_name='whitepaper';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM digital_assets WHERE asset_type = 'image';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_link FROM digital_assets WHERE asset_type = 'video' ORDER BY asset_name ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM digital_assets WHERE blockchain_transaction_id IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_type FROM digital_assets WHERE asset_name LIKE 'logo%' AND asset_type = 'image';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, blockchain_transaction_id FROM digital_assets WHERE asset_name IN ('banner', 'poster');",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_type FROM digital_assets WHERE LENGTH(asset_name) > 10;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT DISTINCT asset_type FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name FROM digital_assets WHERE asset_type IN ('video', 'audio');",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_type FROM digital_assets WHERE asset_link IS NOT NULL AND asset_type = 'document';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, blockchain_transaction_id FROM digital_assets WHERE asset_type <> 'image';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_type FROM digital_assets WHERE asset_name LIKE '%design%' AND asset_type NOT LIKE 'video';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_type FROM digital_assets WHERE asset_name ILIKE '%icon%' OR asset_type ILIKE 'photo';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_type FROM digital_assets WHERE asset_name ~ '^[0-9]+';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name || '-' || asset_type AS asset_info FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, LENGTH(asset_name) AS name_length FROM digital_assets WHERE LENGTH(asset_name) > 15;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_type FROM digital_assets WHERE asset_name SIMILAR TO '^[A-Za-z]+';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_type, COUNT(*) FROM digital_assets GROUP BY asset_type HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_link FROM digital_assets WHERE LENGTH(asset_link) > 20 ORDER BY LENGTH(asset_link) DESC;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_type, blockchain_transaction_id FROM digital_assets WHERE asset_type = 'image' OR asset_type = 'video';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name TEXT,\n    asset_type TEXT,\n    asset_link TEXT,\n    blockchain_transaction_id UUID\n)\n\n### STATEMENT\n\nSELECT asset_name, asset_link FROM digital_assets WHERE asset_name ~* 'alpha' AND asset_link ~* 'https://';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, asset_name FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_hash FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets WHERE asset_name = 'Bitcoin';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets WHERE blockchain_transaction_id = 12345;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, asset_name FROM digital_assets WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_hash FROM blockchain_transactions WHERE transaction_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT digital_assets.id, blockchain_transactions.transaction_hash FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets ORDER BY id ASC;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(id) FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(blockchain_transaction_id) FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT asset_name FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM digital_assets WHERE blockchain_transaction_id IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id WHERE digital_assets.id = 1",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, timestamp FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id WHERE blockchain_transactions.transaction_hash = 'abc123'",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM digital_assets",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, MAX(timestamp) FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id GROUP BY asset_name",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets WHERE asset_name LIKE '%crypto%'",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT digital_assets.asset_name, blockchain_transactions.timestamp FROM digital_assets LEFT JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT asset_name FROM digital_assets ORDER BY asset_name ASC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, TIMESTAMPDIFF(HOUR, timestamp, NOW()) AS hours_ago FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id ORDER BY hours_ago DESC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(id) AS total_id FROM digital_assets",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, COUNT(*) AS transaction_count FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id GROUP BY asset_name ORDER BY transaction_count DESC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, DATE(timestamp) AS transaction_date FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id ORDER BY transaction_date ASC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, COUNT(*) AS transaction_count FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id WHERE DATE(timestamp) = CURDATE() GROUP BY asset_name ORDER BY transaction_count DESC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, TIMESTAMPDIFF(DAY, timestamp, CURDATE()) AS days_ago FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id ORDER BY days_ago ASC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, HOUR(timestamp) AS transaction_hour FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id ORDER BY transaction_hour DESC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, COUNT(*) AS transaction_count FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id WHERE HOUR(timestamp) = HOUR(NOW()) GROUP BY asset_name ORDER BY transaction_count DESC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT digital_assets.asset_name, blockchain_transactions.timestamp FROM digital_assets RIGHT JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, MIN(timestamp) FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id GROUP BY asset_name ORDER BY MIN(timestamp) ASC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT asset_name FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id WHERE YEAR(timestamp) = YEAR(NOW()) ORDER BY asset_name ASC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, TIMESTAMPDIFF(MINUTE, timestamp, NOW()) AS minutes_ago FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id ORDER BY minutes_ago DESC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, COUNT(*) AS transaction_count FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id WHERE MONTH(timestamp) = MONTH(NOW()) GROUP BY asset_name ORDER BY transaction_count DESC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    id INT PRIMARY KEY,\n    asset_name TEXT,\n    blockchain_transaction_id INT\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT asset_name, COUNT(*) AS transaction_count FROM digital_assets JOIN blockchain_transactions ON digital_assets.blockchain_transaction_id = blockchain_transactions.transaction_id WHERE WEEK(timestamp) = WEEK(NOW()) GROUP BY asset_name ORDER BY transaction_count DESC",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_name, asset_type FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, block_timestamp FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM asset_transactions;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_id, transaction_amount FROM asset_transactions;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_name, blockchain_transaction_id FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_status FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_id, transaction_id, transaction_date FROM asset_transactions;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_name, asset_type, blockchain_transaction_id FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, block_id, block_timestamp FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_id, transaction_id, transaction_amount FROM asset_transactions;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_name, asset_type, blockchain_transaction_id FROM digital_assets WHERE asset_type='image';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets WHERE asset_name LIKE '%logo%';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE transaction_type='Sale';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM asset_transactions WHERE transaction_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, block_timestamp FROM blockchain_transactions WHERE transaction_status='success';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_id, transaction_id, transaction_date FROM asset_transactions WHERE transaction_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_name, blockchain_transaction_id FROM digital_assets WHERE asset_type='video';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, block_id, block_timestamp FROM blockchain_transactions WHERE block_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT * FROM digital_assets;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_id, asset_name, asset_type FROM digital_assets WHERE asset_type = 'Cryptocurrency';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_id, da.asset_name, bt.block_timestamp FROM digital_assets da LEFT JOIN asset_transactions at ON da.asset_id = at.asset_id LEFT JOIN blockchain_transactions bt ON at.transaction_id = bt.transaction_id WHERE da.asset_type = 'Cryptocurrency';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT at.asset_id, SUM(at.transaction_amount) AS total_amount FROM asset_transactions at GROUP BY at.asset_id HAVING total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.block_timestamp FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id JOIN blockchain_transactions bt ON at.transaction_id = bt.transaction_id WHERE bt.transaction_type = 'Buy' AND at.transaction_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.block_timestamp, at.transaction_amount FROM digital_assets da, blockchain_transactions bt, asset_transactions at WHERE da.asset_id = at.asset_id AND at.transaction_id = bt.transaction_id AND bt.transaction_status = 'Approved';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.block_timestamp, at.transaction_amount FROM digital_assets da INNER JOIN blockchain_transactions bt ON da.asset_id = at.asset_id INNER JOIN asset_transactions at ON at.transaction_id = bt.transaction_id WHERE da.asset_type = 'Digital Art' AND bt.transaction_type = 'Sell';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_name, COUNT(*) AS transaction_count FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id GROUP BY da.asset_name;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, da.asset_type, COUNT(*) AS transaction_count FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id GROUP BY da.asset_name, da.asset_type HAVING transaction_count > 5;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.block_timestamp FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id JOIN blockchain_transactions bt ON at.transaction_id = bt.transaction_id WHERE bt.block_timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT asset_name, SUM(transaction_amount) AS total_amount FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id GROUP BY asset_name;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.block_timestamp, at.transaction_amount FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id JOIN blockchain_transactions bt ON at.transaction_id = bt.transaction_id WHERE at.transaction_date >= '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.block_timestamp, at.transaction_amount FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id JOIN blockchain_transactions bt ON at.transaction_id = bt.transaction_id WHERE da.asset_name LIKE '%NFT%' AND bt.block_timestamp < '2022-09-01';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, at.transaction_amount, bt.transaction_type FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id JOIN blockchain_transactions bt ON at.transaction_id = bt.transaction_id WHERE bt.block_timestamp BETWEEN '2022-03-01' AND '2022-06-30' AND at.transaction_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, SUM(at.transaction_amount) AS total_amount FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id JOIN blockchain_transactions bt ON at.transaction_id = bt.transaction_id WHERE bt.transaction_status = 'Approved' GROUP BY da.asset_name HAVING total_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, at.transaction_amount, bt.transaction_type FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id JOIN blockchain_transactions bt ON at.transaction_id = bt.transaction_id WHERE bt.block_timestamp BETWEEN '2022-04-01' AND '2022-07-31' AND bt.transaction_status = 'Approved';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT da.asset_type FROM digital_assets da;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, at.transaction_date FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id WHERE at.transaction_date <= '2022-10-31';",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.block_timestamp, at.transaction_amount FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id JOIN blockchain_transactions bt ON at.transaction_id = bt.transaction_id WHERE bt.transaction_status = 'Pending' AND at.transaction_amount < 500;",
  "### TABLEDATA\n\nCREATE TABLE digital_assets (\n    asset_id UUID PRIMARY KEY,\n    asset_name VARCHAR(255),\n    asset_type VARCHAR(50),\n    blockchain_transaction_id UUID\n);\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_id UUID,\n    block_timestamp TIMESTAMP,\n    transaction_type VARCHAR(50),\n    transaction_status VARCHAR(20)\n);\n\nCREATE TABLE asset_transactions (\n    asset_id UUID,\n    transaction_id UUID,\n    transaction_amount DECIMAL(18,2),\n    transaction_date TIMESTAMP,\n    PRIMARY KEY (asset_id, transaction_id)\n);\n\n### STATEMENT\n\nSELECT da.asset_name, at.transaction_amount, bt.transaction_status FROM digital_assets da JOIN asset_transactions at ON da.asset_id = at.asset_id JOIN blockchain_transactions bt ON at.transaction_id = bt.transaction_id WHERE bt.transaction_type = 'Exchange' AND bt.transaction_status = 'Approved';",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM assets;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, asset_name FROM assets;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, sender_address, receiver_address FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM asset_metadata;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, asset_id, metadata_key FROM asset_metadata;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_info;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, block_number, timestamp FROM blockchain_info;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT asset_name, asset_type FROM assets WHERE asset_type = 'Crypto';",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transactions WHERE sender_address = '0x123abc';",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT metadata_key, metadata_value FROM asset_metadata WHERE asset_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT block_number, timestamp FROM blockchain_info WHERE block_number > 10000;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT asset_name, asset_type, asset_id FROM assets ORDER BY asset_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, transaction_date FROM transactions ORDER BY transaction_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT metadata_key, metadata_value, asset_id FROM asset_metadata ORDER BY asset_id;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT asset_type, blockchain_transaction_id FROM assets WHERE id = 5;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address FROM transactions WHERE transaction_id = 'abc123';",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT metadata_key, metadata_value FROM asset_metadata WHERE metadata_key LIKE 'color%';",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT block_number, transaction_id FROM blockchain_info WHERE timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT asset_name, asset_type, blockchain_transaction_id FROM assets WHERE asset_name = 'Bitcoin';",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM assets WHERE asset_type='crypto' AND blockchain_transaction_id='f746b799-e5b5-484d-8e6d-3ec3281c3004';",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT asset_name, asset_type FROM assets WHERE id IN (SELECT asset_id FROM asset_metadata WHERE metadata_key='status' AND metadata_value='active');",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT A.asset_name, T.sender_address, T.receiver_address FROM assets A JOIN transactions T ON A.blockchain_transaction_id = T.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT A.asset_name, A.asset_type, B.block_number FROM assets A JOIN blockchain_info B ON A.blockchain_transaction_id = B.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_assets FROM assets;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(block_number) AS avg_block_number FROM blockchain_info;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(transaction_date) AS latest_transaction_date FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(timestamp) AS earliest_timestamp FROM blockchain_info;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, asset_name, metadata_key, metadata_value FROM assets A JOIN asset_metadata M ON A.id = M.asset_id WHERE M.metadata_key='category';",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_records FROM (SELECT * FROM assets UNION SELECT * FROM transactions UNION SELECT * FROM asset_metadata UNION SELECT * FROM blockchain_info) AS all_tables;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT A.asset_name, B.block_number FROM assets A LEFT JOIN blockchain_info B ON A.blockchain_transaction_id = B.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM assets WHERE asset_type='crypto' ORDER BY asset_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date >= '2022-01-01' AND transaction_date < '2023-01-01' ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT A.asset_name, B.block_number FROM assets A RIGHT JOIN blockchain_info B ON A.blockchain_transaction_id = B.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT asset_name, metadata_value FROM assets A JOIN asset_metadata M ON A.id = M.asset_id WHERE metadata_key='location' ORDER BY asset_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT asset_type, COUNT(*) AS total_assets FROM assets GROUP BY asset_type HAVING COUNT(*) >= 2;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT A.asset_name, A.asset_type, B.block_number, B.timestamp FROM assets A JOIN blockchain_info B ON A.blockchain_transaction_id = B.transaction_id WHERE B.timestamp >= '2022-01-01' AND B.timestamp < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT asset_name, metadata_key FROM assets A JOIN asset_metadata M ON A.id = M.asset_id WHERE asset_name LIKE 'Bitcoin%' AND metadata_value != 'null';",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT asset_name, MAX(block_number) AS max_block_number FROM assets A JOIN blockchain_info B ON A.blockchain_transaction_id = B.transaction_id GROUP BY asset_name;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT A.asset_name, A.asset_type, B.block_number, B.timestamp FROM assets A JOIN blockchain_info B ON A.blockchain_transaction_id = B.transaction_id WHERE A.asset_type='crypto' AND B.block_number >= 1000;",
  "### TABLEDATA\n\nCREATE TABLE assets (\n    id SERIAL PRIMARY KEY,\n    asset_name VARCHAR(255) NOT NULL,\n    asset_type VARCHAR(50) NOT NULL,\n    blockchain_transaction_id UUID NOT NULL\n);\n\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    transaction_id UUID NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE asset_metadata (\n    id SERIAL PRIMARY KEY,\n    asset_id INTEGER NOT NULL,\n    metadata_key VARCHAR(50) NOT NULL,\n    metadata_value TEXT NOT NULL\n);\n\nCREATE TABLE blockchain_info (\n    id SERIAL PRIMARY KEY,\n    block_number BIGINT NOT NULL,\n    transaction_id UUID NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT A.asset_name, metadata_key, metadata_value FROM assets A JOIN asset_metadata M ON A.id = M.asset_id WHERE M.metadata_key='owner' AND M.metadata_value='Alice';",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM digital_asset;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT asset_name, transaction_date FROM digital_asset;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM asset_metadata;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT metadata_key, metadata_value FROM asset_metadata;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transaction;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT transaction_id, block_number FROM blockchain_transaction;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_metadata;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT metadata_key, metadata_value FROM transaction_metadata;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM digital_asset_relationship;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT parent_digital_asset_id, child_digital_asset_id FROM digital_asset_relationship;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT digital_asset.id, asset_name, transaction_date, blockchain_transaction_id FROM digital_asset INNER JOIN blockchain_transaction ON digital_asset.blockchain_transaction_id = blockchain_transaction.id;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT digital_asset.id, asset_name, metadata_key, metadata_value FROM digital_asset INNER JOIN asset_metadata ON digital_asset.id = asset_metadata.digital_asset_id;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT blockchain_transaction.id, transaction_id, block_number, metadata_key, metadata_value FROM blockchain_transaction INNER JOIN transaction_metadata ON blockchain_transaction.transaction_id = transaction_metadata.blockchain_transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT asset_name, transaction_date, metadata_key, metadata_value FROM digital_asset INNER JOIN asset_metadata ON digital_asset.id = asset_metadata.digital_asset_id;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT blockchain_transaction.id, transaction_id, block_number, parent_digital_asset_id, child_digital_asset_id FROM blockchain_transaction INNER JOIN digital_asset_relationship ON blockchain_transaction.id = digital_asset_relationship.child_digital_asset_id;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT asset_name AS asset_title, transaction_date AS date FROM digital_asset;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT metadata_key AS key_name, metadata_value AS value_content FROM transaction_metadata;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT digital_asset.id AS asset_id, asset_name, blockchain_transaction.id AS transaction_id, transaction_date FROM digital_asset INNER JOIN blockchain_transaction ON digital_asset.blockchain_transaction_id = blockchain_transaction.id;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT digital_asset.id AS asset_id, asset_name, metadata_key, metadata_value FROM digital_asset INNER JOIN asset_metadata ON digital_asset.id = asset_metadata.digital_asset_id;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT blockchain_transaction.id AS transaction_id, transaction_id, block_number, metadata_key, metadata_value FROM blockchain_transaction INNER JOIN transaction_metadata ON blockchain_transaction.transaction_id = transaction_metadata.blockchain_transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM digital_asset;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bm.metadata_key FROM digital_asset da JOIN asset_metadata am ON da.id = am.digital_asset_id JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id JOIN transaction_metadata tm ON bt.id = tm.blockchain_transaction_id JOIN digital_asset_relationship dar ON da.id = dar.child_digital_asset_id;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.block_number FROM digital_asset da JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id WHERE bt.block_number > 100;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM digital_asset da WHERE da.transaction_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bm.metadata_key FROM digital_asset da JOIN asset_metadata am ON da.id = am.digital_asset_id JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id JOIN transaction_metadata tm ON bt.id = tm.blockchain_transaction_id JOIN digital_asset_relationship dar ON da.id = dar.child_digital_asset_id WHERE tm.metadata_value = 'example';",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.transaction_id FROM digital_asset da JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id WHERE da.id = 1;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM digital_asset_relationship WHERE parent_digital_asset_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT da.asset_name FROM digital_asset da JOIN digital_asset_relationship dar ON da.id = dar.child_digital_asset_id WHERE dar.parent_digital_asset_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM digital_asset;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_transaction;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, COUNT(dar.child_digital_asset_id) AS child_count FROM digital_asset da JOIN digital_asset_relationship dar ON da.id = dar.parent_digital_asset_id GROUP BY da.asset_name;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bm.metadata_key, COUNT(*) AS metadata_count FROM digital_asset da JOIN asset_metadata am ON da.id = am.digital_asset_id JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id JOIN transaction_metadata tm ON bt.id = tm.blockchain_transaction_id GROUP BY da.asset_name, bm.metadata_key;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, da.transaction_date, COUNT(*) AS transaction_count FROM digital_asset da JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id GROUP BY da.asset_name, da.transaction_date;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bm.metadata_value FROM digital_asset da JOIN asset_metadata am ON da.id = am.digital_asset_id JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id JOIN transaction_metadata tm ON bt.id = tm.blockchain_transaction_id GROUP BY da.asset_name, bm.metadata_value HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.transaction_id FROM digital_asset da JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id WHERE da.id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT da.asset_name, bm.metadata_key FROM digital_asset da JOIN asset_metadata am ON da.id = am.digital_asset_id JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id JOIN transaction_metadata tm ON bt.id = tm.blockchain_transaction_id JOIN digital_asset_relationship dar ON da.id = dar.child_digital_asset_id WHERE tm.metadata_value IN ('value1', 'value2');",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.block_number FROM digital_asset da JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id WHERE da.asset_name LIKE '%example%';",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bt.transaction_date FROM digital_asset da JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id WHERE da.asset_name = 'Asset1' AND bt.block_number < 100;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name AS parent_asset, dc.asset_name AS child_asset FROM digital_asset_relationship dar JOIN digital_asset da ON dar.parent_digital_asset_id = da.id JOIN digital_asset dc ON dar.child_digital_asset_id = dc.id;",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name FROM digital_asset da WHERE NOT EXISTS (SELECT * FROM asset_metadata am WHERE am.digital_asset_id = da.id);",
  "### TABLEDATA\n\nCREATE TABLE digital_asset (\n    id INT PRIMARY KEY,\n    asset_name VARCHAR(255),\n    blockchain_transaction_id VARCHAR(255),\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE asset_metadata (\n    id INT PRIMARY KEY,\n    digital_asset_id INT,\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE blockchain_transaction (\n    id INT PRIMARY KEY,\n    transaction_id VARCHAR(255),\n    block_number INT,\n    transaction_date TIMESTAMP\n);\n\nCREATE TABLE transaction_metadata (\n    id INT PRIMARY KEY,\n    blockchain_transaction_id VARCHAR(255),\n    metadata_key VARCHAR(255),\n    metadata_value TEXT\n);\n\nCREATE TABLE digital_asset_relationship (\n    id INT PRIMARY KEY,\n    parent_digital_asset_id INT,\n    child_digital_asset_id INT\n);\n\n### STATEMENT\n\nSELECT da.asset_name, bm.metadata_value FROM digital_asset da JOIN asset_metadata am ON da.id = am.digital_asset_id JOIN blockchain_transaction bt ON da.blockchain_transaction_id = bt.transaction_id JOIN transaction_metadata tm ON bt.id = tm.blockchain_transaction_id WHERE tm.metadata_key = 'key1';"
]