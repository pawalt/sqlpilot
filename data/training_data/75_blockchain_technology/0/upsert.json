[
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nINSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (1, 'john_doe', 'password123', 'public_key_123') ON DUPLICATE KEY UPDATE username='john_doe', password_hash='password123', public_key='public_key_123';",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nINSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (2, 'jane_smith', 'password456', 'public_key_456') ON DUPLICATE KEY UPDATE username='jane_smith', password_hash='password456', public_key='public_key_456';",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nINSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (3, 'alice_wonderland', 'password789', 'public_key_789') ON DUPLICATE KEY UPDATE username='alice_wonderland', password_hash='password789', public_key='public_key_789';",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nINSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (4, 'bob_robertson', 's...   =>    [Too many characters. See the code repository for full response.]    ])-> ;",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nINSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (13, 'grace_kelly', 'gracepwd123', 'grace_key_123') ON DUPLICATE KEY UPDATE username='grace_kelly', password_hash='gracepwd123', public_key='grace_key_123';",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nINSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (14, 'sam_jackson', 'sampwd456', 'sam_key_456') ON DUPLICATE KEY UPDATE username='sam_jackson', password_hash='sampwd456', public_key='sam_key_456';",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nINSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (15, 'linda_adams', 'lindapwd789', 'linda_key_789') ON DUPLICATE KEY UPDATE username='linda_adams', password_hash='lindapwd789', public_key='linda_key_789';",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nINSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (16, 'kevin_martinez', 'kevinpwd123', 'kevin_key_123') ON DUPLICATE KEY UPDATE username='kevin_martinez', password_hash='kevinpwd123', public_key='kevin_key_123';",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nINSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (17, 'susan_brown', 'susanpwd456', 'susan_key_456') ON DUPLICATE KEY UPDATE username='susan_brown', password_hash='susanpwd456', public_key='susan_key_456';",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nINSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (18, 'peter_young', 'peterpwd789', 'peter_key_789') ON DUPLICATE KEY UPDATE username='peter_young', password_hash='peterpwd789', public_key='peter_key_789';",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (1, 'john_doe', 'hash123', 'key123')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (2, 'jane_doe', 'hash456', 'key456')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (3, 'alice', 'hash789', 'key789')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (4, 'bob', 'hashabc', 'keyabc')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (5, 'eve', 'hashdef', 'keydef')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (6, 'charlie', 'hashghi', 'keyghi')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (7, 'mary', 'hashjkl', 'keyjkl')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (8, 'peter', 'hashmno', 'keymno')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (9, 'susan', 'hashpqr', 'keypqr')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (10, 'frank', 'hashstu', 'keystu')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (11, 'sophie', 'hashvwx', 'keyvwx')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (12, 'michael', 'hashyzab', 'keyyzab')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (13, 'olivia', 'hashcdef', 'keycdef')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (14, 'nathan', 'hashghij', 'keyghij')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (15, 'laura', 'hashklmn', 'keyklmn')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (16, 'david', 'hashopqr', 'keyopqr')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (17, 'emily', 'hashstuv', 'keystuv')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (18, 'sam', 'hashwxyz', 'keywxyz')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (19, 'jack', 'hash1234', 'key1234')",
  "### TABLEDATA\n\nCREATE TABLE user_authentication (\n  user_id INT,\n  username VARCHAR(50),\n  password_hash VARCHAR(100),\n  public_key VARCHAR(200)\n);\n\n### STATEMENT\n\nUPSERT INTO user_authentication (user_id, username, password_hash, public_key) VALUES (20, 'lucy', 'hash5678', 'key5678')",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, email, password_hash) VALUES ('user1', 'user1@example.com', 'password123') ON CONFLICT (email) DO UPDATE SET username = 'user1_updated', password_hash = 'password123_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, email, password_hash) VALUES ('user2', 'user2@example.com', 'password456') ON CONFLICT (email) DO UPDATE SET username = 'user2_updated', password_hash = 'password456_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (user_id, wallet_name, balance) VALUES (1, 'wallet1', 100.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = 100.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (user_id, wallet_name, balance) VALUES (2, 'wallet2', 200.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = 200.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, email, password_hash) VALUES ('user3', 'user3@example.com', 'password789') ON CONFLICT (email) DO UPDATE SET username = 'user3_updated', password_hash = 'password789_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, email, password_hash) VALUES ('user4', 'user4@example.com', 'password321') ON CONFLICT (email) DO UPDATE SET username = 'user4_updated', password_hash = 'password321_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (user_id, wallet_name, balance) VALUES (3, 'wallet3', 300.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = 300.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (user_id, wallet_name, balance) VALUES (4, 'wallet4', 400.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = 400.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, email, password_hash) VALUES ('user5', 'user5@example.com', 'password654') ON CONFLICT (email) DO UPDATE SET username = 'user5_updated', password_hash = 'password654_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, email, password_hash) VALUES ('user6', 'user6@example.com', 'password987') ON CONFLICT (email) DO UPDATE SET username = 'user6_updated', password_hash = 'password987_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (user_id, wallet_name, balance) VALUES (5, 'wallet5', 500.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = 500.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (user_id, wallet_name, balance) VALUES (6, 'wallet6', 600.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = 600.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, email, password_hash) VALUES ('user7', 'user7@example.com', 'password456') ON CONFLICT (email) DO UPDATE SET username = 'user7_updated', password_hash = 'password456_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, email, password_hash) VALUES ('user8', 'user8@example.com', 'password321') ON CONFLICT (email) DO UPDATE SET username = 'user8_updated', password_hash = 'password321_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (user_id, wallet_name, balance) VALUES (7, 'wallet7', 700.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = 700.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (user_id, wallet_name, balance) VALUES (8, 'wallet8', 800.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = 800.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, email, password_hash) VALUES ('user9', 'user9@example.com', 'password123') ON CONFLICT (email) DO UPDATE SET username = 'user9_updated', password_hash = 'password123_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO users (username, email, password_hash) VALUES ('user10', 'user10@example.com', 'password789') ON CONFLICT (email) DO UPDATE SET username = 'user10_updated', password_hash = 'password789_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (user_id, wallet_name, balance) VALUES (9, 'wallet9', 900.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = 900.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (user_id, wallet_name, balance) VALUES (10, 'wallet10', 1000.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = 1000.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO users (username, email, password_hash) VALUES ('john_doe', 'john@example.com', 'password123') ON CONFLICT (username) DO UPDATE SET email = excluded.email, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO users (username, email, password_hash) VALUES ('jane_doe', 'jane@example.com', 'password456') ON CONFLICT (username) DO UPDATE SET email = excluded.email, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, wallet_name, balance) VALUES (1, 'Johns Wallet', 100.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = excluded.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, wallet_name, balance) VALUES (2, 'Janes Wallet', 150.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = excluded.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO users (username, email, password_hash) VALUES ('alice_smith', 'alice@example.com', 'password789') ON CONFLICT (username) DO UPDATE SET email = excluded.email, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO users (username, email, password_hash) VALUES ('bob_jones', 'bob@example.com', 'passwordabc') ON CONFLICT (username) DO UPDATE SET email = excluded.email, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, wallet_name, balance) VALUES (3, 'Alices Wallet', 200.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = excluded.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, wallet_name, balance) VALUES (4, 'Bobs Wallet', 75.50) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = excluded.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO users (username, email, password_hash) VALUES ('eve_lee', 'eve@example.com', 'passwordxyz') ON CONFLICT (username) DO UPDATE SET email = excluded.email, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, wallet_name, balance) VALUES (5, 'Eves Wallet', 300.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = excluded.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO users (username, email, password_hash) VALUES ('carol_tan', 'carol@example.com', 'password999') ON CONFLICT (username) DO UPDATE SET email = excluded.email, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, wallet_name, balance) VALUES (6, 'Carols Wallet', 50.25) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = excluded.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO users (username, email, password_hash) VALUES ('david_chen', 'david@example.com', 'password111') ON CONFLICT (username) DO UPDATE SET email = excluded.email, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, wallet_name, balance) VALUES (7, 'Davids Wallet', 125.75) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = excluded.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO users (username, email, password_hash) VALUES ('grace_kim', 'grace@example.com', 'password222') ON CONFLICT (username) DO UPDATE SET email = excluded.email, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, wallet_name, balance) VALUES (8, 'Graces Wallet', 80.00) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = excluded.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO users (username, email, password_hash) VALUES ('henry_smith', 'henry@example.com', 'password333') ON CONFLICT (username) DO UPDATE SET email = excluded.email, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, wallet_name, balance) VALUES (9, 'Henrys Wallet', 400.50) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = excluded.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO users (username, email, password_hash) VALUES ('isabel_ng', 'isabel@example.com', 'password444') ON CONFLICT (username) DO UPDATE SET email = excluded.email, password_hash = excluded.password_hash;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    wallet_name VARCHAR(50) NOT NULL,\n    balance DECIMAL(18, 2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, wallet_name, balance) VALUES (10, 'Isabels Wallet', 150.75) ON CONFLICT (user_id, wallet_name) DO UPDATE SET balance = excluded.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('1', 'user1', 'pass1') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('2', 'user2', 'pass2') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('1', '1', 'wallet_address1') ON CONFLICT (wallet_id) DO UPDATE SET user_id = excluded.user_id, wallet_address = excluded.wallet_address;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('2', '2', 'wallet_address2') ON CONFLICT (wallet_id) DO UPDATE SET user_id = excluded.user_id, wallet_address = excluded.wallet_address;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('1', '1', 'token1', '2023-01-01') ON CONFLICT (session_id) DO UPDATE SET user_id = excluded.user_id, token = excluded.token, expiration_time = excluded.expiration_time;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('2', '2', 'token2', '2023-02-01') ON CONFLICT (session_id) DO UPDATE SET user_id = excluded.user_id, token = excluded.token, expiration_time = excluded.expiration_time;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('3', 'user3', 'pass3') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('4', 'user4', 'pass4') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('3', '3', 'wallet_address3') ON CONFLICT (wallet_id) DO UPDATE SET user_id = excluded.user_id, wallet_address = excluded.wallet_address;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('4', '4', 'wallet_address4') ON CONFLICT (wallet_id) DO UPDATE SET user_id = excluded.user_id, wallet_address = excluded.wallet_address;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('3', '3', 'token3', '2023-03-01') ON CONFLICT (session_id) DO UPDATE SET user_id = excluded.user_id, token = excluded.token, expiration_time = excluded.expiration_time;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('4', '4', 'token4', '2023-04-01') ON CONFLICT (session_id) DO UPDATE SET user_id = excluded.user_id, token = excluded.token, expiration_time = excluded.expiration_time;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('5', 'user5', 'pass5') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('6', 'user6', 'pass6') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('5', '5', 'wallet_address5') ON CONFLICT (wallet_id) DO UPDATE SET user_id = excluded.user_id, wallet_address = excluded.wallet_address;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('6', '6', 'wallet_address6') ON CONFLICT (wallet_id) DO UPDATE SET user_id = excluded.user_id, wallet_address = excluded.wallet_address;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('5', '5', 'token5', '2023-05-01') ON CONFLICT (session_id) DO UPDATE SET user_id = excluded.user_id, token = excluded.token, expiration_time = excluded.expiration_time;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('6', '6', 'token6', '2023-06-01') ON CONFLICT (session_id) DO UPDATE SET user_id = excluded.user_id, token = excluded.token, expiration_time = excluded.expiration_time;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('7', 'user7', 'pass7') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('8', 'user8', 'pass8') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('7', '7', 'wallet_address7') ON CONFLICT (wallet_id) DO UPDATE SET user_id = excluded.user_id, wallet_address = excluded.wallet_address;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('8', '8', 'wallet_address8') ON CONFLICT (wallet_id) DO UPDATE SET user_id = excluded.user_id, wallet_address = excluded.wallet_address;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('7', '7', 'token7', '2023-07-01') ON CONFLICT (session_id) DO UPDATE SET user_id = excluded.user_id, token = excluded.token, expiration_time = excluded.expiration_time;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('8', '8', 'token8', '2023-08-01') ON CONFLICT (session_id) DO UPDATE SET user_id = excluded.user_id, token = excluded.token, expiration_time = excluded.expiration_time;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('1', 'user1', 'pwd1') ON CONFLICT (user_id) DO UPDATE SET username = 'user1_updated', password = 'pwd1_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('1', '1', 'address1') ON CONFLICT (wallet_id) DO UPDATE SET user_id = '1', wallet_address = 'address1_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('1', '1', 'token1', '2022-12-31 23:59:59') ON CONFLICT (session_id) DO UPDATE SET user_id = '1', token = 'token1_updated', expiration_time = '2023-12-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('2', 'user2', 'pwd2') ON CONFLICT (user_id) DO UPDATE SET username = 'user2_updated', password = 'pwd2_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('2', '2', 'address2') ON CONFLICT (wallet_id) DO UPDATE SET user_id = '2', wallet_address = 'address2_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('2', '2', 'token2', '2022-12-31 23:59:59') ON CONFLICT (session_id) DO UPDATE SET user_id = '2', token = 'token2_updated', expiration_time = '2023-12-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('3', 'user3', 'pwd3') ON CONFLICT (user_id) DO UPDATE SET username = 'user3_updated', password = 'pwd3_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('3', '3', 'address3') ON CONFLICT (wallet_id) DO UPDATE SET user_id = '3', wallet_address = 'address3_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('3', '3', 'token3', '2022-12-31 23:59:59') ON CONFLICT (session_id) DO UPDATE SET user_id = '3', token = 'token3_updated', expiration_time = '2023-12-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('4', 'user4', 'pwd4') ON CONFLICT (user_id) DO UPDATE SET username = 'user4_updated', password = 'pwd4_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('4', '4', 'address4') ON CONFLICT (wallet_id) DO UPDATE SET user_id = '4', wallet_address = 'address4_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('4', '4', 'token4', '2022-12-31 23:59:59') ON CONFLICT (session_id) DO UPDATE SET user_id = '4', token = 'token4_updated', expiration_time = '2023-12-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('5', 'user5', 'pwd5') ON CONFLICT (user_id) DO UPDATE SET username = 'user5_updated', password = 'pwd5_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('5', '5', 'address5') ON CONFLICT (wallet_id) DO UPDATE SET user_id = '5', wallet_address = 'address5_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('5', '5', 'token5', '2022-12-31 23:59:59') ON CONFLICT (session_id) DO UPDATE SET user_id = '5', token = 'token5_updated', expiration_time = '2023-12-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('6', 'user6', 'pwd6') ON CONFLICT (user_id) DO UPDATE SET username = 'user6_updated', password = 'pwd6_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('6', '6', 'address6') ON CONFLICT (wallet_id) DO UPDATE SET user_id = '6', wallet_address = 'address6_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('6', '6', 'token6', '2022-12-31 23:59:59') ON CONFLICT (session_id) DO UPDATE SET user_id = '6', token = 'token6_updated', expiration_time = '2023-12-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES ('7', 'user7', 'pwd7') ON CONFLICT (user_id) DO UPDATE SET username = 'user7_updated', password = 'pwd7_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO wallets (wallet_id, user_id, wallet_address) VALUES ('7', '7', 'address7') ON CONFLICT (wallet_id) DO UPDATE SET user_id = '7', wallet_address = 'address7_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL\n);\n\n\nCREATE TABLE wallets (\n    wallet_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    wallet_address TEXT UNIQUE NOT NULL\n);\n\n\nCREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(user_id),\n    token TEXT NOT NULL,\n    expiration_time TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO sessions (session_id, user_id, token, expiration_time) VALUES ('7', '7', 'token7', '2022-12-31 23:59:59') ON CONFLICT (session_id) DO UPDATE SET user_id = '7', token = 'token7_updated', expiration_time = '2023-12-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, user_name, password_hash, wallet_address) VALUES (1, 'Alice', 'password123', 'alice_wallet_address') ON CONFLICT (user_id) DO UPDATE SET user_name=excluded.user_name, password_hash=excluded.password_hash, wallet_address=excluded.wallet_address",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO wallets (wallet_id, wallet_name, user_id, balance) VALUES (1, 'Alice Wallet', 1, 100.0) ON CONFLICT (wallet_id) DO UPDATE SET wallet_name=excluded.wallet_name, user_id=excluded.user_id, balance=excluded.balance",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO transactions (tx_id, wallet_id, amount, tx_type, timestamp) VALUES (1, 1, 50.0, 'debit', '2022-01-01 12:00:00') ON CONFLICT (tx_id) DO UPDATE SET wallet_id=excluded.wallet_id, amount=excluded.amount, tx_type=excluded.tx_type, timestamp=excluded.timestamp",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token) VALUES (1, 1, 'session_token_1') ON CONFLICT (session_id) DO UPDATE SET user_id=excluded.user_id, session_token=excluded.session_token",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, user_name, password_hash, wallet_address) VALUES (2, 'Bob', 'pass456', 'bob_wallet_address') ON CONFLICT (user_id) DO UPDATE SET user_name=excluded.user_name, password_hash=excluded.password_hash, wallet_address=excluded.wallet_address",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO wallets (wallet_id, wallet_name, user_id, balance) VALUES (2, 'Bob Wallet', 2, 200.0) ON CONFLICT (wallet_id) DO UPDATE SET wallet_name=excluded.wallet_name, user_id=excluded.user_id, balance=excluded.balance",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO transactions (tx_id, wallet_id, amount, tx_type, timestamp) VALUES (2, 2, 100.0, 'credit', '2022-01-02 12:00:00') ON CONFLICT (tx_id) DO UPDATE SET wallet_id=excluded.wallet_id, amount=excluded.amount, tx_type=excluded.tx_type, timestamp=excluded.timestamp",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token) VALUES (2, 2, 'session_token_2') ON CONFLICT (session_id) DO UPDATE SET user_id=excluded.user_id, session_token=excluded.session_token",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, user_name, password_hash, wallet_address) VALUES (3, 'Charlie', 'pwd987', 'charlie_wallet_address') ON CONFLICT (user_id) DO UPDATE SET user_name=excluded.user_name, password_hash=excluded.password_hash, wallet_address=excluded.wallet_address",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO wallets (wallet_id, wallet_name, user_id, balance) VALUES (3, 'Charlie Wallet', 3, 300.0) ON CONFLICT (wallet_id) DO UPDATE SET wallet_name=excluded.wallet_name, user_id=excluded.user_id, balance=excluded.balance",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO transactions (tx_id, wallet_id, amount, tx_type, timestamp) VALUES (3, 3, 150.0, 'debit', '2022-01-03 12:00:00') ON CONFLICT (tx_id) DO UPDATE SET wallet_id=excluded.wallet_id, amount=excluded.amount, tx_type=excluded.tx_type, timestamp=excluded.timestamp",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token) VALUES (3, 3, 'session_token_3') ON CONFLICT (session_id) DO UPDATE SET user_id=excluded.user_id, session_token=excluded.session_token",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, user_name, password_hash, wallet_address) VALUES (4, 'David', 'pass1234', 'david_wallet_address') ON CONFLICT (user_id) DO UPDATE SET user_name=excluded.user_name, password_hash=excluded.password_hash, wallet_address=excluded.wallet_address",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO wallets (wallet_id, wallet_name, user_id, balance) VALUES (4, 'David Wallet', 4, 400.0) ON CONFLICT (wallet_id) DO UPDATE SET wallet_name=excluded.wallet_name, user_id=excluded.user_id, balance=excluded.balance",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO transactions (tx_id, wallet_id, amount, tx_type, timestamp) VALUES (4, 4, 200.0, 'credit', '2022-01-04 12:00:00') ON CONFLICT (tx_id) DO UPDATE SET wallet_id=excluded.wallet_id, amount=excluded.amount, tx_type=excluded.tx_type, timestamp=excluded.timestamp",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token) VALUES (4, 4, 'session_token_4') ON CONFLICT (session_id) DO UPDATE SET user_id=excluded.user_id, session_token=excluded.session_token",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, user_name, password_hash, wallet_address) VALUES (5, 'Eve', 'pwd5678', 'eve_wallet_address') ON CONFLICT (user_id) DO UPDATE SET user_name=excluded.user_name, password_hash=excluded.password_hash, wallet_address=excluded.wallet_address",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO wallets (wallet_id, wallet_name, user_id, balance) VALUES (5, 'Eve Wallet', 5, 500.0) ON CONFLICT (wallet_id) DO UPDATE SET wallet_name=excluded.wallet_name, user_id=excluded.user_id, balance=excluded.balance",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO transactions (tx_id, wallet_id, amount, tx_type, timestamp) VALUES (5, 5, 250.0, 'debit', '2022-01-05 12:00:00') ON CONFLICT (tx_id) DO UPDATE SET wallet_id=excluded.wallet_id, amount=excluded.amount, tx_type=excluded.tx_type, timestamp=excluded.timestamp",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token) VALUES (5, 5, 'session_token_5') ON CONFLICT (session_id) DO UPDATE SET user_id=excluded.user_id, session_token=excluded.session_token",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, user_name, password_hash, wallet_address) VALUES (1, 'Alice', 'password123', 'abc123xyz');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO wallets (wallet_id, wallet_name, user_id, balance) VALUES (1, 'Alice Wallet', 1, 100.0) ON CONFLICT (wallet_id) DO UPDATE SET balance = 100.0;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO transactions (tx_id, wallet_id, amount, tx_type, timestamp) VALUES (1, 1, 50.0, 'debit', CURRENT_TIMESTAMP) ON CONFLICT (tx_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token) VALUES (1, 1, 'token123') ON CONFLICT (user_id) DO UPDATE SET session_token = 'token123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, user_name, password_hash, wallet_address) VALUES (2, 'Bob', 'pass456', 'def456xyz');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO wallets (wallet_id, wallet_name, user_id, balance) VALUES (2, 'Bob Wallet', 2, 200.0) ON CONFLICT (wallet_id) DO UPDATE SET balance = 200.0;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO transactions (tx_id, wallet_id, amount, tx_type, timestamp) VALUES (2, 2, 75.0, 'credit', CURRENT_TIMESTAMP) ON CONFLICT (tx_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token) VALUES (2, 2, 'token456') ON CONFLICT (user_id) DO UPDATE SET session_token = 'token456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, user_name, password_hash, wallet_address) VALUES (3, 'Charlie', 'pass789', 'ghi789xyz');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO wallets (wallet_id, wallet_name, user_id, balance) VALUES (3, 'Charlie Wallet', 3, 300.0) ON CONFLICT (wallet_id) DO UPDATE SET balance = 300.0;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO transactions (tx_id, wallet_id, amount, tx_type, timestamp) VALUES (3, 3, 100.0, 'debit', CURRENT_TIMESTAMP) ON CONFLICT (tx_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token) VALUES (3, 3, 'token789') ON CONFLICT (user_id) DO UPDATE SET session_token = 'token789';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, user_name, password_hash, wallet_address) VALUES (4, 'David', 'pass999', 'jkl999xyz');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO wallets (wallet_id, wallet_name, user_id, balance) VALUES (4, 'David Wallet', 4, 400.0) ON CONFLICT (wallet_id) DO UPDATE SET balance = 400.0;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO transactions (tx_id, wallet_id, amount, tx_type, timestamp) VALUES (4, 4, 125.0, 'credit', CURRENT_TIMESTAMP) ON CONFLICT (tx_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token) VALUES (4, 4, 'token999') ON CONFLICT (user_id) DO UPDATE SET session_token = 'token999';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, user_name, password_hash, wallet_address) VALUES (5, 'Eve', 'pass321', 'mno321xyz');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO wallets (wallet_id, wallet_name, user_id, balance) VALUES (5, 'Eve Wallet', 5, 500.0) ON CONFLICT (wallet_id) DO UPDATE SET balance = 500.0;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO transactions (tx_id, wallet_id, amount, tx_type, timestamp) VALUES (5, 5, 150.0, 'debit', CURRENT_TIMESTAMP) ON CONFLICT (tx_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    wallet_address VARCHAR(255) UNIQUE\n);\n\n\nCREATE TABLE wallets (\n    wallet_id INT PRIMARY KEY,\n    wallet_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    balance DECIMAL(18,8) DEFAULT 0.0\n);\n\n\nCREATE TABLE transactions (\n    tx_id INT PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id) ON DELETE CASCADE,\n    amount DECIMAL(18,8) NOT NULL,\n    tx_type VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE user_sessions (\n    session_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n    session_token VARCHAR(255) UNIQUE \n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, session_token) VALUES (5, 5, 'token321') ON CONFLICT (user_id) DO UPDATE SET session_token = 'token321';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('john_doe', 'password123', 'john.doe@example.com') ON CONFLICT (username) DO UPDATE SET password=EXCLUDED.password, email=EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, address, balance) VALUES (1, '0x2F2b47a9A8b222f7898A9111c649d0d1f1390C3B', 100.0) ON CONFLICT (user_id) DO UPDATE SET address=EXCLUDED.address, balance=EXCLUDED.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (wallet_id, amount, timestamp) VALUES (1, 25.0, '2022-01-15 10:30:00') ON CONFLICT (wallet_id) DO UPDATE SET amount=EXCLUDED.amount, timestamp=EXCLUDED.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO access_logs (user_id, action, timestamp) VALUES (1, 'Login', '2022-01-15 10:30:00') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO sessions (user_id, token, expiry_timestamp) VALUES (1, 'abc123xyz456', '2022-01-16 20:00:00') ON CONFLICT (user_id) DO UPDATE SET token=EXCLUDED.token, expiry_timestamp=EXCLUDED.expiry_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('jane_smith', 'pass456', 'jane.smith@example.com') ON CONFLICT (username) DO UPDATE SET password=EXCLUDED.password, email=EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, address, balance) VALUES (2, '0x8AbCc32f1CdE45378b321e21AC6A795451D67B9a', 200.0) ON CONFLICT (user_id) DO UPDATE SET address=EXCLUDED.address, balance=EXCLUDED.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (wallet_id, amount, timestamp) VALUES (2, 50.0, '2022-01-16 15:45:00') ON CONFLICT (wallet_id) DO UPDATE SET amount=EXCLUDED.amount, timestamp=EXCLUDED.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO access_logs (user_id, action, timestamp) VALUES (2, 'Logout', '2022-01-16 15:45:00') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO sessions (user_id, token, expiry_timestamp) VALUES (2, 'def789mno012', '2022-01-17 10:00:00') ON CONFLICT (user_id) DO UPDATE SET token=EXCLUDED.token, expiry_timestamp=EXCLUDED.expiry_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('alice_wonder', 'wonderland', 'alice.wonder@example.com') ON CONFLICT (username) DO UPDATE SET password=EXCLUDED.password, email=EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, address, balance) VALUES (3, '0x3eFg22CdE451Ed854D5B92cA6aB463fE221eC89', 300.0) ON CONFLICT (user_id) DO UPDATE SET address=EXCLUDED.address, balance=EXCLUDED.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (wallet_id, amount, timestamp) VALUES (3, 75.0, '2022-01-17 12:00:00') ON CONFLICT (wallet_id) DO UPDATE SET amount=EXCLUDED.amount, timestamp=EXCLUDED.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO access_logs (user_id, action, timestamp) VALUES (3, 'View Profile', '2022-01-17 12:00:00') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO sessions (user_id, token, expiry_timestamp) VALUES (3, 'xyz456abc789', '2022-01-18 08:30:00') ON CONFLICT (user_id) DO UPDATE SET token=EXCLUDED.token, expiry_timestamp=EXCLUDED.expiry_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('sam_carter', 'pass1234', 'sam.carter@example.com') ON CONFLICT (username) DO UPDATE SET password=EXCLUDED.password, email=EXCLUDED.email;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, address, balance) VALUES (4, '0x9bC47A1D38E6AFe118DdAc623a2AC6Ec7416eCd8', 400.0) ON CONFLICT (user_id) DO UPDATE SET address=EXCLUDED.address, balance=EXCLUDED.balance;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (wallet_id, amount, timestamp) VALUES (4, 100.0, '2022-01-18 09:30:00') ON CONFLICT (wallet_id) DO UPDATE SET amount=EXCLUDED.amount, timestamp=EXCLUDED.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO access_logs (user_id, action, timestamp) VALUES (4, 'Logout', '2022-01-18 09:30:00') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO sessions (user_id, token, expiry_timestamp) VALUES (4, 'pass4567key890', '2022-01-19 12:15:00') ON CONFLICT (user_id) DO UPDATE SET token=EXCLUDED.token, expiry_timestamp=EXCLUDED.expiry_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('michael_miller', 'mikepass', 'michael.miller@example.com') ON CONFLICT (username) DO UPDATE SET password=EXCLUDED.password, email=EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('john_doe', 'securepass123', 'john@example.com') ON CONFLICT (username) DO UPDATE SET password = 'newpass456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, address, balance) VALUES (1, '0x1A3Bc...', 500.25) ON CONFLICT (user_id) DO UPDATE SET balance = 700.50;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (wallet_id, amount, timestamp) VALUES (1, 100.75, '2022-01-15 10:30:00') ON CONFLICT (wallet_id) DO UPDATE SET amount = 200.50, timestamp = '2022-01-15 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO access_logs (user_id, action, timestamp) VALUES (1, 'login', '2022-01-15 10:00:00') ON CONFLICT (user_id) DO UPDATE SET action = 'logout', timestamp = '2022-01-15 11:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO sessions (user_id, token, expiry_timestamp) VALUES (1, 'token123', '2022-01-16 15:00:00') ON CONFLICT (user_id) DO UPDATE SET token = 'newtoken456', expiry_timestamp = '2022-01-17 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('jane_smith', 'password789', 'jane@example.com') ON CONFLICT (username) DO UPDATE SET email = 'jane_smith@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO wallets (user_id, address, balance) VALUES (2, '0xAbCdE...', 1000.75) ON CONFLICT (user_id) DO UPDATE SET balance = 1500.25;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (wallet_id, amount, timestamp) VALUES (2, 250.50, '2022-01-16 09:45:00') ON CONFLICT (wallet_id) DO UPDATE SET amount = 300.25, timestamp = '2022-01-16 11:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO access_logs (user_id, action, timestamp) VALUES (2, 'login', '2022-01-16 09:30:00') ON CONFLICT (user_id) DO UPDATE SET action = 'logout', timestamp = '2022-01-16 10:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO sessions (user_id, token, expiry_timestamp) VALUES (2, 'token456', '2022-01-17 14:30:00') ON CONFLICT (user_id) DO UPDATE SET token = 'newsession789', expiry_timestamp = '2022-01-18 11:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE wallets (\n    wallet_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    address VARCHAR(100) NOT NULL,\n    balance DECIMAL(18, 5) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    wallet_id INT REFERENCES wallets(wallet_id),\n    amount DECIMAL(18, 5) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE access_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    token VARCHAR(100) NOT NULL,\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('alice_miller', 'pass1234', 'alice@example.com') ON CO... (length: 2863)  ...']}  # generated 20 example UPSERT SQL statements. Each example illustrates an UPSERT operation on the given database schema. Let me know if you need more examples.```sqlragment of the output below to include in the response. The full list of 20 UPSERT SQL statements has been generated based on the provided database schema. If you need all 20 statements, please let me know. Here are a few examples from the generated list: 1. ```sql INSERT INTO users (username, password, email) VALUES ('john_doe', 'securepass123', 'john@example.com') ON CONFLICT (username) DO UPDATE SET password = 'newpass456';``` 2. ```sql INSERT INTO wallets (user_id, address, balance) VALUES (1, '0x1A3Bc...', 500.25) ON CONFLICT (user_id) DO UPDATE SET balance = 700.50;``` 3. ```sql INSERT INTO transactions (wallet_id, amount, timestamp) VALUES (1, 100.75, '2022-01-15 10:30:00') ON CONFLICT (wallet_id) DO UPDATE SET amount = 200.50, timestamp = '2022-01-15 12:00:00';``` 4. ```sql INSERT INTO access_logs (user_id, action, timestamp) VALUES (1, 'login', '2022-01-15 10:00:00') ON CONFLICT (user_id) DO UPDATE SET action = 'logout', timestamp = '2022-01-15 11:00:00';``` 5. ```sql INSERT INTO sessions (user_id, token, expiry_timestamp) VALUES (1, 'token123', '2022-01-16 15:00:00') ON CONFLICT (user_id) DO UPDATE SET token = 'newtoken456', expiry_timestamp = '2022-01-17 12:00:00';``` Let me know if you need more examples or if you would like to see the full list of 20 UPSERT SQL statements.  If you have any specific requirements or modifications, feel free to let me know! Happy to help further.  Let me know if you have any questions. Thank you!  "
]