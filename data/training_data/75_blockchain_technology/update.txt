<t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPDATE blockchain_transactions SET amount = amount + 100 WHERE transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>update blockchain_transactions set amount = amount + 100 where transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_transactions SET amount = amount + 100 WHERE transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_transactions set amount = amount + 100 where transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPDATE blockchain_transactions SET amount = amount + 100 WHERE transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>update blockchain_transactions set amount = amount + 100 where transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_transactions SET amount = amount + 100 WHERE transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_transactions set amount = amount + 100 where transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_transactions SET amount = amount + 100 WHERE transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_transactions set amount = amount + 100 where transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_transactions SET amount = amount + 100 WHERE transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_transactions set amount = amount + 100 where transaction_id = 1;</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPDATE blockchain_blocks SET block_hash = 'new_hash_value' WHERE block_id = 10;</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>update blockchain_blocks set block_hash = 'new_hash_value' where block_id = 10;</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_blocks SET block_hash = 'new_hash_value' WHERE block_id = 10;</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_blocks set block_hash = 'new_hash_value' where block_id = 10;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPDATE blockchain_blocks SET block_hash = 'new_hash_value' WHERE block_id = 10;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>update blockchain_blocks set block_hash = 'new_hash_value' where block_id = 10;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_blocks SET block_hash = 'new_hash_value' WHERE block_id = 10;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_blocks set block_hash = 'new_hash_value' where block_id = 10;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_blocks SET block_hash = 'new_hash_value' WHERE block_id = 10;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_blocks set block_hash = 'new_hash_value' where block_id = 10;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_blocks SET block_hash = 'new_hash_value' WHERE block_id = 10;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_blocks set block_hash = 'new_hash_value' where block_id = 10;</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPDATE blockchain_users SET balance = balance - 50 WHERE user_id = 5;</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>update blockchain_users set balance = balance - 50 where user_id = 5;</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_users SET balance = balance - 50 WHERE user_id = 5;</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_users set balance = balance - 50 where user_id = 5;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPDATE blockchain_users SET balance = balance - 50 WHERE user_id = 5;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>update blockchain_users set balance = balance - 50 where user_id = 5;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_users SET balance = balance - 50 WHERE user_id = 5;</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_users set balance = balance - 50 where user_id = 5;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_users SET balance = balance - 50 WHERE user_id = 5;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_users set balance = balance - 50 where user_id = 5;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPDATE blockchain_users SET balance = balance - 50 WHERE user_id = 5;</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>update blockchain_users set balance = balance - 50 where user_id = 5;</stat>