[
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE consensus_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT consensus_id, change_timestamp FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE change_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE consensus_algorithm = 'Proof of Work';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE next_algorithm = 'Proof of Stake';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE previous_algorithm IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT consensus_id, consensus_algorithm FROM blockchain_consensus_history WHERE change_timestamp BETWEEN '2022-01-01' AND '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history ORDER BY change_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT DISTINCT consensus_algorithm FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT AVG(consensus_id) FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT consensus_id, next_algorithm FROM blockchain_consensus_history WHERE consensus_algorithm = 'PoA';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE next_algorithm LIKE '%Proof%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE consensus_id IN (1, 3, 5, 7, 9);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT consensus_id, consensus_algorithm, change_timestamp FROM blockchain_consensus_history WHERE consensus_id > 10;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE change_timestamp > now() - interval '1 month';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE consensus_algorithm ILIKE 'proof%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT consensus_id, next_algorithm FROM blockchain_consensus_history WHERE change_timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT consensus_id, next_algorithm FROM blockchain_consensus_history WHERE change_timestamp >= '2022-01-01' AND consensus_algorithm = 'PoW';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE change_timestamp < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT consensus_id, consensus_algorithm, change_timestamp FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE change_timestamp < NOW();",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE consensus_algorithm = 'Proof of Work';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE consensus_algorithm LIKE 'Proof%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history ORDER BY change_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history ORDER BY consensus_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE previous_algorithm IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE previous_algorithm IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT consensus_id, consensus_algorithm, next_algorithm FROM blockchain_consensus_history WHERE next_algorithm = 'Proof of Stake';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT MAX(change_timestamp) FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT MIN(change_timestamp) FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT AVG(consensus_id) FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE consensus_id > 10 AND next_algorithm = 'PoC';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE change_timestamp BETWEEN '2023-01-01' AND '2023-12-31';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT DISTINCT consensus_algorithm FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history OFFSET 3;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nSELECT consensus_id, consensus_algorithm, next_algorithm, change_timestamp FROM blockchain_consensus_history WHERE consensus_algorithm != next_algorithm;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm, change_date FROM blockchain_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, algorithm, change_date FROM blockchain_history WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM audit_log;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT event_timestamp, description FROM audit_log;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT log_id, event_timestamp, description FROM audit_log WHERE log_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, algorithm, change_date FROM blockchain_history WHERE change_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT log_id, event_timestamp, description FROM audit_log WHERE event_timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM audit_log;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(id) FROM blockchain_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(event_timestamp) FROM audit_log;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT MIN(change_date) FROM blockchain_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT algorithm FROM blockchain_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(id), MAX(id), MIN(id) FROM blockchain_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_history ORDER BY change_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM audit_log ORDER BY event_timestamp ASC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_history LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM audit_log OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_history UNION SELECT * FROM audit_log;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_history",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, algorithm FROM blockchain_history WHERE change_date = '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM audit_log",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT log_id, event_timestamp FROM audit_log WHERE event_timestamp > '2022-01-01 00:00:00'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT algorithm FROM blockchain_history",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, COUNT(*) AS change_count FROM blockchain_history GROUP BY id",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_history WHERE algorithm LIKE 'SHA%'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM audit_log WHERE description ILIKE '%error%'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, algorithm, change_date FROM blockchain_history ORDER BY change_date DESC",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS log_count FROM audit_log",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(id) AS avg_id FROM blockchain_history",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm, COUNT(*) AS count FROM blockchain_history GROUP BY algorithm HAVING COUNT(*) > 1",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_history WHERE change_date BETWEEN '2022-01-01' AND '2022-02-01'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm, MAX(id) AS max_id FROM blockchain_history GROUP BY algorithm",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_history WHERE algorithm IN ('SHA-256', 'SHA-512')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, algorithm, change_date FROM blockchain_history WHERE algorithm = 'SHA-256' OR algorithm = 'SHA-512'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM audit_log WHERE log_id IN (SELECT log_id FROM audit_log WHERE event_timestamp > '2022-01-01 00:00:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, algorithm, change_date FROM blockchain_history LIMIT 5 OFFSET 10",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, algorithm, change_date FROM blockchain_history WHERE id = 1 UNION SELECT log_id AS id, description AS algorithm, event_timestamp AS change_date FROM audit_log WHERE log_id = 1",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM audit_log WHERE description IS NULL",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consesus_algorithm_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, from_version FROM blockchain_consesus_algorithm_changes WHERE block_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM audit_trail;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT event_timestamp, event_description FROM audit_trail WHERE event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM block_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT block_id, transaction_data FROM block_transactions WHERE transaction_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consesus_algorithm_changes WHERE to_version = 'v2';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT block_id, algorithm_name FROM blockchain_consesus_algorithm_changes WHERE from_version IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM audit_trail WHERE event_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM block_transactions WHERE block_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, to_version FROM blockchain_consesus_algorithm_changes WHERE algorithm_name LIKE '%SHA%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_consesus_algorithm_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(transaction_id) FROM block_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(event_timestamp) FROM audit_trail;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT MIN(block_id) FROM blockchain_consesus_algorithm_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT algorithm_name FROM blockchain_consesus_algorithm_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT SUM(transaction_id) FROM block_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT event_description FROM audit_trail ORDER BY event_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consesus_algorithm_changes LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM block_transactions ORDER BY block_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consesus_algorithm_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT block_id, algorithm_name FROM blockchain_consesus_algorithm_changes WHERE from_version IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consesus_algorithm_changes WHERE algorithm_name = 'Proof of Stake';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT block_id, to_version FROM blockchain_consesus_algorithm_changes WHERE algorithm_name = 'Proof of Work';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_consesus_algorithm_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT block_id, from_version, to_version FROM blockchain_consesus_algorithm_changes ORDER BY block_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT event_timestamp, event_description FROM audit_trail WHERE event_description LIKE '%error%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT event_id, event_timestamp, event_description FROM audit_trail WHERE event_timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM audit_trail ORDER BY event_timestamp DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, block_id, transaction_data FROM block_transactions WHERE block_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT block_id, algorithm_name, from_version, to_version FROM blockchain_consesus_algorithm_changes WHERE block_id NOT IN (SELECT block_id FROM block_transactions);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT block_id, COUNT(transaction_id) AS transaction_count FROM block_transactions GROUP BY block_id ORDER BY transaction_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consesus_algorithm_changes BC JOIN block_transactions BT ON BC.block_id = BT.block_id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(*) AS change_count FROM blockchain_consesus_algorithm_changes GROUP BY algorithm_name ORDER BY change_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, to_version, COUNT(*) AS change_count FROM blockchain_consesus_algorithm_changes GROUP BY algorithm_name, to_version;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, MIN(block_id) AS first_change_id, MAX(block_id) AS last_change_id FROM blockchain_consesus_algorithm_changes GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT block_id, algorithm_name, event_timestamp FROM blockchain_consesus_algorithm_changes BC JOIN audit_trail AT ON BC.block_id = AT.event_id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(block_id) AS avg_block_id FROM blockchain_consesus_algorithm_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, SUM(block_id) AS total_block_id FROM blockchain_consesus_algorithm_changes GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(*) AS total_changes FROM blockchain_consesus_algorithm_changes GROUP BY algorithm_name HAVING total_changes > 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_algorithm_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT id, algorithm_name FROM blockchain_consensus_algorithm_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_nodes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT node_id, node_name FROM blockchain_nodes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT history_id, algorithm_id, node_id, activation_date FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_audit_log;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT log_id, action_type, action_timestamp FROM blockchain_audit_log;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT id, algorithm_name, change_date, change_description FROM blockchain_consensus_algorithm_changes WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT node_id, node_name, ip_address, node_type FROM blockchain_nodes WHERE node_id = 'abc123';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT history_id, algorithm_id, node_id, activation_date, deactivation_date FROM blockchain_consensus_history WHERE history_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT log_id, action_type, action_description, action_timestamp FROM blockchain_audit_log WHERE log_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_algorithm_changes WHERE change_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_nodes WHERE node_name = 'Node1';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE activation_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_audit_log WHERE action_type = 'update';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT node_name, ip_address FROM blockchain_nodes WHERE node_type = 'validator';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT algorithm_name, change_description FROM blockchain_consensus_algorithm_changes WHERE change_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT node_id, node_name FROM blockchain_nodes WHERE ip_address LIKE '192.168.%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT history_id, algorithm_id, node_id, activation_date FROM blockchain_consensus_history ORDER BY activation_date DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_algorithm_changes WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT node_name, ip_address FROM blockchain_nodes WHERE node_type = 'full';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT algorithm_name, change_date, change_description FROM blockchain_consensus_algorithm_changes WHERE change_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_nodes WHERE ip_address LIKE '%.168.%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT MAX(change_date) FROM blockchain_consensus_algorithm_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_nodes WHERE node_type = 'light';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT node_name, ip_address FROM blockchain_nodes ORDER BY node_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT algorithm_name, change_date from blockchain_consensus_algorithm_changes WHERE algorithm_name LIKE 'Proof%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_consensus_history WHERE activation_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT node_id) FROM blockchain_consensus_history;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT node_name, ip_address FROM blockchain_nodes WHERE node_type IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT algorithm_name, change_description FROM blockchain_consensus_algorithm_changes WHERE change_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_audit_log WHERE action_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT node_name, ip_address FROM blockchain_nodes WHERE node_id IN (SELECT node_id FROM blockchain_consensus_history WHERE algorithm_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT algorithm_name, change_date FROM blockchain_consensus_algorithm_changes WHERE algorithm_name ILIKE '%consensus%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_nodes, node_type FROM blockchain_nodes GROUP BY node_type;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT node_id, MIN(activation_date) AS first_activation_date FROM blockchain_consensus_history GROUP BY node_id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT node_name, ip_address FROM blockchain_nodes WHERE node_type = 'full' AND ip_address NOT LIKE '%.1%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT AVG(AVG(change_date)) FROM blockchain_consensus_algorithm_changes GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nSELECT log_id, action_type, action_timestamp FROM blockchain_audit_log ORDER BY action_timestamp DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT * FROM consensus_algorithm_history;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT id, algorithm_name FROM consensus_algorithm_history WHERE change_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash FROM consensus_block WHERE algorithm_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT * FROM validator WHERE public_key = 'abc123';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT validator_id, validator_name FROM validator WHERE validator_name LIKE 'Alice%';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT * FROM validator_history ORDER BY change_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, validator_id FROM block_validator WHERE block_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, validator_id FROM block_validator WHERE validator_id = 50;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT * FROM consensus_algorithm_history WHERE change_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT validator_id, validator_name FROM validator WHERE public_key = 'xyz456';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT * FROM validator_history WHERE change_date > '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash FROM consensus_block WHERE timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT * FROM consensus_algorithm_history WHERE algorithm_name = 'PoW';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT validator_id, validator_name FROM validator WHERE validator_name LIKE '%Bob%';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, validator_id FROM block_validator WHERE validator_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash FROM consensus_block WHERE timestamp < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT * FROM validator WHERE validator_name = 'Charly';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, validator_id FROM block_validator WHERE block_id = 200;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT * FROM consensus_algorithm_history WHERE change_date BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT history_id, change_description FROM validator_history WHERE change_date = '2022-03-15';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT * FROM consensus_algorithm_history WHERE algorithm_name LIKE 'Proof%'",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, timestamp FROM consensus_block WHERE algorithm_id = 1",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT validator_name, public_key FROM validator WHERE validator_id IN (SELECT validator_id FROM validator_history WHERE change_date > '2021-01-01')",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, validator_name FROM consensus_block INNER JOIN block_validator ON consensus_block.block_id = block_validator.block_id INNER JOIN validator ON validator.validator_id = block_validator.validator_id",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT block_id, block_hash, timestamp FROM consensus_block ORDER BY timestamp DESC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, change_date FROM consensus_algorithm_history WHERE id IN (SELECT algorithm_id FROM consensus_block WHERE timestamp > '2022-01-01')",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT validator_name, change_date FROM validator INNER JOIN validator_history ON validator.validator_id = validator_history.validator_id WHERE validator_name LIKE 'Alice%'",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM validator",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT AVG(timestamp) FROM consensus_block",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT MAX(change_date) FROM validator_history",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, MAX(timestamp) FROM consensus_block INNER JOIN consensus_algorithm_history ON consensus_block.algorithm_id = consensus_algorithm_history.id GROUP BY algorithm_name",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT validator_id, COUNT(block_id) as blocks_verified FROM block_validator GROUP BY validator_id HAVING COUNT(block_id) > 10",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, COUNT(validator_id) as validators_verified FROM block_validator GROUP BY block_id HAVING COUNT(validator_id) < 5",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(*) as block_count FROM consensus_algorithm_history INNER JOIN consensus_block ON consensus_algorithm_history.id = consensus_block.algorithm_id GROUP BY algorithm_name",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT validator_id, SUM(block_id) as total_blocks_verified FROM block_validator GROUP BY validator_id",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, MIN(timestamp) as earliest_timestamp FROM consensus_block GROUP BY block_id",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, AVG(timestamp) as avg_timestamp FROM consensus_block INNER JOIN consensus_algorithm_history ON consensus_block.algorithm_id = consensus_algorithm_history.id GROUP BY algorithm_name",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT validator_name, MAX(change_date) as latest_change FROM validator INNER JOIN validator_history ON validator.validator_id = validator_history.validator_id GROUP BY validator_name",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, change_date FROM consensus_block INNER JOIN validator_history ON consensus_block.block_id = validator_history.validator_id ORDER BY change_date DESC",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT * FROM consensus_block UNION SELECT * FROM consensus_algorithm_history",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT validator_id, validator_name, public_key FROM validator",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(*) as block_count FROM consensus_algorithm_history INNER JOIN consensus_block ON consensus_algorithm_history.id = consensus_block.algorithm_id GROUP BY algorithm_name HAVING COUNT(*) > 5"
]