[
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nUPDATE blockchain_consensus_history SET consensus_algorithm = 'PoW' WHERE consensus_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nUPDATE blockchain_consensus_history SET next_algorithm = 'PoS' WHERE consensus_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nUPDATE blockchain_consensus_history SET previous_algorithm = 'DPoS', next_algorithm = 'PoA' WHERE consensus_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nUPDATE blockchain_consensus_history SET next_algorithm = 'PoS' WHERE consensus_algorithm = 'PoW'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nUPDATE blockchain_consensus_history SET previous_algorithm = 'PoW' WHERE consensus_algorithm = 'PoS'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nUPDATE blockchain_consensus_history SET consensus_algorithm = 'PoW', next_algorithm = 'PoS' WHERE consensus_id = 1",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nUPDATE blockchain_history SET algorithm = 'SHA-256' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nUPDATE audit_log SET description = 'Data modified' WHERE log_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nUPDATE blockchain_history SET change_date = '2022-01-15' WHERE id = 2;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nUPDATE blockchain_history SET algorithm = 'SHA-256' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nUPDATE blockchain_history SET algorithm = 'Argon2' WHERE change_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nUPDATE audit_log SET description = 'User updated blockchain algorithm' WHERE log_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nUPDATE blockchain_consesus_algorithm_changes SET to_version='v2' WHERE block_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nUPDATE audit_trail SET event_description='New event description' WHERE event_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nUPDATE block_transactions SET transaction_data='Updated transaction data' WHERE transaction_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nUPDATE blockchain_consesus_algorithm_changes SET algorithm_name = 'PoW' WHERE block_id = 1001;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nUPDATE audit_trail SET event_description = 'Block validation completed' WHERE event_id = 2001;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nUPDATE block_transactions SET transaction_data = 'Transfer $100 to user A' WHERE transaction_id = 3001;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nUPDATE blockchain_consensus_algorithm_changes SET change_description = 'Updated description' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nUPDATE blockchain_nodes SET ip_address = '192.168.1.10' WHERE node_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nUPDATE blockchain_consensus_history SET deactivation_date = '2021-10-15' WHERE history_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nUPDATE blockchain_consensus_algorithm_changes SET change_description = 'Updated description' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nUPDATE blockchain_nodes SET ip_address = '192.168.0.1' WHERE node_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nUPDATE blockchain_consensus_history SET activation_date = '2022-01-01' WHERE history_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nUPDATE consensus_algorithm_history SET change_date = '2022-01-01' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nUPDATE validator SET public_key = 'new_public_key' WHERE validator_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nUPDATE block_validator SET validator_id = 2 WHERE block_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nUPDATE consensus_algorithm_history SET change_date = '2022-01-01' WHERE algorithm_name = 'Proof of Stake';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nUPDATE validator SET public_key = 'new_public_key' WHERE validator_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nUPDATE block_validator SET validator_id = 2 WHERE block_id = 10;"
]