[
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nDELETE FROM blockchain_consensus_history WHERE consensus_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nDELETE FROM blockchain_consensus_history WHERE consensus_algorithm = 'PoW';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nDELETE FROM blockchain_consensus_history WHERE next_algorithm = 'PoS';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nDELETE FROM blockchain_consensus_history WHERE consensus_algorithm = 'SHA-256';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nDELETE FROM blockchain_consensus_history WHERE consensus_algorithm = 'SHA-512' AND next_algorithm = 'SHA3-256';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_history (\n  consensus_id SERIAL PRIMARY KEY,\n  consensus_algorithm VARCHAR(50) NOT NULL,\n  previous_algorithm VARCHAR(50),\n  next_algorithm VARCHAR(50) NOT NULL,\n  change_timestamp TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nDELETE FROM blockchain_consensus_history WHERE change_timestamp < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nDELETE FROM blockchain_history WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nDELETE FROM audit_log WHERE log_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nDELETE FROM blockchain_history WHERE change_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nDELETE FROM blockchain_history WHERE algorithm = 'SHA-256';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nDELETE FROM audit_log WHERE event_timestamp < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_history (\n    id INT PRIMARY KEY,\n    algorithm VARCHAR(50) NOT NULL,\n    change_date DATE NOT NULL\n);\n\nCREATE TABLE audit_log (\n    log_id SERIAL PRIMARY KEY,\n    event_timestamp TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nDELETE FROM blockchain_history WHERE change_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nDELETE FROM blockchain_consesus_algorithm_changes WHERE block_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nDELETE FROM audit_trail WHERE event_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nDELETE FROM block_transactions WHERE transaction_id = 500;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nDELETE FROM blockchain_consesus_algorithm_changes WHERE block_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nDELETE FROM audit_trail WHERE event_timestamp < '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consesus_algorithm_changes (\n  block_id INT PRIMARY KEY,\n  algorithm_name TEXT NOT NULL,\n  from_version TEXT,\n  to_version TEXT NOT NULL\n);\n\nCREATE TABLE audit_trail (\n  event_id INT PRIMARY KEY,\n  event_timestamp TIMESTAMP NOT NULL,\n  event_description TEXT\n);\n\nCREATE TABLE block_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_id INT REFERENCES blockchain_consesus_algorithm_changes(block_id),\n  transaction_data TEXT\n);\n\n### STATEMENT\n\nDELETE FROM block_transactions WHERE transaction_id IN (SELECT transaction_id FROM block_transactions WHERE block_id = 200);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nDELETE FROM blockchain_consensus_algorithm_changes WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nDELETE FROM blockchain_nodes WHERE node_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nDELETE FROM blockchain_consensus_history WHERE history_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nDELETE FROM blockchain_consensus_algorithm_changes WHERE change_date < '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nDELETE FROM blockchain_nodes WHERE node_type IS NULL OR ip_address = '0.0.0.0';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_consensus_algorithm_changes ( \n    id INT PRIMARY KEY, \n    algorithm_name TEXT NOT NULL, \n    change_date DATE NOT NULL, \n    change_description TEXT \n);\n\nCREATE TABLE blockchain_nodes ( \n    node_id UUID PRIMARY KEY, \n    node_name TEXT NOT NULL, \n    ip_address INET NOT NULL, \n    node_type TEXT \n);\n\nCREATE TABLE blockchain_consensus_history ( \n    history_id SERIAL PRIMARY KEY, \n    algorithm_id INT REFERENCES blockchain_consensus_algorithm_changes(id), \n    node_id UUID REFERENCES blockchain_nodes(node_id), \n    activation_date DATE NOT NULL, \n    deactivation_date DATE \n);\n\nCREATE TABLE blockchain_audit_log ( \n    log_id SERIAL PRIMARY KEY, \n    action_type TEXT NOT NULL, \n    action_description TEXT, \n    action_timestamp TIMESTAMP NOT NULL \n);\n\n### STATEMENT\n\nDELETE FROM blockchain_audit_log WHERE action_timestamp < NOW() - INTERVAL '7 days';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nDELETE FROM validator WHERE validator_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nDELETE FROM consensus_block WHERE block_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nDELETE FROM validator_history WHERE history_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nDELETE FROM validator WHERE validator_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nDELETE FROM consensus_block WHERE timestamp < '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE consensus_algorithm_history (\n    id INT PRIMARY KEY,\n    algorithm_name TEXT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\nCREATE TABLE consensus_block (\n    block_id INT PRIMARY KEY,\n    block_hash TEXT NOT NULL,\n    algorithm_id INT NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    FOREIGN KEY (algorithm_id) REFERENCES consensus_algorithm_history(id)\n);\n\nCREATE TABLE validator (\n    validator_id INT PRIMARY KEY,\n    validator_name TEXT NOT NULL,\n    public_key TEXT NOT NULL\n);\n\nCREATE TABLE validator_history (\n    history_id INT PRIMARY KEY,\n    validator_id INT NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT,\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\nCREATE TABLE block_validator (\n    block_id INT NOT NULL,\n    validator_id INT NOT NULL,\n    PRIMARY KEY (block_id, validator_id),\n    FOREIGN KEY (block_id) REFERENCES consensus_block(block_id),\n    FOREIGN KEY (validator_id) REFERENCES validator(validator_id)\n);\n\n### STATEMENT\n\nDELETE FROM validator_history WHERE change_description LIKE '%obsolete%';"
]