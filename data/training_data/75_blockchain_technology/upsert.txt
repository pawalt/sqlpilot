<t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) VALUES (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') ON DUPLICATE KEY UPDATE block_id = VALUES(block_id), from_address = VALUES(from_address), to_address = VALUES(to_address), amount = VALUES(amount), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>upsert into blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) values (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') on duplicate key update block_id = values(block_id), from_address = values(from_address), to_address = values(to_address), amount = values(amount), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) VALUES (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') ON DUPLICATE KEY UPDATE block_id = VALUES(block_id), from_address = VALUES(from_address), to_address = VALUES(to_address), amount = VALUES(amount), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) values (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') on duplicate key update block_id = values(block_id), from_address = values(from_address), to_address = values(to_address), amount = values(amount), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) VALUES (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') ON DUPLICATE KEY UPDATE block_id = VALUES(block_id), from_address = VALUES(from_address), to_address = VALUES(to_address), amount = VALUES(amount), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>upsert into blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) values (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') on duplicate key update block_id = values(block_id), from_address = values(from_address), to_address = values(to_address), amount = values(amount), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) VALUES (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') ON DUPLICATE KEY UPDATE block_id = VALUES(block_id), from_address = VALUES(from_address), to_address = VALUES(to_address), amount = VALUES(amount), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) values (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') on duplicate key update block_id = values(block_id), from_address = values(from_address), to_address = values(to_address), amount = values(amount), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) VALUES (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') ON DUPLICATE KEY UPDATE block_id = VALUES(block_id), from_address = VALUES(from_address), to_address = VALUES(to_address), amount = VALUES(amount), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) values (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') on duplicate key update block_id = values(block_id), from_address = values(from_address), to_address = values(to_address), amount = values(amount), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) VALUES (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') ON DUPLICATE KEY UPDATE block_id = VALUES(block_id), from_address = VALUES(from_address), to_address = VALUES(to_address), amount = VALUES(amount), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_transactions (transaction_id, block_id, from_address, to_address, amount, timestamp) values (1, 1, '0x123abc', '0x456def', 100.50, '2022-01-01') on duplicate key update block_id = values(block_id), from_address = values(from_address), to_address = values(to_address), amount = values(amount), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) VALUES (1, 'hash123', 'prevhash456', '2022-01-01') ON DUPLICATE KEY UPDATE block_hash = VALUES(block_hash), previous_block_hash = VALUES(previous_block_hash), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>upsert into blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) values (1, 'hash123', 'prevhash456', '2022-01-01') on duplicate key update block_hash = values(block_hash), previous_block_hash = values(previous_block_hash), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) VALUES (1, 'hash123', 'prevhash456', '2022-01-01') ON DUPLICATE KEY UPDATE block_hash = VALUES(block_hash), previous_block_hash = VALUES(previous_block_hash), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) values (1, 'hash123', 'prevhash456', '2022-01-01') on duplicate key update block_hash = values(block_hash), previous_block_hash = values(previous_block_hash), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) VALUES (1, 'hash123', 'prevhash456', '2022-01-01') ON DUPLICATE KEY UPDATE block_hash = VALUES(block_hash), previous_block_hash = VALUES(previous_block_hash), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>upsert into blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) values (1, 'hash123', 'prevhash456', '2022-01-01') on duplicate key update block_hash = values(block_hash), previous_block_hash = values(previous_block_hash), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) VALUES (1, 'hash123', 'prevhash456', '2022-01-01') ON DUPLICATE KEY UPDATE block_hash = VALUES(block_hash), previous_block_hash = VALUES(previous_block_hash), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) values (1, 'hash123', 'prevhash456', '2022-01-01') on duplicate key update block_hash = values(block_hash), previous_block_hash = values(previous_block_hash), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) VALUES (1, 'hash123', 'prevhash456', '2022-01-01') ON DUPLICATE KEY UPDATE block_hash = VALUES(block_hash), previous_block_hash = VALUES(previous_block_hash), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) values (1, 'hash123', 'prevhash456', '2022-01-01') on duplicate key update block_hash = values(block_hash), previous_block_hash = values(previous_block_hash), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) VALUES (1, 'hash123', 'prevhash456', '2022-01-01') ON DUPLICATE KEY UPDATE block_hash = VALUES(block_hash), previous_block_hash = VALUES(previous_block_hash), timestamp = VALUES(timestamp);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_blocks (block_id, block_hash, previous_block_hash, timestamp) values (1, 'hash123', 'prevhash456', '2022-01-01') on duplicate key update block_hash = values(block_hash), previous_block_hash = values(previous_block_hash), timestamp = values(timestamp);</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_users (user_id, user_name, balance, registration_date, last_login) VALUES (1, 'Alice', 1000.00, '2022-01-01', '2022-01-01') ON DUPLICATE KEY UPDATE user_name = VALUES(user_name), balance = VALUES(balance), registration_date = VALUES(registration_date), last_login = VALUES(last_login);</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>upsert into blockchain_users (user_id, user_name, balance, registration_date, last_login) values (1, 'alice', 1000.00, '2022-01-01', '2022-01-01') on duplicate key update user_name = values(user_name), balance = values(balance), registration_date = values(registration_date), last_login = values(last_login);</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_users (user_id, user_name, balance, registration_date, last_login) VALUES (1, 'Alice', 1000.00, '2022-01-01', '2022-01-01') ON DUPLICATE KEY UPDATE user_name = VALUES(user_name), balance = VALUES(balance), registration_date = VALUES(registration_date), last_login = VALUES(last_login);</stat><divider><t>CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_users (user_id, user_name, balance, registration_date, last_login) values (1, 'alice', 1000.00, '2022-01-01', '2022-01-01') on duplicate key update user_name = values(user_name), balance = values(balance), registration_date = values(registration_date), last_login = values(last_login);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_users (user_id, user_name, balance, registration_date, last_login) VALUES (1, 'Alice', 1000.00, '2022-01-01', '2022-01-01') ON DUPLICATE KEY UPDATE user_name = VALUES(user_name), balance = VALUES(balance), registration_date = VALUES(registration_date), last_login = VALUES(last_login);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);
</t><stat>upsert into blockchain_users (user_id, user_name, balance, registration_date, last_login) values (1, 'alice', 1000.00, '2022-01-01', '2022-01-01') on duplicate key update user_name = values(user_name), balance = values(balance), registration_date = values(registration_date), last_login = values(last_login);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_users (user_id, user_name, balance, registration_date, last_login) VALUES (1, 'Alice', 1000.00, '2022-01-01', '2022-01-01') ON DUPLICATE KEY UPDATE user_name = VALUES(user_name), balance = VALUES(balance), registration_date = VALUES(registration_date), last_login = VALUES(last_login);</stat><divider><t>CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_users (user_id, user_name, balance, registration_date, last_login) values (1, 'alice', 1000.00, '2022-01-01', '2022-01-01') on duplicate key update user_name = values(user_name), balance = values(balance), registration_date = values(registration_date), last_login = values(last_login);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_users (user_id, user_name, balance, registration_date, last_login) VALUES (1, 'Alice', 1000.00, '2022-01-01', '2022-01-01') ON DUPLICATE KEY UPDATE user_name = VALUES(user_name), balance = VALUES(balance), registration_date = VALUES(registration_date), last_login = VALUES(last_login);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_users (user_id, user_name, balance, registration_date, last_login) values (1, 'alice', 1000.00, '2022-01-01', '2022-01-01') on duplicate key update user_name = values(user_name), balance = values(balance), registration_date = values(registration_date), last_login = values(last_login);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>UPSERT INTO blockchain_users (user_id, user_name, balance, registration_date, last_login) VALUES (1, 'Alice', 1000.00, '2022-01-01', '2022-01-01') ON DUPLICATE KEY UPDATE user_name = VALUES(user_name), balance = VALUES(balance), registration_date = VALUES(registration_date), last_login = VALUES(last_login);</stat><divider><t>CREATE TABLE blockchain_users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(255),
    balance DECIMAL(10, 2),
    registration_date TIMESTAMP,
    last_login TIMESTAMP
);


CREATE TABLE blockchain_blocks (
    block_id INT PRIMARY KEY,
    block_hash VARCHAR(255),
    previous_block_hash VARCHAR(255),
    timestamp TIMESTAMP
);


CREATE TABLE blockchain_transactions (
    transaction_id INT PRIMARY KEY,
    block_id INT,
    from_address VARCHAR(255),
    to_address VARCHAR(255),
    amount DECIMAL(10, 2),
    timestamp TIMESTAMP
);
</t><stat>upsert into blockchain_users (user_id, user_name, balance, registration_date, last_login) values (1, 'alice', 1000.00, '2022-01-01', '2022-01-01') on duplicate key update user_name = values(user_name), balance = values(balance), registration_date = values(registration_date), last_login = values(last_login);</stat>