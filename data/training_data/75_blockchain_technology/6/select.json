[
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, block_number, timestamp FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE sender_address = '0x123ABC';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT count(*) FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT MAX(amount) FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT MIN(amount) FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT SUM(amount) FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE block_number > 1000 ORDER BY block_number ASC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE sender_address LIKE '0x%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE receiver_address IN ('0xAAA', '0xBBB', '0xCCC');",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT sender_address) FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount, MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT block_number, COUNT(*) AS num_transactions FROM blockchain_transactions GROUP BY block_number;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT sender_address, SUM(amount) AS total_sent FROM blockchain_transactions GROUP BY sender_address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT receiver_address, SUM(amount) AS total_received FROM blockchain_transactions GROUP BY receiver_address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE block_number > 100 AND amount >= 100.00;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, block_number FROM blockchain_transactions WHERE sender_address = '0xABCDEF';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT MAX(amount) AS largest_amount FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM blockchain_transactions WHERE receiver_address = '0x123456';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM blockchain_transactions WHERE timestamp BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM blockchain_transactions WHERE sender_address = '0x789012' AND receiver_address = '0x345678';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT DISTINCT sender_address FROM blockchain_transactions WHERE block_number <= 50;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions ORDER BY timestamp DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount, MIN(amount) AS min_amount, MAX(amount) AS max_amount FROM blockchain_transactions WHERE timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM blockchain_transactions WHERE amount > 500.00 AND block_number % 2 = 0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT receiver_address) AS unique_receivers FROM blockchain_transactions WHERE sender_address = '0xDEF123';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT sender_address, SUM(amount) AS total_sent_amount FROM blockchain_transactions GROUP BY sender_address HAVING total_sent_amount > 1000.00;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE sender_address IN ('0x123456', '0xABCDEF', '0x789012');",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT timestamp, block_number FROM blockchain_transactions WHERE receiver_address = '0xABCDEF' AND timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, receiver_address FROM blockchain_transactions WHERE amount < 50.00 AND block_number BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions, SUM(amount) AS total_amount FROM blockchain_transactions WHERE timestamp < '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT sender_address, AVG(amount) AS average_sent_amount FROM blockchain_transactions WHERE receiver_address = '0xABCDEF' GROUP BY sender_address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT receiver_address, SUM(amount) AS total_received_amount FROM blockchain_transactions WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY receiver_address HAVING total_received_amount > 500.00;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE timestamp = (SELECT MAX(timestamp) FROM blockchain_transactions);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id UUID PRIMARY KEY,\n    block_number INT,\n    transaction_hash VARCHAR(255),\n    timestamp TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 2)\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address FROM blockchain_transactions WHERE amount > 1000.00 AND timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, transaction_hash, transaction_date FROM blockchain_transactions WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_blocks;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT block_number, block_hash, block_timestamp FROM blockchain_blocks WHERE block_number = 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT miner_address FROM blockchain_blocks WHERE num_transactions > 10;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, transaction_date, sender_address FROM blockchain_transactions WHERE receiver_address = '0xabc123';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT block_number, block_hash, num_transactions FROM blockchain_blocks WHERE block_timestamp >= '2022-01-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, transaction_date, sender_address, amount FROM blockchain_transactions WHERE amount BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_blocks WHERE miner_address = '0x123def';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT block_number, block_timestamp, miner_address FROM blockchain_blocks WHERE num_transactions < 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, transaction_hash, receiver_address FROM blockchain_transactions WHERE sender_address = '0x456ghi';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT block_number, block_hash, block_timestamp FROM blockchain_blocks ORDER BY block_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, sender_address, amount FROM blockchain_transactions ORDER BY amount ASC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_blocks WHERE num_transactions > 20 ORDER BY block_number ASC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, transaction_date, sender_address, amount FROM blockchain_transactions ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT block_number, miner_address, num_transactions FROM blockchain_blocks ORDER BY block_timestamp ASC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE sender_address = receiver_address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE sender_address = '0x1234567890abcdef'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_hash, amount FROM blockchain_transactions WHERE amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, MAX(amount) FROM blockchain_transactions GROUP BY sender_address, receiver_address",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_transactions WHERE transaction_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM blockchain_transactions WHERE sender_address = '0x9876543210abcdef'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_blocks WHERE block_timestamp >= '2022-01-01 00:00:00' AND miner_address = '0xabcdef1234567890'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT block_number, COUNT(*) FROM blockchain_blocks GROUP BY block_number HAVING COUNT(*) > 5",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT block_number, MIN(num_transactions) FROM blockchain_blocks WHERE miner_address = '0xabcdef1234567890'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT block_number, AVG(num_transactions) FROM blockchain_blocks GROUP BY block_number ORDER BY AVG(num_transactions) DESC",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255) NOT NULL,\n    transaction_date DATE NOT NULL,\n    sender_address VARCHAR(255) NOT NULL,\n    receiver_address VARCHAR(255) NOT NULL,\n    amount DECIMAL(18, 2) NOT NULL\n);\n\nCREATE TABLE blockchain_blocks (\n    block_number INT PRIMARY KEY,\n    block_hash VARCHAR(255) NOT NULL,\n    block_timestamp TIMESTAMP NOT NULL,\n    num_transactions INT NOT NULL,\n    miner_address VARCHAR(255) NOT NULL\n);\n\n### STATEMENT\n\nSELECT b.block_number, bt.transaction_hash FROM blockchain_blocks b JOIN blockchain_transactions bt ON b.block_number = bt.id",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash, transaction_date FROM blockchain_transactions WHERE sender_address='abc123';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, block_date FROM block_details WHERE miner_address='xyz456';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash, transaction_date, success FROM transaction_details WHERE gas_fee > 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE block_id = 1000;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM block_details WHERE block_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash, sender_address, receiver_address, amount FROM blockchain_transactions WHERE block_id = 500 AND transaction_date >= '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM blockchain_transactions WHERE receiver_address='def789';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(gas_fee) AS max_gas_fee, MIN(gas_fee) AS min_gas_fee FROM transaction_details WHERE success = True;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS transaction_count FROM block_details WHERE miner_address='pqr321';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM blockchain_transactions WHERE block_id IN (100, 200, 300);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT(sender_address) FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT sender_address, SUM(amount) AS total_sent FROM blockchain_transactions GROUP BY sender_address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_details WHERE success = False ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(gas_fee) AS average_gas_fee, MAX(gas_fee) AS max_gas_fee, MIN(gas_fee) AS min_gas_fee FROM transaction_details;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT receiver_address, COUNT(transaction_id) AS transaction_count FROM blockchain_transactions GROUP BY receiver_address HAVING COUNT(transaction_id) > 10;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT block_id, SUM(amount) AS total_amount FROM blockchain_transactions GROUP BY block_id HAVING SUM(amount) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT(miner_address) FROM block_details WHERE block_date < '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, block_id, amount FROM blockchain_transactions WHERE sender_address='mno987' OR receiver_address='mno987';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT block_id, AVG(amount) AS average_amount FROM blockchain_transactions GROUP BY block_id HAVING AVG(amount) > 500;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT block_id, block_date, miner_address FROM block_details WHERE transaction_count > 5",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash, gas_fee FROM transaction_details WHERE gas_fee < 50",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE amount < 500",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT block_id, block_date, miner_address FROM block_details WHERE block_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash, success FROM transaction_details WHERE success = true",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE sender_address = 'address1'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash, gas_fee FROM transaction_details WHERE gas_fee > 100",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE receiver_address = 'address2'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, transaction_count FROM block_details WHERE miner_address = 'miner_address1'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash, success FROM transaction_details WHERE success = false",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE amount between 100 and 500",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, transaction_count FROM block_details WHERE block_date <= '2022-03-31'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash, gas_fee FROM transaction_details WHERE gas_fee = 0",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE sender_address = 'address3'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT block_id, block_date, miner_address FROM block_details WHERE transaction_count < 10",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash, success FROM transaction_details WHERE transaction_date > '2022-02-01'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, amount FROM blockchain_transactions WHERE receiver_address = 'address4'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT block_id, block_hash, transaction_count FROM block_details WHERE block_hash = 'hash1'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n    transaction_id INT PRIMARY KEY,\n    block_id INT,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    sender_address VARCHAR(255),\n    receiver_address VARCHAR(255),\n    amount DECIMAL(18, 4)\n);\n\nCREATE TABLE block_details (\n    block_id INT PRIMARY KEY,\n    block_hash VARCHAR(255),\n    block_date TIMESTAMP,\n    miner_address VARCHAR(255),\n    transaction_count INT\n);\n\nCREATE TABLE transaction_details (\n    transaction_id INT PRIMARY KEY,\n    transaction_hash VARCHAR(255),\n    transaction_date TIMESTAMP,\n    gas_fee DECIMAL(18, 4),\n    success BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash, gas_fee FROM transaction_details WHERE gas_fee between 10 and 50",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM blockchain_transactions WHERE block_number = 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT block_number, block_hash FROM block_information WHERE block_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT analysis_id, analysis_result FROM transaction_analysis WHERE analysis_timestamp < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history ORDER BY history_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT transaction_id, block_number FROM blockchain_transactions WHERE transaction_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT block_number, block_hash, block_timestamp FROM block_information WHERE miner_address = '0x123abc';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash FROM blockchain_transactions WHERE block_number = 50;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_analysis WHERE analysis_result LIKE '%fraud%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT analysis_id, analysis_timestamp FROM transaction_analysis WHERE transaction_id = 500;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT history_id, transaction_id, previous_transaction_id FROM transaction_history WHERE history_timestamp < '2022-05-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE block_number IN (10, 20, 30);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT block_number, block_hash, block_timestamp, miner_address FROM block_information WHERE block_number = 50;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM blockchain_transactions WHERE transaction_timestamp BETWEEN '2022-01-01' AND '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT analysis_id, analysis_result FROM transaction_analysis WHERE analysis_timestamp > '2022-07-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_history WHERE transaction_id = 100 OR previous_transaction_id = 200;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_hash FROM blockchain_transactions WHERE block_number = 1000;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT block_number, block_timestamp FROM block_information WHERE block_number < 50;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT analysis_id, analysis_result FROM transaction_analysis WHERE transaction_id = 100 AND analysis_timestamp > '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE transaction_amount < 5000;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE block_number > 100 AND transaction_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount, transaction_timestamp FROM blockchain_transactions WHERE transaction_amount > 5000 ORDER BY transaction_amount DESC",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT bt.transaction_id, bt.transaction_hash, bi.block_timestamp FROM blockchain_transactions bt INNER JOIN block_information bi ON bt.block_number = bi.block_number",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM transaction_analysis WHERE analysis_timestamp BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT bt.transaction_id, bt.transaction_amount, ta.analysis_result FROM blockchain_transactions bt LEFT JOIN transaction_analysis ta ON bt.transaction_id = ta.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE transaction_id IN (SELECT transaction_id FROM transaction_history WHERE previous_transaction_id = 123)",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MIN(transaction_amount), MAX(transaction_amount), AVG(transaction_amount) FROM blockchain_transactions",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT bt.transaction_id, bt.transaction_hash, bi.block_hash FROM blockchain_transactions bt LEFT JOIN block_information bi ON bt.block_number = bi.block_number WHERE bt.block_number < 50",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT block_number, COUNT(*) FROM blockchain_transactions GROUP BY block_number",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT transaction_id, transaction_timestamp FROM blockchain_transactions WHERE transaction_timestamp > '2021-12-01' AND transaction_amount < 500",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT bt.transaction_id, bi.block_number, th.history_id FROM blockchain_transactions bt INNER JOIN block_information bi ON bt.block_number = bi.block_number INNER JOIN transaction_history th ON bt.transaction_id = th.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT AVG(transaction_amount) AS average_amount, block_number FROM blockchain_transactions GROUP BY block_number HAVING block_number > 100",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT bi.miner_address, COUNT(*) AS transactions_count FROM blockchain_transactions bt INNER JOIN block_information bi ON bt.block_number = bi.block_number GROUP BY bi.miner_address ORDER BY transactions_count DESC",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT transaction_id, analysis_result FROM transaction_analysis WHERE analysis_result LIKE '%fraud%'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT bt.*, bi.block_hash FROM blockchain_transactions bt INNER JOIN block_information bi ON bt.block_number = bi.block_number WHERE bt.transaction_id = 123",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT block_number, COUNT(*) AS transaction_count, SUM(transaction_amount) AS total_amount FROM blockchain_transactions GROUP BY block_number HAVING transaction_count > 2",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT bt.transaction_id, bt.transaction_amount, th.history_timestamp FROM blockchain_transactions bt INNER JOIN transaction_history th ON bt.transaction_id = th.transaction_id WHERE th.history_id = 456",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MAX(block_number) AS max_block_number FROM block_information",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT AVG(transaction_amount) AS average_amount FROM blockchain_transactions WHERE block_number < 100",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT DISTINCT block_number FROM blockchain_transactions",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  transaction_hash VARCHAR(255),\n  block_number INT,\n  transaction_amount DECIMAL,\n  transaction_timestamp TIMESTAMP\n)\n\nCREATE TABLE block_information (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP,\n  miner_address VARCHAR(255)\n)\n\nCREATE TABLE transaction_analysis (\n  analysis_id INT PRIMARY KEY,\n  transaction_id INT,\n  analysis_result TEXT,\n  analysis_timestamp TIMESTAMP\n)\n\nCREATE TABLE transaction_history (\n  history_id INT PRIMARY KEY,\n  transaction_id INT,\n  previous_transaction_id INT,\n  history_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT miner_address, block_number, AVG(transaction_amount) AS avg_amount FROM blockchain_transactions bt INNER JOIN block_information bi ON bt.block_number = bi.block_number GROUP BY miner_address, block_number HAVING AVG(transaction_amount) > 5000",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT block_number, transaction_hash, sender_address, receiver_address FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blocks;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT block_number, block_hash, previous_block_hash FROM blocks;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM addresses;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT address_id, address, balance FROM addresses;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, block_number, sender_address_id, receiver_address_id FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_metadata;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, metadata_key, metadata_value FROM transaction_metadata;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT block_number, block_timestamp FROM blocks WHERE block_number > 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address FROM transactions WHERE block_number = 50;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, timestamp FROM transactions WHERE sender_address_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT block_number, transaction_amount FROM blockchain_transactions WHERE timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, metadata_value FROM transaction_metadata WHERE metadata_key = 'status';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address FROM transactions JOIN addresses ON transactions.sender_address_id = addresses.address_id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, balance FROM transactions JOIN addresses ON transactions.sender_address_id = addresses.address_id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blocks ORDER BY block_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT block_number, block_hash, previous_block_hash FROM blocks WHERE block_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount * 1.1 AS calculated_amount FROM blockchain_transactions;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_transactions WHERE block_number > 1000;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, transaction_amount FROM blockchain_transactions WHERE timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-01-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT block_number, COUNT(transaction_id) AS num_transactions FROM blockchain_transactions GROUP BY block_number HAVING num_transactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, SUM(transaction_amount) AS total_sent_amount FROM blockchain_transactions GROUP BY sender_address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, transaction_amount, timestamp FROM blockchain_transactions WHERE receiver_address = '0xABCDEF';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blocks WHERE block_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, transaction_amount, timestamp FROM blockchain_transactions WHERE timestamp >= '2022-02-01' AND timestamp < '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, transaction_amount FROM blockchain_transactions WHERE block_number <= 500 AND transaction_amount >= 1000;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT address, balance FROM addresses WHERE balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT block_number, block_hash, previous_block_hash, block_timestamp FROM blocks ORDER BY block_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, transaction_amount, timestamp FROM blockchain_transactions WHERE sender_address = '0x123456' OR receiver_address = '0x789ABC';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT block_number, MAX(transaction_amount) AS max_transaction_amount, MIN(transaction_amount) AS min_transaction_amount FROM blockchain_transactions GROUP BY block_number;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, metadata_value FROM transaction_metadata WHERE metadata_key = 'category' AND metadata_value LIKE '%payment%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, transaction_amount, timestamp FROM blockchain_transactions WHERE block_number IN (100, 200, 300);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT block_number, COUNT(transaction_id) AS num_transactions FROM blockchain_transactions WHERE timestamp < '2022-02-01' GROUP BY block_number HAVING num_transactions > 3;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, SUM(transaction_amount) AS total_transaction_amount FROM blockchain_transactions GROUP BY sender_address, receiver_address HAVING total_transaction_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT address, balance FROM addresses WHERE address LIKE '0x%' AND balance > 10000;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM blocks WHERE previous_block_hash IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT sender_address, receiver_address, transaction_amount, timestamp FROM blockchain_transactions WHERE transaction_amount BETWEEN 2000 AND 5000;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  transaction_hash VARCHAR(255),\n  sender_address VARCHAR(255),\n  receiver_address VARCHAR(255),\n  transaction_amount DECIMAL(18,2),\n  timestamp TIMESTAMP\n);\n\nCREATE TABLE blocks (\n  block_number INT PRIMARY KEY,\n  block_hash VARCHAR(255),\n  previous_block_hash VARCHAR(255),\n  block_timestamp TIMESTAMP\n);\n\nCREATE TABLE addresses (\n  address_id INT PRIMARY KEY,\n  address VARCHAR(255),\n  balance DECIMAL(18,2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  block_number INT,\n  sender_address_id INT,\n  receiver_address_id INT,\n  timestamp TIMESTAMP,\n  FOREIGN KEY (sender_address_id) REFERENCES addresses(address_id),\n  FOREIGN KEY (receiver_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE transaction_metadata (\n  transaction_id INT PRIMARY KEY,\n  metadata_key VARCHAR(255),\n  metadata_value TEXT\n);\n\n### STATEMENT\n\nSELECT block_number, AVG(transaction_amount) AS avg_transaction_amount FROM blockchain_transactions GROUP BY block_number HAVING avg_transaction_amount > 2000;"
]