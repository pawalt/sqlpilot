[
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_date FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_id = '12345678-1234-1234-1234-123456789abc';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_date = '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE protocol_version > 10;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT MAX(protocol_version) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(protocol_version) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT protocol_version FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT upgrade_name, protocol_version FROM blockchain_upgrades WHERE upgrade_date >= '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT upgrade_name, protocol_version FROM blockchain_upgrades WHERE upgrade_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT upgrade_name, protocol_version FROM blockchain_upgrades ORDER BY upgrade_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT upgrade_name, protocol_version FROM blockchain_upgrades ORDER BY protocol_version ASC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT upgrade_name, protocol_version FROM blockchain_upgrades WHERE protocol_version BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades LIMIT 5 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_name LIKE 'Bitcoin%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_name ILIKE 'Ether%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_name IN ('Bitcoin', 'Ethereum', 'Cardano');",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_name = 'Bitcoin' AND protocol_version >= 10;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE protocol_version = 1;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_date FROM blockchain_upgrades WHERE UPGRDE_DATE > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT upgrade_name, COUNT(*) FROM blockchain_upgrades GROUP BY upgrade_name;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades ORDER BY upgrade_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_date BETWEEN '2022-01-01' AND '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(protocol_version) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT MAX(protocol_version) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT MIN(protocol_version) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT protocol_version FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_name LIKE '%upgrade%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_name IN ('Upgrade1', 'Upgrade2');",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE protocol_version >= 2 AND protocol_version <= 5;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE protocol_version > 3 AND upgrade_name LIKE '%upgrade%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_date = '2022-06-15' AND protocol_version = 2;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT upgrade_name, protocol_version FROM blockchain_upgrades WHERE upgrade_name NOT LIKE '%1%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_name IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT AVG(protocol_version) AS avg_protocol_version, MAX(protocol_version) AS max_protocol_version FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT upgrade_date, COUNT(*) AS count_upgrades FROM blockchain_upgrades GROUP BY upgrade_date;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id UUID PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  protocol_version INT NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE protocol_version = (SELECT MAX(protocol_version) FROM blockchain_upgrades);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_timestamp FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT upgrade_description FROM blockchain_upgrades WHERE upgrade_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_id = '9f49c3b4-324e-4f87-b0d5-9690614f6d71';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM protocol_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT change_description, change_timestamp FROM protocol_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM protocol_changes WHERE change_timestamp BETWEEN '2022-01-01' AND '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades JOIN protocol_changes ON blockchain_upgrades.upgrade_timestamp = protocol_changes.change_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT upgrade_name, change_description FROM blockchain_upgrades JOIN protocol_changes ON blockchain_upgrades.upgrade_timestamp = protocol_changes.change_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades LEFT JOIN protocol_changes ON blockchain_upgrades.upgrade_timestamp = protocol_changes.change_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades RIGHT JOIN protocol_changes ON blockchain_upgrades.upgrade_timestamp = protocol_changes.change_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_name LIKE '%upgrade%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades ORDER BY upgrade_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM protocol_changes ORDER BY change_timestamp ASC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(upgrade_timestamp) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(change_timestamp) FROM protocol_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(DATE_PART('day', NOW() - upgrade_timestamp)) AS days_since_upgrade FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT upgrade_name FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT change_timestamp FROM protocol_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_id = '1234' AND upgrade_timestamp > NOW();",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT upgrade_id, upgrade_name FROM blockchain_upgrades WHERE upgrade_timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades bu INNER JOIN protocol_changes pc ON bu.upgrade_timestamp = pc.change_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT bu.upgrade_id, pc.change_description FROM blockchain_upgrades bu LEFT JOIN protocol_changes pc ON bu.upgrade_id = pc.change_id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(upgrade_timestamp) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(DATE_PART('day', CURRENT_TIMESTAMP - upgrade_timestamp)) AS days_since_upgrade FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT upgrade_name FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_name LIKE 'Bitcoin%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades ORDER BY upgrade_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_timestamp > '2022-06-30' AND upgrade_timestamp < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT upgrade_id, COUNT(*) AS change_count FROM blockchain_upgrades bu JOIN protocol_changes pc ON bu.upgrade_timestamp = pc.change_timestamp GROUP BY upgrade_id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT upgrade_id, change_id FROM blockchain_upgrades bu CROSS JOIN protocol_changes pc;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades bu WHERE EXISTS (SELECT 1 FROM protocol_changes pc WHERE bu.upgrade_timestamp = pc.change_timestamp);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT DATE_TRUNC('day', upgrade_timestamp) AS upgrade_date FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades WHERE upgrade_timestamp = (SELECT MAX(upgrade_timestamp) FROM blockchain_upgrades);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT upgrade_id, COUNT(change_id) AS change_count FROM blockchain_upgrades bu LEFT JOIN protocol_changes pc ON bu.upgrade_id = pc.change_id GROUP BY upgrade_id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT upgrade_id, AVG(DATE_PART('day', CURRENT_TIMESTAMP - change_timestamp)) AS days_since_change FROM blockchain_upgrades bu JOIN protocol_changes pc ON bu.upgrade_timestamp = pc.change_timestamp GROUP BY upgrade_id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT upgrade_id, upgrade_name, upgrade_description FROM blockchain_upgrades WHERE upgrade_timestamp = (SELECT MIN(upgrade_timestamp) FROM blockchain_upgrades);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n    upgrade_id UUID PRIMARY KEY,\n    upgrade_name VARCHAR(255),\n    upgrade_description TEXT,\n    upgrade_timestamp TIMESTAMP\n);\n\nCREATE TABLE protocol_changes (\n    change_id UUID PRIMARY KEY,\n    change_description TEXT,\n    change_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT upgrade_id, upgrade_name, upgrade_description FROM blockchain_upgrades bu WHERE EXISTS (SELECT 1 FROM protocol_changes pc WHERE bu.upgrade_timestamp = pc.change_timestamp);",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_date FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT id, upgrade_name FROM blockchain_upgrades WHERE upgrade_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM protocol_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT change_name, change_description FROM protocol_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT id, change_name FROM protocol_changes WHERE LENGTH(change_description) > 100;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM protocol_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM network_nodes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT node_id, node_type FROM network_nodes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT id, node_id FROM network_nodes WHERE node_type = 'full_node';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM network_nodes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT upgrade_name, change_name FROM blockchain_upgrades JOIN protocol_changes ON blockchain_upgrades.id = protocol_changes.id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT upgrade_name, change_name FROM blockchain_upgrades INNER JOIN protocol_changes ON blockchain_upgrades.id = protocol_changes.id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT upgrade_name, change_name FROM blockchain_upgrades LEFT JOIN protocol_changes ON blockchain_upgrades.id = protocol_changes.id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT upgrade_name, change_name FROM blockchain_upgrades RIGHT JOIN protocol_changes ON blockchain_upgrades.id = protocol_changes.id;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT upgrade_name FROM blockchain_upgrades;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT change_name FROM protocol_changes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT node_type FROM network_nodes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT upgrade_name, node_type FROM blockchain_upgrades, network_nodes;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_upgrades WHERE upgrade_name LIKE '%upgrade%';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT id, upgrade_name, upgrade_date FROM blockchain_upgrades WHERE upgrade_date > NOW()",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM blockchain_upgrades",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT change_name, change_description FROM protocol_changes WHERE id = 1",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT node_id FROM network_nodes WHERE node_type = 'miner'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_date FROM blockchain_upgrades WHERE upgrade_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT node_id FROM network_nodes WHERE node_type = 'validator' ORDER BY id ASC",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_date FROM blockchain_upgrades WHERE upgrade_name LIKE '%upgrade%'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT node_id, node_type FROM network_nodes WHERE node_id = '123e4567-e89b-12d3-a456-426614174000'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM protocol_changes WHERE change_description IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT id, node_id FROM network_nodes WHERE node_type IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT MAX(upgrade_date) FROM blockchain_upgrades",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT id, change_name FROM protocol_changes WHERE change_description IS NULL",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT node_type FROM network_nodes ORDER BY node_type ASC",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(id) FROM network_nodes",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM protocol_changes LIMIT 5 OFFSET 5",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(id) FROM network_nodes WHERE node_type = 'peer'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT node_id FROM network_nodes WHERE node_type IN ('miner', 'validator')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT MAX(id) FROM network_nodes WHERE node_id = '123e4567-e89b-12d3-a456-426614174000'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT node_type) FROM network_nodes",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  id SERIAL PRIMARY KEY,\n  upgrade_name VARCHAR(100) NOT NULL,\n  upgrade_date TIMESTAMP NOT NULL\n);\n\nCREATE TABLE protocol_changes (\n  id SERIAL PRIMARY KEY,\n  change_name VARCHAR(100) NOT NULL,\n  change_description TEXT\n);\n\nCREATE TABLE network_nodes (\n  id SERIAL PRIMARY KEY,\n  node_id UUID NOT NULL,\n  node_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM protocol_changes WHERE change_name ILIKE '%update%'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_date FROM blockchain_upgrades",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_id, upgrade_name, upgrade_description FROM blockchain_upgrades",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT * FROM protocol_changes",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT change_description, change_date FROM protocol_changes",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT change_id, change_description, change_date FROM protocol_changes",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT * FROM upgrade_details",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT detail_id, upgrade_id, change_id FROM upgrade_details",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT * FROM upgrade_history",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT history_id, upgrade_id, change_id, applied_date FROM upgrade_history",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_id, COUNT(*) FROM upgrade_details GROUP BY upgrade_id",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT change_id, COUNT(*) FROM upgrade_details GROUP BY change_id",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT u.upgrade_name, p.change_description FROM blockchain_upgrades u INNER JOIN upgrade_details d ON u.upgrade_id = d.upgrade_id INNER JOIN protocol_changes p ON d.change_id = p.change_id",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT u.upgrade_name AS upgrade, p.change_description AS change FROM blockchain_upgrades u INNER JOIN upgrade_details d ON u.upgrade_id = d.upgrade_id INNER JOIN protocol_changes p ON d.change_id = p.change_id",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT u.upgrade_name, COUNT(*) AS num_changes FROM blockchain_upgrades u INNER JOIN upgrade_details d ON u.upgrade_id = d.upgrade_id INNER JOIN protocol_changes p ON d.change_id = p.change_id GROUP BY u.upgrade_name",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT u.upgrade_name, MAX(p.change_date) AS latest_change_date FROM blockchain_upgrades u INNER JOIN upgrade_details d ON u.upgrade_id = d.upgrade_id INNER JOIN protocol_changes p ON d.change_id = p.change_id GROUP BY u.upgrade_name",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT u.upgrade_name, MIN(p.change_date) AS earliest_change_date FROM blockchain_upgrades u INNER JOIN upgrade_details d ON u.upgrade_id = d.upgrade_id INNER JOIN protocol_changes p ON d.change_id = p.change_id GROUP BY u.upgrade_name",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT u.upgrade_name, AVG(p.change_date) AS avg_change_date FROM blockchain_upgrades u INNER JOIN upgrade_details d ON u.upgrade_id = d.upgrade_id INNER JOIN protocol_changes p ON d.change_id = p.change_id GROUP BY u.upgrade_name",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT u.upgrade_name, MIN(p.change_date) AS earliest_change_date, MAX(p.change_date) AS latest_change_date FROM blockchain_upgrades u INNER JOIN upgrade_details d ON u.upgrade_id = d.upgrade_id INNER JOIN protocol_changes p ON d.change_id = p.change_id GROUP BY u.upgrade_name",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT u.upgrade_name, COUNT(*) AS num_changes, AVG(p.change_date) AS avg_change_date FROM blockchain_upgrades u INNER JOIN upgrade_details d ON u.upgrade_id = d.upgrade_id INNER JOIN protocol_changes p ON d.change_id = p.change_id GROUP BY u.upgrade_name",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT * FROM blockchain_upgrades",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_date FROM blockchain_upgrades",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_description FROM blockchain_upgrades WHERE upgrade_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT * FROM protocol_changes",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT change_description, change_date FROM protocol_changes",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT * FROM upgrade_details",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_id, change_id FROM upgrade_details WHERE upgrade_id = 1",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT * FROM upgrade_history",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_id, change_id, applied_date FROM upgrade_history ORDER BY applied_date DESC",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_name, change_description, applied_date FROM blockchain_upgrades JOIN upgrade_history ON blockchain_upgrades.upgrade_id = upgrade_history.upgrade_id JOIN protocol_changes ON blockchain_upgrades.upgrade_id = protocol_changes.change_id",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_name, change_description, applied_date FROM blockchain_upgrades JOIN upgrade_history ON blockchain_upgrades.upgrade_id = upgrade_history.upgrade_id JOIN protocol_changes ON upgrade_history.change_id = protocol_changes.change_id",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT upgrade_name, applied_date FROM blockchain_upgrades JOIN upgrade_history ON blockchain_upgrades.upgrade_id = upgrade_history.upgrade_id WHERE change_id = 1",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_name, COUNT(*) AS change_count FROM blockchain_upgrades JOIN upgrade_history ON blockchain_upgrades.upgrade_id = upgrade_history.upgrade_id GROUP BY upgrade_name HAVING change_count > 1",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_id, AVG(DATEDIFF(applied_date, upgrade_date)) AS days_since_upgrade FROM blockchain_upgrades JOIN upgrade_history ON blockchain_upgrades.upgrade_id = upgrade_history.upgrade_id GROUP BY upgrade_id",
  "### TABLEDATA\n\nCREATE TABLE blockchain_upgrades (\n  upgrade_id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255),\n  upgrade_description TEXT,\n  upgrade_date DATE\n)\n\nCREATE TABLE protocol_changes (\n  change_id INT PRIMARY KEY,\n  change_description TEXT,\n  change_date DATE\n)\n\nCREATE TABLE upgrade_details (\n  detail_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\nCREATE TABLE upgrade_history (\n  history_id INT PRIMARY KEY,\n  upgrade_id INT,\n  change_id INT,\n  applied_date DATE,\n  FOREIGN KEY (upgrade_id) REFERENCES blockchain_upgrades(upgrade_id),\n  FOREIGN KEY (change_id) REFERENCES protocol_changes(change_id)\n)\n\n### STATEMENT\n\nSELECT upgrade_name, MAX(change_date) AS latest_change_date FROM blockchain_upgrades JOIN upgrade_history ON blockchain_upgrades.upgrade_id = upgrade_history.upgrade_id JOIN protocol_changes ON upgrade_history.change_id = protocol_changes.change_id GROUP BY upgrade_name",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM upgrades;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_date FROM upgrades;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM protocols;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT protocol_name, protocol_description FROM protocols;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM networks;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT network_name, network_type FROM networks;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrade_id, protocol_id, network_id, upgrade_date FROM upgrade_history;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT action, table_name, timestamp FROM audit_log;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM upgrades WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT protocol_name, protocol_version FROM protocols WHERE id = 2;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT network_name, network_type FROM networks WHERE id = 3;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrade_id, protocol_id, network_id, upgrade_date FROM upgrade_history WHERE upgrade_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT action, table_name, timestamp FROM audit_log WHERE action = 'INSERT';",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_date FROM upgrades WHERE upgrade_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT protocol_name, protocol_description FROM protocols WHERE protocol_description LIKE '%secure%';",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT network_name, network_type FROM networks WHERE network_type = 'WiFi';",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrade_id, protocol_id, network_id FROM upgrade_history WHERE upgrade_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT action, table_name, timestamp FROM audit_log WHERE timestamp >= '2022-01-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_date FROM upgrades ORDER BY upgrade_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT protocol_name, protocol_description FROM protocols ORDER BY protocol_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM upgrades JOIN upgrade_history ON upgrades.id = upgrade_history.upgrade_id WHERE upgrades.upgrade_name LIKE '%upgrade%'",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT protocol_name, protocol_version, network_name FROM protocols JOIN upgrade_history ON protocols.id = upgrade_history.protocol_id JOIN networks ON networks.id = upgrade_history.network_id",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_date, audit_log.action FROM upgrades JOIN upgrade_history ON upgrades.id = upgrade_history.upgrade_id JOIN audit_log ON upgrade_history.upgrade_date = audit_log.timestamp",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrades.upgrade_name, protocols.protocol_name, networks.network_name FROM upgrades, protocols, networks, upgrade_history WHERE upgrades.id = upgrade_history.upgrade_id AND protocols.id = upgrade_history.protocol_id AND networks.id = upgrade_history.network_id",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrade_name, protocol_name, network_name, upgrade_date FROM upgrades, protocols, networks, upgrade_history WHERE upgrades.id = upgrade_history.upgrade_id AND protocols.id = upgrade_history.protocol_id AND networks.id = upgrade_history.network_id ORDER BY upgrade_date DESC",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrade_name, network_name FROM upgrades JOIN networks ON upgrades.id = upgrade_history.upgrade_id",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT protocol_name, network_name FROM protocols JOIN networks ON protocols.id = upgrade_history.protocol_id",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM upgrades WHERE upgrade_date > '2021-01-01'",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM protocols WHERE protocol_version = '1.0'",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM networks WHERE network_type = 'Private'",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS protocol_count FROM protocols",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(id) AS average_id FROM upgrades",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(upgrade_date) AS latest_upgrade FROM upgrades",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(upgrade_date) AS earliest_upgrade FROM upgrades",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT network_name FROM networks",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrade_name, COUNT(*) AS upgrade_count FROM upgrades JOIN upgrade_history ON upgrades.id = upgrade_history.upgrade_id GROUP BY upgrade_name",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT protocol_name, COUNT(*) AS protocol_count FROM protocols JOIN upgrade_history ON protocols.id = upgrade_history.protocol_id GROUP BY protocol_name",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT network_name, COUNT(*) AS network_count FROM networks JOIN upgrade_history ON networks.id = upgrade_history.network_id GROUP BY network_name",
  "### TABLEDATA\n\nCREATE TABLE upgrades (\n  id INT PRIMARY KEY,\n  upgrade_name VARCHAR(255) NOT NULL,\n  upgrade_date DATE NOT NULL,\n  upgrade_description TEXT\n);\n\nCREATE TABLE protocols (\n  id INT PRIMARY KEY,\n  protocol_name VARCHAR(255) NOT NULL,\n  protocol_version VARCHAR(50) NOT NULL,\n  protocol_description TEXT\n);\n\nCREATE TABLE networks (\n  id INT PRIMARY KEY,\n  network_name VARCHAR(255) NOT NULL,\n  network_type VARCHAR(50) NOT NULL,\n  network_description TEXT\n);\n\nCREATE TABLE upgrade_history (\n  id INT PRIMARY KEY,\n  upgrade_id INT NOT NULL,\n  protocol_id INT NOT NULL,\n  network_id INT NOT NULL,\n  upgrade_date DATE NOT NULL,\n  FOREIGN KEY (upgrade_id) REFERENCES upgrades(id),\n  FOREIGN KEY (protocol_id) REFERENCES protocols(id),\n  FOREIGN KEY (network_id) REFERENCES networks(id)\n);\n\nCREATE TABLE audit_log (\n  id INT PRIMARY KEY,\n  action VARCHAR(50) NOT NULL,\n  table_name VARCHAR(255) NOT NULL,\n  timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT upgrade_name, upgrade_description FROM upgrades WHERE upgrade_description IS NOT NULL"
]