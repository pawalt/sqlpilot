[
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (1, 'Alice', 'abcxyz123')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (2, 'Bob', 'def456xyz')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (3, 'Charlie', 'ghi123jkl')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (4, 'David', 'mno789xyz')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (5, 'Eve', 'pqr456jkl')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (6, 'Frank', 'stu123vwx')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (7, 'Grace', 'yz012abc')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (8, 'Henry', 'def456xyz')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (9, 'Isabel', 'ghi123jkl')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (10, 'Jack', 'mno789xyz')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (11, 'Kate', 'pqr456jkl')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (12, 'Luke', 'stu123vwx')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (13, 'Maria', 'yz012abc')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (14, 'Nathan', 'abcxyz123')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (15, 'Olivia', 'def456xyz')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (16, 'Peter', 'ghi123jkl')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (17, 'Quinn', 'mno789xyz')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (18, 'Rachel', 'pqr456jkl')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (19, 'Steve', 'stu123vwx')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (20, 'Tina', 'yz012abc')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (1, 'Alice', 'public_key_1') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Alice_upd', public_key = 'public_key_1_upd';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (2, 'Bob', 'public_key_2') ON CONFLICT (participant_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (3, 'Charlie', 'public_key_3') ON CONFLICT (public_key) DO UPDATE SET participant_id = 3, participant_name = 'Charlie_upd';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (4, 'David', 'public_key_4') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'David_upd', public_key = 'public_key_4_upd';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (5, 'Eve', 'public_key_5') ON CONFLICT (public_key) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (6, 'Frank', 'public_key_6') ON CONFLICT (participant_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (7, 'Grace', 'public_key_7') ON CONFLICT (public_key) DO UPDATE SET participant_id = 7, participant_name = 'Grace_upd';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (8, 'Henry', 'public_key_8') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Henry_upd', public_key = 'public_key_8_upd';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (9, 'Ivy', 'public_key_9') ON CONFLICT (public_key) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (10, 'Jack', 'public_key_10') ON CONFLICT (participant_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (11, 'Karen', 'public_key_11') ON CONFLICT (public_key) DO UPDATE SET participant_id = 11, participant_name = 'Karen_upd';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (12, 'Liam', 'public_key_12') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Liam_upd', public_key = 'public_key_12_upd';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (13, 'Mary', 'public_key_13') ON CONFLICT (public_key) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (14, 'Nick', 'public_key_14') ON CONFLICT (participant_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (15, 'Olivia', 'public_key_15') ON CONFLICT (public_key) DO UPDATE SET participant_id = 15, participant_name = 'Olivia_upd';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (16, 'Peter', 'public_key_16') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Peter_upd', public_key = 'public_key_16_upd';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (17, 'Quinn', 'public_key_17') ON CONFLICT (public_key) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (18, 'Rachel', 'public_key_18') ON CONFLICT (participant_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (19, 'Sam', 'public_key_19') ON CONFLICT (public_key) DO UPDATE SET participant_id = 19, participant_name = 'Sam_upd';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(512) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (20, 'Tom', 'public_key_20') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Tom_upd', public_key = 'public_key_20_upd';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (1, 'Alice', 'key1') ON DUPLICATE KEY UPDATE participant_name='Alice', public_key='key1';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (2, 'Bob', 'key2') ON DUPLICATE KEY UPDATE participant_name='Bob', public_key='key2';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (3, 'Charlie', 'key3') ON DUPLICATE KEY UPDATE participant_name='Charlie', public_key='key3';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (4, 'David', 'key4') ON DUPLICATE KEY UPDATE participant_name='David', public_key='key4';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (5, 'Eve', 'key5') ON DUPLICATE KEY UPDATE participant_name='Eve', public_key='key5';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (6, 'Frank', 'key6') ON DUPLICATE KEY UPDATE participant_name='Frank', public_key='key6';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (7, 'Grace', 'key7') ON DUPLICATE KEY UPDATE participant_name='Grace', public_key='key7';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (8, 'Hannah', 'key8') ON DUPLICATE KEY UPDATE participant_name='Hannah', public_key='key8';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (9, 'Ivy', 'key9') ON DUPLICATE KEY UPDATE participant_name='Ivy', public_key='key9';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (10, 'Jack', 'key10') ON DUPLICATE KEY UPDATE participant_name='Jack', public_key='key10';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (11, 'Ken', 'key11') ON DUPLICATE KEY UPDATE participant_name='Ken', public_key='key11';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (12, 'Lily', 'key12') ON DUPLICATE KEY UPDATE participant_name='Lily', public_key='key12';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (13, 'Mike', 'key13') ON DUPLICATE KEY UPDATE participant_name='Mike', public_key='key13';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (14, 'Natalie', 'key14') ON DUPLICATE KEY UPDATE participant_name='Natalie', public_key='key14';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (15, 'Oliver', 'key15') ON DUPLICATE KEY UPDATE participant_name='Oliver', public_key='key15';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (16, 'Peter', 'key16') ON DUPLICATE KEY UPDATE participant_name='Peter', public_key='key16';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (17, 'Quinn', 'key17') ON DUPLICATE KEY UPDATE participant_name='Quinn', public_key='key17';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (18, 'Rose', 'key18') ON DUPLICATE KEY UPDATE participant_name='Rose', public_key='key18';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (19, 'Sam', 'key19') ON DUPLICATE KEY UPDATE participant_name='Sam', public_key='key19';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (20, 'Tom', 'key20') ON DUPLICATE KEY UPDATE participant_name='Tom', public_key='key20';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (1, 'Alice', 'abc123') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Alice', public_key = 'updated_abc123';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (2, 'Bob', 'def456') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Bob', public_key = 'updated_def456';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, participant_id, transaction_amount, transaction_date) VALUES (1, 1, 100.00, '2022-01-01 12:00:00') ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, participant_id, transaction_amount, transaction_date) VALUES (2, 2, 150.00, '2022-01-02 12:00:00') ON CONFLICT (transaction_id) DO UPDATE SET participant_id = 3, transaction_amount = 200.00, transaction_date = '2022-01-03 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (3, 'Charlie', 'ghi789') ON CONFLICT (participant_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, participant_id, transaction_amount, transaction_date) VALUES (3, 3, 200.00, '2022-01-03 12:00:00') ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (4, 'David', 'jkl012') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'David', public_key = 'updated_jkl012';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    public_key VARCHAR(255)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    participant_id INT,\n    transaction_amount DECIMAL(10,2),\n    transaction_date TIMESTAMP,\n    FOREIGN KEY (participant_id) REFERENCES blockchain_participants(participant_id)\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, participant_id,...",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'Alice', 'PublicKey123') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Alice', public_key = 'PublicKey123';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('223e4567-e89b-12d3-a456-426614174001', '123e4567-e89b-12d3-a456-426614174000', 100.0) ON CONFLICT (transaction_id) DO UPDATE SET amount = 100.0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('323e4567-e89b-12d3-a456-426614174002', '123e4567-e89b-12d3-a456-426614174000', TRUE) ON CONFLICT (request_id) DO UPDATE SET verified = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('423e4567-e89b-12d3-a456-426614174003', 'Bob', 'PublicKey456') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Bob', public_key = 'PublicKey456';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('523e4567-e89b-12d3-a456-426614174004', '423e4567-e89b-12d3-a456-426614174003', 200.0) ON CONFLICT (transaction_id) DO UPDATE SET amount = 200.0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('623e4567-e89b-12d3-a456-426614174005', '423e4567-e89b-12d3-a456-426614174003', FALSE) ON CONFLICT (request_id) DO UPDATE SET verified = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('723e4567-e89b-12d3-a456-426614174006', 'Charlie', 'PublicKey789') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Charlie', public_key = 'PublicKey789';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('823e4567-e89b-12d3-a456-426614174007', '723e4567-e89b-12d3-a456-426614174006', 300.0) ON CONFLICT (transaction_id) DO UPDATE SET amount = 300.0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('923e4567-e89b-12d3-a456-426614174008', '723e4567-e89b-12d3-a456-426614174006', TRUE) ON CONFLICT (request_id) DO UPDATE SET verified = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('a23e4567-e89b-12d3-a456-426614174009', 'David', 'PublicKey012') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'David', public_key = 'PublicKey012';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('b23e4567-e89b-12d3-a456-426614174010', 'a23e4567-e89b-12d3-a456-426614174009', 400.0) ON CONFLICT (transaction_id) DO UPDATE SET amount = 400.0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('c23e4567-e89b-12d3-a456-426614174011', 'a23e4567-e89b-12d3-a456-426614174009', FALSE) ON CONFLICT (request_id) DO UPDATE SET verified = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('d23e4567-e89b-12d3-a456-426614174012', 'Emma', 'PublicKey345') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Emma', public_key = 'PublicKey345';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('e23e4567-e89b-12d3-a456-426614174013', 'd23e4567-e89b-12d3-a456-426614174012', 500.0) ON CONFLICT (transaction_id) DO UPDATE SET amount = 500.0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('f23e4567-e89b-12d3-a456-426614174014', 'd23e4567-e89b-12d3-a456-426614174012', TRUE) ON CONFLICT (request_id) DO UPDATE SET verified = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('023e4567-e89b-12d3-a456-426614174015', 'Frank', 'PublicKey678') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Frank', public_key = 'PublicKey678';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('123e4567-e89b-12d3-a456-426614174016', '023e4567-e89b-12d3-a456-426614174015', 600.0) ON CONFLICT (transaction_id) DO UPDATE SET amount = 600.0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('223e4567-e89b-12d3-a456-426614174017', '023e4567-e89b-12d3-a456-426614174015', FALSE) ON CONFLICT (request_id) DO UPDATE SET verified = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('323e4567-e89b-12d3-a456-426614174018', 'Georgia', 'PublicKey901') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Georgia', public_key = 'PublicKey901';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('423e4567-e89b-12d3-a456-426614174019', '323e4567-e89b-12d3-a456-426614174018', 700.0) ON CONFLICT (transaction_id) DO UPDATE SET amount = 700.0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nUPSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('523e4567-e89b-12d3-a456-426614174020', '323e4567-e89b-12d3-a456-426614174018', TRUE) ON CONFLICT (request_id) DO UPDATE SET verified = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('cd4e1761-2d20-4b2a-98eb-91750b58313b', 'Alice', 'pubkey123') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Alice', public_key = 'updated_pubkey123';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('f74c9584-2a33-4e95-9431-fe3ab7ea9de9', 'cd4e1761-2d20-4b2a-98eb-91750b58313b', 1000.50) ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('54783e24-ff72-453f-aea6-5548c5ceef04', 'cd4e1761-2d20-4b2a-98eb-91750b58313b', TRUE) ON CONFLICT (request_id) DO UPDATE SET verified = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('75b6a07b-3bc9-437c-b79d-00d7902eb8b7', 'Bob', 'pubkey456') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Bob', public_key = 'updated_pubkey456';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('b47398bf-7483-4f27-951d-e95787bb94d5', '75b6a07b-3bc9-437c-b79d-00d7902eb8b7', 2000.75) ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('3ec9e1b4-9dad-4eb3-8e92-7a73ac815365', '75b6a07b-3bc9-437c-b79d-00d7902eb8b7', FALSE) ON CONFLICT (request_id) DO UPDATE SET verified = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('924d6f2f-6cff-48d5-975c-cf276c4c18f7', 'Charlie', 'pubkey789') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Charlie', public_key = 'updated_pubkey789';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('33535c86-ce40-4038-b9a4-a132ed4b3a9d', '924d6f2f-6cff-48d5-975c-cf276c4c18f7', 1500.25) ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('024ed1b1-17e5-49b2-8a4e-41cb09be4c1e', '924d6f2f-6cff-48d5-975c-cf276c4c18f7', FALSE) ON CONFLICT (request_id) DO UPDATE SET verified = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('97960a94-70d3-4c9e-800b-94058c67e9f9', 'David', 'pubkeyabc') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'David', public_key = 'updated_pubkeyabc';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('391c17a2-2093-466d-8f57-99678be2930f', '97960a94-70d3-4c9e-800b-94058c67e9f9', 1800.00) ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('b4b973bb-9976-4097-b580-110d0f686184', '97960a94-70d3-4c9e-800b-94058c67e9f9', TRUE) ON CONFLICT (request_id) DO UPDATE SET verified = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('be759203-3c7b-4e3a-ae47-d03cdd609456', 'Emily', 'pubkeyxyz') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Emily', public_key = 'updated_pubkeyxyz';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('f0544d44-bae0-49c0-a4a8-43c0fce7cdd0', 'be759203-3c7b-4e3a-ae47-d03cdd609456', 1200.50) ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('2dfef1f9-dfcf-4014-b755-1d678ebf6700', 'be759203-3c7b-4e3a-ae47-d03cdd609456', FALSE) ON CONFLICT (request_id) DO UPDATE SET verified = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('fb4429a0-5c4b-4677-b3cb-00e7f96f19fd', 'Frank', 'pubkey1234') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Frank', public_key = 'updated_pubkey1234';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('63d34c67-291e-4b83-b38c-50c0ba8793d8', 'fb4429a0-5c4b-4677-b3cb-00e7f96f19fd', 2200.75) ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('e0e649c3-7b16-45f8-8cda-7219a2b6cb3c', 'fb4429a0-5c4b-4677-b3cb-00e7f96f19fd', TRUE) ON CONFLICT (request_id) DO UPDATE SET verified = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES ('aecdc226-6e25-481e-824d-6cf853c92e57', 'Grace', 'pubkey5678') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Grace', public_key = 'updated_pubkey5678';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, participant_id, amount) VALUES ('4753a333-65db-4df4-be73-71e4b32d6bd9', 'aecdc226-6e25-481e-824d-6cf853c92e57', 1600.25) ON CONFLICT (transaction_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id UUID PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    amount FLOAT NOT NULL\n);\n\nCREATE TABLE verification_requests (\n    request_id UUID PRIMARY KEY,\n    participant_id UUID REFERENCES blockchain_participants(participant_id),\n    verified BOOLEAN DEFAULT FALSE\n);\n\n### STATEMENT\n\nINSERT INTO verification_requests (request_id, participant_id, verified) VALUES ('5188ff63-3af7-4982-b756-10cb030f9dd6', 'aecdc226-6e25-481e-824d-6cf853c92e57', FALSE) ON CONFLICT (request_id) DO UPDATE SET verified = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_name, public_key, address) VALUES ('Alice', 'public_key_Alice', 'address_Alice') ON CONFLICT (participant_name) DO UPDATE SET public_key = 'updated_public_key_Alice', address = 'updated_address_Alice';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_name, public_key, address) VALUES ('Bob', 'public_key_Bob', 'address_Bob') ON CONFLICT (participant_name) DO UPDATE SET public_key = 'updated_public_key_Bob', address = 'updated_address_Bob';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_name, public_key, address) VALUES ('Charlie', 'public_key_Charlie', 'address_Charlie') ON CONFLICT (participant_name) DO UPDATE SET public_key = 'updated_public_key_Charlie', address = 'updated_address_Charlie';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (sender_id, receiver_id, amount, timestamp) VALUES (1, 2, 100.00, NOW()) ON CONFLICT (sender_id, receiver_id) DO UPDATE SET amount = 150.00, timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (sender_id, receiver_id, amount, timestamp) VALUES (2, 1, 50.00, NOW()) ON CONFLICT (sender_id, receiver_id) DO UPDATE SET amount = 75.00, timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (sender_id, receiver_id, amount, timestamp) VALUES (1, 3, 200.00, NOW()) ON CONFLICT (sender_id, receiver_id) DO UPDATE SET amount = 250.00, timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO participant_history (participant_id, action_description, action_timestamp) VALUES (1, 'Participant Alice joined', NOW()) ON CONFLICT (participant_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO participant_history (participant_id, action_description, action_timestamp) VALUES (2, 'Participant Bob joined', NOW()) ON CONFLICT (participant_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO participant_history (participant_id, action_description, action_timestamp) VALUES (3, 'Participant Charlie joined', NOW()) ON CONFLICT (participant_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO verification_logs (participant_id, verification_status, verification_timestamp) VALUES (1, true, NOW()) ON CONFLICT (participant_id) DO UPDATE SET verification_status = false, verification_timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO verification_logs (participant_id, verification_status, verification_timestamp) VALUES (2, true, NOW()) ON CONFLICT (participant_id) DO UPDATE SET verification_status = false, verification_timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO verification_logs (participant_id, verification_status, verification_timestamp) VALUES (3, true, NOW()) ON CONFLICT (participant_id) DO UPDATE SET verification_status = false, verification_timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_name, public_key, address) VALUES ('Alice', 'pubkey1', 'address1') ON CONFLICT (participant_name) DO UPDATE SET public_key = EXCLUDED.public_key, address = EXCLUDED.address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (sender_id, receiver_id, amount, timestamp) VALUES (1, 2, 100.50, '2022-10-15 08:30:00') ON CONFLICT (sender_id,receiver_id) DO UPDATE SET amount = EXCLUDED.amount, timestamp = EXCLUDED.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO participant_history (participant_id, action_description, action_timestamp) VALUES (1, 'Participant created', '2022-10-15 08:30:00') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO verification_logs (participant_id, verification_status, verification_timestamp) VALUES (1, TRUE, '2022-10-15 08:30:00') ON CONFLICT (participant_id) DO UPDATE SET verification_status = EXCLUDED.verification_status, verification_timestamp = EXCLUDED.verification_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_name, public_key, address) VALUES ('Bob', 'pubkey2', 'address2') ON CONFLICT (participant_name) DO UPDATE SET public_key = EXCLUDED.public_key, address = EXCLUDED.address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (sender_id, receiver_id, amount, timestamp) VALUES (2, 1, 75.25, '2022-10-16 10:45:00') ON CONFLICT (sender_id,receiver_id) DO UPDATE SET amount = EXCLUDED.amount, timestamp = EXCLUDED.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO participant_history (participant_id, action_description, action_timestamp) VALUES (2, 'Participant created', '2022-10-16 10:45:00') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO verification_logs (participant_id, verification_status, verification_timestamp) VALUES (2, TRUE, '2022-10-16 10:45:00') ON CONFLICT (participant_id) DO UPDATE SET verification_status = EXCLUDED.verification_status, verification_timestamp = EXCLUDED.verification_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_name, public_key, address) VALUES ('Charlie', 'pubkey3', 'address3') ON CONFLICT (participant_name) DO UPDATE SET public_key = EXCLUDED.public_key, address = EXCLUDED.address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (sender_id, receiver_id, amount, timestamp) VALUES (1, 3, 50.75, '2022-10-17 12:15:00') ON CONFLICT (sender_id,receiver_id) DO UPDATE SET amount = EXCLUDED.amount, timestamp = EXCLUDED.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO participant_history (participant_id, action_description, action_timestamp) VALUES (1, 'Transaction processed', '2022-10-17 12:15:00') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO verification_logs (participant_id, verification_status, verification_timestamp) VALUES (1, FALSE, '2022-10-17 12:15:00') ON CONFLICT (participant_id) DO UPDATE SET verification_status = EXCLUDED.verification_status, verification_timestamp = EXCLUDED.verification_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_name, public_key, address) VALUES ('David', 'pubkey4', 'address4') ON CONFLICT (participant_name) DO UPDATE SET public_key = EXCLUDED.public_key, address = EXCLUDED.address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (sender_id, receiver_id, amount, timestamp) VALUES (4, 2, 200.00, '2022-10-18 15:30:00') ON CONFLICT (sender_id,receiver_id) DO UPDATE SET amount = EXCLUDED.amount, timestamp = EXCLUDED.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO participant_history (participant_id, action_description, action_timestamp) VALUES (4, 'Participant updated', '2022-10-18 15:30:00') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO verification_logs (participant_id, verification_status, verification_timestamp) VALUES (4, TRUE, '2022-10-18 15:30:00') ON CONFLICT (participant_id) DO UPDATE SET verification_status = EXCLUDED.verification_status, verification_timestamp = EXCLUDED.verification_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_name, public_key, address) VALUES ('Emily', 'pubkey5', 'address5') ON CONFLICT (participant_name) DO UPDATE SET public_key = EXCLUDED.public_key, address = EXCLUDED.address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (sender_id, receiver_id, amount, timestamp) VALUES (2, 4, 150.25, '2022-10-19 18:45:00') ON CONFLICT (sender_id,receiver_id) DO UPDATE SET amount = EXCLUDED.amount, timestamp = EXCLUDED.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO participant_history (participant_id, action_description, action_timestamp) VALUES (2, 'Transaction processed', '2022-10-19 18:45:00') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO verification_logs (participant_id, verification_status, verification_timestamp) VALUES (2, TRUE, '2022-10-19 18:45:00') ON CONFLICT (participant_id) DO UPDATE SET verification_status = EXCLUDED.verification_status, verification_timestamp = EXCLUDED.verification_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_name, public_key, address) VALUES ('Fiona', 'pubkey6', 'address6') ON CONFLICT (participant_name) DO UPDATE SET public_key = EXCLUDED.public_key, address = EXCLUDED.address;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (sender_id, receiver_id, amount, timestamp) VALUES (6, 3, 75.75, '2022-10-20 20:15:00') ON CONFLICT (sender_id,receiver_id) DO UPDATE SET amount = EXCLUDED.amount, timestamp = EXCLUDED.timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO participant_history (participant_id, action_description, action_timestamp) VALUES (6, 'Participant created', '2022-10-20 20:15:00') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n    participant_id SERIAL PRIMARY KEY,\n    participant_name VARCHAR(255) NOT NULL,\n    public_key VARCHAR(255) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    sender_id INT NOT NULL,\n    receiver_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE participant_history (\n    history_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    action_description TEXT,\n    action_timestamp TIMESTAMP\n);\n\nCREATE TABLE verification_logs (\n    log_id SERIAL PRIMARY KEY,\n    participant_id INT NOT NULL,\n    verification_status BOOLEAN NOT NULL,\n    verification_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO verification_logs (participant_id, verification_status, verification_timestamp) VALUES (6, FALSE, '2022-10-20 20:15:00') ON CONFLICT (participant_id) DO UPDATE SET verification_status = EXCLUDED.verification_status, verification_timestamp = EXCLUDED.verification_timestamp;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (1, 'Alice', 'pubkey123') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Alice', public_key = 'pubkey123';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_transactions (transaction_id, sender_id, receiver_id, amount, timestamp) VALUES (1, 1, 2, 10.5, '2022-01-01 12:00:00') ON CONFLICT (transaction_id) DO UPDATE SET sender_id = 1, receiver_id = 2, amount = 10.5, timestamp = '2022-01-01 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_blocks (block_id, previous_block_id, nonce, timestamp) VALUES (1, NULL, 12345, '2022-01-01 14:30:00') ON CONFLICT (block_id) DO UPDATE SET previous_block_id = NULL, nonce = 12345, timestamp = '2022-01-01 14:30:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_wallets (wallet_id, participant_id, balance) VALUES (1, 1, 100.0) ON CONFLICT (wallet_id) DO UPDATE SET participant_id = 1, balance = 100.0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_verification (verification_id, participant_id, verified_at) VALUES (1, 1, '2022-01-01 15:00:00') ON CONFLICT (verification_id) DO UPDATE SET participant_id = 1, verified_at = '2022-01-01 15:00:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (2, 'Bob', 'pubkey456') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Bob', public_key = 'pubkey456';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_transactions (transaction_id, sender_id, receiver_id, amount, timestamp) VALUES (2, 2, 1, 20.3, '2022-01-02 10:15:00') ON CONFLICT (transaction_id) DO UPDATE SET sender_id = 2, receiver_id = 1, amount = 20.3, timestamp = '2022-01-02 10:15:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_blocks (block_id, previous_block_id, nonce, timestamp) VALUES (2, 1, 54321, '2022-01-02 12:45:00') ON CONFLICT (block_id) DO UPDATE SET previous_block_id = 1, nonce = 54321, timestamp = '2022-01-02 12:45:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_wallets (wallet_id, participant_id, balance) VALUES (2, 2, 150.0) ON CONFLICT (wallet_id) DO UPDATE SET participant_id = 2, balance = 150.0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_verification (verification_id, participant_id, verified_at) VALUES (2, 2, '2022-01-02 14:00:00') ON CONFLICT (verification_id) DO UPDATE SET participant_id = 2, verified_at = '2022-01-02 14:00:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (3, 'Charlie', 'pubkey789') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'Charlie', public_key = 'pubkey789';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_transactions (transaction_id, sender_id, receiver_id, amount, timestamp) VALUES (3, 3, 1, 15.2, '2022-01-03 09:30:00') ON CONFLICT (transaction_id) DO UPDATE SET sender_id = 3, receiver_id = 1, amount = 15.2, timestamp = '2022-01-03 09:30:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_blocks (block_id, previous_block_id, nonce, timestamp) VALUES (3, 2, 98765, '2022-01-03 11:00:00') ON CONFLICT (block_id) DO UPDATE SET previous_block_id = 2, nonce = 98765, timestamp = '2022-01-03 11:00:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_wallets (wallet_id, participant_id, balance) VALUES (3, 3, 200.0) ON CONFLICT (wallet_id) DO UPDATE SET participant_id = 3, balance = 200.0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_verification (verification_id, participant_id, verified_at) VALUES (3, 3, '2022-01-03 13:30:00') ON CONFLICT (verification_id) DO UPDATE SET participant_id = 3, verified_at = '2022-01-03 13:30:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (4, 'David', 'pubkey246') ON CONFLICT (participant_id) DO UPDATE SET participant_name = 'David', public_key = 'pubkey246';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_transactions (transaction_id, sender_id, receiver_id, amount, timestamp) VALUES (4, 4, 2, 30.1, '2022-01-04 14:45:00') ON CONFLICT (transaction_id) DO UPDATE SET sender_id = 4, receiver_id = 2, amount = 30.1, timestamp = '2022-01-04 14:45:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_blocks (block_id, previous_block_id, nonce, timestamp) VALUES (4, 3, 13579, '2022-01-04 16:00:00') ON CONFLICT (block_id) DO UPDATE SET previous_block_id = 3, nonce = 13579, timestamp = '2022-01-04 16:00:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_wallets (wallet_id, participant_id, balance) VALUES (4, 4, 250.0) ON CONFLICT (wallet_id) DO UPDATE SET participant_id = 4, balance = 250.0;",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO blockchain_verification (verification_id, participant_id, verified_at) VALUES (4, 4, '2022-01-04 18:30:00') ON CONFLICT (verification_id) DO UPDATE SET participant_id = 4, verified_at = '2022-01-04 18:30:00';",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (1, 'Alice', 'public_key_a')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (2, 'Bob', 'public_key_b')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_transactions (transaction_id, sender_id, receiver_id, amount, timestamp) VALUES (1, 1, 2, 100.23, '2022-03-15 10:30:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_transactions (transaction_id, sender_id, receiver_id, amount, timestamp) VALUES (2, 2, 1, 50.10, '2022-03-16 14:45:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_blocks (block_id, previous_block_id, nonce, timestamp) VALUES (1, NULL, 12345, '2022-03-17 09:00:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_blocks (block_id, previous_block_id, nonce, timestamp) VALUES (2, 1, 54321, '2022-03-18 12:00:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_wallets (wallet_id, participant_id, balance) VALUES (1, 1, 500.35)",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_wallets (wallet_id, participant_id, balance) VALUES (2, 2, 300.50)",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_verification (verification_id, participant_id, verified_at) VALUES (1, 1, '2022-03-19 15:30:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_verification (verification_id, participant_id, verified_at) VALUES (2, 2, '2022-03-20 18:45:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (3, 'Charlie', 'public_key_c')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_participants (participant_id, participant_name, public_key) VALUES (4, 'David', 'public_key_d')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_transactions (transaction_id, sender_id, receiver_id, amount, timestamp) VALUES (3, 1, 3, 75.50, '2022-03-21 11:30:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_transactions (transaction_id, sender_id, receiver_id, amount, timestamp) VALUES (4, 4, 2, 200.75, '2022-03-22 10:15:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_blocks (block_id, previous_block_id, nonce, timestamp) VALUES (3, 2, 98765, '2022-03-23 15:00:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_blocks (block_id, previous_block_id, nonce, timestamp) VALUES (4, 3, 56789, '2022-03-24 18:30:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_wallets (wallet_id, participant_id, balance) VALUES (3, 4, 800.25)",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_wallets (wallet_id, participant_id, balance) VALUES (4, 3, 600.75)",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_verification (verification_id, participant_id, verified_at) VALUES (3, 2, '2022-03-25 14:30:00')",
  "### TABLEDATA\n\nCREATE TABLE blockchain_participants (\n  participant_id INT PRIMARY KEY,\n  participant_name TEXT NOT NULL,\n  public_key TEXT NOT NULL\n)\n\nCREATE TABLE blockchain_transactions (\n  transaction_id INT PRIMARY KEY,\n  sender_id INT,\n  receiver_id INT,\n  amount DECIMAL,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_blocks (\n  block_id INT PRIMARY KEY,\n  previous_block_id INT,\n  nonce INT,\n  timestamp TIMESTAMP\n)\n\nCREATE TABLE blockchain_wallets (\n  wallet_id INT PRIMARY KEY,\n  participant_id INT,\n  balance DECIMAL\n)\n\nCREATE TABLE blockchain_verification (\n  verification_id INT PRIMARY KEY,\n  participant_id INT,\n  verified_at TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO blockchain_verification (verification_id, participant_id, verified_at) VALUES (4, 4, '2022-03-26 17:45:00')"
]