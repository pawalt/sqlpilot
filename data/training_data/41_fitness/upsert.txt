<t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><s>UPSERT INTO FitnessData (id, user_id, workout_type, workout_duration, calories_burned) VALUES (1, 101, 'Cardio', 30, 200)</s>
<t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><s>upsert into fitnessdata (id, user_id, workout_type, workout_duration, calories_burned) values (1, 101, 'cardio', 30, 200)</s>
<t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><s>UPSERT INTO FitnessData (id, user_id, workout_type, workout_duration, calories_burned) VALUES (2, 102, 'Yoga', 45, 150)</s>
<t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><s>upsert into fitnessdata (id, user_id, workout_type, workout_duration, calories_burned) values (2, 102, 'yoga', 45, 150)</s>
<t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><s>UPSERT INTO FitnessData (id, user_id, workout_type, workout_duration, calories_burned) VALUES (3, 103, 'Weightlifting', 60, 300)</s>
<t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><s>upsert into fitnessdata (id, user_id, workout_type, workout_duration, calories_burned) values (3, 103, 'weightlifting', 60, 300)</s>
<t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><s>INSERT INTO FitnessUser (user_id, username, age, gender, height, weight) VALUES (1, 'Alice', 25, 'Female', 165, 55) ON DUPLICATE KEY UPDATE username='Alice', age=25, gender='Female', height=165, weight=55;</s>
<t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><s>insert into fitnessuser (user_id, username, age, gender, height, weight) values (1, 'alice', 25, 'female', 165, 55) on duplicate key update username='alice', age=25, gender='female', height=165, weight=55;</s>
<t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><s>INSERT INTO FitnessUser (user_id, username, age, gender, height, weight) VALUES (1, 'Alice', 25, 'Female', 165, 55) ON DUPLICATE KEY UPDATE username='Alice', age=25, gender='Female', height=165, weight=55;</s>
<t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><s>insert into fitnessuser (user_id, username, age, gender, height, weight) values (1, 'alice', 25, 'female', 165, 55) on duplicate key update username='alice', age=25, gender='female', height=165, weight=55;</s>
<t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><s>INSERT INTO FitnessUser (user_id, username, age, gender, height, weight) VALUES (2, 'Bob', 30, 'Male', 180, 80) ON DUPLICATE KEY UPDATE username='Bob', age=30, gender='Male', height=180, weight=80;</s>
<t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><s>insert into fitnessuser (user_id, username, age, gender, height, weight) values (2, 'bob', 30, 'male', 180, 80) on duplicate key update username='bob', age=30, gender='male', height=180, weight=80;</s>
<t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><s>INSERT INTO FitnessUser (user_id, username, age, gender, height, weight) VALUES (2, 'Bob', 30, 'Male', 180, 80) ON DUPLICATE KEY UPDATE username='Bob', age=30, gender='Male', height=180, weight=80;</s>
<t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><s>insert into fitnessuser (user_id, username, age, gender, height, weight) values (2, 'bob', 30, 'male', 180, 80) on duplicate key update username='bob', age=30, gender='male', height=180, weight=80;</s>
<t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><s>INSERT INTO FitnessActivity (activity_id, user_id, activity_name, activity_date, duration_minutes, calories_burned) VALUES (1, 1, 'Running', '2021-08-15', 60, 300) ON DUPLICATE KEY UPDATE activity_name='Running', activity_date='2022-01-01', duration_minutes=60, calories_burned=300;</s>
<t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><s>insert into fitnessactivity (activity_id, user_id, activity_name, activity_date, duration_minutes, calories_burned) values (1, 1, 'running', '2021-08-15', 60, 300) on duplicate key update activity_name='running', activity_date='2022-01-01', duration_minutes=60, calories_burned=300;</s>
<t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><s>INSERT INTO FitnessActivity (activity_id, user_id, activity_name, activity_date, duration_minutes, calories_burned) VALUES (1, 1, 'Running', '2021-08-15', 60, 300) ON DUPLICATE KEY UPDATE activity_name='Running', activity_date='2022-01-01', duration_minutes=60, calories_burned=300;</s>
<t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><s>insert into fitnessactivity (activity_id, user_id, activity_name, activity_date, duration_minutes, calories_burned) values (1, 1, 'running', '2021-08-15', 60, 300) on duplicate key update activity_name='running', activity_date='2022-01-01', duration_minutes=60, calories_burned=300;</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>UPSERT INTO workout_plan (plan_id, plan_name, plan_description, plan_duration) VALUES (1, 'Full Body Workout', 'A balanced workout targeting all muscle groups', 60) ON DUPLICATE KEY UPDATE plan_name = 'Full Body Workout', plan_description = 'A balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>upsert into workout_plan (plan_id, plan_name, plan_description, plan_duration) values (1, 'full body workout', 'a balanced workout targeting all muscle groups', 60) on duplicate key update plan_name = 'full body workout', plan_description = 'a balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>UPSERT INTO workout_plan (plan_id, plan_name, plan_description, plan_duration) VALUES (1, 'Full Body Workout', 'A balanced workout targeting all muscle groups', 60) ON DUPLICATE KEY UPDATE plan_name = 'Full Body Workout', plan_description = 'A balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>upsert into workout_plan (plan_id, plan_name, plan_description, plan_duration) values (1, 'full body workout', 'a balanced workout targeting all muscle groups', 60) on duplicate key update plan_name = 'full body workout', plan_description = 'a balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>UPSERT INTO workout_plan (plan_id, plan_name, plan_description, plan_duration) VALUES (1, 'Full Body Workout', 'A balanced workout targeting all muscle groups', 60) ON DUPLICATE KEY UPDATE plan_name = 'Full Body Workout', plan_description = 'A balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>upsert into workout_plan (plan_id, plan_name, plan_description, plan_duration) values (1, 'full body workout', 'a balanced workout targeting all muscle groups', 60) on duplicate key update plan_name = 'full body workout', plan_description = 'a balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>UPSERT INTO workout_plan (plan_id, plan_name, plan_description, plan_duration) VALUES (1, 'Full Body Workout', 'A balanced workout targeting all muscle groups', 60) ON DUPLICATE KEY UPDATE plan_name = 'Full Body Workout', plan_description = 'A balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>upsert into workout_plan (plan_id, plan_name, plan_description, plan_duration) values (1, 'full body workout', 'a balanced workout targeting all muscle groups', 60) on duplicate key update plan_name = 'full body workout', plan_description = 'a balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>UPSERT INTO workout_plan (plan_id, plan_name, plan_description, plan_duration) VALUES (1, 'Full Body Workout', 'A balanced workout targeting all muscle groups', 60) ON DUPLICATE KEY UPDATE plan_name = 'Full Body Workout', plan_description = 'A balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>upsert into workout_plan (plan_id, plan_name, plan_description, plan_duration) values (1, 'full body workout', 'a balanced workout targeting all muscle groups', 60) on duplicate key update plan_name = 'full body workout', plan_description = 'a balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>UPSERT INTO workout_plan (plan_id, plan_name, plan_description, plan_duration) VALUES (1, 'Full Body Workout', 'A balanced workout targeting all muscle groups', 60) ON DUPLICATE KEY UPDATE plan_name = 'Full Body Workout', plan_description = 'A balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>upsert into workout_plan (plan_id, plan_name, plan_description, plan_duration) values (1, 'full body workout', 'a balanced workout targeting all muscle groups', 60) on duplicate key update plan_name = 'full body workout', plan_description = 'a balanced workout targeting all muscle groups', plan_duration = 60;</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>UPSERT INTO exercise (exercise_id, exercise_name, muscle_group, difficulty_level) VALUES (1, 'Squats', 'Legs', 'Intermediate') ON DUPLICATE KEY UPDATE exercise_name = 'Squats', muscle_group = 'Legs', difficulty_level = 'Intermediate';</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>upsert into exercise (exercise_id, exercise_name, muscle_group, difficulty_level) values (1, 'squats', 'legs', 'intermediate') on duplicate key update exercise_name = 'squats', muscle_group = 'legs', difficulty_level = 'intermediate';</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>UPSERT INTO exercise (exercise_id, exercise_name, muscle_group, difficulty_level) VALUES (1, 'Squats', 'Legs', 'Intermediate') ON DUPLICATE KEY UPDATE exercise_name = 'Squats', muscle_group = 'Legs', difficulty_level = 'Intermediate';</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>upsert into exercise (exercise_id, exercise_name, muscle_group, difficulty_level) values (1, 'squats', 'legs', 'intermediate') on duplicate key update exercise_name = 'squats', muscle_group = 'legs', difficulty_level = 'intermediate';</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>UPSERT INTO exercise (exercise_id, exercise_name, muscle_group, difficulty_level) VALUES (1, 'Squats', 'Legs', 'Intermediate') ON DUPLICATE KEY UPDATE exercise_name = 'Squats', muscle_group = 'Legs', difficulty_level = 'Intermediate';</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>upsert into exercise (exercise_id, exercise_name, muscle_group, difficulty_level) values (1, 'squats', 'legs', 'intermediate') on duplicate key update exercise_name = 'squats', muscle_group = 'legs', difficulty_level = 'intermediate';</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>UPSERT INTO exercise (exercise_id, exercise_name, muscle_group, difficulty_level) VALUES (1, 'Squats', 'Legs', 'Intermediate') ON DUPLICATE KEY UPDATE exercise_name = 'Squats', muscle_group = 'Legs', difficulty_level = 'Intermediate';</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>upsert into exercise (exercise_id, exercise_name, muscle_group, difficulty_level) values (1, 'squats', 'legs', 'intermediate') on duplicate key update exercise_name = 'squats', muscle_group = 'legs', difficulty_level = 'intermediate';</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>UPSERT INTO exercise (exercise_id, exercise_name, muscle_group, difficulty_level) VALUES (1, 'Squats', 'Legs', 'Intermediate') ON DUPLICATE KEY UPDATE exercise_name = 'Squats', muscle_group = 'Legs', difficulty_level = 'Intermediate';</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>upsert into exercise (exercise_id, exercise_name, muscle_group, difficulty_level) values (1, 'squats', 'legs', 'intermediate') on duplicate key update exercise_name = 'squats', muscle_group = 'legs', difficulty_level = 'intermediate';</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>UPSERT INTO exercise (exercise_id, exercise_name, muscle_group, difficulty_level) VALUES (1, 'Squats', 'Legs', 'Intermediate') ON DUPLICATE KEY UPDATE exercise_name = 'Squats', muscle_group = 'Legs', difficulty_level = 'Intermediate';</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>upsert into exercise (exercise_id, exercise_name, muscle_group, difficulty_level) values (1, 'squats', 'legs', 'intermediate') on duplicate key update exercise_name = 'squats', muscle_group = 'legs', difficulty_level = 'intermediate';</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>UPSERT INTO user_statistics (user_id, username, age, height, weight, workout_days) VALUES (1, 'john_doe', 30, 175.5, 75.5, 4) ON DUPLICATE KEY UPDATE username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>upsert into user_statistics (user_id, username, age, height, weight, workout_days) values (1, 'john_doe', 30, 175.5, 75.5, 4) on duplicate key update username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>UPSERT INTO user_statistics (user_id, username, age, height, weight, workout_days) VALUES (1, 'john_doe', 30, 175.5, 75.5, 4) ON DUPLICATE KEY UPDATE username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>upsert into user_statistics (user_id, username, age, height, weight, workout_days) values (1, 'john_doe', 30, 175.5, 75.5, 4) on duplicate key update username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>UPSERT INTO user_statistics (user_id, username, age, height, weight, workout_days) VALUES (1, 'john_doe', 30, 175.5, 75.5, 4) ON DUPLICATE KEY UPDATE username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><s>upsert into user_statistics (user_id, username, age, height, weight, workout_days) values (1, 'john_doe', 30, 175.5, 75.5, 4) on duplicate key update username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>UPSERT INTO user_statistics (user_id, username, age, height, weight, workout_days) VALUES (1, 'john_doe', 30, 175.5, 75.5, 4) ON DUPLICATE KEY UPDATE username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>upsert into user_statistics (user_id, username, age, height, weight, workout_days) values (1, 'john_doe', 30, 175.5, 75.5, 4) on duplicate key update username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>UPSERT INTO user_statistics (user_id, username, age, height, weight, workout_days) VALUES (1, 'john_doe', 30, 175.5, 75.5, 4) ON DUPLICATE KEY UPDATE username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><s>upsert into user_statistics (user_id, username, age, height, weight, workout_days) values (1, 'john_doe', 30, 175.5, 75.5, 4) on duplicate key update username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>UPSERT INTO user_statistics (user_id, username, age, height, weight, workout_days) VALUES (1, 'john_doe', 30, 175.5, 75.5, 4) ON DUPLICATE KEY UPDATE username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><s>upsert into user_statistics (user_id, username, age, height, weight, workout_days) values (1, 'john_doe', 30, 175.5, 75.5, 4) on duplicate key update username = 'john_doe', age = 30, height = 175.5, weight = 75.5, workout_days = 4;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO users (id, username, email, age) VALUES ('1', 'john_doe', 'john_doe@example.com', 30) ON CONFLICT (id) DO UPDATE SET username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into users (id, username, email, age) values ('1', 'john_doe', 'john_doe@example.com', 30) on conflict (id) do update set username = 'john_doe', email = 'john_doe@example.com', age = 30;</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO workouts (id, user_id, workout_type, duration) VALUES ('1', '1', 'Cardio', '1 hour') ON CONFLICT (id) DO UPDATE SET user_id = '1', workout_type = 'Cardio', duration = '1 hour';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into workouts (id, user_id, workout_type, duration) values ('1', '1', 'cardio', '1 hour') on conflict (id) do update set user_id = '1', workout_type = 'cardio', duration = '1 hour';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>INSERT INTO exercises (id, exercise_name, muscle_group) VALUES ('1', 'Push-ups', 'Chest') ON CONFLICT (id) DO UPDATE SET exercise_name = 'Push-ups', muscle_group = 'Chest';</s>
<t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><s>insert into exercises (id, exercise_name, muscle_group) values ('1', 'push-ups', 'chest') on conflict (id) do update set exercise_name = 'push-ups', muscle_group = 'chest';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO users (user_id, username, email, age, gender, created_at) VALUES ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into users (user_id, username, email, age, gender, created_at) values ('1', 'john_doe', 'john@example.com', 30, 'male', '2022-01-01') on conflict (user_id) do update set username = 'john_doe', email = 'john@example.com', age = 30, gender = 'male', created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO activities (activity_id, activity_name, description, difficulty_level, created_at) VALUES (1, 'Running', 'Outdoor running exercise', 3, '2022-01-01') ON CONFLICT (activity_id) DO UPDATE SET activity_name = 'Running', description = 'Outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into activities (activity_id, activity_name, description, difficulty_level, created_at) values (1, 'running', 'outdoor running exercise', 3, '2022-01-01') on conflict (activity_id) do update set activity_name = 'running', description = 'outdoor running exercise', difficulty_level = 3, created_at = '2022-01-01';</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>UPSERT INTO workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) VALUES (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) ON CONFLICT (workout_id) DO UPDATE SET user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
<t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><s>upsert into workouts (workout_id, user_id, activity_id, start_time, end_time, duration, calories_burned) values (1, '1', 1, '2022-01-01 08:00:00', '2022-01-01 09:00:00', '1 hour', 300) on conflict (workout_id) do update set user_id = '1', activity_id = 1, start_time = '2022-01-01 08:00:00', end_time = '2022-01-01 09:00:00', duration = '1 hour', calories_burned = 300;</s>
