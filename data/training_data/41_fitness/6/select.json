[
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_name FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_email, membership_type FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, join_date FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM membership_info WHERE member_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_name FROM membership_info WHERE membership_type = 'Premium';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM membership_info WHERE join_date > '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_id, member_email FROM membership_info WHERE member_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT DISTINCT membership_type FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM membership_info ORDER BY join_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, membership_type FROM membership_info ORDER BY member_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT membership_type) FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT AVG(member_id) AS avg_member_id FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM membership_info LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT SUM(member_id) AS total_member_id FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_name, join_date FROM membership_info WHERE member_name = 'Alice' AND membership_type = 'Basic';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_name, join_date FROM membership_info WHERE membership_type = 'Premium' OR membership_type = 'Gold';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM membership_info WHERE member_name IN ('Alice', 'Bob', 'Charlie');",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT join_date, COUNT(member_id) AS member_count FROM membership_info GROUP BY join_date;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM membership_info WHERE member_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_name, member_email FROM membership_info WHERE membership_type = 'Premium';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_name, membership_type FROM membership_info WHERE join_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM membership_info WHERE membership_type = 'Basic';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, membership_type, join_date FROM membership_info WHERE member_email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT DISTINCT membership_type FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, join_date FROM membership_info WHERE membership_type IN ('Premium', 'Gold');",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM membership_info WHERE member_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT MAX(join_date), MIN(join_date) FROM membership_info WHERE membership_type = 'Elite';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, member_email FROM membership_info WHERE join_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT membership_type) FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT AVG(member_id) FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_name, COUNT(member_id) AS total_members FROM membership_info GROUP BY member_name;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT membership_type, COUNT(*) AS total_count FROM membership_info GROUP BY membership_type;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_name, join_date, CASE WHEN membership_type = 'Premium' THEN 'VIP' ELSE 'Regular' END AS membership_status FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_id, member_name FROM membership_info WHERE member_id IN (SELECT member_id FROM other_table);",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_name, membership_type, YEAR(join_date) AS join_year FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, join_date FROM membership_info ORDER BY join_date DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_name, DATEDIFF(NOW(), join_date) AS days_joined FROM membership_info;",
  "### TABLEDATA\n\nCREATE TABLE membership_info (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_type VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, member_email FROM membership_info WHERE membership_type = 'Basic' ORDER BY member_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, member_email FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name FROM members WHERE member_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT payment_amount FROM payments WHERE payment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM members WHERE member_email LIKE '%@example.com%';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(payment_amount) FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(payment_amount) FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, SUM(payment_amount) FROM members JOIN payments ON members.member_id = payments.member_id GROUP BY member_name;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM members ORDER BY member_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM members WHERE member_id IN ('123e4567-e89b-12d3-a456-426614174000', '223e4567-e89b-12d3-a456-426614174001');",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, COUNT(*) FROM members GROUP BY member_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM members LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM members WHERE member_phone IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, payment_date FROM members JOIN payments ON members.member_id = payments.member_id WHERE payments.payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT member_name FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM members WHERE member_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_id, member_name FROM members WHERE member_email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_members FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, payment_amount, payment_date FROM members JOIN payments ON members.member_id = payments.member_id;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, SUM(payment_amount) AS total_payments FROM members JOIN payments ON members.member_id = payments.member_id GROUP BY member_name ORDER BY total_payments DESC;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, AVG(payment_amount) AS avg_payment FROM members JOIN payments ON members.member_id = payments.member_id GROUP BY member_name;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, COUNT(payment_id) AS total_payments FROM members JOIN payments ON members.member_id = payments.member_id GROUP BY member_name HAVING total_payments > 5;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, EXTRACT(YEAR FROM payment_date) AS payment_year FROM members JOIN payments ON members.member_id = payments.member_id;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, member_phone FROM members WHERE member_id IN (SELECT member_id FROM payments WHERE EXTRACT(MONTH FROM payment_date) = 1);",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM members WHERE member_id NOT IN (SELECT member_id FROM payments);",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, AVG(payment_amount) AS avg_payment FROM members LEFT JOIN payments ON members.member_id = payments.member_id GROUP BY member_name;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, MAX(payment_amount) AS max_payment FROM members RIGHT JOIN payments ON members.member_id = payments.member_id GROUP BY member_name;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id ORDER BY payment_date DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, COUNT(payment_id) AS total_payments FROM members JOIN payments ON members.member_id = payments.member_id GROUP BY member_name HAVING COUNT(payment_id) >= 3;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, COUNT(payment_id) AS total_payments FROM members JOIN payments ON members.member_id = payments.member_id WHERE member_email LIKE '%@yahoo.com' GROUP BY member_name HAVING COUNT(payment_id) >= 2;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT member_email FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount, payment_date FROM members JOIN payments ON members.member_id = payments.member_id WHERE member_email LIKE '%@gmail.com' AND payment_amount < 50;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE member_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    member_phone VARCHAR(20)\n);\n\nCREATE TABLE payments (\n    payment_id UUID PRIMARY KEY,\n    member_id UUID,\n    payment_amount DECIMAL(10, 2),\n    payment_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount, payment_date FROM members JOIN payments ON members.member_id = payments.member_id WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, member_email FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM memberships;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT membership_id, membership_type FROM memberships;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, member_email, membership_start_date FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM members WHERE membership_start_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT membership_id, membership_type FROM memberships WHERE membership_status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, member_email, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, membership_type FROM members JOIN memberships ON members.member_id = memberships.member_id WHERE membership_type = 'Gold';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE payment_amount < 50;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, payment_date, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount, membership_type FROM members JOIN payments ON members.member_id = payments.member_id JOIN memberships ON members.member_id = memberships.member_id;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM members ORDER BY membership_start_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, payment_date, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id ORDER BY payment_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount, membership_type FROM members JOIN payments ON members.member_id = payments.member_id JOIN memberships ON members.member_id = memberships.member_id WHERE membership_status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_name, payment_amount, membership_type FROM members JOIN payments ON members.member_id = payments.member_id JOIN memberships ON members.member_id = memberships.member_id WHERE membership_status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, membership_start_date FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, membership_start_date FROM members WHERE member_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM members JOIN payments ON members.member_id = payments.member_id;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, payment_date, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, payment_date, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE member_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, payment_date, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id ORDER BY payment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, payment_date, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, membership_type, membership_status FROM members JOIN memberships ON members.member_id = memberships.member_id;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, membership_type, membership_status FROM members JOIN memberships ON members.member_id = memberships.member_id WHERE membership_status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, membership_type, membership_status FROM members JOIN memberships ON members.member_id = memberships.member_id ORDER BY membership_start_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, membership_type, membership_status FROM members JOIN memberships ON members.member_id = memberships.member_id WHERE membership_type = 'gold';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, membership_type, membership_status FROM members JOIN memberships ON members.member_id = memberships.member_id WHERE membership_start_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id UNION SELECT member_id, member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, membership_type, membership_status FROM members JOIN memberships ON members.member_id = memberships.member_id UNION SELECT member_id, member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE payment_date > '2021-01-01' UNION SELECT member_id, member_name, membership_type, membership_status FROM members JOIN memberships ON members.member_id = memberships.member_id WHERE membership_status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE payment_date > '2021-01-01' INTERSECT SELECT member_id, member_name, membership_type, membership_status FROM members JOIN memberships ON members.member_id = memberships.member_id WHERE membership_status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE payment_date > '2021-01-01' EXCEPT SELECT member_id, member_name, membership_type, membership_status FROM members JOIN memberships ON members.member_id = memberships.member_id WHERE membership_status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, payment_amount FROM members JOIN payments ON members.member_id = payments.member_id WHERE payment_date > '2021-01-01' LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(50),\n    member_email VARCHAR(100),\n    membership_start_date DATE\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    payment_date DATE,\n    payment_amount DECIMAL(10, 2)\n);\n\n\nCREATE TABLE memberships (\n    membership_id INT PRIMARY KEY,\n    member_id INT REFERENCES members(member_id),\n    membership_type VARCHAR(20),\n    membership_status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT member_id, member_name, membership_type, membership_status FROM members JOIN memberships ON members.member_id = memberships.member_id WHERE membership_status = 'active' OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT * FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT name, email FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT id, join_date FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT subscription_id, member_id FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT start_date, end_date FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT payment_date FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT * FROM payment_logs;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT log_id, payment_id FROM payment_logs;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT log_date, log_message FROM payment_logs;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT name, email, join_date FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT subscription_id, start_date, end_date, payment_status FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT payment_id, amount, payment_date FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT log_id, log_date, log_message FROM payment_logs;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT members.name, subscriptions.start_date FROM members JOIN subscriptions ON members.id = subscriptions.member_id;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT payments.amount, payment_logs.log_date FROM payments JOIN payment_logs ON payments.payment_id = payment_logs.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT members.name, subscriptions.start_date, payment_logs.log_message FROM members JOIN subscriptions ON members.id = subscriptions.member_id JOIN payments ON subscriptions.subscription_id = payments.subscription_id JOIN payment_logs ON payments.payment_id = payment_logs.payment_id;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT members.name AS member_name, SUM(payments.amount) AS total_payments FROM members JOIN subscriptions ON members.id = subscriptions.member_id JOIN payments ON subscriptions.subscription_id = payments.subscription_id GROUP BY members.name;",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT * FROM members WHERE name LIKE 'John%'",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE end_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT members.name, subscriptions.start_date FROM members JOIN subscriptions ON members.id = subscriptions.member_id",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT name, email FROM members WHERE join_date BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM subscriptions WHERE payment_status = 'Paid'",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT members.name, payments.amount FROM members JOIN subscriptions ON members.id = subscriptions.member_id JOIN payments ON subscriptions.subscription_id = payments.subscription_id",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT members.name, payment_logs.log_message FROM members JOIN subscriptions ON members.id = subscriptions.member_id JOIN payments ON subscriptions.subscription_id = payments.subscription_id JOIN payment_logs ON payments.payment_id = payment_logs.payment_id",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT memberships.name, payments.amount FROM memberships CROSS JOIN payments",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT MAX(amount) FROM payments WHERE payment_date >= '2021-01-01'",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM payments WHERE payment_date <= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT DISTINCT name FROM members WHERE name IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT SUM(amount) FROM payments WHERE payment_date >= '2021-01-01'",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT members.name, COUNT(subscriptions.subscription_id) FROM members JOIN subscriptions ON members.id = subscriptions.member_id GROUP BY members.name",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT members.name AS member_name, subscriptions.start_date AS subscription_start_date FROM members JOIN subscriptions ON members.id = subscriptions.member_id ORDER BY subscriptions.start_date ASC",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT * FROM members JOIN payments ON members.id = payments.subscription_id WHERE payments.amount > 100",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT * FROM members JOIN subscriptions ON members.id = subscriptions.members_id WHERE subscriptions.payment_status = 'Paid'",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT name, AVG(amount) AS average_payment FROM members JOIN subscriptions ON members.id = subscriptions.member_id JOIN payments ON subscriptions.subscription_id = payments.subscription_id WHERE payment_date >= '2021-01-01' GROUP BY members.name",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT name, COUNT(DISTINCT subscription_id) AS subscription_count FROM members JOIN subscriptions ON members.id = subscriptions.member_id GROUP BY members.name HAVING subscription_count >= 3",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT members.name, payment_logs.log_message FROM members JOIN subscriptions ON members.id = subscriptions.member_id JOIN payments ON subscriptions.subscription_id = payments.subscription_id JOIN payment_logs ON payments.payment_id = payment_logs.payment_id WHERE payment_logs.log_date >= '2021-01-01'",
  "### TABLEDATA\n\nCREATE TABLE members ( \n    id INT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) UNIQUE, \n    join_date DATE \n); \n\n\nCREATE TABLE subscriptions ( \n    subscription_id INT PRIMARY KEY, \n    member_id INT REFERENCES members(id), \n    start_date DATE, \n    end_date DATE, \n    payment_status VARCHAR(50) \n); \n\n\nCREATE TABLE payments ( \n    payment_id INT PRIMARY KEY, \n    subscription_id INT REFERENCES subscriptions(subscription_id), \n    amount DECIMAL(10, 2), \n    payment_date DATE \n); \n\n\nCREATE TABLE payment_logs ( \n    log_id INT PRIMARY KEY, \n    payment_id INT REFERENCES payments(payment_id), \n    log_date TIMESTAMP, \n    log_message TEXT \n);\n\n### STATEMENT\n\nSELECT members.name, MIN(amount) AS min_payment FROM members JOIN subscriptions ON members.id = subscriptions.member_id JOIN payments ON subscriptions.subscription_id = payments.subscription_id GROUP BY members.name HAVING min_payment < 50",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT * FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM members;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT * FROM membership_levels;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT level_name, monthly_fee FROM membership_levels;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT amount, payment_date FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT * FROM invoices;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT amount_due, status, due_date FROM invoices;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT * FROM registration_history;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT registration_date, status FROM registration_history;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM members WHERE member_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT level_name FROM membership_levels WHERE monthly_fee > 50.00;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE amount >= 100.00;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM members WHERE last_name LIKE 'S%';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT amount_due FROM invoices WHERE status = 'unpaid';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT * FROM registration_history WHERE status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM members ORDER BY last_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT level_name, monthly_fee FROM membership_levels ORDER BY monthly_fee DESC;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT amount_due FROM invoices WHERE due_date <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT * FROM members WHERE first_name = 'John';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT member_id, first_name, last_name FROM members WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, p.amount FROM members m INNER JOIN payments p ON m.member_id = p.member_id WHERE p.amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, i.amount_due FROM members m INNER JOIN invoices i ON m.member_id = i.member_id WHERE i.status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, rh.registration_date FROM members m INNER JOIN registration_history rh ON m.member_id = rh.member_id WHERE rh.status = 'Approved';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, ml.level_name FROM members m INNER JOIN membership_levels ml ON m.member_id = ml.level_id WHERE ml.monthly_fee < 50;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, i.due_date FROM members m INNER JOIN invoices i ON m.member_id = i.member_id WHERE i.due_date < NOW();",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, COUNT(p.payment_id) AS num_payments FROM members m LEFT JOIN payments p ON m.member_id = p.member_id GROUP BY m.first_name HAVING num_payments >= 5;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, rh.status FROM members m INNER JOIN registration_history rh ON m.member_id = rh.member_id ORDER BY rh.registration_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, SUM(p.amount) AS total_payments FROM members m INNER JOIN payments p ON m.member_id = p.member_id GROUP BY m.first_name, m.last_name HAVING total_payments > 500;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM members WHERE email NOT LIKE '%gmail.com' AND email NOT LIKE '%yahoo.com';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, MAX(i.amount_due) AS max_amount_due FROM members m INNER JOIN invoices i ON m.member_id = i.member_id GROUP BY m.first_name, m.last_name;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.email, ml.level_name, ml.monthly_fee FROM members m INNER JOIN membership_levels ml ON m.member_id = ml.level_id WHERE ml.monthly_fee BETWEEN 20 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, COUNT(i.invoice_id) AS num_invoices FROM members m LEFT JOIN invoices i ON m.member_id = i.member_id GROUP BY m.first_name, m.last_name HAVING num_invoices < 3;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, p.payment_date FROM members m INNER JOIN payments p ON m.member_id = p.member_id WHERE EXTRACT(MONTH FROM p.payment_date) = 5;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, i.amount_due FROM members m INNER JOIN invoices i ON m.member_id = i.member_id WHERE EXTRACT(YEAR FROM i.due_date) = EXTRACT(YEAR FROM NOW());",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, rh.status FROM members m INNER JOIN registration_history rh ON m.member_id = rh.member_id WHERE rh.registration_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, AVG(p.amount) AS avg_payment_amount FROM members m INNER JOIN payments p ON m.member_id = p.member_id GROUP BY m.first_name, m.last_name HAVING AVG(p.amount) > 50;",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, i.due_date FROM members m INNER JOIN invoices i ON m.member_id = i.member_id WHERE i.status = 'Paid' AND i.due_date < NOW();",
  "### TABLEDATA\n\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE membership_levels (\n    level_id SERIAL PRIMARY KEY,\n    level_name VARCHAR(50) NOT NULL,\n    monthly_fee DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    due_date DATE NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\nCREATE TABLE registration_history (\n    history_id SERIAL PRIMARY KEY,\n    member_id INT NOT NULL,\n    registration_date DATE NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    FOREIGN KEY (member_id) REFERENCES members (member_id)\n);\n\n### STATEMENT\n\nSELECT m.first_name, m.last_name, rh.status, i.status AS invoice_status FROM members m INNER JOIN registration_history rh ON m.member_id = rh.member_id INNER JOIN invoices i ON m.member_id = i.member_id WHERE rh.status = 'Approved' AND i.status = 'Pending';"
]