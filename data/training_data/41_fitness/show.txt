<t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><stat>SHOW COLUMNS FROM FitnessData;</stat><divider><t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><stat>show columns from fitnessdata;</stat><divider><t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><stat>SHOW CREATE TABLE FitnessData;</stat><divider><t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><stat>show create table fitnessdata;</stat><divider><t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><stat>SHOW INDEX FROM FitnessData;</stat><divider><t>CREATE TABLE FitnessData ( 
 id INT PRIMARY KEY, 
 user_id INT, 
 workout_type VARCHAR(50), 
 workout_duration INT, 
 calories_burned INT 
);</t><stat>show index from fitnessdata;</stat><divider><t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><stat>SHOW TABLES</stat><divider><t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><stat>show tables</stat><divider><t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><stat>SHOW TABLES</stat><divider><t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><stat>show tables</stat><divider><t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><stat>SHOW COLUMNS FROM FitnessUser</stat><divider><t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><stat>show columns from fitnessuser</stat><divider><t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><stat>SHOW COLUMNS FROM FitnessUser</stat><divider><t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><stat>show columns from fitnessuser</stat><divider><t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><stat>SHOW COLUMNS FROM FitnessActivity</stat><divider><t>CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )

CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )</t><stat>show columns from fitnessactivity</stat><divider><t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><stat>SHOW COLUMNS FROM FitnessActivity</stat><divider><t>CREATE TABLE FitnessActivity ( activity_id INT PRIMARY KEY, user_id INT, activity_name VARCHAR(50) NOT NULL, activity_date DATE, duration_minutes INT, calories_burned FLOAT, FOREIGN KEY (user_id) REFERENCES FitnessUser(user_id) )

CREATE TABLE FitnessUser ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, gender VARCHAR(10) NOT NULL, height FLOAT, weight FLOAT )</t><stat>show columns from fitnessactivity</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>show tables;</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>show tables;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>show tables;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>show tables;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>show tables;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>show tables;</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>SHOW COLUMNS FROM workout_plan;</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>show columns from workout_plan;</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>SHOW COLUMNS FROM workout_plan;</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>show columns from workout_plan;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>SHOW COLUMNS FROM workout_plan;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>show columns from workout_plan;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>SHOW COLUMNS FROM workout_plan;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>show columns from workout_plan;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>SHOW COLUMNS FROM workout_plan;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>show columns from workout_plan;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>SHOW COLUMNS FROM workout_plan;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>show columns from workout_plan;</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>SHOW CREATE TABLE exercise;</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>show create table exercise;</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>SHOW CREATE TABLE exercise;</stat><divider><t>CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>show create table exercise;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>SHOW CREATE TABLE exercise;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);</t><stat>show create table exercise;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>SHOW CREATE TABLE exercise;</stat><divider><t>CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>show create table exercise;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>SHOW CREATE TABLE exercise;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));</t><stat>show create table exercise;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>SHOW CREATE TABLE exercise;</stat><divider><t>CREATE TABLE user_statistics (user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, age INT, height FLOAT, weight FLOAT, workout_days INT);

CREATE TABLE exercise (exercise_id INT PRIMARY KEY, exercise_name VARCHAR(255) NOT NULL, muscle_group VARCHAR(100), difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced'));

CREATE TABLE workout_plan (plan_id INT PRIMARY KEY, plan_name VARCHAR(255) NOT NULL, plan_description TEXT, plan_duration INT);</t><stat>show create table exercise;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE fitness_logs (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_id UUID REFERENCES workouts(id),
  exercise_id UUID REFERENCES exercises(id),
  date DATE NOT NULL,
  sets INT,
  reps INT
);

CREATE TABLE exercises (
  id UUID PRIMARY KEY,
  exercise_name VARCHAR(50) NOT NULL,
  muscle_group VARCHAR(50) NOT NULL
);

CREATE TABLE workouts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  workout_type VARCHAR(50) NOT NULL,
  duration INTERVAL
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  age INT
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW TABLES;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show tables;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW COLUMNS FROM users;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show columns from users;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>SHOW INDEXES FROM workouts;</stat><divider><t>CREATE TABLE progress (
    progress_id SERIAL PRIMARY KEY,
    goal_id INT NOT NULL,
    progress INT,
    date DATE NOT NULL,
    FOREIGN KEY (goal_id) REFERENCES goals(goal_id)
);

CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    goal_name VARCHAR(50) NOT NULL,
    target INT,
    deadline DATE,
    created_at TIMESTAMP NOT NULL,
    completed BOOLEAN NOT NULL
);

CREATE TABLE workouts (
    workout_id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    activity_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    duration INTERVAL,
    calories_burned INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (activity_id) REFERENCES activities(activity_id)
);

CREATE TABLE activities (
    activity_id SERIAL PRIMARY KEY,
    activity_name VARCHAR(50) NOT NULL,
    description TEXT,
    difficulty_level INT,
    created_at TIMESTAMP NOT NULL
);

CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT,
    gender VARCHAR(10),
    created_at TIMESTAMP NOT NULL
);</t><stat>show indexes from workouts;</stat>